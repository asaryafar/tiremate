'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchPublicCOd
    Inherits DataSet
    
    Private tableinv_tab_public As inv_tab_publicDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_public")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_publicDataTable(ds.Tables("inv_tab_public")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_public As inv_tab_publicDataTable
        Get
            Return Me.tableinv_tab_public
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchPublicCOd = CType(MyBase.Clone,DSFrmSearchPublicCOd)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_public")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_publicDataTable(ds.Tables("inv_tab_public")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_public = CType(Me.Tables("inv_tab_public"),inv_tab_publicDataTable)
        If (Not (Me.tableinv_tab_public) Is Nothing) Then
            Me.tableinv_tab_public.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchPublicCOd"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchPublicCOd.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_public = New inv_tab_publicDataTable
        Me.Tables.Add(Me.tableinv_tab_public)
    End Sub
    
    Private Function ShouldSerializeinv_tab_public() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_publicRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_publicRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_public")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_publicRow
            Get
                Return CType(Me.Rows(index),inv_tab_publicRow)
            End Get
        End Property
        
        Public Event inv_tab_publicRowChanged As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowChanging As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowDeleted As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowDeleting As inv_tab_publicRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_publicRow(ByVal row As inv_tab_publicRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_publicRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As inv_tab_publicRow
            Dim rowinv_tab_publicRow As inv_tab_publicRow = CType(Me.NewRow,inv_tab_publicRow)
            rowinv_tab_publicRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowinv_tab_publicRow)
            Return rowinv_tab_publicRow
        End Function
        
        Public Function FindBycod_maincod_table_public(ByVal cod_main As String, ByVal cod_table_public As String) As inv_tab_publicRow
            Return CType(Me.Rows.Find(New Object() {cod_main, cod_table_public}),inv_tab_publicRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_publicDataTable = CType(MyBase.Clone,inv_tab_publicDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_publicDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_main, Me.columncod_table_public}, true))
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_publicRow() As inv_tab_publicRow
            Return CType(Me.NewRow,inv_tab_publicRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_publicRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_publicRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_publicRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowChanged(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_publicRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowChanging(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_publicRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowDeleted(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_publicRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowDeleting(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_publicRow(ByVal row As inv_tab_publicRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicRow
        Inherits DataRow
        
        Private tableinv_tab_public As inv_tab_publicDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_public = CType(Me.Table,inv_tab_publicDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableinv_tab_public.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_public.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableinv_tab_public.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_public.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_public.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_public.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_public.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableinv_tab_public.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_publicRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_publicRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_publicRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
