'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSGL_account_adjustment
    Inherits DataSet
    
    Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_head As GL_account_adjustment_headDataTable
        Get
            Return Me.tableGL_account_adjustment_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSGL_account_adjustment = CType(MyBase.Clone,DSGL_account_adjustment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account_adjustment_head = CType(Me.Tables("GL_account_adjustment_head"),GL_account_adjustment_headDataTable)
        If (Not (Me.tableGL_account_adjustment_head) Is Nothing) Then
            Me.tableGL_account_adjustment_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSGL_account_adjustment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSGL_account_adjustment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account_adjustment_head = New GL_account_adjustment_headDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_head)
    End Sub
    
    Private Function ShouldSerializeGL_account_adjustment_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_account_adjustment_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnamount_adjustment As DataColumn
        
        Private columndate_adjustment As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustmentColumn As DataColumn
            Get
                Return Me.columnamount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property date_adjustmentColumn As DataColumn
            Get
                Return Me.columndate_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_headRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_headRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_headRowChanged As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowChanging As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleted As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleting As GL_account_adjustment_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_headRow(ByVal refrence_no As String, ByVal cod_customer As String, ByVal amount_adjustment As Decimal, ByVal date_adjustment As String, ByVal Remark As String, ByVal GL_account As String, ByVal id_GL_journal As Integer) As GL_account_adjustment_headRow
            Dim rowGL_account_adjustment_headRow As GL_account_adjustment_headRow = CType(Me.NewRow,GL_account_adjustment_headRow)
            rowGL_account_adjustment_headRow.ItemArray = New Object() {refrence_no, cod_customer, amount_adjustment, date_adjustment, Remark, GL_account, id_GL_journal}
            Me.Rows.Add(rowGL_account_adjustment_headRow)
            Return rowGL_account_adjustment_headRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As GL_account_adjustment_headRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),GL_account_adjustment_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_headDataTable = CType(MyBase.Clone,GL_account_adjustment_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnamount_adjustment = Me.Columns("amount_adjustment")
            Me.columndate_adjustment = Me.Columns("date_adjustment")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnamount_adjustment = New DataColumn("amount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment)
            Me.columndate_adjustment = New DataColumn("date_adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_adjustment)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
        End Sub
        
        Public Function NewGL_account_adjustment_headRow() As GL_account_adjustment_headRow
            Return CType(Me.NewRow,GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanged(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanging(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleted(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleting(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_head = CType(Me.Table,GL_account_adjustment_headDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_head.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property date_adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.RemarkColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_account_adjustment_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.amount_adjustmentColumn)
        End Function
        
        Public Sub Setamount_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.date_adjustmentColumn)
        End Function
        
        Public Sub Setdate_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGL_account_adjustment_head.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_account_adjustment_head.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
