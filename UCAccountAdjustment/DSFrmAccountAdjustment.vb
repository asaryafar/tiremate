'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmAccountAdjustment
    Inherits DataSet
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableLOGO As LOGODataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmAccountAdjustment = CType(MyBase.Clone,DSFrmAccountAdjustment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmAccountAdjustment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmAccountAdjustment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
    End Sub
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceNo As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnOldPayment As DataColumn
        
        Private columnDateForSort As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columnThisTableID As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property OldPaymentColumn As DataColumn
            Get
                Return Me.columnOldPayment
            End Get
        End Property
        
        Friend ReadOnly Property DateForSortColumn As DataColumn
            Get
                Return Me.columnDateForSort
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property ThisTableIDColumn As DataColumn
            Get
                Return Me.columnThisTableID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow(ByVal InvoiceNo As String, ByVal InvoiceDate As String, ByVal OriginalAmount As Decimal, ByVal Payment As Decimal, ByVal CheckFlag As Boolean, ByVal AmountDue As Decimal, ByVal OldPayment As Decimal, ByVal DateForSort As String, ByVal AR_due_date As String) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {InvoiceNo, InvoiceDate, OriginalAmount, Payment, CheckFlag, AmountDue, OldPayment, DateForSort, AR_due_date, Nothing}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function FindByThisTableID(ByVal ThisTableID As Integer) As service_center_dtlRow
            Return CType(Me.Rows.Find(New Object() {ThisTableID}),service_center_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnOldPayment = Me.Columns("OldPayment")
            Me.columnDateForSort = Me.Columns("DateForSort")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columnThisTableID = Me.Columns("ThisTableID")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnOldPayment = New DataColumn("OldPayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOldPayment)
            Me.columnDateForSort = New DataColumn("DateForSort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateForSort)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columnThisTableID = New DataColumn("ThisTableID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThisTableID)
            Me.Constraints.Add(New UniqueConstraint("DSFrmAccountAdjustmentKey1", New DataColumn() {Me.columnThisTableID}, true))
            Me.columnInvoiceNo.AllowDBNull = false
            Me.columnThisTableID.AutoIncrement = true
            Me.columnThisTableID.AllowDBNull = false
            Me.columnThisTableID.Unique = true
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property InvoiceNo As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.InvoiceNoColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.InvoiceDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.PaymentColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.CheckFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AmountDueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property OldPayment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.OldPaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.OldPaymentColumn) = value
            End Set
        End Property
        
        Public Property DateForSort As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.DateForSortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.DateForSortColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property ThisTableID As Integer
            Get
                Return CType(Me(Me.tableservice_center_dtl.ThisTableIDColumn),Integer)
            End Get
            Set
                Me(Me.tableservice_center_dtl.ThisTableIDColumn) = value
            End Set
        End Property
        
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.InvoiceDateColumn)
        End Function
        
        Public Sub SetInvoiceDateNull()
            Me(Me.tableservice_center_dtl.InvoiceDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableservice_center_dtl.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableservice_center_dtl.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableservice_center_dtl.CheckFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableservice_center_dtl.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOldPaymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.OldPaymentColumn)
        End Function
        
        Public Sub SetOldPaymentNull()
            Me(Me.tableservice_center_dtl.OldPaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateForSortNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.DateForSortColumn)
        End Function
        
        Public Sub SetDateForSortNull()
            Me(Me.tableservice_center_dtl.DateForSortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableservice_center_dtl.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
