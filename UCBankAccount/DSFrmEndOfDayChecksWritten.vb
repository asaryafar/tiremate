'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEndOfDayChecksWritten
    Inherits DataSet
    
    Private tablebank_check As bank_checkDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bank_check")) Is Nothing) Then
                Me.Tables.Add(New bank_checkDataTable(ds.Tables("bank_check")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_check As bank_checkDataTable
        Get
            Return Me.tablebank_check
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEndOfDayChecksWritten = CType(MyBase.Clone,DSFrmEndOfDayChecksWritten)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bank_check")) Is Nothing) Then
            Me.Tables.Add(New bank_checkDataTable(ds.Tables("bank_check")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebank_check = CType(Me.Tables("bank_check"),bank_checkDataTable)
        If (Not (Me.tablebank_check) Is Nothing) Then
            Me.tablebank_check.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEndOfDayChecksWritten"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEndOfDayChecksWritten.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebank_check = New bank_checkDataTable
        Me.Tables.Add(Me.tablebank_check)
    End Sub
    
    Private Function ShouldSerializebank_check() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bank_checkRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_checkRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnno_of_check As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnamount_check As DataColumn
        
        Private columnmemo_check As DataColumn
        
        Private columnpayee As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_check")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property amount_checkColumn As DataColumn
            Get
                Return Me.columnamount_check
            End Get
        End Property
        
        Friend ReadOnly Property memo_checkColumn As DataColumn
            Get
                Return Me.columnmemo_check
            End Get
        End Property
        
        Friend ReadOnly Property payeeColumn As DataColumn
            Get
                Return Me.columnpayee
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_checkRow
            Get
                Return CType(Me.Rows(index),bank_checkRow)
            End Get
        End Property
        
        Public Event bank_checkRowChanged As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowChanging As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowDeleted As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowDeleting As bank_checkRowChangeEventHandler
        
        Public Overloads Sub Addbank_checkRow(ByVal row As bank_checkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_checkRow(ByVal no_of_check As String, ByVal date_of_check As String, ByVal name_bank As String, ByVal amount_check As Decimal, ByVal memo_check As String, ByVal payee As String) As bank_checkRow
            Dim rowbank_checkRow As bank_checkRow = CType(Me.NewRow,bank_checkRow)
            rowbank_checkRow.ItemArray = New Object() {no_of_check, date_of_check, name_bank, amount_check, memo_check, payee}
            Me.Rows.Add(rowbank_checkRow)
            Return rowbank_checkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_checkDataTable = CType(MyBase.Clone,bank_checkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_checkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columndate_of_check = Me.Columns("date_of_check")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnamount_check = Me.Columns("amount_check")
            Me.columnmemo_check = Me.Columns("memo_check")
            Me.columnpayee = Me.Columns("payee")
        End Sub
        
        Private Sub InitClass()
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnamount_check = New DataColumn("amount_check", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_check)
            Me.columnmemo_check = New DataColumn("memo_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_check)
            Me.columnpayee = New DataColumn("payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayee)
        End Sub
        
        Public Function Newbank_checkRow() As bank_checkRow
            Return CType(Me.NewRow,bank_checkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_checkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_checkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_checkRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_checkRowChanged(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_checkRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_checkRowChanging(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_checkRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_checkRowDeleted(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_checkRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_checkRowDeleting(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_checkRow(ByVal row As bank_checkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkRow
        Inherits DataRow
        
        Private tablebank_check As bank_checkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_check = CType(Me.Table,bank_checkDataTable)
        End Sub
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.date_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.name_bankColumn) = value
            End Set
        End Property
        
        Public Property amount_check As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.amount_checkColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.amount_checkColumn) = value
            End Set
        End Property
        
        Public Property memo_check As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.memo_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.memo_checkColumn) = value
            End Set
        End Property
        
        Public Property payee As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.payeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.payeeColumn) = value
            End Set
        End Property
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tablebank_check.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tablebank_check.date_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebank_check.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.amount_checkColumn)
        End Function
        
        Public Sub Setamount_checkNull()
            Me(Me.tablebank_check.amount_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.memo_checkColumn)
        End Function
        
        Public Sub Setmemo_checkNull()
            Me(Me.tablebank_check.memo_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayeeNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.payeeColumn)
        End Function
        
        Public Sub SetpayeeNull()
            Me(Me.tablebank_check.payeeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_checkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_checkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_checkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
