'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchBankDeposit
    Inherits DataSet
    
    Private tableGL_debit_deposit_head As GL_debit_deposit_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_debit_deposit_head")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_deposit_headDataTable(ds.Tables("GL_debit_deposit_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit_head As GL_debit_deposit_headDataTable
        Get
            Return Me.tableGL_debit_deposit_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchBankDeposit = CType(MyBase.Clone,DSFrmSearchBankDeposit)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_debit_deposit_head")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_deposit_headDataTable(ds.Tables("GL_debit_deposit_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_debit_deposit_head = CType(Me.Tables("GL_debit_deposit_head"),GL_debit_deposit_headDataTable)
        If (Not (Me.tableGL_debit_deposit_head) Is Nothing) Then
            Me.tableGL_debit_deposit_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchBankDeposit"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchBankDeposit.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_debit_deposit_head = New GL_debit_deposit_headDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit_head)
    End Sub
    
    Private Function ShouldSerializeGL_debit_deposit_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_debit_deposit_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_deposit_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_doc As DataColumn
        
        Private columnmemo As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnTotaldeposit_amount As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_docColumn As DataColumn
            Get
                Return Me.columndate_doc
            End Get
        End Property
        
        Friend ReadOnly Property memoColumn As DataColumn
            Get
                Return Me.columnmemo
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property Totaldeposit_amountColumn As DataColumn
            Get
                Return Me.columnTotaldeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_deposit_headRow
            Get
                Return CType(Me.Rows(index),GL_debit_deposit_headRow)
            End Get
        End Property
        
        Public Event GL_debit_deposit_headRowChanged As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowChanging As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowDeleted As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowDeleting As GL_debit_deposit_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_deposit_headRow(ByVal row As GL_debit_deposit_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_deposit_headRow(ByVal date_doc As String, ByVal memo As String, ByVal name_bank As String, ByVal Totaldeposit_amount As Decimal) As GL_debit_deposit_headRow
            Dim rowGL_debit_deposit_headRow As GL_debit_deposit_headRow = CType(Me.NewRow,GL_debit_deposit_headRow)
            rowGL_debit_deposit_headRow.ItemArray = New Object() {date_doc, memo, name_bank, Totaldeposit_amount, Nothing}
            Me.Rows.Add(rowGL_debit_deposit_headRow)
            Return rowGL_debit_deposit_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_deposit_headDataTable = CType(MyBase.Clone,GL_debit_deposit_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_deposit_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_doc = Me.Columns("date_doc")
            Me.columnmemo = Me.Columns("memo")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnTotaldeposit_amount = Me.Columns("Totaldeposit_amount")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_doc = New DataColumn("date_doc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_doc)
            Me.columnmemo = New DataColumn("memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnTotaldeposit_amount = New DataColumn("Totaldeposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotaldeposit_amount)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnTotaldeposit_amount.ReadOnly = true
            Me.columnid_debit_deposit_head.AutoIncrement = true
            Me.columnid_debit_deposit_head.AllowDBNull = false
            Me.columnid_debit_deposit_head.ReadOnly = true
        End Sub
        
        Public Function NewGL_debit_deposit_headRow() As GL_debit_deposit_headRow
            Return CType(Me.NewRow,GL_debit_deposit_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_deposit_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_deposit_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_deposit_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowChanged(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_deposit_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowChanging(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_deposit_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowDeleted(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_deposit_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowDeleting(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_deposit_headRow(ByVal row As GL_debit_deposit_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headRow
        Inherits DataRow
        
        Private tableGL_debit_deposit_head As GL_debit_deposit_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit_head = CType(Me.Table,GL_debit_deposit_headDataTable)
        End Sub
        
        Public Property date_doc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit_head.date_docColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.date_docColumn) = value
            End Set
        End Property
        
        Public Property memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit_head.memoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.memoColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit_head.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.name_bankColumn) = value
            End Set
        End Property
        
        Public Property Totaldeposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit_head.Totaldeposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.Totaldeposit_amountColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Return CType(Me(Me.tableGL_debit_deposit_head.id_debit_deposit_headColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Function Isdate_docNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit_head.date_docColumn)
        End Function
        
        Public Sub Setdate_docNull()
            Me(Me.tableGL_debit_deposit_head.date_docColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit_head.memoColumn)
        End Function
        
        Public Sub SetmemoNull()
            Me(Me.tableGL_debit_deposit_head.memoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit_head.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableGL_debit_deposit_head.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotaldeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit_head.Totaldeposit_amountColumn)
        End Function
        
        Public Sub SetTotaldeposit_amountNull()
            Me(Me.tableGL_debit_deposit_head.Totaldeposit_amountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_deposit_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_deposit_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_deposit_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
