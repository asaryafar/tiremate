'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEndOfDayATMCredits
    Inherits DataSet
    
    Private tablebank_ATM As bank_ATMDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bank_ATM")) Is Nothing) Then
                Me.Tables.Add(New bank_ATMDataTable(ds.Tables("bank_ATM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_ATM As bank_ATMDataTable
        Get
            Return Me.tablebank_ATM
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEndOfDayATMCredits = CType(MyBase.Clone,DSFrmEndOfDayATMCredits)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bank_ATM")) Is Nothing) Then
            Me.Tables.Add(New bank_ATMDataTable(ds.Tables("bank_ATM")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebank_ATM = CType(Me.Tables("bank_ATM"),bank_ATMDataTable)
        If (Not (Me.tablebank_ATM) Is Nothing) Then
            Me.tablebank_ATM.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEndOfDayATMCredits"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEndOfDayATMCredits.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebank_ATM = New bank_ATMDataTable
        Me.Tables.Add(Me.tablebank_ATM)
    End Sub
    
    Private Function ShouldSerializebank_ATM() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bank_ATMRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_ATMRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_ATM As DataColumn
        
        Private columndate_transaction As DataColumn
        
        Private columnamount_ATM As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnpayee As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_ATM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property date_transactionColumn As DataColumn
            Get
                Return Me.columndate_transaction
            End Get
        End Property
        
        Friend ReadOnly Property amount_ATMColumn As DataColumn
            Get
                Return Me.columnamount_ATM
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property payeeColumn As DataColumn
            Get
                Return Me.columnpayee
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_ATMRow
            Get
                Return CType(Me.Rows(index),bank_ATMRow)
            End Get
        End Property
        
        Public Event bank_ATMRowChanged As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowChanging As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowDeleted As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowDeleting As bank_ATMRowChangeEventHandler
        
        Public Overloads Sub Addbank_ATMRow(ByVal row As bank_ATMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_ATMRow(ByVal date_transaction As String, ByVal amount_ATM As Decimal, ByVal name_bank As String, ByVal payee As String) As bank_ATMRow
            Dim rowbank_ATMRow As bank_ATMRow = CType(Me.NewRow,bank_ATMRow)
            rowbank_ATMRow.ItemArray = New Object() {Nothing, date_transaction, amount_ATM, name_bank, payee}
            Me.Rows.Add(rowbank_ATMRow)
            Return rowbank_ATMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_ATMDataTable = CType(MyBase.Clone,bank_ATMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_ATMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columndate_transaction = Me.Columns("date_transaction")
            Me.columnamount_ATM = Me.Columns("amount_ATM")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnpayee = Me.Columns("payee")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columndate_transaction = New DataColumn("date_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_transaction)
            Me.columnamount_ATM = New DataColumn("amount_ATM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_ATM)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnpayee = New DataColumn("payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayee)
            Me.columnid_ATM.AutoIncrement = true
            Me.columnid_ATM.AllowDBNull = false
            Me.columnid_ATM.ReadOnly = true
        End Sub
        
        Public Function Newbank_ATMRow() As bank_ATMRow
            Return CType(Me.NewRow,bank_ATMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_ATMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_ATMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_ATMRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowChanged(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_ATMRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowChanging(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_ATMRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowDeleted(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_ATMRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowDeleting(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_ATMRow(ByVal row As bank_ATMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMRow
        Inherits DataRow
        
        Private tablebank_ATM As bank_ATMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_ATM = CType(Me.Table,bank_ATMDataTable)
        End Sub
        
        Public Property id_ATM As Integer
            Get
                Return CType(Me(Me.tablebank_ATM.id_ATMColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_ATM.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property date_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.date_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.date_transactionColumn) = value
            End Set
        End Property
        
        Public Property amount_ATM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.amount_ATMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.amount_ATMColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.name_bankColumn) = value
            End Set
        End Property
        
        Public Property payee As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.payeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.payeeColumn) = value
            End Set
        End Property
        
        Public Function Isdate_transactionNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.date_transactionColumn)
        End Function
        
        Public Sub Setdate_transactionNull()
            Me(Me.tablebank_ATM.date_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_ATMNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.amount_ATMColumn)
        End Function
        
        Public Sub Setamount_ATMNull()
            Me(Me.tablebank_ATM.amount_ATMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebank_ATM.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayeeNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.payeeColumn)
        End Function
        
        Public Sub SetpayeeNull()
            Me(Me.tablebank_ATM.payeeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_ATMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_ATMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_ATMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
