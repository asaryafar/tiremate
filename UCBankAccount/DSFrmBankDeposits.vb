'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmBankDeposits
    Inherits DataSet
    
    Private tableGL_transfer_amount As GL_transfer_amountDataTable
    
    Private tablebas_banks As bas_banksDataTable
    
    Private tableGL_account As GL_accountDataTable
    
    Private tablecust_trtab_main As cust_trtab_mainDataTable
    
    Private tablebas_cc_type As bas_cc_typeDataTable
    
    Private tablePmt_type As Pmt_typeDataTable
    
    Private tableGL_debit_deposit_head As GL_debit_deposit_headDataTable
    
    Private tableGL_debit_deposit As GL_debit_depositDataTable
    
    Private tableGL_debit_depositForEdit As GL_debit_depositForEditDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_transfer_amount")) Is Nothing) Then
                Me.Tables.Add(New GL_transfer_amountDataTable(ds.Tables("GL_transfer_amount")))
            End If
            If (Not (ds.Tables("bas_banks")) Is Nothing) Then
                Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
            End If
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
                Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
            End If
            If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
                Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
            End If
            If (Not (ds.Tables("Pmt_type")) Is Nothing) Then
                Me.Tables.Add(New Pmt_typeDataTable(ds.Tables("Pmt_type")))
            End If
            If (Not (ds.Tables("GL_debit_deposit_head")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_deposit_headDataTable(ds.Tables("GL_debit_deposit_head")))
            End If
            If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
            End If
            If (Not (ds.Tables("GL_debit_depositForEdit")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_depositForEditDataTable(ds.Tables("GL_debit_depositForEdit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_transfer_amount As GL_transfer_amountDataTable
        Get
            Return Me.tableGL_transfer_amount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_banks As bas_banksDataTable
        Get
            Return Me.tablebas_banks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_trtab_main As cust_trtab_mainDataTable
        Get
            Return Me.tablecust_trtab_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_cc_type As bas_cc_typeDataTable
        Get
            Return Me.tablebas_cc_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pmt_type As Pmt_typeDataTable
        Get
            Return Me.tablePmt_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit_head As GL_debit_deposit_headDataTable
        Get
            Return Me.tableGL_debit_deposit_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit As GL_debit_depositDataTable
        Get
            Return Me.tableGL_debit_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_depositForEdit As GL_debit_depositForEditDataTable
        Get
            Return Me.tableGL_debit_depositForEdit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmBankDeposits = CType(MyBase.Clone,DSFrmBankDeposits)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_transfer_amount")) Is Nothing) Then
            Me.Tables.Add(New GL_transfer_amountDataTable(ds.Tables("GL_transfer_amount")))
        End If
        If (Not (ds.Tables("bas_banks")) Is Nothing) Then
            Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
        End If
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
            Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
        End If
        If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
            Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
        End If
        If (Not (ds.Tables("Pmt_type")) Is Nothing) Then
            Me.Tables.Add(New Pmt_typeDataTable(ds.Tables("Pmt_type")))
        End If
        If (Not (ds.Tables("GL_debit_deposit_head")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_deposit_headDataTable(ds.Tables("GL_debit_deposit_head")))
        End If
        If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
        End If
        If (Not (ds.Tables("GL_debit_depositForEdit")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_depositForEditDataTable(ds.Tables("GL_debit_depositForEdit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_transfer_amount = CType(Me.Tables("GL_transfer_amount"),GL_transfer_amountDataTable)
        If (Not (Me.tableGL_transfer_amount) Is Nothing) Then
            Me.tableGL_transfer_amount.InitVars
        End If
        Me.tablebas_banks = CType(Me.Tables("bas_banks"),bas_banksDataTable)
        If (Not (Me.tablebas_banks) Is Nothing) Then
            Me.tablebas_banks.InitVars
        End If
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tablecust_trtab_main = CType(Me.Tables("cust_trtab_main"),cust_trtab_mainDataTable)
        If (Not (Me.tablecust_trtab_main) Is Nothing) Then
            Me.tablecust_trtab_main.InitVars
        End If
        Me.tablebas_cc_type = CType(Me.Tables("bas_cc_type"),bas_cc_typeDataTable)
        If (Not (Me.tablebas_cc_type) Is Nothing) Then
            Me.tablebas_cc_type.InitVars
        End If
        Me.tablePmt_type = CType(Me.Tables("Pmt_type"),Pmt_typeDataTable)
        If (Not (Me.tablePmt_type) Is Nothing) Then
            Me.tablePmt_type.InitVars
        End If
        Me.tableGL_debit_deposit_head = CType(Me.Tables("GL_debit_deposit_head"),GL_debit_deposit_headDataTable)
        If (Not (Me.tableGL_debit_deposit_head) Is Nothing) Then
            Me.tableGL_debit_deposit_head.InitVars
        End If
        Me.tableGL_debit_deposit = CType(Me.Tables("GL_debit_deposit"),GL_debit_depositDataTable)
        If (Not (Me.tableGL_debit_deposit) Is Nothing) Then
            Me.tableGL_debit_deposit.InitVars
        End If
        Me.tableGL_debit_depositForEdit = CType(Me.Tables("GL_debit_depositForEdit"),GL_debit_depositForEditDataTable)
        If (Not (Me.tableGL_debit_depositForEdit) Is Nothing) Then
            Me.tableGL_debit_depositForEdit.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmBankDeposits"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmBankDeposits.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_transfer_amount = New GL_transfer_amountDataTable
        Me.Tables.Add(Me.tableGL_transfer_amount)
        Me.tablebas_banks = New bas_banksDataTable
        Me.Tables.Add(Me.tablebas_banks)
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tablecust_trtab_main = New cust_trtab_mainDataTable
        Me.Tables.Add(Me.tablecust_trtab_main)
        Me.tablebas_cc_type = New bas_cc_typeDataTable
        Me.Tables.Add(Me.tablebas_cc_type)
        Me.tablePmt_type = New Pmt_typeDataTable
        Me.Tables.Add(Me.tablePmt_type)
        Me.tableGL_debit_deposit_head = New GL_debit_deposit_headDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit_head)
        Me.tableGL_debit_deposit = New GL_debit_depositDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit)
        Me.tableGL_debit_depositForEdit = New GL_debit_depositForEditDataTable
        Me.Tables.Add(Me.tableGL_debit_depositForEdit)
    End Sub
    
    Private Function ShouldSerializeGL_transfer_amount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_banks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_trtab_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_cc_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePmt_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_deposit_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_depositForEdit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_transfer_amountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_transfer_amountRowChangeEvent)
    
    Public Delegate Sub bas_banksRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_banksRowChangeEvent)
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub cust_trtab_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_trtab_mainRowChangeEvent)
    
    Public Delegate Sub bas_cc_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_cc_typeRowChangeEvent)
    
    Public Delegate Sub Pmt_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As Pmt_typeRowChangeEvent)
    
    Public Delegate Sub GL_debit_deposit_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_deposit_headRowChangeEvent)
    
    Public Delegate Sub GL_debit_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_depositRowChangeEvent)
    
    Public Delegate Sub GL_debit_depositForEditRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_depositForEditRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_transfer_amountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_transfer As DataColumn
        
        Private columnid_bank_from_transfer As DataColumn
        
        Private columnid_bank_to_transfer As DataColumn
        
        Private columndate_transfer As DataColumn
        
        Private columnamount_transfer As DataColumn
        
        Private columnMemo As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_transfer_amount")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_transferColumn As DataColumn
            Get
                Return Me.columnid_transfer
            End Get
        End Property
        
        Friend ReadOnly Property id_bank_from_transferColumn As DataColumn
            Get
                Return Me.columnid_bank_from_transfer
            End Get
        End Property
        
        Friend ReadOnly Property id_bank_to_transferColumn As DataColumn
            Get
                Return Me.columnid_bank_to_transfer
            End Get
        End Property
        
        Friend ReadOnly Property date_transferColumn As DataColumn
            Get
                Return Me.columndate_transfer
            End Get
        End Property
        
        Friend ReadOnly Property amount_transferColumn As DataColumn
            Get
                Return Me.columnamount_transfer
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_transfer_amountRow
            Get
                Return CType(Me.Rows(index),GL_transfer_amountRow)
            End Get
        End Property
        
        Public Event GL_transfer_amountRowChanged As GL_transfer_amountRowChangeEventHandler
        
        Public Event GL_transfer_amountRowChanging As GL_transfer_amountRowChangeEventHandler
        
        Public Event GL_transfer_amountRowDeleted As GL_transfer_amountRowChangeEventHandler
        
        Public Event GL_transfer_amountRowDeleting As GL_transfer_amountRowChangeEventHandler
        
        Public Overloads Sub AddGL_transfer_amountRow(ByVal row As GL_transfer_amountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_transfer_amountRow(ByVal id_bank_from_transfer As Integer, ByVal id_bank_to_transfer As Integer, ByVal date_transfer As String, ByVal amount_transfer As Decimal, ByVal Memo As String) As GL_transfer_amountRow
            Dim rowGL_transfer_amountRow As GL_transfer_amountRow = CType(Me.NewRow,GL_transfer_amountRow)
            rowGL_transfer_amountRow.ItemArray = New Object() {Nothing, id_bank_from_transfer, id_bank_to_transfer, date_transfer, amount_transfer, Memo}
            Me.Rows.Add(rowGL_transfer_amountRow)
            Return rowGL_transfer_amountRow
        End Function
        
        Public Function FindByid_transfer(ByVal id_transfer As Integer) As GL_transfer_amountRow
            Return CType(Me.Rows.Find(New Object() {id_transfer}),GL_transfer_amountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_transfer_amountDataTable = CType(MyBase.Clone,GL_transfer_amountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_transfer_amountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_transfer = Me.Columns("id_transfer")
            Me.columnid_bank_from_transfer = Me.Columns("id_bank_from_transfer")
            Me.columnid_bank_to_transfer = Me.Columns("id_bank_to_transfer")
            Me.columndate_transfer = Me.Columns("date_transfer")
            Me.columnamount_transfer = Me.Columns("amount_transfer")
            Me.columnMemo = Me.Columns("Memo")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_transfer = New DataColumn("id_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_transfer)
            Me.columnid_bank_from_transfer = New DataColumn("id_bank_from_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank_from_transfer)
            Me.columnid_bank_to_transfer = New DataColumn("id_bank_to_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank_to_transfer)
            Me.columndate_transfer = New DataColumn("date_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_transfer)
            Me.columnamount_transfer = New DataColumn("amount_transfer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_transfer)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_transfer}, true))
            Me.columnid_transfer.AutoIncrement = true
            Me.columnid_transfer.AllowDBNull = false
            Me.columnid_transfer.ReadOnly = true
            Me.columnid_transfer.Unique = true
        End Sub
        
        Public Function NewGL_transfer_amountRow() As GL_transfer_amountRow
            Return CType(Me.NewRow,GL_transfer_amountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_transfer_amountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_transfer_amountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_transfer_amountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_transfer_amountRowChanged(Me, New GL_transfer_amountRowChangeEvent(CType(e.Row,GL_transfer_amountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_transfer_amountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_transfer_amountRowChanging(Me, New GL_transfer_amountRowChangeEvent(CType(e.Row,GL_transfer_amountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_transfer_amountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_transfer_amountRowDeleted(Me, New GL_transfer_amountRowChangeEvent(CType(e.Row,GL_transfer_amountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_transfer_amountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_transfer_amountRowDeleting(Me, New GL_transfer_amountRowChangeEvent(CType(e.Row,GL_transfer_amountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_transfer_amountRow(ByVal row As GL_transfer_amountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_transfer_amountRow
        Inherits DataRow
        
        Private tableGL_transfer_amount As GL_transfer_amountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_transfer_amount = CType(Me.Table,GL_transfer_amountDataTable)
        End Sub
        
        Public Property id_transfer As Integer
            Get
                Return CType(Me(Me.tableGL_transfer_amount.id_transferColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_transfer_amount.id_transferColumn) = value
            End Set
        End Property
        
        Public Property id_bank_from_transfer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_transfer_amount.id_bank_from_transferColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_transfer_amount.id_bank_from_transferColumn) = value
            End Set
        End Property
        
        Public Property id_bank_to_transfer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_transfer_amount.id_bank_to_transferColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_transfer_amount.id_bank_to_transferColumn) = value
            End Set
        End Property
        
        Public Property date_transfer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_transfer_amount.date_transferColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_transfer_amount.date_transferColumn) = value
            End Set
        End Property
        
        Public Property amount_transfer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_transfer_amount.amount_transferColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_transfer_amount.amount_transferColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_transfer_amount.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_transfer_amount.MemoColumn) = value
            End Set
        End Property
        
        Public Function Isid_bank_from_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_transfer_amount.id_bank_from_transferColumn)
        End Function
        
        Public Sub Setid_bank_from_transferNull()
            Me(Me.tableGL_transfer_amount.id_bank_from_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bank_to_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_transfer_amount.id_bank_to_transferColumn)
        End Function
        
        Public Sub Setid_bank_to_transferNull()
            Me(Me.tableGL_transfer_amount.id_bank_to_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_transfer_amount.date_transferColumn)
        End Function
        
        Public Sub Setdate_transferNull()
            Me(Me.tableGL_transfer_amount.date_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_transfer_amount.amount_transferColumn)
        End Function
        
        Public Sub Setamount_transferNull()
            Me(Me.tableGL_transfer_amount.amount_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_transfer_amount.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_transfer_amount.MemoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_transfer_amountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_transfer_amountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_transfer_amountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_transfer_amountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columnname_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_banks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_banksRow
            Get
                Return CType(Me.Rows(index),bas_banksRow)
            End Get
        End Property
        
        Public Event bas_banksRowChanged As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowChanging As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleted As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleting As bas_banksRowChangeEventHandler
        
        Public Overloads Sub Addbas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_banksRow(ByVal name_bank As String) As bas_banksRow
            Dim rowbas_banksRow As bas_banksRow = CType(Me.NewRow,bas_banksRow)
            rowbas_banksRow.ItemArray = New Object() {Nothing, name_bank}
            Me.Rows.Add(rowbas_banksRow)
            Return rowbas_banksRow
        End Function
        
        Public Function FindByid_bank(ByVal id_bank As Short) As bas_banksRow
            Return CType(Me.Rows.Find(New Object() {id_bank}),bas_banksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_banksDataTable = CType(MyBase.Clone,bas_banksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_banksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnname_bank = Me.Columns("name_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_bank}, true))
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnid_bank.Unique = true
        End Sub
        
        Public Function Newbas_banksRow() As bas_banksRow
            Return CType(Me.NewRow,bas_banksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_banksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_banksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_banksRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanged(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_banksRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanging(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_banksRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleted(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_banksRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleting(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRow
        Inherits DataRow
        
        Private tablebas_banks As bas_banksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_banks = CType(Me.Table,bas_banksDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tablebas_banks.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tablebas_banks.id_bankColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.name_bankColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebas_banks.name_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_banksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_banksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_banksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnCustomerFullName As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_trtab_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property CustomerFullNameColumn As DataColumn
            Get
                Return Me.columnCustomerFullName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_trtab_mainRow
            Get
                Return CType(Me.Rows(index),cust_trtab_mainRow)
            End Get
        End Property
        
        Public Event cust_trtab_mainRowChanged As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowChanging As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleted As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleting As cust_trtab_mainRowChangeEventHandler
        
        Public Overloads Sub Addcust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_trtab_mainRow(ByVal cod_customer As String, ByVal CustomerFullName As String) As cust_trtab_mainRow
            Dim rowcust_trtab_mainRow As cust_trtab_mainRow = CType(Me.NewRow,cust_trtab_mainRow)
            rowcust_trtab_mainRow.ItemArray = New Object() {cod_customer, CustomerFullName}
            Me.Rows.Add(rowcust_trtab_mainRow)
            Return rowcust_trtab_mainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_trtab_mainDataTable = CType(MyBase.Clone,cust_trtab_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_trtab_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnCustomerFullName = Me.Columns("CustomerFullName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnCustomerFullName = New DataColumn("CustomerFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerFullName)
            Me.columncod_customer.AllowDBNull = false
            Me.columnCustomerFullName.ReadOnly = true
        End Sub
        
        Public Function Newcust_trtab_mainRow() As cust_trtab_mainRow
            Return CType(Me.NewRow,cust_trtab_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_trtab_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_trtab_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_trtab_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanged(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_trtab_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanging(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_trtab_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleted(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_trtab_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleting(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRow
        Inherits DataRow
        
        Private tablecust_trtab_main As cust_trtab_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_trtab_main = CType(Me.Table,cust_trtab_mainDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecust_trtab_main.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property CustomerFullName As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.CustomerFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.CustomerFullNameColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerFullNameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.CustomerFullNameColumn)
        End Function
        
        Public Sub SetCustomerFullNameNull()
            Me(Me.tablecust_trtab_main.CustomerFullNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_trtab_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_trtab_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_trtab_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncc_type As DataColumn
        
        Private columncc_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_cc_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_type_descColumn As DataColumn
            Get
                Return Me.columncc_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_cc_typeRow
            Get
                Return CType(Me.Rows(index),bas_cc_typeRow)
            End Get
        End Property
        
        Public Event bas_cc_typeRowChanged As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowChanging As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleted As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleting As bas_cc_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_cc_typeRow(ByVal cc_type As String, ByVal cc_type_desc As String) As bas_cc_typeRow
            Dim rowbas_cc_typeRow As bas_cc_typeRow = CType(Me.NewRow,bas_cc_typeRow)
            rowbas_cc_typeRow.ItemArray = New Object() {cc_type, cc_type_desc}
            Me.Rows.Add(rowbas_cc_typeRow)
            Return rowbas_cc_typeRow
        End Function
        
        Public Function FindBycc_type(ByVal cc_type As String) As bas_cc_typeRow
            Return CType(Me.Rows.Find(New Object() {cc_type}),bas_cc_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_cc_typeDataTable = CType(MyBase.Clone,bas_cc_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_cc_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_type_desc = Me.Columns("cc_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_type_desc = New DataColumn("cc_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncc_type}, true))
            Me.columncc_type.AllowDBNull = false
            Me.columncc_type.Unique = true
        End Sub
        
        Public Function Newbas_cc_typeRow() As bas_cc_typeRow
            Return CType(Me.NewRow,bas_cc_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_cc_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_cc_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_cc_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanged(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_cc_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanging(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_cc_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleted(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_cc_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleting(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRow
        Inherits DataRow
        
        Private tablebas_cc_type As bas_cc_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_cc_type = CType(Me.Table,bas_cc_typeDataTable)
        End Sub
        
        Public Property cc_type As String
            Get
                Return CType(Me(Me.tablebas_cc_type.cc_typeColumn),String)
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_cc_type.cc_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_type_descColumn) = value
            End Set
        End Property
        
        Public Function Iscc_type_descNull() As Boolean
            Return Me.IsNull(Me.tablebas_cc_type.cc_type_descColumn)
        End Function
        
        Public Sub Setcc_type_descNull()
            Me(Me.tablebas_cc_type.cc_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_cc_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_cc_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_cc_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Pmt_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPayment_type As DataColumn
        
        Private columnPayment_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("Pmt_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Payment_typeColumn As DataColumn
            Get
                Return Me.columnPayment_type
            End Get
        End Property
        
        Friend ReadOnly Property Payment_descColumn As DataColumn
            Get
                Return Me.columnPayment_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pmt_typeRow
            Get
                Return CType(Me.Rows(index),Pmt_typeRow)
            End Get
        End Property
        
        Public Event Pmt_typeRowChanged As Pmt_typeRowChangeEventHandler
        
        Public Event Pmt_typeRowChanging As Pmt_typeRowChangeEventHandler
        
        Public Event Pmt_typeRowDeleted As Pmt_typeRowChangeEventHandler
        
        Public Event Pmt_typeRowDeleting As Pmt_typeRowChangeEventHandler
        
        Public Overloads Sub AddPmt_typeRow(ByVal row As Pmt_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPmt_typeRow(ByVal Payment_type As String, ByVal Payment_desc As String) As Pmt_typeRow
            Dim rowPmt_typeRow As Pmt_typeRow = CType(Me.NewRow,Pmt_typeRow)
            rowPmt_typeRow.ItemArray = New Object() {Payment_type, Payment_desc}
            Me.Rows.Add(rowPmt_typeRow)
            Return rowPmt_typeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Pmt_typeDataTable = CType(MyBase.Clone,Pmt_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Pmt_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPayment_type = Me.Columns("Payment_type")
            Me.columnPayment_desc = Me.Columns("Payment_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnPayment_type = New DataColumn("Payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment_type)
            Me.columnPayment_desc = New DataColumn("Payment_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment_desc)
            Me.columnPayment_type.AllowDBNull = false
        End Sub
        
        Public Function NewPmt_typeRow() As Pmt_typeRow
            Return CType(Me.NewRow,Pmt_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Pmt_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Pmt_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pmt_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent Pmt_typeRowChanged(Me, New Pmt_typeRowChangeEvent(CType(e.Row,Pmt_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pmt_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent Pmt_typeRowChanging(Me, New Pmt_typeRowChangeEvent(CType(e.Row,Pmt_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pmt_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pmt_typeRowDeleted(Me, New Pmt_typeRowChangeEvent(CType(e.Row,Pmt_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pmt_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pmt_typeRowDeleting(Me, New Pmt_typeRowChangeEvent(CType(e.Row,Pmt_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePmt_typeRow(ByVal row As Pmt_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Pmt_typeRow
        Inherits DataRow
        
        Private tablePmt_type As Pmt_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePmt_type = CType(Me.Table,Pmt_typeDataTable)
        End Sub
        
        Public Property Payment_type As String
            Get
                Return CType(Me(Me.tablePmt_type.Payment_typeColumn),String)
            End Get
            Set
                Me(Me.tablePmt_type.Payment_typeColumn) = value
            End Set
        End Property
        
        Public Property Payment_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablePmt_type.Payment_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePmt_type.Payment_descColumn) = value
            End Set
        End Property
        
        Public Function IsPayment_descNull() As Boolean
            Return Me.IsNull(Me.tablePmt_type.Payment_descColumn)
        End Function
        
        Public Sub SetPayment_descNull()
            Me(Me.tablePmt_type.Payment_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Pmt_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Pmt_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Pmt_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Pmt_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_deposit_headRow
            Get
                Return CType(Me.Rows(index),GL_debit_deposit_headRow)
            End Get
        End Property
        
        Public Event GL_debit_deposit_headRowChanged As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowChanging As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowDeleted As GL_debit_deposit_headRowChangeEventHandler
        
        Public Event GL_debit_deposit_headRowDeleting As GL_debit_deposit_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_deposit_headRow(ByVal row As GL_debit_deposit_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_deposit_headRow(ByVal id_debit_deposit_head As Integer, ByVal Expr1 As String) As GL_debit_deposit_headRow
            Dim rowGL_debit_deposit_headRow As GL_debit_deposit_headRow = CType(Me.NewRow,GL_debit_deposit_headRow)
            rowGL_debit_deposit_headRow.ItemArray = New Object() {id_debit_deposit_head, Expr1}
            Me.Rows.Add(rowGL_debit_deposit_headRow)
            Return rowGL_debit_deposit_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_deposit_headDataTable = CType(MyBase.Clone,GL_debit_deposit_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_deposit_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnExpr1 = Me.Columns("Expr1")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnid_debit_deposit_head.AllowDBNull = false
        End Sub
        
        Public Function NewGL_debit_deposit_headRow() As GL_debit_deposit_headRow
            Return CType(Me.NewRow,GL_debit_deposit_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_deposit_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_deposit_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_deposit_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowChanged(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_deposit_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowChanging(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_deposit_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowDeleted(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_deposit_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_deposit_headRowDeleting(Me, New GL_debit_deposit_headRowChangeEvent(CType(e.Row,GL_debit_deposit_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_deposit_headRow(ByVal row As GL_debit_deposit_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headRow
        Inherits DataRow
        
        Private tableGL_debit_deposit_head As GL_debit_deposit_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit_head = CType(Me.Table,GL_debit_deposit_headDataTable)
        End Sub
        
        Public Property id_debit_deposit_head As Integer
            Get
                Return CType(Me(Me.tableGL_debit_deposit_head.id_debit_deposit_headColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit_head.Expr1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit_head.Expr1Column) = value
            End Set
        End Property
        
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit_head.Expr1Column)
        End Function
        
        Public Sub SetExpr1Null()
            Me(Me.tableGL_debit_deposit_head.Expr1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_deposit_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_deposit_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_deposit_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_deposit_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntype_transaction As DataColumn
        
        Private columnCustomerFullName As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columncheck_no As DataColumn
        
        Private columncc_type As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnMemo As DataColumn
        
        Private columnFlagCanEdit As DataColumn
        
        Private columnid_external_cash As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columndeposit_amountForPrint As DataColumn
        
        Private columnRadif As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property type_transactionColumn As DataColumn
            Get
                Return Me.columntype_transaction
            End Get
        End Property
        
        Friend ReadOnly Property CustomerFullNameColumn As DataColumn
            Get
                Return Me.columnCustomerFullName
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Friend ReadOnly Property FlagCanEditColumn As DataColumn
            Get
                Return Me.columnFlagCanEdit
            End Get
        End Property
        
        Friend ReadOnly Property id_external_cashColumn As DataColumn
            Get
                Return Me.columnid_external_cash
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountForPrintColumn As DataColumn
            Get
                Return Me.columndeposit_amountForPrint
            End Get
        End Property
        
        Friend ReadOnly Property RadifColumn As DataColumn
            Get
                Return Me.columnRadif
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_depositRow
            Get
                Return CType(Me.Rows(index),GL_debit_depositRow)
            End Get
        End Property
        
        Public Event GL_debit_depositRowChanged As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowChanging As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleted As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleting As GL_debit_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_depositRow( _
                    ByVal type_transaction As String,  _
                    ByVal CustomerFullName As String,  _
                    ByVal GL_account As String,  _
                    ByVal deposit_amount As Decimal,  _
                    ByVal ID_payment As Integer,  _
                    ByVal cod_customer As String,  _
                    ByVal check_no As String,  _
                    ByVal cc_type As String,  _
                    ByVal refer_type As String,  _
                    ByVal payment_type As String,  _
                    ByVal Memo As String,  _
                    ByVal FlagCanEdit As Integer,  _
                    ByVal id_external_cash As Integer,  _
                    ByVal date_refer As String,  _
                    ByVal deposit_amountForPrint As Decimal,  _
                    ByVal Radif As Integer) As GL_debit_depositRow
            Dim rowGL_debit_depositRow As GL_debit_depositRow = CType(Me.NewRow,GL_debit_depositRow)
            rowGL_debit_depositRow.ItemArray = New Object() {type_transaction, CustomerFullName, GL_account, deposit_amount, ID_payment, cod_customer, check_no, cc_type, refer_type, payment_type, Memo, FlagCanEdit, id_external_cash, date_refer, deposit_amountForPrint, Radif}
            Me.Rows.Add(rowGL_debit_depositRow)
            Return rowGL_debit_depositRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_depositDataTable = CType(MyBase.Clone,GL_debit_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntype_transaction = Me.Columns("type_transaction")
            Me.columnCustomerFullName = Me.Columns("CustomerFullName")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncheck_no = Me.Columns("check_no")
            Me.columncc_type = Me.Columns("cc_type")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnMemo = Me.Columns("Memo")
            Me.columnFlagCanEdit = Me.Columns("FlagCanEdit")
            Me.columnid_external_cash = Me.Columns("id_external_cash")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columndeposit_amountForPrint = Me.Columns("deposit_amountForPrint")
            Me.columnRadif = Me.Columns("Radif")
        End Sub
        
        Private Sub InitClass()
            Me.columntype_transaction = New DataColumn("type_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_transaction)
            Me.columnCustomerFullName = New DataColumn("CustomerFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerFullName)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.columnFlagCanEdit = New DataColumn("FlagCanEdit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagCanEdit)
            Me.columnid_external_cash = New DataColumn("id_external_cash", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_external_cash)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columndeposit_amountForPrint = New DataColumn("deposit_amountForPrint", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amountForPrint)
            Me.columnRadif = New DataColumn("Radif", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRadif)
        End Sub
        
        Public Function NewGL_debit_depositRow() As GL_debit_depositRow
            Return CType(Me.NewRow,GL_debit_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanged(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanging(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleted(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleting(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRow
        Inherits DataRow
        
        Private tableGL_debit_deposit As GL_debit_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit = CType(Me.Table,GL_debit_depositDataTable)
        End Sub
        
        Public Property type_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.type_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.type_transactionColumn) = value
            End Set
        End Property
        
        Public Property CustomerFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.CustomerFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.CustomerFullNameColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.check_noColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.MemoColumn) = value
            End Set
        End Property
        
        Public Property FlagCanEdit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.FlagCanEditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.FlagCanEditColumn) = value
            End Set
        End Property
        
        Public Property id_external_cash As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_external_cashColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_external_cashColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.date_referColumn) = value
            End Set
        End Property
        
        Public Property deposit_amountForPrint As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.deposit_amountForPrintColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.deposit_amountForPrintColumn) = value
            End Set
        End Property
        
        Public Property Radif As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.RadifColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.RadifColumn) = value
            End Set
        End Property
        
        Public Function Istype_transactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.type_transactionColumn)
        End Function
        
        Public Sub Settype_transactionNull()
            Me(Me.tableGL_debit_deposit.type_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerFullNameNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.CustomerFullNameColumn)
        End Function
        
        Public Sub SetCustomerFullNameNull()
            Me(Me.tableGL_debit_deposit.CustomerFullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_debit_deposit.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableGL_debit_deposit.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableGL_debit_deposit.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_debit_deposit.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableGL_debit_deposit.check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableGL_debit_deposit.cc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_debit_deposit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_debit_deposit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_debit_deposit.MemoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagCanEditNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.FlagCanEditColumn)
        End Function
        
        Public Sub SetFlagCanEditNull()
            Me(Me.tableGL_debit_deposit.FlagCanEditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_external_cashNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_external_cashColumn)
        End Function
        
        Public Sub Setid_external_cashNull()
            Me(Me.tableGL_debit_deposit.id_external_cashColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableGL_debit_deposit.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountForPrintNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.deposit_amountForPrintColumn)
        End Function
        
        Public Sub Setdeposit_amountForPrintNull()
            Me(Me.tableGL_debit_deposit.deposit_amountForPrintColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRadifNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.RadifColumn)
        End Function
        
        Public Sub SetRadifNull()
            Me(Me.tableGL_debit_deposit.RadifColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositForEditDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntype_transaction As DataColumn
        
        Private columnCustomerFullName As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columncheck_no As DataColumn
        
        Private columncc_type As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnMemo As DataColumn
        
        Private columnFlagCanEdit As DataColumn
        
        Private columnid_external_cash As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_depositForEdit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property type_transactionColumn As DataColumn
            Get
                Return Me.columntype_transaction
            End Get
        End Property
        
        Friend ReadOnly Property CustomerFullNameColumn As DataColumn
            Get
                Return Me.columnCustomerFullName
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Friend ReadOnly Property FlagCanEditColumn As DataColumn
            Get
                Return Me.columnFlagCanEdit
            End Get
        End Property
        
        Friend ReadOnly Property id_external_cashColumn As DataColumn
            Get
                Return Me.columnid_external_cash
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_depositForEditRow
            Get
                Return CType(Me.Rows(index),GL_debit_depositForEditRow)
            End Get
        End Property
        
        Public Event GL_debit_depositForEditRowChanged As GL_debit_depositForEditRowChangeEventHandler
        
        Public Event GL_debit_depositForEditRowChanging As GL_debit_depositForEditRowChangeEventHandler
        
        Public Event GL_debit_depositForEditRowDeleted As GL_debit_depositForEditRowChangeEventHandler
        
        Public Event GL_debit_depositForEditRowDeleting As GL_debit_depositForEditRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_depositForEditRow(ByVal row As GL_debit_depositForEditRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_depositForEditRow(ByVal type_transaction As String, ByVal CustomerFullName As String, ByVal GL_account As String, ByVal deposit_amount As Decimal, ByVal ID_payment As Integer, ByVal cod_customer As String, ByVal check_no As String, ByVal cc_type As String, ByVal refer_type As String, ByVal payment_type As String, ByVal Memo As String, ByVal FlagCanEdit As Integer, ByVal id_external_cash As Integer) As GL_debit_depositForEditRow
            Dim rowGL_debit_depositForEditRow As GL_debit_depositForEditRow = CType(Me.NewRow,GL_debit_depositForEditRow)
            rowGL_debit_depositForEditRow.ItemArray = New Object() {type_transaction, CustomerFullName, GL_account, deposit_amount, ID_payment, cod_customer, check_no, cc_type, refer_type, payment_type, Memo, FlagCanEdit, id_external_cash}
            Me.Rows.Add(rowGL_debit_depositForEditRow)
            Return rowGL_debit_depositForEditRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_depositForEditDataTable = CType(MyBase.Clone,GL_debit_depositForEditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_depositForEditDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntype_transaction = Me.Columns("type_transaction")
            Me.columnCustomerFullName = Me.Columns("CustomerFullName")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncheck_no = Me.Columns("check_no")
            Me.columncc_type = Me.Columns("cc_type")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnMemo = Me.Columns("Memo")
            Me.columnFlagCanEdit = Me.Columns("FlagCanEdit")
            Me.columnid_external_cash = Me.Columns("id_external_cash")
        End Sub
        
        Private Sub InitClass()
            Me.columntype_transaction = New DataColumn("type_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_transaction)
            Me.columnCustomerFullName = New DataColumn("CustomerFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerFullName)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.columnFlagCanEdit = New DataColumn("FlagCanEdit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagCanEdit)
            Me.columnid_external_cash = New DataColumn("id_external_cash", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_external_cash)
            Me.columnCustomerFullName.ReadOnly = true
            Me.columncheck_no.ReadOnly = true
            Me.columnFlagCanEdit.ReadOnly = true
        End Sub
        
        Public Function NewGL_debit_depositForEditRow() As GL_debit_depositForEditRow
            Return CType(Me.NewRow,GL_debit_depositForEditRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_depositForEditRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_depositForEditRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_depositForEditRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositForEditRowChanged(Me, New GL_debit_depositForEditRowChangeEvent(CType(e.Row,GL_debit_depositForEditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_depositForEditRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositForEditRowChanging(Me, New GL_debit_depositForEditRowChangeEvent(CType(e.Row,GL_debit_depositForEditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_depositForEditRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositForEditRowDeleted(Me, New GL_debit_depositForEditRowChangeEvent(CType(e.Row,GL_debit_depositForEditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_depositForEditRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositForEditRowDeleting(Me, New GL_debit_depositForEditRowChangeEvent(CType(e.Row,GL_debit_depositForEditRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_depositForEditRow(ByVal row As GL_debit_depositForEditRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositForEditRow
        Inherits DataRow
        
        Private tableGL_debit_depositForEdit As GL_debit_depositForEditDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_depositForEdit = CType(Me.Table,GL_debit_depositForEditDataTable)
        End Sub
        
        Public Property type_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.type_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.type_transactionColumn) = value
            End Set
        End Property
        
        Public Property CustomerFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.CustomerFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.CustomerFullNameColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.check_noColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.MemoColumn) = value
            End Set
        End Property
        
        Public Property FlagCanEdit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.FlagCanEditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.FlagCanEditColumn) = value
            End Set
        End Property
        
        Public Property id_external_cash As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_depositForEdit.id_external_cashColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_depositForEdit.id_external_cashColumn) = value
            End Set
        End Property
        
        Public Function Istype_transactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.type_transactionColumn)
        End Function
        
        Public Sub Settype_transactionNull()
            Me(Me.tableGL_debit_depositForEdit.type_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerFullNameNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.CustomerFullNameColumn)
        End Function
        
        Public Sub SetCustomerFullNameNull()
            Me(Me.tableGL_debit_depositForEdit.CustomerFullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_debit_depositForEdit.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableGL_debit_depositForEdit.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableGL_debit_depositForEdit.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_debit_depositForEdit.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableGL_debit_depositForEdit.check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableGL_debit_depositForEdit.cc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_debit_depositForEdit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_debit_depositForEdit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_debit_depositForEdit.MemoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagCanEditNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.FlagCanEditColumn)
        End Function
        
        Public Sub SetFlagCanEditNull()
            Me(Me.tableGL_debit_depositForEdit.FlagCanEditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_external_cashNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_depositForEdit.id_external_cashColumn)
        End Function
        
        Public Sub Setid_external_cashNull()
            Me(Me.tableGL_debit_depositForEdit.id_external_cashColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositForEditRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_depositForEditRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_depositForEditRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_depositForEditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
