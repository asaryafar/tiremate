'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmCashPaidOut
    Inherits DataSet
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableGL_Paid_received As GL_Paid_receivedDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("GL_Paid_received")) Is Nothing) Then
                Me.Tables.Add(New GL_Paid_receivedDataTable(ds.Tables("GL_Paid_received")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_Paid_received As GL_Paid_receivedDataTable
        Get
            Return Me.tableGL_Paid_received
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmCashPaidOut = CType(MyBase.Clone,DSFrmCashPaidOut)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("GL_Paid_received")) Is Nothing) Then
            Me.Tables.Add(New GL_Paid_receivedDataTable(ds.Tables("GL_Paid_received")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableGL_Paid_received = CType(Me.Tables("GL_Paid_received"),GL_Paid_receivedDataTable)
        If (Not (Me.tableGL_Paid_received) Is Nothing) Then
            Me.tableGL_Paid_received.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmCashPaidOut"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmCashPaidOut.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableGL_Paid_received = New GL_Paid_receivedDataTable
        Me.Tables.Add(Me.tableGL_Paid_received)
    End Sub
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_Paid_received() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub GL_Paid_receivedRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_Paid_receivedRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_code As DataColumn
        
        Private columntran_type As DataColumn
        
        Private columnaction_date As DataColumn
        
        Private columncustomer_code As DataColumn
        
        Private columnvendor_code As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnmemo As DataColumn
        
        Private columnOtherReceipType As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_Paid_received")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_codeColumn As DataColumn
            Get
                Return Me.columnrefrence_code
            End Get
        End Property
        
        Friend ReadOnly Property tran_typeColumn As DataColumn
            Get
                Return Me.columntran_type
            End Get
        End Property
        
        Friend ReadOnly Property action_dateColumn As DataColumn
            Get
                Return Me.columnaction_date
            End Get
        End Property
        
        Friend ReadOnly Property customer_codeColumn As DataColumn
            Get
                Return Me.columncustomer_code
            End Get
        End Property
        
        Friend ReadOnly Property vendor_codeColumn As DataColumn
            Get
                Return Me.columnvendor_code
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property memoColumn As DataColumn
            Get
                Return Me.columnmemo
            End Get
        End Property
        
        Friend ReadOnly Property OtherReceipTypeColumn As DataColumn
            Get
                Return Me.columnOtherReceipType
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_Paid_receivedRow
            Get
                Return CType(Me.Rows(index),GL_Paid_receivedRow)
            End Get
        End Property
        
        Public Event GL_Paid_receivedRowChanged As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowChanging As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowDeleted As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowDeleting As GL_Paid_receivedRowChangeEventHandler
        
        Public Overloads Sub AddGL_Paid_receivedRow(ByVal row As GL_Paid_receivedRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_Paid_receivedRow(ByVal refrence_code As String, ByVal tran_type As String, ByVal action_date As String, ByVal customer_code As String, ByVal vendor_code As String, ByVal amount As Decimal, ByVal GL_account As String, ByVal memo As String, ByVal OtherReceipType As String) As GL_Paid_receivedRow
            Dim rowGL_Paid_receivedRow As GL_Paid_receivedRow = CType(Me.NewRow,GL_Paid_receivedRow)
            rowGL_Paid_receivedRow.ItemArray = New Object() {refrence_code, tran_type, action_date, customer_code, vendor_code, amount, GL_account, memo, OtherReceipType}
            Me.Rows.Add(rowGL_Paid_receivedRow)
            Return rowGL_Paid_receivedRow
        End Function
        
        Public Function FindByrefrence_code(ByVal refrence_code As String) As GL_Paid_receivedRow
            Return CType(Me.Rows.Find(New Object() {refrence_code}),GL_Paid_receivedRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_Paid_receivedDataTable = CType(MyBase.Clone,GL_Paid_receivedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_Paid_receivedDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_code = Me.Columns("refrence_code")
            Me.columntran_type = Me.Columns("tran_type")
            Me.columnaction_date = Me.Columns("action_date")
            Me.columncustomer_code = Me.Columns("customer_code")
            Me.columnvendor_code = Me.Columns("vendor_code")
            Me.columnamount = Me.Columns("amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnmemo = Me.Columns("memo")
            Me.columnOtherReceipType = Me.Columns("OtherReceipType")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_code = New DataColumn("refrence_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_code)
            Me.columntran_type = New DataColumn("tran_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntran_type)
            Me.columnaction_date = New DataColumn("action_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_date)
            Me.columncustomer_code = New DataColumn("customer_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_code)
            Me.columnvendor_code = New DataColumn("vendor_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_code)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnmemo = New DataColumn("memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo)
            Me.columnOtherReceipType = New DataColumn("OtherReceipType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherReceipType)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_code}, true))
            Me.columnrefrence_code.AllowDBNull = false
            Me.columnrefrence_code.Unique = true
        End Sub
        
        Public Function NewGL_Paid_receivedRow() As GL_Paid_receivedRow
            Return CType(Me.NewRow,GL_Paid_receivedRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_Paid_receivedRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_Paid_receivedRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_Paid_receivedRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowChanged(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_Paid_receivedRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowChanging(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_Paid_receivedRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowDeleted(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_Paid_receivedRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowDeleting(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_Paid_receivedRow(ByVal row As GL_Paid_receivedRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedRow
        Inherits DataRow
        
        Private tableGL_Paid_received As GL_Paid_receivedDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_Paid_received = CType(Me.Table,GL_Paid_receivedDataTable)
        End Sub
        
        Public Property refrence_code As String
            Get
                Return CType(Me(Me.tableGL_Paid_received.refrence_codeColumn),String)
            End Get
            Set
                Me(Me.tableGL_Paid_received.refrence_codeColumn) = value
            End Set
        End Property
        
        Public Property tran_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.tran_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.tran_typeColumn) = value
            End Set
        End Property
        
        Public Property action_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.action_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.action_dateColumn) = value
            End Set
        End Property
        
        Public Property customer_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.customer_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.customer_codeColumn) = value
            End Set
        End Property
        
        Public Property vendor_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.vendor_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.vendor_codeColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.memoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.memoColumn) = value
            End Set
        End Property
        
        Public Property OtherReceipType As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.OtherReceipTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.OtherReceipTypeColumn) = value
            End Set
        End Property
        
        Public Function Istran_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.tran_typeColumn)
        End Function
        
        Public Sub Settran_typeNull()
            Me(Me.tableGL_Paid_received.tran_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.action_dateColumn)
        End Function
        
        Public Sub Setaction_dateNull()
            Me(Me.tableGL_Paid_received.action_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscustomer_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.customer_codeColumn)
        End Function
        
        Public Sub Setcustomer_codeNull()
            Me(Me.tableGL_Paid_received.customer_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.vendor_codeColumn)
        End Function
        
        Public Sub Setvendor_codeNull()
            Me(Me.tableGL_Paid_received.vendor_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_Paid_received.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_Paid_received.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.memoColumn)
        End Function
        
        Public Sub SetmemoNull()
            Me(Me.tableGL_Paid_received.memoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherReceipTypeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.OtherReceipTypeColumn)
        End Function
        
        Public Sub SetOtherReceipTypeNull()
            Me(Me.tableGL_Paid_received.OtherReceipTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_Paid_receivedRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_Paid_receivedRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_Paid_receivedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
