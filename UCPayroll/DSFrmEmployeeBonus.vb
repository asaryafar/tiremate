'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEmployeeBonus
    Inherits DataSet
    
    Private tablepay_main_employee As pay_main_employeeDataTable
    
    Private tablebas_banks As bas_banksDataTable
    
    Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
    
    Private tablepay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
            End If
            If (Not (ds.Tables("bas_banks")) Is Nothing) Then
                Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
            End If
            If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
            End If
            If (Not (ds.Tables("pay_tab_state_tax_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_state_tax_dtlDataTable(ds.Tables("pay_tab_state_tax_dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_main_employee As pay_main_employeeDataTable
        Get
            Return Me.tablepay_main_employee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_banks As bas_banksDataTable
        Get
            Return Me.tablebas_banks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        Get
            Return Me.tablepay_tab_federal_tax_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
        Get
            Return Me.tablepay_tab_state_tax_dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEmployeeBonus = CType(MyBase.Clone,DSFrmEmployeeBonus)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
        End If
        If (Not (ds.Tables("bas_banks")) Is Nothing) Then
            Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
        End If
        If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
        End If
        If (Not (ds.Tables("pay_tab_state_tax_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_state_tax_dtlDataTable(ds.Tables("pay_tab_state_tax_dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_main_employee = CType(Me.Tables("pay_main_employee"),pay_main_employeeDataTable)
        If (Not (Me.tablepay_main_employee) Is Nothing) Then
            Me.tablepay_main_employee.InitVars
        End If
        Me.tablebas_banks = CType(Me.Tables("bas_banks"),bas_banksDataTable)
        If (Not (Me.tablebas_banks) Is Nothing) Then
            Me.tablebas_banks.InitVars
        End If
        Me.tablepay_tab_federal_tax_dtl = CType(Me.Tables("pay_tab_federal_tax_dtl"),pay_tab_federal_tax_dtlDataTable)
        If (Not (Me.tablepay_tab_federal_tax_dtl) Is Nothing) Then
            Me.tablepay_tab_federal_tax_dtl.InitVars
        End If
        Me.tablepay_tab_state_tax_dtl = CType(Me.Tables("pay_tab_state_tax_dtl"),pay_tab_state_tax_dtlDataTable)
        If (Not (Me.tablepay_tab_state_tax_dtl) Is Nothing) Then
            Me.tablepay_tab_state_tax_dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEmployeeBonus"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEmployeeBonus.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_main_employee = New pay_main_employeeDataTable
        Me.Tables.Add(Me.tablepay_main_employee)
        Me.tablebas_banks = New bas_banksDataTable
        Me.Tables.Add(Me.tablebas_banks)
        Me.tablepay_tab_federal_tax_dtl = New pay_tab_federal_tax_dtlDataTable
        Me.Tables.Add(Me.tablepay_tab_federal_tax_dtl)
        Me.tablepay_tab_state_tax_dtl = New pay_tab_state_tax_dtlDataTable
        Me.Tables.Add(Me.tablepay_tab_state_tax_dtl)
    End Sub
    
    Private Function ShouldSerializepay_main_employee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_banks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_federal_tax_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_state_tax_dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_main_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_main_employeeRowChangeEvent)
    
    Public Delegate Sub bas_banksRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_banksRowChangeEvent)
    
    Public Delegate Sub pay_tab_federal_tax_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_federal_tax_dtlRowChangeEvent)
    
    Public Delegate Sub pay_tab_state_tax_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_state_tax_dtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_pay_period As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnOther_Pay As DataColumn
        
        Private columnPayrollDate As DataColumn
        
        Private columnPaymentFlag As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnid_check As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_main_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_pay_periodColumn As DataColumn
            Get
                Return Me.columnid_pay_period
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property Other_PayColumn As DataColumn
            Get
                Return Me.columnOther_Pay
            End Get
        End Property
        
        Friend ReadOnly Property PayrollDateColumn As DataColumn
            Get
                Return Me.columnPayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property PaymentFlagColumn As DataColumn
            Get
                Return Me.columnPaymentFlag
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_main_employeeRow
            Get
                Return CType(Me.Rows(index),pay_main_employeeRow)
            End Get
        End Property
        
        Public Event pay_main_employeeRowChanged As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowChanging As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleted As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleting As pay_main_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_main_employeeRow(ByVal employee_code As String, ByVal Other_Pay As Decimal, ByVal PayrollDate As String, ByVal PaymentFlag As Boolean, ByVal l_name As String, ByVal f_name As String, ByVal gross_pay As Decimal, ByVal id_check As Integer) As pay_main_employeeRow
            Dim rowpay_main_employeeRow As pay_main_employeeRow = CType(Me.NewRow,pay_main_employeeRow)
            rowpay_main_employeeRow.ItemArray = New Object() {Nothing, employee_code, Other_Pay, PayrollDate, PaymentFlag, l_name, f_name, gross_pay, id_check}
            Me.Rows.Add(rowpay_main_employeeRow)
            Return rowpay_main_employeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_main_employeeDataTable = CType(MyBase.Clone,pay_main_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_main_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_pay_period = Me.Columns("id_pay_period")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnOther_Pay = Me.Columns("Other_Pay")
            Me.columnPayrollDate = Me.Columns("PayrollDate")
            Me.columnPaymentFlag = Me.Columns("PaymentFlag")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnf_name = Me.Columns("f_name")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnid_check = Me.Columns("id_check")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_pay_period = New DataColumn("id_pay_period", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_pay_period)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnOther_Pay = New DataColumn("Other_Pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Pay)
            Me.columnPayrollDate = New DataColumn("PayrollDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayrollDate)
            Me.columnPaymentFlag = New DataColumn("PaymentFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentFlag)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnid_pay_period.AutoIncrement = true
            Me.columnid_pay_period.AllowDBNull = false
            Me.columnid_pay_period.ReadOnly = true
        End Sub
        
        Public Function Newpay_main_employeeRow() As pay_main_employeeRow
            Return CType(Me.NewRow,pay_main_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_main_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_main_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_main_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanged(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_main_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanging(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_main_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleted(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_main_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleting(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRow
        Inherits DataRow
        
        Private tablepay_main_employee As pay_main_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_main_employee = CType(Me.Table,pay_main_employeeDataTable)
        End Sub
        
        Public Property id_pay_period As Integer
            Get
                Return CType(Me(Me.tablepay_main_employee.id_pay_periodColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_main_employee.id_pay_periodColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property Other_Pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.Other_PayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.Other_PayColumn) = value
            End Set
        End Property
        
        Public Property PayrollDate As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.PayrollDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.PayrollDateColumn) = value
            End Set
        End Property
        
        Public Property PaymentFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.PaymentFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.PaymentFlagColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.l_nameColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.f_nameColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.gross_payColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.id_checkColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_main_employee.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PayNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.Other_PayColumn)
        End Function
        
        Public Sub SetOther_PayNull()
            Me(Me.tablepay_main_employee.Other_PayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayrollDateNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.PayrollDateColumn)
        End Function
        
        Public Sub SetPayrollDateNull()
            Me(Me.tablepay_main_employee.PayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentFlagNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.PaymentFlagColumn)
        End Function
        
        Public Sub SetPaymentFlagNull()
            Me(Me.tablepay_main_employee.PaymentFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablepay_main_employee.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablepay_main_employee.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tablepay_main_employee.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tablepay_main_employee.id_checkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_main_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_main_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_main_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columnname_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_banks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_banksRow
            Get
                Return CType(Me.Rows(index),bas_banksRow)
            End Get
        End Property
        
        Public Event bas_banksRowChanged As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowChanging As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleted As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleting As bas_banksRowChangeEventHandler
        
        Public Overloads Sub Addbas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_banksRow(ByVal name_bank As String) As bas_banksRow
            Dim rowbas_banksRow As bas_banksRow = CType(Me.NewRow,bas_banksRow)
            rowbas_banksRow.ItemArray = New Object() {Nothing, name_bank}
            Me.Rows.Add(rowbas_banksRow)
            Return rowbas_banksRow
        End Function
        
        Public Function FindByid_bank(ByVal id_bank As Short) As bas_banksRow
            Return CType(Me.Rows.Find(New Object() {id_bank}),bas_banksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_banksDataTable = CType(MyBase.Clone,bas_banksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_banksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnname_bank = Me.Columns("name_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_bank}, true))
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnid_bank.Unique = true
        End Sub
        
        Public Function Newbas_banksRow() As bas_banksRow
            Return CType(Me.NewRow,bas_banksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_banksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_banksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_banksRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanged(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_banksRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanging(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_banksRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleted(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_banksRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleting(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRow
        Inherits DataRow
        
        Private tablebas_banks As bas_banksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_banks = CType(Me.Table,bas_banksDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tablebas_banks.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tablebas_banks.id_bankColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.name_bankColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebas_banks.name_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_banksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_banksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_banksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnover_ As DataColumn
        
        Private columnbut_not_over As DataColumn
        
        Private columnpercent_tax As DataColumn
        
        Private columndollor_tax As DataColumn
        
        Private columnid_federal_tax As DataColumn
        
        Private columnwithholding_allownce As DataColumn
        
        Private columnsocial_sec_employee As DataColumn
        
        Private columnsocial_sec_employer As DataColumn
        
        Private columnsocial_sec_wagelimit As DataColumn
        
        Private columnmedi_employee As DataColumn
        
        Private columnmedi_employer As DataColumn
        
        Private columnmedi_wagelimit As DataColumn
        
        Private columnunemplyment_employee As DataColumn
        
        Private columnunemplyment_employer As DataColumn
        
        Private columnunemplyment_wagelimit As DataColumn
        
        Private columnstat_code As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_federal_tax_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property over_Column As DataColumn
            Get
                Return Me.columnover_
            End Get
        End Property
        
        Friend ReadOnly Property but_not_overColumn As DataColumn
            Get
                Return Me.columnbut_not_over
            End Get
        End Property
        
        Friend ReadOnly Property percent_taxColumn As DataColumn
            Get
                Return Me.columnpercent_tax
            End Get
        End Property
        
        Friend ReadOnly Property dollor_taxColumn As DataColumn
            Get
                Return Me.columndollor_tax
            End Get
        End Property
        
        Friend ReadOnly Property id_federal_taxColumn As DataColumn
            Get
                Return Me.columnid_federal_tax
            End Get
        End Property
        
        Friend ReadOnly Property withholding_allownceColumn As DataColumn
            Get
                Return Me.columnwithholding_allownce
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_employeeColumn As DataColumn
            Get
                Return Me.columnsocial_sec_employee
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_employerColumn As DataColumn
            Get
                Return Me.columnsocial_sec_employer
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_wagelimitColumn As DataColumn
            Get
                Return Me.columnsocial_sec_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property medi_employeeColumn As DataColumn
            Get
                Return Me.columnmedi_employee
            End Get
        End Property
        
        Friend ReadOnly Property medi_employerColumn As DataColumn
            Get
                Return Me.columnmedi_employer
            End Get
        End Property
        
        Friend ReadOnly Property medi_wagelimitColumn As DataColumn
            Get
                Return Me.columnmedi_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_employeeColumn As DataColumn
            Get
                Return Me.columnunemplyment_employee
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_employerColumn As DataColumn
            Get
                Return Me.columnunemplyment_employer
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_wagelimitColumn As DataColumn
            Get
                Return Me.columnunemplyment_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property stat_codeColumn As DataColumn
            Get
                Return Me.columnstat_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_federal_tax_dtlRow
            Get
                Return CType(Me.Rows(index),pay_tab_federal_tax_dtlRow)
            End Get
        End Property
        
        Public Event pay_tab_federal_tax_dtlRowChanged As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowChanging As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleted As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleting As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_federal_tax_dtlRow( _
                    ByVal radif As Short,  _
                    ByVal over_ As Decimal,  _
                    ByVal but_not_over As Decimal,  _
                    ByVal percent_tax As Decimal,  _
                    ByVal dollor_tax As Decimal,  _
                    ByVal id_federal_tax As Integer,  _
                    ByVal withholding_allownce As Decimal,  _
                    ByVal social_sec_employee As Decimal,  _
                    ByVal social_sec_employer As Decimal,  _
                    ByVal social_sec_wagelimit As Decimal,  _
                    ByVal medi_employee As Decimal,  _
                    ByVal medi_employer As Decimal,  _
                    ByVal medi_wagelimit As Decimal,  _
                    ByVal unemplyment_employee As Decimal,  _
                    ByVal unemplyment_employer As Decimal,  _
                    ByVal unemplyment_wagelimit As Decimal,  _
                    ByVal stat_code As String) As pay_tab_federal_tax_dtlRow
            Dim rowpay_tab_federal_tax_dtlRow As pay_tab_federal_tax_dtlRow = CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
            rowpay_tab_federal_tax_dtlRow.ItemArray = New Object() {radif, over_, but_not_over, percent_tax, dollor_tax, id_federal_tax, withholding_allownce, social_sec_employee, social_sec_employer, social_sec_wagelimit, medi_employee, medi_employer, medi_wagelimit, unemplyment_employee, unemplyment_employer, unemplyment_wagelimit, stat_code}
            Me.Rows.Add(rowpay_tab_federal_tax_dtlRow)
            Return rowpay_tab_federal_tax_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_federal_tax_dtlDataTable = CType(MyBase.Clone,pay_tab_federal_tax_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_federal_tax_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnover_ = Me.Columns("over_")
            Me.columnbut_not_over = Me.Columns("but_not_over")
            Me.columnpercent_tax = Me.Columns("percent_tax")
            Me.columndollor_tax = Me.Columns("dollor_tax")
            Me.columnid_federal_tax = Me.Columns("id_federal_tax")
            Me.columnwithholding_allownce = Me.Columns("withholding_allownce")
            Me.columnsocial_sec_employee = Me.Columns("social_sec_employee")
            Me.columnsocial_sec_employer = Me.Columns("social_sec_employer")
            Me.columnsocial_sec_wagelimit = Me.Columns("social_sec_wagelimit")
            Me.columnmedi_employee = Me.Columns("medi_employee")
            Me.columnmedi_employer = Me.Columns("medi_employer")
            Me.columnmedi_wagelimit = Me.Columns("medi_wagelimit")
            Me.columnunemplyment_employee = Me.Columns("unemplyment_employee")
            Me.columnunemplyment_employer = Me.Columns("unemplyment_employer")
            Me.columnunemplyment_wagelimit = Me.Columns("unemplyment_wagelimit")
            Me.columnstat_code = Me.Columns("stat_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnover_ = New DataColumn("over_", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover_)
            Me.columnbut_not_over = New DataColumn("but_not_over", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbut_not_over)
            Me.columnpercent_tax = New DataColumn("percent_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_tax)
            Me.columndollor_tax = New DataColumn("dollor_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndollor_tax)
            Me.columnid_federal_tax = New DataColumn("id_federal_tax", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_federal_tax)
            Me.columnwithholding_allownce = New DataColumn("withholding_allownce", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwithholding_allownce)
            Me.columnsocial_sec_employee = New DataColumn("social_sec_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_employee)
            Me.columnsocial_sec_employer = New DataColumn("social_sec_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_employer)
            Me.columnsocial_sec_wagelimit = New DataColumn("social_sec_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_wagelimit)
            Me.columnmedi_employee = New DataColumn("medi_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_employee)
            Me.columnmedi_employer = New DataColumn("medi_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_employer)
            Me.columnmedi_wagelimit = New DataColumn("medi_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_wagelimit)
            Me.columnunemplyment_employee = New DataColumn("unemplyment_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_employee)
            Me.columnunemplyment_employer = New DataColumn("unemplyment_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_employer)
            Me.columnunemplyment_wagelimit = New DataColumn("unemplyment_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_wagelimit)
            Me.columnstat_code = New DataColumn("stat_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_code)
            Me.columnradif.AllowDBNull = false
            Me.columnid_federal_tax.AllowDBNull = false
            Me.columnstat_code.AllowDBNull = false
        End Sub
        
        Public Function Newpay_tab_federal_tax_dtlRow() As pay_tab_federal_tax_dtlRow
            Return CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_federal_tax_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanged(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanging(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleted(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleting(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRow
        Inherits DataRow
        
        Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_federal_tax_dtl = CType(Me.Table,pay_tab_federal_tax_dtlDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property over_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.over_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = value
            End Set
        End Property
        
        Public Property but_not_over As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = value
            End Set
        End Property
        
        Public Property percent_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = value
            End Set
        End Property
        
        Public Property dollor_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = value
            End Set
        End Property
        
        Public Property id_federal_tax As Integer
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.id_federal_taxColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.id_federal_taxColumn) = value
            End Set
        End Property
        
        Public Property withholding_allownce As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn) = value
            End Set
        End Property
        
        Public Property social_sec_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn) = value
            End Set
        End Property
        
        Public Property social_sec_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn) = value
            End Set
        End Property
        
        Public Property social_sec_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property medi_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn) = value
            End Set
        End Property
        
        Public Property medi_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn) = value
            End Set
        End Property
        
        Public Property medi_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property stat_code As String
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.stat_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.stat_codeColumn) = value
            End Set
        End Property
        
        Public Function Isover_Null() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.over_Column)
        End Function
        
        Public Sub Setover_Null()
            Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isbut_not_overNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn)
        End Function
        
        Public Sub Setbut_not_overNull()
            Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn)
        End Function
        
        Public Sub Setpercent_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdollor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn)
        End Function
        
        Public Sub Setdollor_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswithholding_allownceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn)
        End Function
        
        Public Sub Setwithholding_allownceNull()
            Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn)
        End Function
        
        Public Sub Setsocial_sec_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn)
        End Function
        
        Public Sub Setsocial_sec_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn)
        End Function
        
        Public Sub Setsocial_sec_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn)
        End Function
        
        Public Sub Setmedi_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn)
        End Function
        
        Public Sub Setmedi_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn)
        End Function
        
        Public Sub Setmedi_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn)
        End Function
        
        Public Sub Setunemplyment_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn)
        End Function
        
        Public Sub Setunemplyment_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn)
        End Function
        
        Public Sub Setunemplyment_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_federal_tax_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_federal_tax_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_federal_tax_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnover_ As DataColumn
        
        Private columnbut_not_over As DataColumn
        
        Private columnpercent_tax As DataColumn
        
        Private columnid_state_tax As DataColumn
        
        Private columnstandard_deduction As DataColumn
        
        Private columnpersonal_allowance As DataColumn
        
        Private columndependent_allowance As DataColumn
        
        Private columnstat_code As DataColumn
        
        Private columndollor_tax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_state_tax_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property over_Column As DataColumn
            Get
                Return Me.columnover_
            End Get
        End Property
        
        Friend ReadOnly Property but_not_overColumn As DataColumn
            Get
                Return Me.columnbut_not_over
            End Get
        End Property
        
        Friend ReadOnly Property percent_taxColumn As DataColumn
            Get
                Return Me.columnpercent_tax
            End Get
        End Property
        
        Friend ReadOnly Property id_state_taxColumn As DataColumn
            Get
                Return Me.columnid_state_tax
            End Get
        End Property
        
        Friend ReadOnly Property standard_deductionColumn As DataColumn
            Get
                Return Me.columnstandard_deduction
            End Get
        End Property
        
        Friend ReadOnly Property personal_allowanceColumn As DataColumn
            Get
                Return Me.columnpersonal_allowance
            End Get
        End Property
        
        Friend ReadOnly Property dependent_allowanceColumn As DataColumn
            Get
                Return Me.columndependent_allowance
            End Get
        End Property
        
        Friend ReadOnly Property stat_codeColumn As DataColumn
            Get
                Return Me.columnstat_code
            End Get
        End Property
        
        Friend ReadOnly Property dollor_taxColumn As DataColumn
            Get
                Return Me.columndollor_tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_state_tax_dtlRow
            Get
                Return CType(Me.Rows(index),pay_tab_state_tax_dtlRow)
            End Get
        End Property
        
        Public Event pay_tab_state_tax_dtlRowChanged As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowChanging As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowDeleted As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowDeleting As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_state_tax_dtlRow(ByVal row As pay_tab_state_tax_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_state_tax_dtlRow(ByVal radif As Short, ByVal over_ As Decimal, ByVal but_not_over As Decimal, ByVal percent_tax As Decimal, ByVal id_state_tax As Integer, ByVal standard_deduction As Decimal, ByVal personal_allowance As Decimal, ByVal dependent_allowance As Decimal, ByVal stat_code As String, ByVal dollor_tax As Decimal) As pay_tab_state_tax_dtlRow
            Dim rowpay_tab_state_tax_dtlRow As pay_tab_state_tax_dtlRow = CType(Me.NewRow,pay_tab_state_tax_dtlRow)
            rowpay_tab_state_tax_dtlRow.ItemArray = New Object() {radif, over_, but_not_over, percent_tax, id_state_tax, standard_deduction, personal_allowance, dependent_allowance, stat_code, dollor_tax}
            Me.Rows.Add(rowpay_tab_state_tax_dtlRow)
            Return rowpay_tab_state_tax_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_state_tax_dtlDataTable = CType(MyBase.Clone,pay_tab_state_tax_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_state_tax_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnover_ = Me.Columns("over_")
            Me.columnbut_not_over = Me.Columns("but_not_over")
            Me.columnpercent_tax = Me.Columns("percent_tax")
            Me.columnid_state_tax = Me.Columns("id_state_tax")
            Me.columnstandard_deduction = Me.Columns("standard_deduction")
            Me.columnpersonal_allowance = Me.Columns("personal_allowance")
            Me.columndependent_allowance = Me.Columns("dependent_allowance")
            Me.columnstat_code = Me.Columns("stat_code")
            Me.columndollor_tax = Me.Columns("dollor_tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnover_ = New DataColumn("over_", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover_)
            Me.columnbut_not_over = New DataColumn("but_not_over", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbut_not_over)
            Me.columnpercent_tax = New DataColumn("percent_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_tax)
            Me.columnid_state_tax = New DataColumn("id_state_tax", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_state_tax)
            Me.columnstandard_deduction = New DataColumn("standard_deduction", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstandard_deduction)
            Me.columnpersonal_allowance = New DataColumn("personal_allowance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpersonal_allowance)
            Me.columndependent_allowance = New DataColumn("dependent_allowance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndependent_allowance)
            Me.columnstat_code = New DataColumn("stat_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_code)
            Me.columndollor_tax = New DataColumn("dollor_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndollor_tax)
            Me.columnradif.AllowDBNull = false
            Me.columnid_state_tax.AllowDBNull = false
            Me.columnstat_code.AllowDBNull = false
        End Sub
        
        Public Function Newpay_tab_state_tax_dtlRow() As pay_tab_state_tax_dtlRow
            Return CType(Me.NewRow,pay_tab_state_tax_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_state_tax_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_state_tax_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_state_tax_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowChanged(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_state_tax_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowChanging(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_state_tax_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowDeleted(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_state_tax_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowDeleting(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_state_tax_dtlRow(ByVal row As pay_tab_state_tax_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlRow
        Inherits DataRow
        
        Private tablepay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_state_tax_dtl = CType(Me.Table,pay_tab_state_tax_dtlDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property over_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.over_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.over_Column) = value
            End Set
        End Property
        
        Public Property but_not_over As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn) = value
            End Set
        End Property
        
        Public Property percent_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn) = value
            End Set
        End Property
        
        Public Property id_state_tax As Integer
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.id_state_taxColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.id_state_taxColumn) = value
            End Set
        End Property
        
        Public Property standard_deduction As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn) = value
            End Set
        End Property
        
        Public Property personal_allowance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn) = value
            End Set
        End Property
        
        Public Property dependent_allowance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn) = value
            End Set
        End Property
        
        Public Property stat_code As String
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.stat_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.stat_codeColumn) = value
            End Set
        End Property
        
        Public Property dollor_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn) = value
            End Set
        End Property
        
        Public Function Isover_Null() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.over_Column)
        End Function
        
        Public Sub Setover_Null()
            Me(Me.tablepay_tab_state_tax_dtl.over_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isbut_not_overNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.but_not_overColumn)
        End Function
        
        Public Sub Setbut_not_overNull()
            Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.percent_taxColumn)
        End Function
        
        Public Sub Setpercent_taxNull()
            Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstandard_deductionNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn)
        End Function
        
        Public Sub Setstandard_deductionNull()
            Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispersonal_allowanceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn)
        End Function
        
        Public Sub Setpersonal_allowanceNull()
            Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdependent_allowanceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn)
        End Function
        
        Public Sub Setdependent_allowanceNull()
            Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdollor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn)
        End Function
        
        Public Sub Setdollor_taxNull()
            Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_state_tax_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_state_tax_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_state_tax_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
