'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPayCheck
    Inherits DataSet
    
    Private tablePayCheckEmployee As PayCheckEmployeeDataTable
    
    Private tablePayCheckEmployer As PayCheckEmployerDataTable
    
    Private tablePayCheckEmployeeForChange As PayCheckEmployeeForChangeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PayCheckEmployee")) Is Nothing) Then
                Me.Tables.Add(New PayCheckEmployeeDataTable(ds.Tables("PayCheckEmployee")))
            End If
            If (Not (ds.Tables("PayCheckEmployer")) Is Nothing) Then
                Me.Tables.Add(New PayCheckEmployerDataTable(ds.Tables("PayCheckEmployer")))
            End If
            If (Not (ds.Tables("PayCheckEmployeeForChange")) Is Nothing) Then
                Me.Tables.Add(New PayCheckEmployeeForChangeDataTable(ds.Tables("PayCheckEmployeeForChange")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PayCheckEmployee As PayCheckEmployeeDataTable
        Get
            Return Me.tablePayCheckEmployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PayCheckEmployer As PayCheckEmployerDataTable
        Get
            Return Me.tablePayCheckEmployer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PayCheckEmployeeForChange As PayCheckEmployeeForChangeDataTable
        Get
            Return Me.tablePayCheckEmployeeForChange
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPayCheck = CType(MyBase.Clone,DSFrmPayCheck)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PayCheckEmployee")) Is Nothing) Then
            Me.Tables.Add(New PayCheckEmployeeDataTable(ds.Tables("PayCheckEmployee")))
        End If
        If (Not (ds.Tables("PayCheckEmployer")) Is Nothing) Then
            Me.Tables.Add(New PayCheckEmployerDataTable(ds.Tables("PayCheckEmployer")))
        End If
        If (Not (ds.Tables("PayCheckEmployeeForChange")) Is Nothing) Then
            Me.Tables.Add(New PayCheckEmployeeForChangeDataTable(ds.Tables("PayCheckEmployeeForChange")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePayCheckEmployee = CType(Me.Tables("PayCheckEmployee"),PayCheckEmployeeDataTable)
        If (Not (Me.tablePayCheckEmployee) Is Nothing) Then
            Me.tablePayCheckEmployee.InitVars
        End If
        Me.tablePayCheckEmployer = CType(Me.Tables("PayCheckEmployer"),PayCheckEmployerDataTable)
        If (Not (Me.tablePayCheckEmployer) Is Nothing) Then
            Me.tablePayCheckEmployer.InitVars
        End If
        Me.tablePayCheckEmployeeForChange = CType(Me.Tables("PayCheckEmployeeForChange"),PayCheckEmployeeForChangeDataTable)
        If (Not (Me.tablePayCheckEmployeeForChange) Is Nothing) Then
            Me.tablePayCheckEmployeeForChange.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPayCheck"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPayCheck.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePayCheckEmployee = New PayCheckEmployeeDataTable
        Me.Tables.Add(Me.tablePayCheckEmployee)
        Me.tablePayCheckEmployer = New PayCheckEmployerDataTable
        Me.Tables.Add(Me.tablePayCheckEmployer)
        Me.tablePayCheckEmployeeForChange = New PayCheckEmployeeForChangeDataTable
        Me.Tables.Add(Me.tablePayCheckEmployeeForChange)
    End Sub
    
    Private Function ShouldSerializePayCheckEmployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePayCheckEmployer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePayCheckEmployeeForChange() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PayCheckEmployeeRowChangeEventHandler(ByVal sender As Object, ByVal e As PayCheckEmployeeRowChangeEvent)
    
    Public Delegate Sub PayCheckEmployerRowChangeEventHandler(ByVal sender As Object, ByVal e As PayCheckEmployerRowChangeEvent)
    
    Public Delegate Sub PayCheckEmployeeForChangeRowChangeEventHandler(ByVal sender As Object, ByVal e As PayCheckEmployeeForChangeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDesc As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnDeductionZarib As DataColumn
        
        Friend Sub New()
            MyBase.New("PayCheckEmployee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property DeductionZaribColumn As DataColumn
            Get
                Return Me.columnDeductionZarib
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PayCheckEmployeeRow
            Get
                Return CType(Me.Rows(index),PayCheckEmployeeRow)
            End Get
        End Property
        
        Public Event PayCheckEmployeeRowChanged As PayCheckEmployeeRowChangeEventHandler
        
        Public Event PayCheckEmployeeRowChanging As PayCheckEmployeeRowChangeEventHandler
        
        Public Event PayCheckEmployeeRowDeleted As PayCheckEmployeeRowChangeEventHandler
        
        Public Event PayCheckEmployeeRowDeleting As PayCheckEmployeeRowChangeEventHandler
        
        Public Overloads Sub AddPayCheckEmployeeRow(ByVal row As PayCheckEmployeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPayCheckEmployeeRow(ByVal Desc As String, ByVal Amount As Decimal, ByVal DeductionZarib As Integer) As PayCheckEmployeeRow
            Dim rowPayCheckEmployeeRow As PayCheckEmployeeRow = CType(Me.NewRow,PayCheckEmployeeRow)
            rowPayCheckEmployeeRow.ItemArray = New Object() {Desc, Amount, DeductionZarib}
            Me.Rows.Add(rowPayCheckEmployeeRow)
            Return rowPayCheckEmployeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PayCheckEmployeeDataTable = CType(MyBase.Clone,PayCheckEmployeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PayCheckEmployeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDesc = Me.Columns("Desc")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnDeductionZarib = Me.Columns("DeductionZarib")
        End Sub
        
        Private Sub InitClass()
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnDeductionZarib = New DataColumn("DeductionZarib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeductionZarib)
        End Sub
        
        Public Function NewPayCheckEmployeeRow() As PayCheckEmployeeRow
            Return CType(Me.NewRow,PayCheckEmployeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PayCheckEmployeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PayCheckEmployeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PayCheckEmployeeRowChangedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeRowChanged(Me, New PayCheckEmployeeRowChangeEvent(CType(e.Row,PayCheckEmployeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PayCheckEmployeeRowChangingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeRowChanging(Me, New PayCheckEmployeeRowChangeEvent(CType(e.Row,PayCheckEmployeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PayCheckEmployeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeRowDeleted(Me, New PayCheckEmployeeRowChangeEvent(CType(e.Row,PayCheckEmployeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PayCheckEmployeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeRowDeleting(Me, New PayCheckEmployeeRowChangeEvent(CType(e.Row,PayCheckEmployeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePayCheckEmployeeRow(ByVal row As PayCheckEmployeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeRow
        Inherits DataRow
        
        Private tablePayCheckEmployee As PayCheckEmployeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePayCheckEmployee = CType(Me.Table,PayCheckEmployeeDataTable)
        End Sub
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployee.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployee.DescColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployee.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployee.AmountColumn) = value
            End Set
        End Property
        
        Public Property DeductionZarib As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployee.DeductionZaribColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployee.DeductionZaribColumn) = value
            End Set
        End Property
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployee.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tablePayCheckEmployee.DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployee.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tablePayCheckEmployee.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeductionZaribNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployee.DeductionZaribColumn)
        End Function
        
        Public Sub SetDeductionZaribNull()
            Me(Me.tablePayCheckEmployee.DeductionZaribColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PayCheckEmployeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PayCheckEmployeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PayCheckEmployeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDesc As DataColumn
        
        Private columnAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("PayCheckEmployer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PayCheckEmployerRow
            Get
                Return CType(Me.Rows(index),PayCheckEmployerRow)
            End Get
        End Property
        
        Public Event PayCheckEmployerRowChanged As PayCheckEmployerRowChangeEventHandler
        
        Public Event PayCheckEmployerRowChanging As PayCheckEmployerRowChangeEventHandler
        
        Public Event PayCheckEmployerRowDeleted As PayCheckEmployerRowChangeEventHandler
        
        Public Event PayCheckEmployerRowDeleting As PayCheckEmployerRowChangeEventHandler
        
        Public Overloads Sub AddPayCheckEmployerRow(ByVal row As PayCheckEmployerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPayCheckEmployerRow(ByVal Desc As String, ByVal Amount As Decimal) As PayCheckEmployerRow
            Dim rowPayCheckEmployerRow As PayCheckEmployerRow = CType(Me.NewRow,PayCheckEmployerRow)
            rowPayCheckEmployerRow.ItemArray = New Object() {Desc, Amount}
            Me.Rows.Add(rowPayCheckEmployerRow)
            Return rowPayCheckEmployerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PayCheckEmployerDataTable = CType(MyBase.Clone,PayCheckEmployerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PayCheckEmployerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDesc = Me.Columns("Desc")
            Me.columnAmount = Me.Columns("Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
        End Sub
        
        Public Function NewPayCheckEmployerRow() As PayCheckEmployerRow
            Return CType(Me.NewRow,PayCheckEmployerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PayCheckEmployerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PayCheckEmployerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PayCheckEmployerRowChangedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployerRowChanged(Me, New PayCheckEmployerRowChangeEvent(CType(e.Row,PayCheckEmployerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PayCheckEmployerRowChangingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployerRowChanging(Me, New PayCheckEmployerRowChangeEvent(CType(e.Row,PayCheckEmployerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PayCheckEmployerRowDeletedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployerRowDeleted(Me, New PayCheckEmployerRowChangeEvent(CType(e.Row,PayCheckEmployerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PayCheckEmployerRowDeletingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployerRowDeleting(Me, New PayCheckEmployerRowChangeEvent(CType(e.Row,PayCheckEmployerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePayCheckEmployerRow(ByVal row As PayCheckEmployerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployerRow
        Inherits DataRow
        
        Private tablePayCheckEmployer As PayCheckEmployerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePayCheckEmployer = CType(Me.Table,PayCheckEmployerDataTable)
        End Sub
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployer.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployer.DescColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployer.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployer.AmountColumn) = value
            End Set
        End Property
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployer.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tablePayCheckEmployer.DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployer.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tablePayCheckEmployer.AmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PayCheckEmployerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PayCheckEmployerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PayCheckEmployerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeForChangeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDesc As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnDeductionZarib As DataColumn
        
        Private columnid_pay_period As DataColumn
        
        Private columnid_deduction As DataColumn
        
        Private columndeduction_type As DataColumn
        
        Friend Sub New()
            MyBase.New("PayCheckEmployeeForChange")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property DeductionZaribColumn As DataColumn
            Get
                Return Me.columnDeductionZarib
            End Get
        End Property
        
        Friend ReadOnly Property id_pay_periodColumn As DataColumn
            Get
                Return Me.columnid_pay_period
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property deduction_typeColumn As DataColumn
            Get
                Return Me.columndeduction_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PayCheckEmployeeForChangeRow
            Get
                Return CType(Me.Rows(index),PayCheckEmployeeForChangeRow)
            End Get
        End Property
        
        Public Event PayCheckEmployeeForChangeRowChanged As PayCheckEmployeeForChangeRowChangeEventHandler
        
        Public Event PayCheckEmployeeForChangeRowChanging As PayCheckEmployeeForChangeRowChangeEventHandler
        
        Public Event PayCheckEmployeeForChangeRowDeleted As PayCheckEmployeeForChangeRowChangeEventHandler
        
        Public Event PayCheckEmployeeForChangeRowDeleting As PayCheckEmployeeForChangeRowChangeEventHandler
        
        Public Overloads Sub AddPayCheckEmployeeForChangeRow(ByVal row As PayCheckEmployeeForChangeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPayCheckEmployeeForChangeRow(ByVal Desc As String, ByVal Amount As Decimal, ByVal DeductionZarib As Integer, ByVal id_pay_period As Integer, ByVal id_deduction As Integer, ByVal deduction_type As String) As PayCheckEmployeeForChangeRow
            Dim rowPayCheckEmployeeForChangeRow As PayCheckEmployeeForChangeRow = CType(Me.NewRow,PayCheckEmployeeForChangeRow)
            rowPayCheckEmployeeForChangeRow.ItemArray = New Object() {Desc, Amount, DeductionZarib, id_pay_period, id_deduction, deduction_type}
            Me.Rows.Add(rowPayCheckEmployeeForChangeRow)
            Return rowPayCheckEmployeeForChangeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PayCheckEmployeeForChangeDataTable = CType(MyBase.Clone,PayCheckEmployeeForChangeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PayCheckEmployeeForChangeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDesc = Me.Columns("Desc")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnDeductionZarib = Me.Columns("DeductionZarib")
            Me.columnid_pay_period = Me.Columns("id_pay_period")
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columndeduction_type = Me.Columns("deduction_type")
        End Sub
        
        Private Sub InitClass()
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnDeductionZarib = New DataColumn("DeductionZarib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeductionZarib)
            Me.columnid_pay_period = New DataColumn("id_pay_period", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_pay_period)
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columndeduction_type = New DataColumn("deduction_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_type)
        End Sub
        
        Public Function NewPayCheckEmployeeForChangeRow() As PayCheckEmployeeForChangeRow
            Return CType(Me.NewRow,PayCheckEmployeeForChangeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PayCheckEmployeeForChangeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PayCheckEmployeeForChangeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PayCheckEmployeeForChangeRowChangedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeForChangeRowChanged(Me, New PayCheckEmployeeForChangeRowChangeEvent(CType(e.Row,PayCheckEmployeeForChangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PayCheckEmployeeForChangeRowChangingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeForChangeRowChanging(Me, New PayCheckEmployeeForChangeRowChangeEvent(CType(e.Row,PayCheckEmployeeForChangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PayCheckEmployeeForChangeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeForChangeRowDeleted(Me, New PayCheckEmployeeForChangeRowChangeEvent(CType(e.Row,PayCheckEmployeeForChangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PayCheckEmployeeForChangeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PayCheckEmployeeForChangeRowDeleting(Me, New PayCheckEmployeeForChangeRowChangeEvent(CType(e.Row,PayCheckEmployeeForChangeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePayCheckEmployeeForChangeRow(ByVal row As PayCheckEmployeeForChangeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeForChangeRow
        Inherits DataRow
        
        Private tablePayCheckEmployeeForChange As PayCheckEmployeeForChangeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePayCheckEmployeeForChange = CType(Me.Table,PayCheckEmployeeForChangeDataTable)
        End Sub
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.DescColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.AmountColumn) = value
            End Set
        End Property
        
        Public Property DeductionZarib As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.DeductionZaribColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.DeductionZaribColumn) = value
            End Set
        End Property
        
        Public Property id_pay_period As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.id_pay_periodColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.id_pay_periodColumn) = value
            End Set
        End Property
        
        Public Property id_deduction As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.id_deductionColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property deduction_type As String
            Get
                Try 
                    Return CType(Me(Me.tablePayCheckEmployeeForChange.deduction_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayCheckEmployeeForChange.deduction_typeColumn) = value
            End Set
        End Property
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tablePayCheckEmployeeForChange.DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tablePayCheckEmployeeForChange.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeductionZaribNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.DeductionZaribColumn)
        End Function
        
        Public Sub SetDeductionZaribNull()
            Me(Me.tablePayCheckEmployeeForChange.DeductionZaribColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_pay_periodNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.id_pay_periodColumn)
        End Function
        
        Public Sub Setid_pay_periodNull()
            Me(Me.tablePayCheckEmployeeForChange.id_pay_periodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_deductionNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.id_deductionColumn)
        End Function
        
        Public Sub Setid_deductionNull()
            Me(Me.tablePayCheckEmployeeForChange.id_deductionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeduction_typeNull() As Boolean
            Return Me.IsNull(Me.tablePayCheckEmployeeForChange.deduction_typeColumn)
        End Function
        
        Public Sub Setdeduction_typeNull()
            Me(Me.tablePayCheckEmployeeForChange.deduction_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayCheckEmployeeForChangeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PayCheckEmployeeForChangeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PayCheckEmployeeForChangeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PayCheckEmployeeForChangeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
