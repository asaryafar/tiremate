'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmFederalTax
    Inherits DataSet
    
    Private tableEmployee_tab_status As Employee_tab_statusDataTable
    
    Private tablepay_tab_federal_tax_head As pay_tab_federal_tax_headDataTable
    
    Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Employee_tab_status")) Is Nothing) Then
                Me.Tables.Add(New Employee_tab_statusDataTable(ds.Tables("Employee_tab_status")))
            End If
            If (Not (ds.Tables("pay_tab_federal_tax_head")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_federal_tax_headDataTable(ds.Tables("pay_tab_federal_tax_head")))
            End If
            If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Employee_tab_status As Employee_tab_statusDataTable
        Get
            Return Me.tableEmployee_tab_status
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_federal_tax_head As pay_tab_federal_tax_headDataTable
        Get
            Return Me.tablepay_tab_federal_tax_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        Get
            Return Me.tablepay_tab_federal_tax_dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmFederalTax = CType(MyBase.Clone,DSFrmFederalTax)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Employee_tab_status")) Is Nothing) Then
            Me.Tables.Add(New Employee_tab_statusDataTable(ds.Tables("Employee_tab_status")))
        End If
        If (Not (ds.Tables("pay_tab_federal_tax_head")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_federal_tax_headDataTable(ds.Tables("pay_tab_federal_tax_head")))
        End If
        If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEmployee_tab_status = CType(Me.Tables("Employee_tab_status"),Employee_tab_statusDataTable)
        If (Not (Me.tableEmployee_tab_status) Is Nothing) Then
            Me.tableEmployee_tab_status.InitVars
        End If
        Me.tablepay_tab_federal_tax_head = CType(Me.Tables("pay_tab_federal_tax_head"),pay_tab_federal_tax_headDataTable)
        If (Not (Me.tablepay_tab_federal_tax_head) Is Nothing) Then
            Me.tablepay_tab_federal_tax_head.InitVars
        End If
        Me.tablepay_tab_federal_tax_dtl = CType(Me.Tables("pay_tab_federal_tax_dtl"),pay_tab_federal_tax_dtlDataTable)
        If (Not (Me.tablepay_tab_federal_tax_dtl) Is Nothing) Then
            Me.tablepay_tab_federal_tax_dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmFederalTax"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmFederalTax.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEmployee_tab_status = New Employee_tab_statusDataTable
        Me.Tables.Add(Me.tableEmployee_tab_status)
        Me.tablepay_tab_federal_tax_head = New pay_tab_federal_tax_headDataTable
        Me.Tables.Add(Me.tablepay_tab_federal_tax_head)
        Me.tablepay_tab_federal_tax_dtl = New pay_tab_federal_tax_dtlDataTable
        Me.Tables.Add(Me.tablepay_tab_federal_tax_dtl)
    End Sub
    
    Private Function ShouldSerializeEmployee_tab_status() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_federal_tax_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_federal_tax_dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Employee_tab_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As Employee_tab_statusRowChangeEvent)
    
    Public Delegate Sub pay_tab_federal_tax_headRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_federal_tax_headRowChangeEvent)
    
    Public Delegate Sub pay_tab_federal_tax_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_federal_tax_dtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Employee_tab_statusDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstat_code As DataColumn
        
        Private columnstat_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("Employee_tab_status")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property stat_codeColumn As DataColumn
            Get
                Return Me.columnstat_code
            End Get
        End Property
        
        Friend ReadOnly Property stat_descColumn As DataColumn
            Get
                Return Me.columnstat_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Employee_tab_statusRow
            Get
                Return CType(Me.Rows(index),Employee_tab_statusRow)
            End Get
        End Property
        
        Public Event Employee_tab_statusRowChanged As Employee_tab_statusRowChangeEventHandler
        
        Public Event Employee_tab_statusRowChanging As Employee_tab_statusRowChangeEventHandler
        
        Public Event Employee_tab_statusRowDeleted As Employee_tab_statusRowChangeEventHandler
        
        Public Event Employee_tab_statusRowDeleting As Employee_tab_statusRowChangeEventHandler
        
        Public Overloads Sub AddEmployee_tab_statusRow(ByVal row As Employee_tab_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmployee_tab_statusRow(ByVal stat_code As String, ByVal stat_desc As String) As Employee_tab_statusRow
            Dim rowEmployee_tab_statusRow As Employee_tab_statusRow = CType(Me.NewRow,Employee_tab_statusRow)
            rowEmployee_tab_statusRow.ItemArray = New Object() {stat_code, stat_desc}
            Me.Rows.Add(rowEmployee_tab_statusRow)
            Return rowEmployee_tab_statusRow
        End Function
        
        Public Function FindBystat_code(ByVal stat_code As String) As Employee_tab_statusRow
            Return CType(Me.Rows.Find(New Object() {stat_code}),Employee_tab_statusRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Employee_tab_statusDataTable = CType(MyBase.Clone,Employee_tab_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Employee_tab_statusDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstat_code = Me.Columns("stat_code")
            Me.columnstat_desc = Me.Columns("stat_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnstat_code = New DataColumn("stat_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_code)
            Me.columnstat_desc = New DataColumn("stat_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstat_code}, true))
            Me.columnstat_code.AllowDBNull = false
            Me.columnstat_code.Unique = true
        End Sub
        
        Public Function NewEmployee_tab_statusRow() As Employee_tab_statusRow
            Return CType(Me.NewRow,Employee_tab_statusRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Employee_tab_statusRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Employee_tab_statusRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Employee_tab_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent Employee_tab_statusRowChanged(Me, New Employee_tab_statusRowChangeEvent(CType(e.Row,Employee_tab_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Employee_tab_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent Employee_tab_statusRowChanging(Me, New Employee_tab_statusRowChangeEvent(CType(e.Row,Employee_tab_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Employee_tab_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent Employee_tab_statusRowDeleted(Me, New Employee_tab_statusRowChangeEvent(CType(e.Row,Employee_tab_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Employee_tab_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent Employee_tab_statusRowDeleting(Me, New Employee_tab_statusRowChangeEvent(CType(e.Row,Employee_tab_statusRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmployee_tab_statusRow(ByVal row As Employee_tab_statusRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Employee_tab_statusRow
        Inherits DataRow
        
        Private tableEmployee_tab_status As Employee_tab_statusDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmployee_tab_status = CType(Me.Table,Employee_tab_statusDataTable)
        End Sub
        
        Public Property stat_code As String
            Get
                Return CType(Me(Me.tableEmployee_tab_status.stat_codeColumn),String)
            End Get
            Set
                Me(Me.tableEmployee_tab_status.stat_codeColumn) = value
            End Set
        End Property
        
        Public Property stat_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_tab_status.stat_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_tab_status.stat_descColumn) = value
            End Set
        End Property
        
        Public Function Isstat_descNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_tab_status.stat_descColumn)
        End Function
        
        Public Sub Setstat_descNull()
            Me(Me.tableEmployee_tab_status.stat_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Employee_tab_statusRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Employee_tab_statusRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Employee_tab_statusRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Employee_tab_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnyear_Status As DataColumn
        
        Private columnId_Federal_Tax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_federal_tax_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property year_StatusColumn As DataColumn
            Get
                Return Me.columnyear_Status
            End Get
        End Property
        
        Friend ReadOnly Property Id_Federal_TaxColumn As DataColumn
            Get
                Return Me.columnId_Federal_Tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_federal_tax_headRow
            Get
                Return CType(Me.Rows(index),pay_tab_federal_tax_headRow)
            End Get
        End Property
        
        Public Event pay_tab_federal_tax_headRowChanged As pay_tab_federal_tax_headRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_headRowChanging As pay_tab_federal_tax_headRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_headRowDeleted As pay_tab_federal_tax_headRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_headRowDeleting As pay_tab_federal_tax_headRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_federal_tax_headRow(ByVal row As pay_tab_federal_tax_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_federal_tax_headRow(ByVal year_Status As String) As pay_tab_federal_tax_headRow
            Dim rowpay_tab_federal_tax_headRow As pay_tab_federal_tax_headRow = CType(Me.NewRow,pay_tab_federal_tax_headRow)
            rowpay_tab_federal_tax_headRow.ItemArray = New Object() {year_Status, Nothing}
            Me.Rows.Add(rowpay_tab_federal_tax_headRow)
            Return rowpay_tab_federal_tax_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_federal_tax_headDataTable = CType(MyBase.Clone,pay_tab_federal_tax_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_federal_tax_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnyear_Status = Me.Columns("year_Status")
            Me.columnId_Federal_Tax = Me.Columns("Id_Federal_Tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnyear_Status = New DataColumn("year_Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnyear_Status)
            Me.columnId_Federal_Tax = New DataColumn("Id_Federal_Tax", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Federal_Tax)
            Me.columnyear_Status.ReadOnly = true
            Me.columnId_Federal_Tax.AutoIncrement = true
            Me.columnId_Federal_Tax.AllowDBNull = false
            Me.columnId_Federal_Tax.ReadOnly = true
        End Sub
        
        Public Function Newpay_tab_federal_tax_headRow() As pay_tab_federal_tax_headRow
            Return CType(Me.NewRow,pay_tab_federal_tax_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_federal_tax_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_federal_tax_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_federal_tax_headRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_headRowChanged(Me, New pay_tab_federal_tax_headRowChangeEvent(CType(e.Row,pay_tab_federal_tax_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_federal_tax_headRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_headRowChanging(Me, New pay_tab_federal_tax_headRowChangeEvent(CType(e.Row,pay_tab_federal_tax_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_federal_tax_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_headRowDeleted(Me, New pay_tab_federal_tax_headRowChangeEvent(CType(e.Row,pay_tab_federal_tax_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_federal_tax_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_headRowDeleting(Me, New pay_tab_federal_tax_headRowChangeEvent(CType(e.Row,pay_tab_federal_tax_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_federal_tax_headRow(ByVal row As pay_tab_federal_tax_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_headRow
        Inherits DataRow
        
        Private tablepay_tab_federal_tax_head As pay_tab_federal_tax_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_federal_tax_head = CType(Me.Table,pay_tab_federal_tax_headDataTable)
        End Sub
        
        Public Property year_Status As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_head.year_StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_head.year_StatusColumn) = value
            End Set
        End Property
        
        Public Property Id_Federal_Tax As Integer
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_head.Id_Federal_TaxColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_head.Id_Federal_TaxColumn) = value
            End Set
        End Property
        
        Public Function Isyear_StatusNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_head.year_StatusColumn)
        End Function
        
        Public Sub Setyear_StatusNull()
            Me(Me.tablepay_tab_federal_tax_head.year_StatusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_federal_tax_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_federal_tax_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_federal_tax_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnover_ As DataColumn
        
        Private columnbut_not_over As DataColumn
        
        Private columnpercent_tax As DataColumn
        
        Private columndollor_tax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_federal_tax_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property over_Column As DataColumn
            Get
                Return Me.columnover_
            End Get
        End Property
        
        Friend ReadOnly Property but_not_overColumn As DataColumn
            Get
                Return Me.columnbut_not_over
            End Get
        End Property
        
        Friend ReadOnly Property percent_taxColumn As DataColumn
            Get
                Return Me.columnpercent_tax
            End Get
        End Property
        
        Friend ReadOnly Property dollor_taxColumn As DataColumn
            Get
                Return Me.columndollor_tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_federal_tax_dtlRow
            Get
                Return CType(Me.Rows(index),pay_tab_federal_tax_dtlRow)
            End Get
        End Property
        
        Public Event pay_tab_federal_tax_dtlRowChanged As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowChanging As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleted As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleting As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_federal_tax_dtlRow(ByVal radif As Short, ByVal over_ As Decimal, ByVal but_not_over As Decimal, ByVal percent_tax As Decimal, ByVal dollor_tax As Decimal) As pay_tab_federal_tax_dtlRow
            Dim rowpay_tab_federal_tax_dtlRow As pay_tab_federal_tax_dtlRow = CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
            rowpay_tab_federal_tax_dtlRow.ItemArray = New Object() {radif, over_, but_not_over, percent_tax, dollor_tax}
            Me.Rows.Add(rowpay_tab_federal_tax_dtlRow)
            Return rowpay_tab_federal_tax_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_federal_tax_dtlDataTable = CType(MyBase.Clone,pay_tab_federal_tax_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_federal_tax_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnover_ = Me.Columns("over_")
            Me.columnbut_not_over = Me.Columns("but_not_over")
            Me.columnpercent_tax = Me.Columns("percent_tax")
            Me.columndollor_tax = Me.Columns("dollor_tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnover_ = New DataColumn("over_", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover_)
            Me.columnbut_not_over = New DataColumn("but_not_over", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbut_not_over)
            Me.columnpercent_tax = New DataColumn("percent_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_tax)
            Me.columndollor_tax = New DataColumn("dollor_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndollor_tax)
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function Newpay_tab_federal_tax_dtlRow() As pay_tab_federal_tax_dtlRow
            Return CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_federal_tax_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanged(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanging(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleted(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleting(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRow
        Inherits DataRow
        
        Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_federal_tax_dtl = CType(Me.Table,pay_tab_federal_tax_dtlDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property over_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.over_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = value
            End Set
        End Property
        
        Public Property but_not_over As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = value
            End Set
        End Property
        
        Public Property percent_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = value
            End Set
        End Property
        
        Public Property dollor_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = value
            End Set
        End Property
        
        Public Function Isover_Null() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.over_Column)
        End Function
        
        Public Sub Setover_Null()
            Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isbut_not_overNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn)
        End Function
        
        Public Sub Setbut_not_overNull()
            Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn)
        End Function
        
        Public Sub Setpercent_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdollor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn)
        End Function
        
        Public Sub Setdollor_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_federal_tax_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_federal_tax_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_federal_tax_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
