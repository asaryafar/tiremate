'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPayCalculation
    Inherits DataSet
    
    Private tablepay_deduction_employee As pay_deduction_employeeDataTable
    
    Private tablepay_Garnishment_employee As pay_Garnishment_employeeDataTable
    
    Private tablepay_loan_dtl As pay_loan_dtlDataTable
    
    Private tablepay_saving_dtl As pay_saving_dtlDataTable
    
    Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
    
    Private tablepay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
    
    Private tablebas_banks As bas_banksDataTable
    
    Private tablepay_main_employee As pay_main_employeeDataTable
    
    Private tablepay_advance_employee As pay_advance_employeeDataTable
    
    Private tableemployeeCombo As employeeComboDataTable
    
    Private tableLast_BasisCombo As Last_BasisComboDataTable
    
    Private tableLast_PeriodCombo As Last_PeriodComboDataTable
    
    Private tableemployee As employeeDataTable
    
    Private tableYearWeeks As YearWeeksDataTable
    
    Private tableYears As YearsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_deduction_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_deduction_employeeDataTable(ds.Tables("pay_deduction_employee")))
            End If
            If (Not (ds.Tables("pay_Garnishment_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_Garnishment_employeeDataTable(ds.Tables("pay_Garnishment_employee")))
            End If
            If (Not (ds.Tables("pay_loan_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_loan_dtlDataTable(ds.Tables("pay_loan_dtl")))
            End If
            If (Not (ds.Tables("pay_saving_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_saving_dtlDataTable(ds.Tables("pay_saving_dtl")))
            End If
            If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
            End If
            If (Not (ds.Tables("pay_tab_state_tax_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_state_tax_dtlDataTable(ds.Tables("pay_tab_state_tax_dtl")))
            End If
            If (Not (ds.Tables("bas_banks")) Is Nothing) Then
                Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
            End If
            If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
            End If
            If (Not (ds.Tables("pay_advance_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_advance_employeeDataTable(ds.Tables("pay_advance_employee")))
            End If
            If (Not (ds.Tables("employeeCombo")) Is Nothing) Then
                Me.Tables.Add(New employeeComboDataTable(ds.Tables("employeeCombo")))
            End If
            If (Not (ds.Tables("Last_BasisCombo")) Is Nothing) Then
                Me.Tables.Add(New Last_BasisComboDataTable(ds.Tables("Last_BasisCombo")))
            End If
            If (Not (ds.Tables("Last_PeriodCombo")) Is Nothing) Then
                Me.Tables.Add(New Last_PeriodComboDataTable(ds.Tables("Last_PeriodCombo")))
            End If
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("YearWeeks")) Is Nothing) Then
                Me.Tables.Add(New YearWeeksDataTable(ds.Tables("YearWeeks")))
            End If
            If (Not (ds.Tables("Years")) Is Nothing) Then
                Me.Tables.Add(New YearsDataTable(ds.Tables("Years")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_deduction_employee As pay_deduction_employeeDataTable
        Get
            Return Me.tablepay_deduction_employee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_Garnishment_employee As pay_Garnishment_employeeDataTable
        Get
            Return Me.tablepay_Garnishment_employee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_loan_dtl As pay_loan_dtlDataTable
        Get
            Return Me.tablepay_loan_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_saving_dtl As pay_saving_dtlDataTable
        Get
            Return Me.tablepay_saving_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        Get
            Return Me.tablepay_tab_federal_tax_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
        Get
            Return Me.tablepay_tab_state_tax_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_banks As bas_banksDataTable
        Get
            Return Me.tablebas_banks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_main_employee As pay_main_employeeDataTable
        Get
            Return Me.tablepay_main_employee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_advance_employee As pay_advance_employeeDataTable
        Get
            Return Me.tablepay_advance_employee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employeeCombo As employeeComboDataTable
        Get
            Return Me.tableemployeeCombo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Last_BasisCombo As Last_BasisComboDataTable
        Get
            Return Me.tableLast_BasisCombo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Last_PeriodCombo As Last_PeriodComboDataTable
        Get
            Return Me.tableLast_PeriodCombo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property YearWeeks As YearWeeksDataTable
        Get
            Return Me.tableYearWeeks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Years As YearsDataTable
        Get
            Return Me.tableYears
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPayCalculation = CType(MyBase.Clone,DSFrmPayCalculation)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_deduction_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_deduction_employeeDataTable(ds.Tables("pay_deduction_employee")))
        End If
        If (Not (ds.Tables("pay_Garnishment_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_Garnishment_employeeDataTable(ds.Tables("pay_Garnishment_employee")))
        End If
        If (Not (ds.Tables("pay_loan_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_loan_dtlDataTable(ds.Tables("pay_loan_dtl")))
        End If
        If (Not (ds.Tables("pay_saving_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_saving_dtlDataTable(ds.Tables("pay_saving_dtl")))
        End If
        If (Not (ds.Tables("pay_tab_federal_tax_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_federal_tax_dtlDataTable(ds.Tables("pay_tab_federal_tax_dtl")))
        End If
        If (Not (ds.Tables("pay_tab_state_tax_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_state_tax_dtlDataTable(ds.Tables("pay_tab_state_tax_dtl")))
        End If
        If (Not (ds.Tables("bas_banks")) Is Nothing) Then
            Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
        End If
        If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
        End If
        If (Not (ds.Tables("pay_advance_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_advance_employeeDataTable(ds.Tables("pay_advance_employee")))
        End If
        If (Not (ds.Tables("employeeCombo")) Is Nothing) Then
            Me.Tables.Add(New employeeComboDataTable(ds.Tables("employeeCombo")))
        End If
        If (Not (ds.Tables("Last_BasisCombo")) Is Nothing) Then
            Me.Tables.Add(New Last_BasisComboDataTable(ds.Tables("Last_BasisCombo")))
        End If
        If (Not (ds.Tables("Last_PeriodCombo")) Is Nothing) Then
            Me.Tables.Add(New Last_PeriodComboDataTable(ds.Tables("Last_PeriodCombo")))
        End If
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("YearWeeks")) Is Nothing) Then
            Me.Tables.Add(New YearWeeksDataTable(ds.Tables("YearWeeks")))
        End If
        If (Not (ds.Tables("Years")) Is Nothing) Then
            Me.Tables.Add(New YearsDataTable(ds.Tables("Years")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_deduction_employee = CType(Me.Tables("pay_deduction_employee"),pay_deduction_employeeDataTable)
        If (Not (Me.tablepay_deduction_employee) Is Nothing) Then
            Me.tablepay_deduction_employee.InitVars
        End If
        Me.tablepay_Garnishment_employee = CType(Me.Tables("pay_Garnishment_employee"),pay_Garnishment_employeeDataTable)
        If (Not (Me.tablepay_Garnishment_employee) Is Nothing) Then
            Me.tablepay_Garnishment_employee.InitVars
        End If
        Me.tablepay_loan_dtl = CType(Me.Tables("pay_loan_dtl"),pay_loan_dtlDataTable)
        If (Not (Me.tablepay_loan_dtl) Is Nothing) Then
            Me.tablepay_loan_dtl.InitVars
        End If
        Me.tablepay_saving_dtl = CType(Me.Tables("pay_saving_dtl"),pay_saving_dtlDataTable)
        If (Not (Me.tablepay_saving_dtl) Is Nothing) Then
            Me.tablepay_saving_dtl.InitVars
        End If
        Me.tablepay_tab_federal_tax_dtl = CType(Me.Tables("pay_tab_federal_tax_dtl"),pay_tab_federal_tax_dtlDataTable)
        If (Not (Me.tablepay_tab_federal_tax_dtl) Is Nothing) Then
            Me.tablepay_tab_federal_tax_dtl.InitVars
        End If
        Me.tablepay_tab_state_tax_dtl = CType(Me.Tables("pay_tab_state_tax_dtl"),pay_tab_state_tax_dtlDataTable)
        If (Not (Me.tablepay_tab_state_tax_dtl) Is Nothing) Then
            Me.tablepay_tab_state_tax_dtl.InitVars
        End If
        Me.tablebas_banks = CType(Me.Tables("bas_banks"),bas_banksDataTable)
        If (Not (Me.tablebas_banks) Is Nothing) Then
            Me.tablebas_banks.InitVars
        End If
        Me.tablepay_main_employee = CType(Me.Tables("pay_main_employee"),pay_main_employeeDataTable)
        If (Not (Me.tablepay_main_employee) Is Nothing) Then
            Me.tablepay_main_employee.InitVars
        End If
        Me.tablepay_advance_employee = CType(Me.Tables("pay_advance_employee"),pay_advance_employeeDataTable)
        If (Not (Me.tablepay_advance_employee) Is Nothing) Then
            Me.tablepay_advance_employee.InitVars
        End If
        Me.tableemployeeCombo = CType(Me.Tables("employeeCombo"),employeeComboDataTable)
        If (Not (Me.tableemployeeCombo) Is Nothing) Then
            Me.tableemployeeCombo.InitVars
        End If
        Me.tableLast_BasisCombo = CType(Me.Tables("Last_BasisCombo"),Last_BasisComboDataTable)
        If (Not (Me.tableLast_BasisCombo) Is Nothing) Then
            Me.tableLast_BasisCombo.InitVars
        End If
        Me.tableLast_PeriodCombo = CType(Me.Tables("Last_PeriodCombo"),Last_PeriodComboDataTable)
        If (Not (Me.tableLast_PeriodCombo) Is Nothing) Then
            Me.tableLast_PeriodCombo.InitVars
        End If
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableYearWeeks = CType(Me.Tables("YearWeeks"),YearWeeksDataTable)
        If (Not (Me.tableYearWeeks) Is Nothing) Then
            Me.tableYearWeeks.InitVars
        End If
        Me.tableYears = CType(Me.Tables("Years"),YearsDataTable)
        If (Not (Me.tableYears) Is Nothing) Then
            Me.tableYears.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPayCalculation"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPayCalculation.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_deduction_employee = New pay_deduction_employeeDataTable
        Me.Tables.Add(Me.tablepay_deduction_employee)
        Me.tablepay_Garnishment_employee = New pay_Garnishment_employeeDataTable
        Me.Tables.Add(Me.tablepay_Garnishment_employee)
        Me.tablepay_loan_dtl = New pay_loan_dtlDataTable
        Me.Tables.Add(Me.tablepay_loan_dtl)
        Me.tablepay_saving_dtl = New pay_saving_dtlDataTable
        Me.Tables.Add(Me.tablepay_saving_dtl)
        Me.tablepay_tab_federal_tax_dtl = New pay_tab_federal_tax_dtlDataTable
        Me.Tables.Add(Me.tablepay_tab_federal_tax_dtl)
        Me.tablepay_tab_state_tax_dtl = New pay_tab_state_tax_dtlDataTable
        Me.Tables.Add(Me.tablepay_tab_state_tax_dtl)
        Me.tablebas_banks = New bas_banksDataTable
        Me.Tables.Add(Me.tablebas_banks)
        Me.tablepay_main_employee = New pay_main_employeeDataTable
        Me.Tables.Add(Me.tablepay_main_employee)
        Me.tablepay_advance_employee = New pay_advance_employeeDataTable
        Me.Tables.Add(Me.tablepay_advance_employee)
        Me.tableemployeeCombo = New employeeComboDataTable
        Me.Tables.Add(Me.tableemployeeCombo)
        Me.tableLast_BasisCombo = New Last_BasisComboDataTable
        Me.Tables.Add(Me.tableLast_BasisCombo)
        Me.tableLast_PeriodCombo = New Last_PeriodComboDataTable
        Me.Tables.Add(Me.tableLast_PeriodCombo)
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableYearWeeks = New YearWeeksDataTable
        Me.Tables.Add(Me.tableYearWeeks)
        Me.tableYears = New YearsDataTable
        Me.Tables.Add(Me.tableYears)
    End Sub
    
    Private Function ShouldSerializepay_deduction_employee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_Garnishment_employee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_loan_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_saving_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_federal_tax_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_tab_state_tax_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_banks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_main_employee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_advance_employee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployeeCombo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLast_BasisCombo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLast_PeriodCombo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeYearWeeks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeYears() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_deduction_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_deduction_employeeRowChangeEvent)
    
    Public Delegate Sub pay_Garnishment_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_Garnishment_employeeRowChangeEvent)
    
    Public Delegate Sub pay_loan_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_loan_dtlRowChangeEvent)
    
    Public Delegate Sub pay_saving_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_saving_dtlRowChangeEvent)
    
    Public Delegate Sub pay_tab_federal_tax_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_federal_tax_dtlRowChangeEvent)
    
    Public Delegate Sub pay_tab_state_tax_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_state_tax_dtlRowChangeEvent)
    
    Public Delegate Sub bas_banksRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_banksRowChangeEvent)
    
    Public Delegate Sub pay_main_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_main_employeeRowChangeEvent)
    
    Public Delegate Sub pay_advance_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_advance_employeeRowChangeEvent)
    
    Public Delegate Sub employeeComboRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeComboRowChangeEvent)
    
    Public Delegate Sub Last_BasisComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Last_BasisComboRowChangeEvent)
    
    Public Delegate Sub Last_PeriodComboRowChangeEventHandler(ByVal sender As Object, ByVal e As Last_PeriodComboRowChangeEvent)
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub YearWeeksRowChangeEventHandler(ByVal sender As Object, ByVal e As YearWeeksRowChangeEvent)
    
    Public Delegate Sub YearsRowChangeEventHandler(ByVal sender As Object, ByVal e As YearsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_deduction As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columndeduction_cod As DataColumn
        
        Private columnfrom_date_deduction As DataColumn
        
        Private columnto_date_deduction As DataColumn
        
        Private columnamount_deduction As DataColumn
        
        Private columnactive As DataColumn
        
        Private columndeduction_desc As DataColumn
        
        Private columnbefor_tax As DataColumn
        
        Private columnpercent_gross_pay As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_deduction_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property deduction_codColumn As DataColumn
            Get
                Return Me.columndeduction_cod
            End Get
        End Property
        
        Friend ReadOnly Property from_date_deductionColumn As DataColumn
            Get
                Return Me.columnfrom_date_deduction
            End Get
        End Property
        
        Friend ReadOnly Property to_date_deductionColumn As DataColumn
            Get
                Return Me.columnto_date_deduction
            End Get
        End Property
        
        Friend ReadOnly Property amount_deductionColumn As DataColumn
            Get
                Return Me.columnamount_deduction
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property deduction_descColumn As DataColumn
            Get
                Return Me.columndeduction_desc
            End Get
        End Property
        
        Friend ReadOnly Property befor_taxColumn As DataColumn
            Get
                Return Me.columnbefor_tax
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_payColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_deduction_employeeRow
            Get
                Return CType(Me.Rows(index),pay_deduction_employeeRow)
            End Get
        End Property
        
        Public Event pay_deduction_employeeRowChanged As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowChanging As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowDeleted As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowDeleting As pay_deduction_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_deduction_employeeRow(ByVal row As pay_deduction_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_deduction_employeeRow(ByVal employee_code As String, ByVal deduction_cod As String, ByVal from_date_deduction As String, ByVal to_date_deduction As String, ByVal amount_deduction As Decimal, ByVal active As Boolean, ByVal deduction_desc As String, ByVal befor_tax As Boolean, ByVal percent_gross_pay As Decimal) As pay_deduction_employeeRow
            Dim rowpay_deduction_employeeRow As pay_deduction_employeeRow = CType(Me.NewRow,pay_deduction_employeeRow)
            rowpay_deduction_employeeRow.ItemArray = New Object() {Nothing, employee_code, deduction_cod, from_date_deduction, to_date_deduction, amount_deduction, active, deduction_desc, befor_tax, percent_gross_pay}
            Me.Rows.Add(rowpay_deduction_employeeRow)
            Return rowpay_deduction_employeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_deduction_employeeDataTable = CType(MyBase.Clone,pay_deduction_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_deduction_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columndeduction_cod = Me.Columns("deduction_cod")
            Me.columnfrom_date_deduction = Me.Columns("from_date_deduction")
            Me.columnto_date_deduction = Me.Columns("to_date_deduction")
            Me.columnamount_deduction = Me.Columns("amount_deduction")
            Me.columnactive = Me.Columns("active")
            Me.columndeduction_desc = Me.Columns("deduction_desc")
            Me.columnbefor_tax = Me.Columns("befor_tax")
            Me.columnpercent_gross_pay = Me.Columns("percent_gross_pay")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columndeduction_cod = New DataColumn("deduction_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_cod)
            Me.columnfrom_date_deduction = New DataColumn("from_date_deduction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrom_date_deduction)
            Me.columnto_date_deduction = New DataColumn("to_date_deduction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnto_date_deduction)
            Me.columnamount_deduction = New DataColumn("amount_deduction", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_deduction)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columndeduction_desc = New DataColumn("deduction_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_desc)
            Me.columnbefor_tax = New DataColumn("befor_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefor_tax)
            Me.columnpercent_gross_pay = New DataColumn("percent_gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay)
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
            Me.columnemployee_code.AllowDBNull = false
            Me.columndeduction_cod.AllowDBNull = false
            Me.columnfrom_date_deduction.AllowDBNull = false
            Me.columnto_date_deduction.AllowDBNull = false
        End Sub
        
        Public Function Newpay_deduction_employeeRow() As pay_deduction_employeeRow
            Return CType(Me.NewRow,pay_deduction_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_deduction_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_deduction_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_deduction_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowChanged(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_deduction_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowChanging(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_deduction_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowDeleted(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_deduction_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowDeleting(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_deduction_employeeRow(ByVal row As pay_deduction_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeRow
        Inherits DataRow
        
        Private tablepay_deduction_employee As pay_deduction_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_deduction_employee = CType(Me.Table,pay_deduction_employeeDataTable)
        End Sub
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_deduction_employee.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property deduction_cod As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.deduction_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.deduction_codColumn) = value
            End Set
        End Property
        
        Public Property from_date_deduction As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.from_date_deductionColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.from_date_deductionColumn) = value
            End Set
        End Property
        
        Public Property to_date_deduction As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.to_date_deductionColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.to_date_deductionColumn) = value
            End Set
        End Property
        
        Public Property amount_deduction As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.amount_deductionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.amount_deductionColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.activeColumn) = value
            End Set
        End Property
        
        Public Property deduction_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.deduction_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.deduction_descColumn) = value
            End Set
        End Property
        
        Public Property befor_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.befor_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.befor_taxColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.percent_gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.percent_gross_payColumn) = value
            End Set
        End Property
        
        Public Function Isamount_deductionNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.amount_deductionColumn)
        End Function
        
        Public Sub Setamount_deductionNull()
            Me(Me.tablepay_deduction_employee.amount_deductionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_deduction_employee.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeduction_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.deduction_descColumn)
        End Function
        
        Public Sub Setdeduction_descNull()
            Me(Me.tablepay_deduction_employee.deduction_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.befor_taxColumn)
        End Function
        
        Public Sub Setbefor_taxNull()
            Me(Me.tablepay_deduction_employee.befor_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.percent_gross_payColumn)
        End Function
        
        Public Sub Setpercent_gross_payNull()
            Me(Me.tablepay_deduction_employee.percent_gross_payColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_deduction_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_deduction_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_deduction_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_Garnishment_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_deduction As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columndate_start As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnamount_garnishment As DataColumn
        
        Private columnactive As DataColumn
        
        Private columnbeforetax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_Garnishment_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property date_startColumn As DataColumn
            Get
                Return Me.columndate_start
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property amount_garnishmentColumn As DataColumn
            Get
                Return Me.columnamount_garnishment
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property beforetaxColumn As DataColumn
            Get
                Return Me.columnbeforetax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_Garnishment_employeeRow
            Get
                Return CType(Me.Rows(index),pay_Garnishment_employeeRow)
            End Get
        End Property
        
        Public Event pay_Garnishment_employeeRowChanged As pay_Garnishment_employeeRowChangeEventHandler
        
        Public Event pay_Garnishment_employeeRowChanging As pay_Garnishment_employeeRowChangeEventHandler
        
        Public Event pay_Garnishment_employeeRowDeleted As pay_Garnishment_employeeRowChangeEventHandler
        
        Public Event pay_Garnishment_employeeRowDeleting As pay_Garnishment_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_Garnishment_employeeRow(ByVal row As pay_Garnishment_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_Garnishment_employeeRow(ByVal employee_code As String, ByVal date_start As String, ByVal remark As String, ByVal amount_garnishment As Decimal, ByVal active As Boolean, ByVal beforetax As Boolean) As pay_Garnishment_employeeRow
            Dim rowpay_Garnishment_employeeRow As pay_Garnishment_employeeRow = CType(Me.NewRow,pay_Garnishment_employeeRow)
            rowpay_Garnishment_employeeRow.ItemArray = New Object() {Nothing, employee_code, date_start, remark, amount_garnishment, active, beforetax}
            Me.Rows.Add(rowpay_Garnishment_employeeRow)
            Return rowpay_Garnishment_employeeRow
        End Function
        
        Public Function FindByid_deduction(ByVal id_deduction As Integer) As pay_Garnishment_employeeRow
            Return CType(Me.Rows.Find(New Object() {id_deduction}),pay_Garnishment_employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_Garnishment_employeeDataTable = CType(MyBase.Clone,pay_Garnishment_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_Garnishment_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columndate_start = Me.Columns("date_start")
            Me.columnremark = Me.Columns("remark")
            Me.columnamount_garnishment = Me.Columns("amount_garnishment")
            Me.columnactive = Me.Columns("active")
            Me.columnbeforetax = Me.Columns("beforetax")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columndate_start = New DataColumn("date_start", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_start)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnamount_garnishment = New DataColumn("amount_garnishment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_garnishment)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columnbeforetax = New DataColumn("beforetax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbeforetax)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_deduction}, true))
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
            Me.columnid_deduction.Unique = true
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function Newpay_Garnishment_employeeRow() As pay_Garnishment_employeeRow
            Return CType(Me.NewRow,pay_Garnishment_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_Garnishment_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_Garnishment_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_Garnishment_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_Garnishment_employeeRowChanged(Me, New pay_Garnishment_employeeRowChangeEvent(CType(e.Row,pay_Garnishment_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_Garnishment_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_Garnishment_employeeRowChanging(Me, New pay_Garnishment_employeeRowChangeEvent(CType(e.Row,pay_Garnishment_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_Garnishment_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_Garnishment_employeeRowDeleted(Me, New pay_Garnishment_employeeRowChangeEvent(CType(e.Row,pay_Garnishment_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_Garnishment_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_Garnishment_employeeRowDeleting(Me, New pay_Garnishment_employeeRowChangeEvent(CType(e.Row,pay_Garnishment_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_Garnishment_employeeRow(ByVal row As pay_Garnishment_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_Garnishment_employeeRow
        Inherits DataRow
        
        Private tablepay_Garnishment_employee As pay_Garnishment_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_Garnishment_employee = CType(Me.Table,pay_Garnishment_employeeDataTable)
        End Sub
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_Garnishment_employee.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_Garnishment_employee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property date_start As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_Garnishment_employee.date_startColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.date_startColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_Garnishment_employee.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.remarkColumn) = value
            End Set
        End Property
        
        Public Property amount_garnishment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_Garnishment_employee.amount_garnishmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.amount_garnishmentColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_Garnishment_employee.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.activeColumn) = value
            End Set
        End Property
        
        Public Property beforetax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_Garnishment_employee.beforetaxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_Garnishment_employee.beforetaxColumn) = value
            End Set
        End Property
        
        Public Function Isdate_startNull() As Boolean
            Return Me.IsNull(Me.tablepay_Garnishment_employee.date_startColumn)
        End Function
        
        Public Sub Setdate_startNull()
            Me(Me.tablepay_Garnishment_employee.date_startColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tablepay_Garnishment_employee.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tablepay_Garnishment_employee.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_garnishmentNull() As Boolean
            Return Me.IsNull(Me.tablepay_Garnishment_employee.amount_garnishmentColumn)
        End Function
        
        Public Sub Setamount_garnishmentNull()
            Me(Me.tablepay_Garnishment_employee.amount_garnishmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_Garnishment_employee.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_Garnishment_employee.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbeforetaxNull() As Boolean
            Return Me.IsNull(Me.tablepay_Garnishment_employee.beforetaxColumn)
        End Function
        
        Public Sub SetbeforetaxNull()
            Me(Me.tablepay_Garnishment_employee.beforetaxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_Garnishment_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_Garnishment_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_Garnishment_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_Garnishment_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnloan_cod As DataColumn
        
        Private columndate_start As DataColumn
        
        Private columnamount_loan As DataColumn
        
        Private columncostus As DataColumn
        
        Private columntime_costus_pay As DataColumn
        
        Private columnbefore_tax As DataColumn
        
        Private columnloan_desc As DataColumn
        
        Private columnid_deduction As DataColumn
        
        Private columnactive As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_loan_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property loan_codColumn As DataColumn
            Get
                Return Me.columnloan_cod
            End Get
        End Property
        
        Friend ReadOnly Property date_startColumn As DataColumn
            Get
                Return Me.columndate_start
            End Get
        End Property
        
        Friend ReadOnly Property amount_loanColumn As DataColumn
            Get
                Return Me.columnamount_loan
            End Get
        End Property
        
        Friend ReadOnly Property costusColumn As DataColumn
            Get
                Return Me.columncostus
            End Get
        End Property
        
        Friend ReadOnly Property time_costus_payColumn As DataColumn
            Get
                Return Me.columntime_costus_pay
            End Get
        End Property
        
        Friend ReadOnly Property before_taxColumn As DataColumn
            Get
                Return Me.columnbefore_tax
            End Get
        End Property
        
        Friend ReadOnly Property loan_descColumn As DataColumn
            Get
                Return Me.columnloan_desc
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_loan_dtlRow
            Get
                Return CType(Me.Rows(index),pay_loan_dtlRow)
            End Get
        End Property
        
        Public Event pay_loan_dtlRowChanged As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowChanging As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowDeleted As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowDeleting As pay_loan_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_loan_dtlRow(ByVal row As pay_loan_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_loan_dtlRow(ByVal employee_code As String, ByVal loan_cod As String, ByVal date_start As String, ByVal amount_loan As Decimal, ByVal costus As Decimal, ByVal time_costus_pay As Short, ByVal before_tax As Boolean, ByVal loan_desc As String, ByVal active As Boolean) As pay_loan_dtlRow
            Dim rowpay_loan_dtlRow As pay_loan_dtlRow = CType(Me.NewRow,pay_loan_dtlRow)
            rowpay_loan_dtlRow.ItemArray = New Object() {employee_code, loan_cod, date_start, amount_loan, costus, time_costus_pay, before_tax, loan_desc, Nothing, active}
            Me.Rows.Add(rowpay_loan_dtlRow)
            Return rowpay_loan_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_loan_dtlDataTable = CType(MyBase.Clone,pay_loan_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_loan_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnloan_cod = Me.Columns("loan_cod")
            Me.columndate_start = Me.Columns("date_start")
            Me.columnamount_loan = Me.Columns("amount_loan")
            Me.columncostus = Me.Columns("costus")
            Me.columntime_costus_pay = Me.Columns("time_costus_pay")
            Me.columnbefore_tax = Me.Columns("before_tax")
            Me.columnloan_desc = Me.Columns("loan_desc")
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columnactive = Me.Columns("active")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnloan_cod = New DataColumn("loan_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_cod)
            Me.columndate_start = New DataColumn("date_start", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_start)
            Me.columnamount_loan = New DataColumn("amount_loan", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_loan)
            Me.columncostus = New DataColumn("costus", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncostus)
            Me.columntime_costus_pay = New DataColumn("time_costus_pay", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_costus_pay)
            Me.columnbefore_tax = New DataColumn("before_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefore_tax)
            Me.columnloan_desc = New DataColumn("loan_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_desc)
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columnemployee_code.AllowDBNull = false
            Me.columnloan_cod.AllowDBNull = false
            Me.columndate_start.AllowDBNull = false
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
        End Sub
        
        Public Function Newpay_loan_dtlRow() As pay_loan_dtlRow
            Return CType(Me.NewRow,pay_loan_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_loan_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_loan_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_loan_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowChanged(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_loan_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowChanging(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_loan_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowDeleted(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_loan_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowDeleting(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_loan_dtlRow(ByVal row As pay_loan_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlRow
        Inherits DataRow
        
        Private tablepay_loan_dtl As pay_loan_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_loan_dtl = CType(Me.Table,pay_loan_dtlDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property loan_cod As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.loan_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.loan_codColumn) = value
            End Set
        End Property
        
        Public Property date_start As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.date_startColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.date_startColumn) = value
            End Set
        End Property
        
        Public Property amount_loan As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.amount_loanColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.amount_loanColumn) = value
            End Set
        End Property
        
        Public Property costus As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.costusColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.costusColumn) = value
            End Set
        End Property
        
        Public Property time_costus_pay As Short
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.time_costus_payColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.time_costus_payColumn) = value
            End Set
        End Property
        
        Public Property before_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.before_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.before_taxColumn) = value
            End Set
        End Property
        
        Public Property loan_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.loan_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.loan_descColumn) = value
            End Set
        End Property
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_loan_dtl.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.activeColumn) = value
            End Set
        End Property
        
        Public Function Isamount_loanNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.amount_loanColumn)
        End Function
        
        Public Sub Setamount_loanNull()
            Me(Me.tablepay_loan_dtl.amount_loanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostusNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.costusColumn)
        End Function
        
        Public Sub SetcostusNull()
            Me(Me.tablepay_loan_dtl.costusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_costus_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.time_costus_payColumn)
        End Function
        
        Public Sub Settime_costus_payNull()
            Me(Me.tablepay_loan_dtl.time_costus_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefore_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.before_taxColumn)
        End Function
        
        Public Sub Setbefore_taxNull()
            Me(Me.tablepay_loan_dtl.before_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isloan_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.loan_descColumn)
        End Function
        
        Public Sub Setloan_descNull()
            Me(Me.tablepay_loan_dtl.loan_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_loan_dtl.activeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_loan_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_loan_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_loan_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_deduction As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnsaving_cod As DataColumn
        
        Private columndate_start As DataColumn
        
        Private columnamount_employee As DataColumn
        
        Private columnamount_employer As DataColumn
        
        Private columntime_saving_removal As DataColumn
        
        Private columnactive As DataColumn
        
        Private columnsaving_desc As DataColumn
        
        Private columnbefore_tax As DataColumn
        
        Private columnpercent_gross_pay_employee As DataColumn
        
        Private columnpercent_gross_pay_employer As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_saving_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property saving_codColumn As DataColumn
            Get
                Return Me.columnsaving_cod
            End Get
        End Property
        
        Friend ReadOnly Property date_startColumn As DataColumn
            Get
                Return Me.columndate_start
            End Get
        End Property
        
        Friend ReadOnly Property amount_employeeColumn As DataColumn
            Get
                Return Me.columnamount_employee
            End Get
        End Property
        
        Friend ReadOnly Property amount_employerColumn As DataColumn
            Get
                Return Me.columnamount_employer
            End Get
        End Property
        
        Friend ReadOnly Property time_saving_removalColumn As DataColumn
            Get
                Return Me.columntime_saving_removal
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property saving_descColumn As DataColumn
            Get
                Return Me.columnsaving_desc
            End Get
        End Property
        
        Friend ReadOnly Property before_taxColumn As DataColumn
            Get
                Return Me.columnbefore_tax
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_pay_employeeColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay_employee
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_pay_employerColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay_employer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_saving_dtlRow
            Get
                Return CType(Me.Rows(index),pay_saving_dtlRow)
            End Get
        End Property
        
        Public Event pay_saving_dtlRowChanged As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowChanging As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowDeleted As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowDeleting As pay_saving_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_saving_dtlRow(ByVal row As pay_saving_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_saving_dtlRow(ByVal employee_code As String, ByVal saving_cod As String, ByVal date_start As String, ByVal amount_employee As Decimal, ByVal amount_employer As Decimal, ByVal time_saving_removal As Decimal, ByVal active As Boolean, ByVal saving_desc As String, ByVal before_tax As Boolean, ByVal percent_gross_pay_employee As Decimal, ByVal percent_gross_pay_employer As Decimal) As pay_saving_dtlRow
            Dim rowpay_saving_dtlRow As pay_saving_dtlRow = CType(Me.NewRow,pay_saving_dtlRow)
            rowpay_saving_dtlRow.ItemArray = New Object() {Nothing, employee_code, saving_cod, date_start, amount_employee, amount_employer, time_saving_removal, active, saving_desc, before_tax, percent_gross_pay_employee, percent_gross_pay_employer}
            Me.Rows.Add(rowpay_saving_dtlRow)
            Return rowpay_saving_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_saving_dtlDataTable = CType(MyBase.Clone,pay_saving_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_saving_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnsaving_cod = Me.Columns("saving_cod")
            Me.columndate_start = Me.Columns("date_start")
            Me.columnamount_employee = Me.Columns("amount_employee")
            Me.columnamount_employer = Me.Columns("amount_employer")
            Me.columntime_saving_removal = Me.Columns("time_saving_removal")
            Me.columnactive = Me.Columns("active")
            Me.columnsaving_desc = Me.Columns("saving_desc")
            Me.columnbefore_tax = Me.Columns("before_tax")
            Me.columnpercent_gross_pay_employee = Me.Columns("percent_gross_pay_employee")
            Me.columnpercent_gross_pay_employer = Me.Columns("percent_gross_pay_employer")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnsaving_cod = New DataColumn("saving_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_cod)
            Me.columndate_start = New DataColumn("date_start", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_start)
            Me.columnamount_employee = New DataColumn("amount_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_employee)
            Me.columnamount_employer = New DataColumn("amount_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_employer)
            Me.columntime_saving_removal = New DataColumn("time_saving_removal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_saving_removal)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columnsaving_desc = New DataColumn("saving_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_desc)
            Me.columnbefore_tax = New DataColumn("before_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefore_tax)
            Me.columnpercent_gross_pay_employee = New DataColumn("percent_gross_pay_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay_employee)
            Me.columnpercent_gross_pay_employer = New DataColumn("percent_gross_pay_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay_employer)
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
            Me.columnemployee_code.AllowDBNull = false
            Me.columnsaving_cod.AllowDBNull = false
        End Sub
        
        Public Function Newpay_saving_dtlRow() As pay_saving_dtlRow
            Return CType(Me.NewRow,pay_saving_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_saving_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_saving_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_saving_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowChanged(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_saving_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowChanging(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_saving_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowDeleted(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_saving_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowDeleting(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_saving_dtlRow(ByVal row As pay_saving_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlRow
        Inherits DataRow
        
        Private tablepay_saving_dtl As pay_saving_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_saving_dtl = CType(Me.Table,pay_saving_dtlDataTable)
        End Sub
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_saving_dtl.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_saving_dtl.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_saving_dtl.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_saving_dtl.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property saving_cod As String
            Get
                Return CType(Me(Me.tablepay_saving_dtl.saving_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_saving_dtl.saving_codColumn) = value
            End Set
        End Property
        
        Public Property date_start As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.date_startColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.date_startColumn) = value
            End Set
        End Property
        
        Public Property amount_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.amount_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.amount_employeeColumn) = value
            End Set
        End Property
        
        Public Property amount_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.amount_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.amount_employerColumn) = value
            End Set
        End Property
        
        Public Property time_saving_removal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.time_saving_removalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.time_saving_removalColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.activeColumn) = value
            End Set
        End Property
        
        Public Property saving_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.saving_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.saving_descColumn) = value
            End Set
        End Property
        
        Public Property before_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.before_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.before_taxColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.percent_gross_pay_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.percent_gross_pay_employeeColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.percent_gross_pay_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.percent_gross_pay_employerColumn) = value
            End Set
        End Property
        
        Public Function Isdate_startNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.date_startColumn)
        End Function
        
        Public Sub Setdate_startNull()
            Me(Me.tablepay_saving_dtl.date_startColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.amount_employeeColumn)
        End Function
        
        Public Sub Setamount_employeeNull()
            Me(Me.tablepay_saving_dtl.amount_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.amount_employerColumn)
        End Function
        
        Public Sub Setamount_employerNull()
            Me(Me.tablepay_saving_dtl.amount_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_saving_removalNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.time_saving_removalColumn)
        End Function
        
        Public Sub Settime_saving_removalNull()
            Me(Me.tablepay_saving_dtl.time_saving_removalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_saving_dtl.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issaving_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.saving_descColumn)
        End Function
        
        Public Sub Setsaving_descNull()
            Me(Me.tablepay_saving_dtl.saving_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefore_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.before_taxColumn)
        End Function
        
        Public Sub Setbefore_taxNull()
            Me(Me.tablepay_saving_dtl.before_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_pay_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.percent_gross_pay_employeeColumn)
        End Function
        
        Public Sub Setpercent_gross_pay_employeeNull()
            Me(Me.tablepay_saving_dtl.percent_gross_pay_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_pay_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.percent_gross_pay_employerColumn)
        End Function
        
        Public Sub Setpercent_gross_pay_employerNull()
            Me(Me.tablepay_saving_dtl.percent_gross_pay_employerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_saving_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_saving_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_saving_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnover_ As DataColumn
        
        Private columnbut_not_over As DataColumn
        
        Private columnpercent_tax As DataColumn
        
        Private columndollor_tax As DataColumn
        
        Private columnid_federal_tax As DataColumn
        
        Private columnwithholding_allownce As DataColumn
        
        Private columnsocial_sec_employee As DataColumn
        
        Private columnsocial_sec_employer As DataColumn
        
        Private columnsocial_sec_wagelimit As DataColumn
        
        Private columnmedi_employee As DataColumn
        
        Private columnmedi_employer As DataColumn
        
        Private columnmedi_wagelimit As DataColumn
        
        Private columnunemplyment_employee As DataColumn
        
        Private columnunemplyment_employer As DataColumn
        
        Private columnunemplyment_wagelimit As DataColumn
        
        Private columnstat_code As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_federal_tax_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property over_Column As DataColumn
            Get
                Return Me.columnover_
            End Get
        End Property
        
        Friend ReadOnly Property but_not_overColumn As DataColumn
            Get
                Return Me.columnbut_not_over
            End Get
        End Property
        
        Friend ReadOnly Property percent_taxColumn As DataColumn
            Get
                Return Me.columnpercent_tax
            End Get
        End Property
        
        Friend ReadOnly Property dollor_taxColumn As DataColumn
            Get
                Return Me.columndollor_tax
            End Get
        End Property
        
        Friend ReadOnly Property id_federal_taxColumn As DataColumn
            Get
                Return Me.columnid_federal_tax
            End Get
        End Property
        
        Friend ReadOnly Property withholding_allownceColumn As DataColumn
            Get
                Return Me.columnwithholding_allownce
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_employeeColumn As DataColumn
            Get
                Return Me.columnsocial_sec_employee
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_employerColumn As DataColumn
            Get
                Return Me.columnsocial_sec_employer
            End Get
        End Property
        
        Friend ReadOnly Property social_sec_wagelimitColumn As DataColumn
            Get
                Return Me.columnsocial_sec_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property medi_employeeColumn As DataColumn
            Get
                Return Me.columnmedi_employee
            End Get
        End Property
        
        Friend ReadOnly Property medi_employerColumn As DataColumn
            Get
                Return Me.columnmedi_employer
            End Get
        End Property
        
        Friend ReadOnly Property medi_wagelimitColumn As DataColumn
            Get
                Return Me.columnmedi_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_employeeColumn As DataColumn
            Get
                Return Me.columnunemplyment_employee
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_employerColumn As DataColumn
            Get
                Return Me.columnunemplyment_employer
            End Get
        End Property
        
        Friend ReadOnly Property unemplyment_wagelimitColumn As DataColumn
            Get
                Return Me.columnunemplyment_wagelimit
            End Get
        End Property
        
        Friend ReadOnly Property stat_codeColumn As DataColumn
            Get
                Return Me.columnstat_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_federal_tax_dtlRow
            Get
                Return CType(Me.Rows(index),pay_tab_federal_tax_dtlRow)
            End Get
        End Property
        
        Public Event pay_tab_federal_tax_dtlRowChanged As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowChanging As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleted As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_federal_tax_dtlRowDeleting As pay_tab_federal_tax_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_federal_tax_dtlRow( _
                    ByVal radif As Short,  _
                    ByVal over_ As Decimal,  _
                    ByVal but_not_over As Decimal,  _
                    ByVal percent_tax As Decimal,  _
                    ByVal dollor_tax As Decimal,  _
                    ByVal id_federal_tax As Integer,  _
                    ByVal withholding_allownce As Decimal,  _
                    ByVal social_sec_employee As Decimal,  _
                    ByVal social_sec_employer As Decimal,  _
                    ByVal social_sec_wagelimit As Decimal,  _
                    ByVal medi_employee As Decimal,  _
                    ByVal medi_employer As Decimal,  _
                    ByVal medi_wagelimit As Decimal,  _
                    ByVal unemplyment_employee As Decimal,  _
                    ByVal unemplyment_employer As Decimal,  _
                    ByVal unemplyment_wagelimit As Decimal,  _
                    ByVal stat_code As String) As pay_tab_federal_tax_dtlRow
            Dim rowpay_tab_federal_tax_dtlRow As pay_tab_federal_tax_dtlRow = CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
            rowpay_tab_federal_tax_dtlRow.ItemArray = New Object() {radif, over_, but_not_over, percent_tax, dollor_tax, id_federal_tax, withholding_allownce, social_sec_employee, social_sec_employer, social_sec_wagelimit, medi_employee, medi_employer, medi_wagelimit, unemplyment_employee, unemplyment_employer, unemplyment_wagelimit, stat_code}
            Me.Rows.Add(rowpay_tab_federal_tax_dtlRow)
            Return rowpay_tab_federal_tax_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_federal_tax_dtlDataTable = CType(MyBase.Clone,pay_tab_federal_tax_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_federal_tax_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnover_ = Me.Columns("over_")
            Me.columnbut_not_over = Me.Columns("but_not_over")
            Me.columnpercent_tax = Me.Columns("percent_tax")
            Me.columndollor_tax = Me.Columns("dollor_tax")
            Me.columnid_federal_tax = Me.Columns("id_federal_tax")
            Me.columnwithholding_allownce = Me.Columns("withholding_allownce")
            Me.columnsocial_sec_employee = Me.Columns("social_sec_employee")
            Me.columnsocial_sec_employer = Me.Columns("social_sec_employer")
            Me.columnsocial_sec_wagelimit = Me.Columns("social_sec_wagelimit")
            Me.columnmedi_employee = Me.Columns("medi_employee")
            Me.columnmedi_employer = Me.Columns("medi_employer")
            Me.columnmedi_wagelimit = Me.Columns("medi_wagelimit")
            Me.columnunemplyment_employee = Me.Columns("unemplyment_employee")
            Me.columnunemplyment_employer = Me.Columns("unemplyment_employer")
            Me.columnunemplyment_wagelimit = Me.Columns("unemplyment_wagelimit")
            Me.columnstat_code = Me.Columns("stat_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnover_ = New DataColumn("over_", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover_)
            Me.columnbut_not_over = New DataColumn("but_not_over", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbut_not_over)
            Me.columnpercent_tax = New DataColumn("percent_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_tax)
            Me.columndollor_tax = New DataColumn("dollor_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndollor_tax)
            Me.columnid_federal_tax = New DataColumn("id_federal_tax", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_federal_tax)
            Me.columnwithholding_allownce = New DataColumn("withholding_allownce", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwithholding_allownce)
            Me.columnsocial_sec_employee = New DataColumn("social_sec_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_employee)
            Me.columnsocial_sec_employer = New DataColumn("social_sec_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_employer)
            Me.columnsocial_sec_wagelimit = New DataColumn("social_sec_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_sec_wagelimit)
            Me.columnmedi_employee = New DataColumn("medi_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_employee)
            Me.columnmedi_employer = New DataColumn("medi_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_employer)
            Me.columnmedi_wagelimit = New DataColumn("medi_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmedi_wagelimit)
            Me.columnunemplyment_employee = New DataColumn("unemplyment_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_employee)
            Me.columnunemplyment_employer = New DataColumn("unemplyment_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_employer)
            Me.columnunemplyment_wagelimit = New DataColumn("unemplyment_wagelimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunemplyment_wagelimit)
            Me.columnstat_code = New DataColumn("stat_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_code)
            Me.columnradif.AllowDBNull = false
            Me.columnid_federal_tax.AllowDBNull = false
            Me.columnstat_code.AllowDBNull = false
        End Sub
        
        Public Function Newpay_tab_federal_tax_dtlRow() As pay_tab_federal_tax_dtlRow
            Return CType(Me.NewRow,pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_federal_tax_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_federal_tax_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanged(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowChanging(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleted(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_federal_tax_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_federal_tax_dtlRowDeleting(Me, New pay_tab_federal_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_federal_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_federal_tax_dtlRow(ByVal row As pay_tab_federal_tax_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRow
        Inherits DataRow
        
        Private tablepay_tab_federal_tax_dtl As pay_tab_federal_tax_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_federal_tax_dtl = CType(Me.Table,pay_tab_federal_tax_dtlDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property over_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.over_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = value
            End Set
        End Property
        
        Public Property but_not_over As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = value
            End Set
        End Property
        
        Public Property percent_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = value
            End Set
        End Property
        
        Public Property dollor_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = value
            End Set
        End Property
        
        Public Property id_federal_tax As Integer
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.id_federal_taxColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.id_federal_taxColumn) = value
            End Set
        End Property
        
        Public Property withholding_allownce As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn) = value
            End Set
        End Property
        
        Public Property social_sec_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn) = value
            End Set
        End Property
        
        Public Property social_sec_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn) = value
            End Set
        End Property
        
        Public Property social_sec_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property medi_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn) = value
            End Set
        End Property
        
        Public Property medi_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn) = value
            End Set
        End Property
        
        Public Property medi_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn) = value
            End Set
        End Property
        
        Public Property unemplyment_wagelimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn) = value
            End Set
        End Property
        
        Public Property stat_code As String
            Get
                Return CType(Me(Me.tablepay_tab_federal_tax_dtl.stat_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_federal_tax_dtl.stat_codeColumn) = value
            End Set
        End Property
        
        Public Function Isover_Null() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.over_Column)
        End Function
        
        Public Sub Setover_Null()
            Me(Me.tablepay_tab_federal_tax_dtl.over_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isbut_not_overNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn)
        End Function
        
        Public Sub Setbut_not_overNull()
            Me(Me.tablepay_tab_federal_tax_dtl.but_not_overColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn)
        End Function
        
        Public Sub Setpercent_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.percent_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdollor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn)
        End Function
        
        Public Sub Setdollor_taxNull()
            Me(Me.tablepay_tab_federal_tax_dtl.dollor_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswithholding_allownceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn)
        End Function
        
        Public Sub Setwithholding_allownceNull()
            Me(Me.tablepay_tab_federal_tax_dtl.withholding_allownceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn)
        End Function
        
        Public Sub Setsocial_sec_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn)
        End Function
        
        Public Sub Setsocial_sec_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_sec_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn)
        End Function
        
        Public Sub Setsocial_sec_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.social_sec_wagelimitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn)
        End Function
        
        Public Sub Setmedi_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn)
        End Function
        
        Public Sub Setmedi_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismedi_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn)
        End Function
        
        Public Sub Setmedi_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.medi_wagelimitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn)
        End Function
        
        Public Sub Setunemplyment_employeeNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn)
        End Function
        
        Public Sub Setunemplyment_employerNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunemplyment_wagelimitNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn)
        End Function
        
        Public Sub Setunemplyment_wagelimitNull()
            Me(Me.tablepay_tab_federal_tax_dtl.unemplyment_wagelimitColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_federal_tax_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_federal_tax_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_federal_tax_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_federal_tax_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnover_ As DataColumn
        
        Private columnbut_not_over As DataColumn
        
        Private columnpercent_tax As DataColumn
        
        Private columnid_state_tax As DataColumn
        
        Private columnstandard_deduction As DataColumn
        
        Private columnpersonal_allowance As DataColumn
        
        Private columndependent_allowance As DataColumn
        
        Private columnstat_code As DataColumn
        
        Private columndollor_tax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_state_tax_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property over_Column As DataColumn
            Get
                Return Me.columnover_
            End Get
        End Property
        
        Friend ReadOnly Property but_not_overColumn As DataColumn
            Get
                Return Me.columnbut_not_over
            End Get
        End Property
        
        Friend ReadOnly Property percent_taxColumn As DataColumn
            Get
                Return Me.columnpercent_tax
            End Get
        End Property
        
        Friend ReadOnly Property id_state_taxColumn As DataColumn
            Get
                Return Me.columnid_state_tax
            End Get
        End Property
        
        Friend ReadOnly Property standard_deductionColumn As DataColumn
            Get
                Return Me.columnstandard_deduction
            End Get
        End Property
        
        Friend ReadOnly Property personal_allowanceColumn As DataColumn
            Get
                Return Me.columnpersonal_allowance
            End Get
        End Property
        
        Friend ReadOnly Property dependent_allowanceColumn As DataColumn
            Get
                Return Me.columndependent_allowance
            End Get
        End Property
        
        Friend ReadOnly Property stat_codeColumn As DataColumn
            Get
                Return Me.columnstat_code
            End Get
        End Property
        
        Friend ReadOnly Property dollor_taxColumn As DataColumn
            Get
                Return Me.columndollor_tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_state_tax_dtlRow
            Get
                Return CType(Me.Rows(index),pay_tab_state_tax_dtlRow)
            End Get
        End Property
        
        Public Event pay_tab_state_tax_dtlRowChanged As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowChanging As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowDeleted As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Event pay_tab_state_tax_dtlRowDeleting As pay_tab_state_tax_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_state_tax_dtlRow(ByVal row As pay_tab_state_tax_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_state_tax_dtlRow(ByVal radif As Short, ByVal over_ As Decimal, ByVal but_not_over As Decimal, ByVal percent_tax As Decimal, ByVal id_state_tax As Integer, ByVal standard_deduction As Decimal, ByVal personal_allowance As Decimal, ByVal dependent_allowance As Decimal, ByVal stat_code As String, ByVal dollor_tax As Decimal) As pay_tab_state_tax_dtlRow
            Dim rowpay_tab_state_tax_dtlRow As pay_tab_state_tax_dtlRow = CType(Me.NewRow,pay_tab_state_tax_dtlRow)
            rowpay_tab_state_tax_dtlRow.ItemArray = New Object() {radif, over_, but_not_over, percent_tax, id_state_tax, standard_deduction, personal_allowance, dependent_allowance, stat_code, dollor_tax}
            Me.Rows.Add(rowpay_tab_state_tax_dtlRow)
            Return rowpay_tab_state_tax_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_state_tax_dtlDataTable = CType(MyBase.Clone,pay_tab_state_tax_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_state_tax_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnover_ = Me.Columns("over_")
            Me.columnbut_not_over = Me.Columns("but_not_over")
            Me.columnpercent_tax = Me.Columns("percent_tax")
            Me.columnid_state_tax = Me.Columns("id_state_tax")
            Me.columnstandard_deduction = Me.Columns("standard_deduction")
            Me.columnpersonal_allowance = Me.Columns("personal_allowance")
            Me.columndependent_allowance = Me.Columns("dependent_allowance")
            Me.columnstat_code = Me.Columns("stat_code")
            Me.columndollor_tax = Me.Columns("dollor_tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnover_ = New DataColumn("over_", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover_)
            Me.columnbut_not_over = New DataColumn("but_not_over", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbut_not_over)
            Me.columnpercent_tax = New DataColumn("percent_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_tax)
            Me.columnid_state_tax = New DataColumn("id_state_tax", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_state_tax)
            Me.columnstandard_deduction = New DataColumn("standard_deduction", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstandard_deduction)
            Me.columnpersonal_allowance = New DataColumn("personal_allowance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpersonal_allowance)
            Me.columndependent_allowance = New DataColumn("dependent_allowance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndependent_allowance)
            Me.columnstat_code = New DataColumn("stat_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstat_code)
            Me.columndollor_tax = New DataColumn("dollor_tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndollor_tax)
            Me.columnradif.AllowDBNull = false
            Me.columnid_state_tax.AllowDBNull = false
            Me.columnstat_code.AllowDBNull = false
        End Sub
        
        Public Function Newpay_tab_state_tax_dtlRow() As pay_tab_state_tax_dtlRow
            Return CType(Me.NewRow,pay_tab_state_tax_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_state_tax_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_state_tax_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_state_tax_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowChanged(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_state_tax_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowChanging(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_state_tax_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowDeleted(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_state_tax_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_state_tax_dtlRowDeleting(Me, New pay_tab_state_tax_dtlRowChangeEvent(CType(e.Row,pay_tab_state_tax_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_state_tax_dtlRow(ByVal row As pay_tab_state_tax_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlRow
        Inherits DataRow
        
        Private tablepay_tab_state_tax_dtl As pay_tab_state_tax_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_state_tax_dtl = CType(Me.Table,pay_tab_state_tax_dtlDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property over_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.over_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.over_Column) = value
            End Set
        End Property
        
        Public Property but_not_over As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn) = value
            End Set
        End Property
        
        Public Property percent_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn) = value
            End Set
        End Property
        
        Public Property id_state_tax As Integer
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.id_state_taxColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.id_state_taxColumn) = value
            End Set
        End Property
        
        Public Property standard_deduction As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn) = value
            End Set
        End Property
        
        Public Property personal_allowance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn) = value
            End Set
        End Property
        
        Public Property dependent_allowance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn) = value
            End Set
        End Property
        
        Public Property stat_code As String
            Get
                Return CType(Me(Me.tablepay_tab_state_tax_dtl.stat_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.stat_codeColumn) = value
            End Set
        End Property
        
        Public Property dollor_tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn) = value
            End Set
        End Property
        
        Public Function Isover_Null() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.over_Column)
        End Function
        
        Public Sub Setover_Null()
            Me(Me.tablepay_tab_state_tax_dtl.over_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isbut_not_overNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.but_not_overColumn)
        End Function
        
        Public Sub Setbut_not_overNull()
            Me(Me.tablepay_tab_state_tax_dtl.but_not_overColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.percent_taxColumn)
        End Function
        
        Public Sub Setpercent_taxNull()
            Me(Me.tablepay_tab_state_tax_dtl.percent_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstandard_deductionNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn)
        End Function
        
        Public Sub Setstandard_deductionNull()
            Me(Me.tablepay_tab_state_tax_dtl.standard_deductionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispersonal_allowanceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn)
        End Function
        
        Public Sub Setpersonal_allowanceNull()
            Me(Me.tablepay_tab_state_tax_dtl.personal_allowanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdependent_allowanceNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn)
        End Function
        
        Public Sub Setdependent_allowanceNull()
            Me(Me.tablepay_tab_state_tax_dtl.dependent_allowanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdollor_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn)
        End Function
        
        Public Sub Setdollor_taxNull()
            Me(Me.tablepay_tab_state_tax_dtl.dollor_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_state_tax_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_state_tax_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_state_tax_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_state_tax_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columnname_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_banks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_banksRow
            Get
                Return CType(Me.Rows(index),bas_banksRow)
            End Get
        End Property
        
        Public Event bas_banksRowChanged As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowChanging As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleted As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleting As bas_banksRowChangeEventHandler
        
        Public Overloads Sub Addbas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_banksRow(ByVal name_bank As String) As bas_banksRow
            Dim rowbas_banksRow As bas_banksRow = CType(Me.NewRow,bas_banksRow)
            rowbas_banksRow.ItemArray = New Object() {Nothing, name_bank}
            Me.Rows.Add(rowbas_banksRow)
            Return rowbas_banksRow
        End Function
        
        Public Function FindByid_bank(ByVal id_bank As Short) As bas_banksRow
            Return CType(Me.Rows.Find(New Object() {id_bank}),bas_banksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_banksDataTable = CType(MyBase.Clone,bas_banksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_banksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnname_bank = Me.Columns("name_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_bank}, true))
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnid_bank.Unique = true
        End Sub
        
        Public Function Newbas_banksRow() As bas_banksRow
            Return CType(Me.NewRow,bas_banksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_banksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_banksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_banksRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanged(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_banksRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanging(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_banksRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleted(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_banksRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleting(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRow
        Inherits DataRow
        
        Private tablebas_banks As bas_banksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_banks = CType(Me.Table,bas_banksDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tablebas_banks.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tablebas_banks.id_bankColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.name_bankColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebas_banks.name_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_banksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_banksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_banksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_pay_period As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnday_work As DataColumn
        
        Private columntime_work As DataColumn
        
        Private columnOther_Pay As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnPayrollDate As DataColumn
        
        Private columnMax_PayrollDate As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_main_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_pay_periodColumn As DataColumn
            Get
                Return Me.columnid_pay_period
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property day_workColumn As DataColumn
            Get
                Return Me.columnday_work
            End Get
        End Property
        
        Friend ReadOnly Property time_workColumn As DataColumn
            Get
                Return Me.columntime_work
            End Get
        End Property
        
        Friend ReadOnly Property Other_PayColumn As DataColumn
            Get
                Return Me.columnOther_Pay
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property PayrollDateColumn As DataColumn
            Get
                Return Me.columnPayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property Max_PayrollDateColumn As DataColumn
            Get
                Return Me.columnMax_PayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_main_employeeRow
            Get
                Return CType(Me.Rows(index),pay_main_employeeRow)
            End Get
        End Property
        
        Public Event pay_main_employeeRowChanged As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowChanging As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleted As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleting As pay_main_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_main_employeeRow(ByVal employee_code As String, ByVal day_work As Decimal, ByVal time_work As Decimal, ByVal Other_Pay As Decimal, ByVal gross_pay As Decimal, ByVal id_check As Integer, ByVal PayrollDate As String, ByVal Max_PayrollDate As String, ByVal no_of_check As String, ByVal FullName As String, ByVal date_of_check As String) As pay_main_employeeRow
            Dim rowpay_main_employeeRow As pay_main_employeeRow = CType(Me.NewRow,pay_main_employeeRow)
            rowpay_main_employeeRow.ItemArray = New Object() {Nothing, employee_code, day_work, time_work, Other_Pay, gross_pay, id_check, PayrollDate, Max_PayrollDate, no_of_check, FullName, date_of_check}
            Me.Rows.Add(rowpay_main_employeeRow)
            Return rowpay_main_employeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As pay_main_employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),pay_main_employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_main_employeeDataTable = CType(MyBase.Clone,pay_main_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_main_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_pay_period = Me.Columns("id_pay_period")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnday_work = Me.Columns("day_work")
            Me.columntime_work = Me.Columns("time_work")
            Me.columnOther_Pay = Me.Columns("Other_Pay")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnPayrollDate = Me.Columns("PayrollDate")
            Me.columnMax_PayrollDate = Me.Columns("Max_PayrollDate")
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columnFullName = Me.Columns("FullName")
            Me.columndate_of_check = Me.Columns("date_of_check")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_pay_period = New DataColumn("id_pay_period", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_pay_period)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnday_work = New DataColumn("day_work", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnday_work)
            Me.columntime_work = New DataColumn("time_work", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_work)
            Me.columnOther_Pay = New DataColumn("Other_Pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Pay)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnPayrollDate = New DataColumn("PayrollDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayrollDate)
            Me.columnMax_PayrollDate = New DataColumn("Max_PayrollDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMax_PayrollDate)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnid_pay_period.AutoIncrement = true
            Me.columnid_pay_period.AllowDBNull = false
            Me.columnid_pay_period.ReadOnly = true
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
        End Sub
        
        Public Function Newpay_main_employeeRow() As pay_main_employeeRow
            Return CType(Me.NewRow,pay_main_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_main_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_main_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_main_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanged(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_main_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanging(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_main_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleted(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_main_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleting(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRow
        Inherits DataRow
        
        Private tablepay_main_employee As pay_main_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_main_employee = CType(Me.Table,pay_main_employeeDataTable)
        End Sub
        
        Public Property id_pay_period As Integer
            Get
                Return CType(Me(Me.tablepay_main_employee.id_pay_periodColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_main_employee.id_pay_periodColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_main_employee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_main_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property day_work As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.day_workColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.day_workColumn) = value
            End Set
        End Property
        
        Public Property time_work As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.time_workColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.time_workColumn) = value
            End Set
        End Property
        
        Public Property Other_Pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.Other_PayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.Other_PayColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.gross_payColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.id_checkColumn) = value
            End Set
        End Property
        
        Public Property PayrollDate As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.PayrollDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.PayrollDateColumn) = value
            End Set
        End Property
        
        Public Property Max_PayrollDate As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.Max_PayrollDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.Max_PayrollDateColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.FullNameColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.date_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Function Isday_workNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.day_workColumn)
        End Function
        
        Public Sub Setday_workNull()
            Me(Me.tablepay_main_employee.day_workColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_workNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.time_workColumn)
        End Function
        
        Public Sub Settime_workNull()
            Me(Me.tablepay_main_employee.time_workColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PayNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.Other_PayColumn)
        End Function
        
        Public Sub SetOther_PayNull()
            Me(Me.tablepay_main_employee.Other_PayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tablepay_main_employee.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tablepay_main_employee.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayrollDateNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.PayrollDateColumn)
        End Function
        
        Public Sub SetPayrollDateNull()
            Me(Me.tablepay_main_employee.PayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMax_PayrollDateNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.Max_PayrollDateColumn)
        End Function
        
        Public Sub SetMax_PayrollDateNull()
            Me(Me.tablepay_main_employee.Max_PayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tablepay_main_employee.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tablepay_main_employee.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tablepay_main_employee.date_of_checkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_main_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_main_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_main_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_advance_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_deduction As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnpay_date As DataColumn
        
        Private columnpay_amount As DataColumn
        
        Private columnactive As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_advance_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property pay_dateColumn As DataColumn
            Get
                Return Me.columnpay_date
            End Get
        End Property
        
        Friend ReadOnly Property pay_amountColumn As DataColumn
            Get
                Return Me.columnpay_amount
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_advance_employeeRow
            Get
                Return CType(Me.Rows(index),pay_advance_employeeRow)
            End Get
        End Property
        
        Public Event pay_advance_employeeRowChanged As pay_advance_employeeRowChangeEventHandler
        
        Public Event pay_advance_employeeRowChanging As pay_advance_employeeRowChangeEventHandler
        
        Public Event pay_advance_employeeRowDeleted As pay_advance_employeeRowChangeEventHandler
        
        Public Event pay_advance_employeeRowDeleting As pay_advance_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_advance_employeeRow(ByVal row As pay_advance_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_advance_employeeRow(ByVal employee_code As String, ByVal pay_date As String, ByVal pay_amount As Decimal, ByVal active As Boolean) As pay_advance_employeeRow
            Dim rowpay_advance_employeeRow As pay_advance_employeeRow = CType(Me.NewRow,pay_advance_employeeRow)
            rowpay_advance_employeeRow.ItemArray = New Object() {Nothing, employee_code, pay_date, pay_amount, active}
            Me.Rows.Add(rowpay_advance_employeeRow)
            Return rowpay_advance_employeeRow
        End Function
        
        Public Function FindByid_deduction(ByVal id_deduction As Integer) As pay_advance_employeeRow
            Return CType(Me.Rows.Find(New Object() {id_deduction}),pay_advance_employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_advance_employeeDataTable = CType(MyBase.Clone,pay_advance_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_advance_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnpay_date = Me.Columns("pay_date")
            Me.columnpay_amount = Me.Columns("pay_amount")
            Me.columnactive = Me.Columns("active")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnpay_date = New DataColumn("pay_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay_date)
            Me.columnpay_amount = New DataColumn("pay_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay_amount)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_deduction}, true))
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
            Me.columnid_deduction.Unique = true
            Me.columnemployee_code.AllowDBNull = false
            Me.columnpay_date.AllowDBNull = false
        End Sub
        
        Public Function Newpay_advance_employeeRow() As pay_advance_employeeRow
            Return CType(Me.NewRow,pay_advance_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_advance_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_advance_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_advance_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_advance_employeeRowChanged(Me, New pay_advance_employeeRowChangeEvent(CType(e.Row,pay_advance_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_advance_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_advance_employeeRowChanging(Me, New pay_advance_employeeRowChangeEvent(CType(e.Row,pay_advance_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_advance_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_advance_employeeRowDeleted(Me, New pay_advance_employeeRowChangeEvent(CType(e.Row,pay_advance_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_advance_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_advance_employeeRowDeleting(Me, New pay_advance_employeeRowChangeEvent(CType(e.Row,pay_advance_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_advance_employeeRow(ByVal row As pay_advance_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_advance_employeeRow
        Inherits DataRow
        
        Private tablepay_advance_employee As pay_advance_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_advance_employee = CType(Me.Table,pay_advance_employeeDataTable)
        End Sub
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_advance_employee.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_advance_employee.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_advance_employee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_advance_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property pay_date As String
            Get
                Return CType(Me(Me.tablepay_advance_employee.pay_dateColumn),String)
            End Get
            Set
                Me(Me.tablepay_advance_employee.pay_dateColumn) = value
            End Set
        End Property
        
        Public Property pay_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_advance_employee.pay_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_advance_employee.pay_amountColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_advance_employee.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_advance_employee.activeColumn) = value
            End Set
        End Property
        
        Public Function Ispay_amountNull() As Boolean
            Return Me.IsNull(Me.tablepay_advance_employee.pay_amountColumn)
        End Function
        
        Public Sub Setpay_amountNull()
            Me(Me.tablepay_advance_employee.pay_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_advance_employee.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_advance_employee.activeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_advance_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_advance_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_advance_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_advance_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnEmployeeFullName As DataColumn
        
        Friend Sub New()
            MyBase.New("employeeCombo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeFullNameColumn As DataColumn
            Get
                Return Me.columnEmployeeFullName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeComboRow
            Get
                Return CType(Me.Rows(index),employeeComboRow)
            End Get
        End Property
        
        Public Event employeeComboRowChanged As employeeComboRowChangeEventHandler
        
        Public Event employeeComboRowChanging As employeeComboRowChangeEventHandler
        
        Public Event employeeComboRowDeleted As employeeComboRowChangeEventHandler
        
        Public Event employeeComboRowDeleting As employeeComboRowChangeEventHandler
        
        Public Overloads Sub AddemployeeComboRow(ByVal row As employeeComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeComboRow(ByVal employee_code As String, ByVal EmployeeFullName As String) As employeeComboRow
            Dim rowemployeeComboRow As employeeComboRow = CType(Me.NewRow,employeeComboRow)
            rowemployeeComboRow.ItemArray = New Object() {employee_code, EmployeeFullName}
            Me.Rows.Add(rowemployeeComboRow)
            Return rowemployeeComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeComboDataTable = CType(MyBase.Clone,employeeComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnEmployeeFullName = Me.Columns("EmployeeFullName")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnEmployeeFullName = New DataColumn("EmployeeFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeFullName)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function NewemployeeComboRow() As employeeComboRow
            Return CType(Me.NewRow,employeeComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeComboRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeComboRowChanged(Me, New employeeComboRowChangeEvent(CType(e.Row,employeeComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeComboRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeComboRowChanging(Me, New employeeComboRowChangeEvent(CType(e.Row,employeeComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeComboRowDeleted(Me, New employeeComboRowChangeEvent(CType(e.Row,employeeComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeComboRowDeleting(Me, New employeeComboRowChangeEvent(CType(e.Row,employeeComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeComboRow(ByVal row As employeeComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeComboRow
        Inherits DataRow
        
        Private tableemployeeCombo As employeeComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployeeCombo = CType(Me.Table,employeeComboDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployeeCombo.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployeeCombo.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property EmployeeFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeCombo.EmployeeFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeCombo.EmployeeFullNameColumn) = value
            End Set
        End Property
        
        Public Function IsEmployeeFullNameNull() As Boolean
            Return Me.IsNull(Me.tableemployeeCombo.EmployeeFullNameColumn)
        End Function
        
        Public Sub SetEmployeeFullNameNull()
            Me(Me.tableemployeeCombo.EmployeeFullNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_BasisComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCode As DataColumn
        
        Private columnDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("Last_BasisCombo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Last_BasisComboRow
            Get
                Return CType(Me.Rows(index),Last_BasisComboRow)
            End Get
        End Property
        
        Public Event Last_BasisComboRowChanged As Last_BasisComboRowChangeEventHandler
        
        Public Event Last_BasisComboRowChanging As Last_BasisComboRowChangeEventHandler
        
        Public Event Last_BasisComboRowDeleted As Last_BasisComboRowChangeEventHandler
        
        Public Event Last_BasisComboRowDeleting As Last_BasisComboRowChangeEventHandler
        
        Public Overloads Sub AddLast_BasisComboRow(ByVal row As Last_BasisComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLast_BasisComboRow(ByVal Code As String, ByVal Desc As String) As Last_BasisComboRow
            Dim rowLast_BasisComboRow As Last_BasisComboRow = CType(Me.NewRow,Last_BasisComboRow)
            rowLast_BasisComboRow.ItemArray = New Object() {Code, Desc}
            Me.Rows.Add(rowLast_BasisComboRow)
            Return rowLast_BasisComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Last_BasisComboDataTable = CType(MyBase.Clone,Last_BasisComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Last_BasisComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCode = Me.Columns("Code")
            Me.columnDesc = Me.Columns("Desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnCode = New DataColumn("Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
        End Sub
        
        Public Function NewLast_BasisComboRow() As Last_BasisComboRow
            Return CType(Me.NewRow,Last_BasisComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Last_BasisComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Last_BasisComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Last_BasisComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Last_BasisComboRowChanged(Me, New Last_BasisComboRowChangeEvent(CType(e.Row,Last_BasisComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Last_BasisComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Last_BasisComboRowChanging(Me, New Last_BasisComboRowChangeEvent(CType(e.Row,Last_BasisComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Last_BasisComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Last_BasisComboRowDeleted(Me, New Last_BasisComboRowChangeEvent(CType(e.Row,Last_BasisComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Last_BasisComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Last_BasisComboRowDeleting(Me, New Last_BasisComboRowChangeEvent(CType(e.Row,Last_BasisComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLast_BasisComboRow(ByVal row As Last_BasisComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_BasisComboRow
        Inherits DataRow
        
        Private tableLast_BasisCombo As Last_BasisComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLast_BasisCombo = CType(Me.Table,Last_BasisComboDataTable)
        End Sub
        
        Public Property Code As String
            Get
                Try 
                    Return CType(Me(Me.tableLast_BasisCombo.CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLast_BasisCombo.CodeColumn) = value
            End Set
        End Property
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableLast_BasisCombo.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLast_BasisCombo.DescColumn) = value
            End Set
        End Property
        
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableLast_BasisCombo.CodeColumn)
        End Function
        
        Public Sub SetCodeNull()
            Me(Me.tableLast_BasisCombo.CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tableLast_BasisCombo.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tableLast_BasisCombo.DescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_BasisComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Last_BasisComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Last_BasisComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Last_BasisComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_PeriodComboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCode As DataColumn
        
        Private columnDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("Last_PeriodCombo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Last_PeriodComboRow
            Get
                Return CType(Me.Rows(index),Last_PeriodComboRow)
            End Get
        End Property
        
        Public Event Last_PeriodComboRowChanged As Last_PeriodComboRowChangeEventHandler
        
        Public Event Last_PeriodComboRowChanging As Last_PeriodComboRowChangeEventHandler
        
        Public Event Last_PeriodComboRowDeleted As Last_PeriodComboRowChangeEventHandler
        
        Public Event Last_PeriodComboRowDeleting As Last_PeriodComboRowChangeEventHandler
        
        Public Overloads Sub AddLast_PeriodComboRow(ByVal row As Last_PeriodComboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLast_PeriodComboRow(ByVal Code As String, ByVal Desc As String) As Last_PeriodComboRow
            Dim rowLast_PeriodComboRow As Last_PeriodComboRow = CType(Me.NewRow,Last_PeriodComboRow)
            rowLast_PeriodComboRow.ItemArray = New Object() {Code, Desc}
            Me.Rows.Add(rowLast_PeriodComboRow)
            Return rowLast_PeriodComboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Last_PeriodComboDataTable = CType(MyBase.Clone,Last_PeriodComboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Last_PeriodComboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCode = Me.Columns("Code")
            Me.columnDesc = Me.Columns("Desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnCode = New DataColumn("Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
        End Sub
        
        Public Function NewLast_PeriodComboRow() As Last_PeriodComboRow
            Return CType(Me.NewRow,Last_PeriodComboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Last_PeriodComboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Last_PeriodComboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Last_PeriodComboRowChangedEvent) Is Nothing) Then
                RaiseEvent Last_PeriodComboRowChanged(Me, New Last_PeriodComboRowChangeEvent(CType(e.Row,Last_PeriodComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Last_PeriodComboRowChangingEvent) Is Nothing) Then
                RaiseEvent Last_PeriodComboRowChanging(Me, New Last_PeriodComboRowChangeEvent(CType(e.Row,Last_PeriodComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Last_PeriodComboRowDeletedEvent) Is Nothing) Then
                RaiseEvent Last_PeriodComboRowDeleted(Me, New Last_PeriodComboRowChangeEvent(CType(e.Row,Last_PeriodComboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Last_PeriodComboRowDeletingEvent) Is Nothing) Then
                RaiseEvent Last_PeriodComboRowDeleting(Me, New Last_PeriodComboRowChangeEvent(CType(e.Row,Last_PeriodComboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLast_PeriodComboRow(ByVal row As Last_PeriodComboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_PeriodComboRow
        Inherits DataRow
        
        Private tableLast_PeriodCombo As Last_PeriodComboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLast_PeriodCombo = CType(Me.Table,Last_PeriodComboDataTable)
        End Sub
        
        Public Property Code As String
            Get
                Try 
                    Return CType(Me(Me.tableLast_PeriodCombo.CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLast_PeriodCombo.CodeColumn) = value
            End Set
        End Property
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableLast_PeriodCombo.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLast_PeriodCombo.DescColumn) = value
            End Set
        End Property
        
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableLast_PeriodCombo.CodeColumn)
        End Function
        
        Public Sub SetCodeNull()
            Me(Me.tableLast_PeriodCombo.CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tableLast_PeriodCombo.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tableLast_PeriodCombo.DescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Last_PeriodComboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Last_PeriodComboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Last_PeriodComboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Last_PeriodComboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnMaxPayrollDate As DataColumn
        
        Private columnlast_period As DataColumn
        
        Private columnlast_basis As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnOther_Pay As DataColumn
        
        Private columnEmployeeFullName As DataColumn
        
        Private columnsalary As DataColumn
        
        Private columnFlagPardakht As DataColumn
        
        Private columnlast_overtime As DataColumn
        
        Private columnlast_status As DataColumn
        
        Private columnAllowance_Federal As DataColumn
        
        Private columnAllowance_state As DataColumn
        
        Private columnAllowance_depndnts As DataColumn
        
        Private columnid_pay_period As DataColumn
        
        Private columntime_work_Hour As DataColumn
        
        Private columntime_work_Minute As DataColumn
        
        Private columntime_work As DataColumn
        
        Private columnPaymentFlag As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property MaxPayrollDateColumn As DataColumn
            Get
                Return Me.columnMaxPayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property last_periodColumn As DataColumn
            Get
                Return Me.columnlast_period
            End Get
        End Property
        
        Friend ReadOnly Property last_basisColumn As DataColumn
            Get
                Return Me.columnlast_basis
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property Other_PayColumn As DataColumn
            Get
                Return Me.columnOther_Pay
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeFullNameColumn As DataColumn
            Get
                Return Me.columnEmployeeFullName
            End Get
        End Property
        
        Friend ReadOnly Property salaryColumn As DataColumn
            Get
                Return Me.columnsalary
            End Get
        End Property
        
        Friend ReadOnly Property FlagPardakhtColumn As DataColumn
            Get
                Return Me.columnFlagPardakht
            End Get
        End Property
        
        Friend ReadOnly Property last_overtimeColumn As DataColumn
            Get
                Return Me.columnlast_overtime
            End Get
        End Property
        
        Friend ReadOnly Property last_statusColumn As DataColumn
            Get
                Return Me.columnlast_status
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_FederalColumn As DataColumn
            Get
                Return Me.columnAllowance_Federal
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_stateColumn As DataColumn
            Get
                Return Me.columnAllowance_state
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_depndntsColumn As DataColumn
            Get
                Return Me.columnAllowance_depndnts
            End Get
        End Property
        
        Friend ReadOnly Property id_pay_periodColumn As DataColumn
            Get
                Return Me.columnid_pay_period
            End Get
        End Property
        
        Friend ReadOnly Property time_work_HourColumn As DataColumn
            Get
                Return Me.columntime_work_Hour
            End Get
        End Property
        
        Friend ReadOnly Property time_work_MinuteColumn As DataColumn
            Get
                Return Me.columntime_work_Minute
            End Get
        End Property
        
        Friend ReadOnly Property time_workColumn As DataColumn
            Get
                Return Me.columntime_work
            End Get
        End Property
        
        Friend ReadOnly Property PaymentFlagColumn As DataColumn
            Get
                Return Me.columnPaymentFlag
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow( _
                    ByVal employee_code As String,  _
                    ByVal MaxPayrollDate As String,  _
                    ByVal last_period As String,  _
                    ByVal last_basis As String,  _
                    ByVal gross_pay As Decimal,  _
                    ByVal Other_Pay As Decimal,  _
                    ByVal EmployeeFullName As String,  _
                    ByVal salary As Decimal,  _
                    ByVal FlagPardakht As Boolean,  _
                    ByVal last_overtime As Decimal,  _
                    ByVal last_status As String,  _
                    ByVal Allowance_Federal As Short,  _
                    ByVal Allowance_state As Short,  _
                    ByVal Allowance_depndnts As Short,  _
                    ByVal id_pay_period As Integer,  _
                    ByVal time_work_Hour As String,  _
                    ByVal time_work_Minute As String,  _
                    ByVal time_work As String,  _
                    ByVal PaymentFlag As Boolean,  _
                    ByVal date_of_check As String,  _
                    ByVal no_of_check As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, MaxPayrollDate, last_period, last_basis, gross_pay, Other_Pay, EmployeeFullName, salary, FlagPardakht, last_overtime, last_status, Allowance_Federal, Allowance_state, Allowance_depndnts, id_pay_period, time_work_Hour, time_work_Minute, time_work, PaymentFlag, date_of_check, no_of_check}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnMaxPayrollDate = Me.Columns("MaxPayrollDate")
            Me.columnlast_period = Me.Columns("last_period")
            Me.columnlast_basis = Me.Columns("last_basis")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnOther_Pay = Me.Columns("Other_Pay")
            Me.columnEmployeeFullName = Me.Columns("EmployeeFullName")
            Me.columnsalary = Me.Columns("salary")
            Me.columnFlagPardakht = Me.Columns("FlagPardakht")
            Me.columnlast_overtime = Me.Columns("last_overtime")
            Me.columnlast_status = Me.Columns("last_status")
            Me.columnAllowance_Federal = Me.Columns("Allowance_Federal")
            Me.columnAllowance_state = Me.Columns("Allowance_state")
            Me.columnAllowance_depndnts = Me.Columns("Allowance_depndnts")
            Me.columnid_pay_period = Me.Columns("id_pay_period")
            Me.columntime_work_Hour = Me.Columns("time_work_Hour")
            Me.columntime_work_Minute = Me.Columns("time_work_Minute")
            Me.columntime_work = Me.Columns("time_work")
            Me.columnPaymentFlag = Me.Columns("PaymentFlag")
            Me.columndate_of_check = Me.Columns("date_of_check")
            Me.columnno_of_check = Me.Columns("no_of_check")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnMaxPayrollDate = New DataColumn("MaxPayrollDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxPayrollDate)
            Me.columnlast_period = New DataColumn("last_period", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_period)
            Me.columnlast_basis = New DataColumn("last_basis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_basis)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnOther_Pay = New DataColumn("Other_Pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Pay)
            Me.columnEmployeeFullName = New DataColumn("EmployeeFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeFullName)
            Me.columnsalary = New DataColumn("salary", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalary)
            Me.columnFlagPardakht = New DataColumn("FlagPardakht", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagPardakht)
            Me.columnlast_overtime = New DataColumn("last_overtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_overtime)
            Me.columnlast_status = New DataColumn("last_status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_status)
            Me.columnAllowance_Federal = New DataColumn("Allowance_Federal", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_Federal)
            Me.columnAllowance_state = New DataColumn("Allowance_state", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_state)
            Me.columnAllowance_depndnts = New DataColumn("Allowance_depndnts", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_depndnts)
            Me.columnid_pay_period = New DataColumn("id_pay_period", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_pay_period)
            Me.columntime_work_Hour = New DataColumn("time_work_Hour", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_work_Hour)
            Me.columntime_work_Minute = New DataColumn("time_work_Minute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_work_Minute)
            Me.columntime_work = New DataColumn("time_work", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_work)
            Me.columnPaymentFlag = New DataColumn("PaymentFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentFlag)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property MaxPayrollDate As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.MaxPayrollDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.MaxPayrollDateColumn) = value
            End Set
        End Property
        
        Public Property last_period As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_periodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_periodColumn) = value
            End Set
        End Property
        
        Public Property last_basis As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_basisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_basisColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.gross_payColumn) = value
            End Set
        End Property
        
        Public Property Other_Pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Other_PayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Other_PayColumn) = value
            End Set
        End Property
        
        Public Property EmployeeFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.EmployeeFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.EmployeeFullNameColumn) = value
            End Set
        End Property
        
        Public Property salary As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.salaryColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.salaryColumn) = value
            End Set
        End Property
        
        Public Property FlagPardakht As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.FlagPardakhtColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.FlagPardakhtColumn) = value
            End Set
        End Property
        
        Public Property last_overtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_overtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_overtimeColumn) = value
            End Set
        End Property
        
        Public Property last_status As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_statusColumn) = value
            End Set
        End Property
        
        Public Property Allowance_Federal As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_FederalColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_FederalColumn) = value
            End Set
        End Property
        
        Public Property Allowance_state As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_stateColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_stateColumn) = value
            End Set
        End Property
        
        Public Property Allowance_depndnts As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_depndntsColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_depndntsColumn) = value
            End Set
        End Property
        
        Public Property id_pay_period As Integer
            Get
                Try 
                    Return CType(Me(Me.tableemployee.id_pay_periodColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.id_pay_periodColumn) = value
            End Set
        End Property
        
        Public Property time_work_Hour As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.time_work_HourColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.time_work_HourColumn) = value
            End Set
        End Property
        
        Public Property time_work_Minute As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.time_work_MinuteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.time_work_MinuteColumn) = value
            End Set
        End Property
        
        Public Property time_work As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.time_workColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.time_workColumn) = value
            End Set
        End Property
        
        Public Property PaymentFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.PaymentFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.PaymentFlagColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.date_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Function IsMaxPayrollDateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.MaxPayrollDateColumn)
        End Function
        
        Public Sub SetMaxPayrollDateNull()
            Me(Me.tableemployee.MaxPayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_periodNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_periodColumn)
        End Function
        
        Public Sub Setlast_periodNull()
            Me(Me.tableemployee.last_periodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_basisNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_basisColumn)
        End Function
        
        Public Sub Setlast_basisNull()
            Me(Me.tableemployee.last_basisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tableemployee.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tableemployee.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PayNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Other_PayColumn)
        End Function
        
        Public Sub SetOther_PayNull()
            Me(Me.tableemployee.Other_PayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmployeeFullNameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.EmployeeFullNameColumn)
        End Function
        
        Public Sub SetEmployeeFullNameNull()
            Me(Me.tableemployee.EmployeeFullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalaryNull() As Boolean
            Return Me.IsNull(Me.tableemployee.salaryColumn)
        End Function
        
        Public Sub SetsalaryNull()
            Me(Me.tableemployee.salaryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagPardakhtNull() As Boolean
            Return Me.IsNull(Me.tableemployee.FlagPardakhtColumn)
        End Function
        
        Public Sub SetFlagPardakhtNull()
            Me(Me.tableemployee.FlagPardakhtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_overtimeNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_overtimeColumn)
        End Function
        
        Public Sub Setlast_overtimeNull()
            Me(Me.tableemployee.last_overtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_statusNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_statusColumn)
        End Function
        
        Public Sub Setlast_statusNull()
            Me(Me.tableemployee.last_statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_FederalNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_FederalColumn)
        End Function
        
        Public Sub SetAllowance_FederalNull()
            Me(Me.tableemployee.Allowance_FederalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_stateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_stateColumn)
        End Function
        
        Public Sub SetAllowance_stateNull()
            Me(Me.tableemployee.Allowance_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_depndntsNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_depndntsColumn)
        End Function
        
        Public Sub SetAllowance_depndntsNull()
            Me(Me.tableemployee.Allowance_depndntsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_pay_periodNull() As Boolean
            Return Me.IsNull(Me.tableemployee.id_pay_periodColumn)
        End Function
        
        Public Sub Setid_pay_periodNull()
            Me(Me.tableemployee.id_pay_periodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_work_HourNull() As Boolean
            Return Me.IsNull(Me.tableemployee.time_work_HourColumn)
        End Function
        
        Public Sub Settime_work_HourNull()
            Me(Me.tableemployee.time_work_HourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_work_MinuteNull() As Boolean
            Return Me.IsNull(Me.tableemployee.time_work_MinuteColumn)
        End Function
        
        Public Sub Settime_work_MinuteNull()
            Me(Me.tableemployee.time_work_MinuteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_workNull() As Boolean
            Return Me.IsNull(Me.tableemployee.time_workColumn)
        End Function
        
        Public Sub Settime_workNull()
            Me(Me.tableemployee.time_workColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentFlagNull() As Boolean
            Return Me.IsNull(Me.tableemployee.PaymentFlagColumn)
        End Function
        
        Public Sub SetPaymentFlagNull()
            Me(Me.tableemployee.PaymentFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableemployee.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tableemployee.date_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableemployee.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tableemployee.no_of_checkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWeekNo As DataColumn
        
        Private columnDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("YearWeeks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property WeekNoColumn As DataColumn
            Get
                Return Me.columnWeekNo
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearWeeksRow
            Get
                Return CType(Me.Rows(index),YearWeeksRow)
            End Get
        End Property
        
        Public Event YearWeeksRowChanged As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowChanging As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowDeleted As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowDeleting As YearWeeksRowChangeEventHandler
        
        Public Overloads Sub AddYearWeeksRow(ByVal row As YearWeeksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddYearWeeksRow(ByVal WeekNo As String, ByVal Desc As String) As YearWeeksRow
            Dim rowYearWeeksRow As YearWeeksRow = CType(Me.NewRow,YearWeeksRow)
            rowYearWeeksRow.ItemArray = New Object() {WeekNo, Desc}
            Me.Rows.Add(rowYearWeeksRow)
            Return rowYearWeeksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As YearWeeksDataTable = CType(MyBase.Clone,YearWeeksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New YearWeeksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnWeekNo = Me.Columns("WeekNo")
            Me.columnDesc = Me.Columns("Desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnWeekNo = New DataColumn("WeekNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekNo)
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
            Me.columnWeekNo.ReadOnly = true
            Me.columnDesc.AllowDBNull = false
        End Sub
        
        Public Function NewYearWeeksRow() As YearWeeksRow
            Return CType(Me.NewRow,YearWeeksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New YearWeeksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(YearWeeksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearWeeksRowChangedEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowChanged(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearWeeksRowChangingEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowChanging(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearWeeksRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowDeleted(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearWeeksRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowDeleting(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveYearWeeksRow(ByVal row As YearWeeksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksRow
        Inherits DataRow
        
        Private tableYearWeeks As YearWeeksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableYearWeeks = CType(Me.Table,YearWeeksDataTable)
        End Sub
        
        Public Property WeekNo As String
            Get
                Try 
                    Return CType(Me(Me.tableYearWeeks.WeekNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearWeeks.WeekNoColumn) = value
            End Set
        End Property
        
        Public Property Desc As String
            Get
                Return CType(Me(Me.tableYearWeeks.DescColumn),String)
            End Get
            Set
                Me(Me.tableYearWeeks.DescColumn) = value
            End Set
        End Property
        
        Public Function IsWeekNoNull() As Boolean
            Return Me.IsNull(Me.tableYearWeeks.WeekNoColumn)
        End Function
        
        Public Sub SetWeekNoNull()
            Me(Me.tableYearWeeks.WeekNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As YearWeeksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As YearWeeksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As YearWeeksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnYearNo As DataColumn
        
        Friend Sub New()
            MyBase.New("Years")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property YearNoColumn As DataColumn
            Get
                Return Me.columnYearNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearsRow
            Get
                Return CType(Me.Rows(index),YearsRow)
            End Get
        End Property
        
        Public Event YearsRowChanged As YearsRowChangeEventHandler
        
        Public Event YearsRowChanging As YearsRowChangeEventHandler
        
        Public Event YearsRowDeleted As YearsRowChangeEventHandler
        
        Public Event YearsRowDeleting As YearsRowChangeEventHandler
        
        Public Overloads Sub AddYearsRow(ByVal row As YearsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddYearsRow(ByVal YearNo As String) As YearsRow
            Dim rowYearsRow As YearsRow = CType(Me.NewRow,YearsRow)
            rowYearsRow.ItemArray = New Object() {YearNo}
            Me.Rows.Add(rowYearsRow)
            Return rowYearsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As YearsDataTable = CType(MyBase.Clone,YearsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New YearsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnYearNo = Me.Columns("YearNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnYearNo = New DataColumn("YearNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearNo)
            Me.columnYearNo.ReadOnly = true
        End Sub
        
        Public Function NewYearsRow() As YearsRow
            Return CType(Me.NewRow,YearsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New YearsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(YearsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearsRowChangedEvent) Is Nothing) Then
                RaiseEvent YearsRowChanged(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearsRowChangingEvent) Is Nothing) Then
                RaiseEvent YearsRowChanging(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearsRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearsRowDeleted(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearsRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearsRowDeleting(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveYearsRow(ByVal row As YearsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsRow
        Inherits DataRow
        
        Private tableYears As YearsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableYears = CType(Me.Table,YearsDataTable)
        End Sub
        
        Public Property YearNo As String
            Get
                Try 
                    Return CType(Me(Me.tableYears.YearNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYears.YearNoColumn) = value
            End Set
        End Property
        
        Public Function IsYearNoNull() As Boolean
            Return Me.IsNull(Me.tableYears.YearNoColumn)
        End Function
        
        Public Sub SetYearNoNull()
            Me(Me.tableYears.YearNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As YearsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As YearsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As YearsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
