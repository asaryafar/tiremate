'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchEmpoyeeBonus
    Inherits DataSet
    
    Private tablepay_main_employee As pay_main_employeeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_main_employee As pay_main_employeeDataTable
        Get
            Return Me.tablepay_main_employee
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchEmpoyeeBonus = CType(MyBase.Clone,DSFrmSearchEmpoyeeBonus)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_main_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_main_employeeDataTable(ds.Tables("pay_main_employee")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_main_employee = CType(Me.Tables("pay_main_employee"),pay_main_employeeDataTable)
        If (Not (Me.tablepay_main_employee) Is Nothing) Then
            Me.tablepay_main_employee.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchEmpoyeeBonus"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchEmpoyeeBonus.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_main_employee = New pay_main_employeeDataTable
        Me.Tables.Add(Me.tablepay_main_employee)
    End Sub
    
    Private Function ShouldSerializepay_main_employee() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_main_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_main_employeeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_pay_period As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnOther_Pay As DataColumn
        
        Private columnPayrollDate As DataColumn
        
        Private columnPaymentFlag As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnNetPay As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_main_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_pay_periodColumn As DataColumn
            Get
                Return Me.columnid_pay_period
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property Other_PayColumn As DataColumn
            Get
                Return Me.columnOther_Pay
            End Get
        End Property
        
        Friend ReadOnly Property PayrollDateColumn As DataColumn
            Get
                Return Me.columnPayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property PaymentFlagColumn As DataColumn
            Get
                Return Me.columnPaymentFlag
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property NetPayColumn As DataColumn
            Get
                Return Me.columnNetPay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_main_employeeRow
            Get
                Return CType(Me.Rows(index),pay_main_employeeRow)
            End Get
        End Property
        
        Public Event pay_main_employeeRowChanged As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowChanging As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleted As pay_main_employeeRowChangeEventHandler
        
        Public Event pay_main_employeeRowDeleting As pay_main_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_main_employeeRow(ByVal employee_code As String, ByVal Other_Pay As Decimal, ByVal PayrollDate As String, ByVal PaymentFlag As Boolean, ByVal l_name As String, ByVal f_name As String, ByVal gross_pay As Decimal, ByVal id_check As Integer, ByVal NetPay As Decimal) As pay_main_employeeRow
            Dim rowpay_main_employeeRow As pay_main_employeeRow = CType(Me.NewRow,pay_main_employeeRow)
            rowpay_main_employeeRow.ItemArray = New Object() {Nothing, employee_code, Other_Pay, PayrollDate, PaymentFlag, l_name, f_name, gross_pay, id_check, NetPay}
            Me.Rows.Add(rowpay_main_employeeRow)
            Return rowpay_main_employeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_main_employeeDataTable = CType(MyBase.Clone,pay_main_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_main_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_pay_period = Me.Columns("id_pay_period")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnOther_Pay = Me.Columns("Other_Pay")
            Me.columnPayrollDate = Me.Columns("PayrollDate")
            Me.columnPaymentFlag = Me.Columns("PaymentFlag")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnf_name = Me.Columns("f_name")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnNetPay = Me.Columns("NetPay")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_pay_period = New DataColumn("id_pay_period", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_pay_period)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnOther_Pay = New DataColumn("Other_Pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Pay)
            Me.columnPayrollDate = New DataColumn("PayrollDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayrollDate)
            Me.columnPaymentFlag = New DataColumn("PaymentFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentFlag)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnNetPay = New DataColumn("NetPay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNetPay)
            Me.columnid_pay_period.AutoIncrement = true
            Me.columnid_pay_period.AllowDBNull = false
            Me.columnid_pay_period.ReadOnly = true
        End Sub
        
        Public Function Newpay_main_employeeRow() As pay_main_employeeRow
            Return CType(Me.NewRow,pay_main_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_main_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_main_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_main_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanged(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_main_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowChanging(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_main_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleted(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_main_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_main_employeeRowDeleting(Me, New pay_main_employeeRowChangeEvent(CType(e.Row,pay_main_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_main_employeeRow(ByVal row As pay_main_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRow
        Inherits DataRow
        
        Private tablepay_main_employee As pay_main_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_main_employee = CType(Me.Table,pay_main_employeeDataTable)
        End Sub
        
        Public Property id_pay_period As Integer
            Get
                Return CType(Me(Me.tablepay_main_employee.id_pay_periodColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_main_employee.id_pay_periodColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property Other_Pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.Other_PayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.Other_PayColumn) = value
            End Set
        End Property
        
        Public Property PayrollDate As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.PayrollDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.PayrollDateColumn) = value
            End Set
        End Property
        
        Public Property PaymentFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.PaymentFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.PaymentFlagColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.l_nameColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.f_nameColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.gross_payColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.id_checkColumn) = value
            End Set
        End Property
        
        Public Property NetPay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_main_employee.NetPayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_main_employee.NetPayColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_main_employee.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PayNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.Other_PayColumn)
        End Function
        
        Public Sub SetOther_PayNull()
            Me(Me.tablepay_main_employee.Other_PayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayrollDateNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.PayrollDateColumn)
        End Function
        
        Public Sub SetPayrollDateNull()
            Me(Me.tablepay_main_employee.PayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentFlagNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.PaymentFlagColumn)
        End Function
        
        Public Sub SetPaymentFlagNull()
            Me(Me.tablepay_main_employee.PaymentFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablepay_main_employee.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablepay_main_employee.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tablepay_main_employee.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tablepay_main_employee.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetPayNull() As Boolean
            Return Me.IsNull(Me.tablepay_main_employee.NetPayColumn)
        End Function
        
        Public Sub SetNetPayNull()
            Me(Me.tablepay_main_employee.NetPayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_main_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_main_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_main_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_main_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
