//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace schedule_manager {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class e_Dataset : DataSet {
        
        private employeeDataTable tableemployee;
        
        public e_Dataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected e_Dataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["employee"] != null)) {
                    this.Tables.Add(new employeeDataTable(ds.Tables["employee"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public employeeDataTable employee {
            get {
                return this.tableemployee;
            }
        }
        
        public override DataSet Clone() {
            e_Dataset cln = ((e_Dataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["employee"] != null)) {
                this.Tables.Add(new employeeDataTable(ds.Tables["employee"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableemployee = ((employeeDataTable)(this.Tables["employee"]));
            if ((this.tableemployee != null)) {
                this.tableemployee.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "e_Dataset";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/e_Dataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableemployee = new employeeDataTable();
            this.Tables.Add(this.tableemployee);
        }
        
        private bool ShouldSerializeemployee() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void employeeRowChangeEventHandler(object sender, employeeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnemployee_code;
            
            private DataColumn columnf_name;
            
            private DataColumn columnm_name;
            
            private DataColumn columnl_name;
            
            internal employeeDataTable() : 
                    base("employee") {
                this.InitClass();
            }
            
            internal employeeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn employee_codeColumn {
                get {
                    return this.columnemployee_code;
                }
            }
            
            internal DataColumn f_nameColumn {
                get {
                    return this.columnf_name;
                }
            }
            
            internal DataColumn m_nameColumn {
                get {
                    return this.columnm_name;
                }
            }
            
            internal DataColumn l_nameColumn {
                get {
                    return this.columnl_name;
                }
            }
            
            public employeeRow this[int index] {
                get {
                    return ((employeeRow)(this.Rows[index]));
                }
            }
            
            public event employeeRowChangeEventHandler employeeRowChanged;
            
            public event employeeRowChangeEventHandler employeeRowChanging;
            
            public event employeeRowChangeEventHandler employeeRowDeleted;
            
            public event employeeRowChangeEventHandler employeeRowDeleting;
            
            public void AddemployeeRow(employeeRow row) {
                this.Rows.Add(row);
            }
            
            public employeeRow AddemployeeRow(string employee_code, string f_name, string m_name, string l_name) {
                employeeRow rowemployeeRow = ((employeeRow)(this.NewRow()));
                rowemployeeRow.ItemArray = new object[] {
                        employee_code,
                        f_name,
                        m_name,
                        l_name};
                this.Rows.Add(rowemployeeRow);
                return rowemployeeRow;
            }
            
            public employeeRow FindByemployee_code(string employee_code) {
                return ((employeeRow)(this.Rows.Find(new object[] {
                            employee_code})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                employeeDataTable cln = ((employeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new employeeDataTable();
            }
            
            internal void InitVars() {
                this.columnemployee_code = this.Columns["employee_code"];
                this.columnf_name = this.Columns["f_name"];
                this.columnm_name = this.Columns["m_name"];
                this.columnl_name = this.Columns["l_name"];
            }
            
            private void InitClass() {
                this.columnemployee_code = new DataColumn("employee_code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemployee_code);
                this.columnf_name = new DataColumn("f_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnf_name);
                this.columnm_name = new DataColumn("m_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnm_name);
                this.columnl_name = new DataColumn("l_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnl_name);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnemployee_code}, true));
                this.columnemployee_code.AllowDBNull = false;
                this.columnemployee_code.Unique = true;
            }
            
            public employeeRow NewemployeeRow() {
                return ((employeeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new employeeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(employeeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.employeeRowChanged != null)) {
                    this.employeeRowChanged(this, new employeeRowChangeEvent(((employeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.employeeRowChanging != null)) {
                    this.employeeRowChanging(this, new employeeRowChangeEvent(((employeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.employeeRowDeleted != null)) {
                    this.employeeRowDeleted(this, new employeeRowChangeEvent(((employeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.employeeRowDeleting != null)) {
                    this.employeeRowDeleting(this, new employeeRowChangeEvent(((employeeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveemployeeRow(employeeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeeRow : DataRow {
            
            private employeeDataTable tableemployee;
            
            internal employeeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableemployee = ((employeeDataTable)(this.Table));
            }
            
            public string employee_code {
                get {
                    return ((string)(this[this.tableemployee.employee_codeColumn]));
                }
                set {
                    this[this.tableemployee.employee_codeColumn] = value;
                }
            }
            
            public string f_name {
                get {
                    try {
                        return ((string)(this[this.tableemployee.f_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployee.f_nameColumn] = value;
                }
            }
            
            public string m_name {
                get {
                    try {
                        return ((string)(this[this.tableemployee.m_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployee.m_nameColumn] = value;
                }
            }
            
            public string l_name {
                get {
                    try {
                        return ((string)(this[this.tableemployee.l_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployee.l_nameColumn] = value;
                }
            }
            
            public bool Isf_nameNull() {
                return this.IsNull(this.tableemployee.f_nameColumn);
            }
            
            public void Setf_nameNull() {
                this[this.tableemployee.f_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Ism_nameNull() {
                return this.IsNull(this.tableemployee.m_nameColumn);
            }
            
            public void Setm_nameNull() {
                this[this.tableemployee.m_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isl_nameNull() {
                return this.IsNull(this.tableemployee.l_nameColumn);
            }
            
            public void Setl_nameNull() {
                this[this.tableemployee.l_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeeRowChangeEvent : EventArgs {
            
            private employeeRow eventRow;
            
            private DataRowAction eventAction;
            
            public employeeRowChangeEvent(employeeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public employeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
