//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace schedule_manager {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class s_DataSet2 : DataSet {
        
        private employeesDataTable tableemployees;
        
        public s_DataSet2() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected s_DataSet2(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["employees"] != null)) {
                    this.Tables.Add(new employeesDataTable(ds.Tables["employees"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public employeesDataTable employees {
            get {
                return this.tableemployees;
            }
        }
        
        public override DataSet Clone() {
            s_DataSet2 cln = ((s_DataSet2)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["employees"] != null)) {
                this.Tables.Add(new employeesDataTable(ds.Tables["employees"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableemployees = ((employeesDataTable)(this.Tables["employees"]));
            if ((this.tableemployees != null)) {
                this.tableemployees.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "s_DataSet2";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/s_DataSet2.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableemployees = new employeesDataTable();
            this.Tables.Add(this.tableemployees);
        }
        
        private bool ShouldSerializeemployees() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void employeesRowChangeEventHandler(object sender, employeesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnemployeeID;
            
            private DataColumn columnemp_name;
            
            private DataColumn columnemp_last_name;
            
            internal employeesDataTable() : 
                    base("employees") {
                this.InitClass();
            }
            
            internal employeesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn employeeIDColumn {
                get {
                    return this.columnemployeeID;
                }
            }
            
            internal DataColumn emp_nameColumn {
                get {
                    return this.columnemp_name;
                }
            }
            
            internal DataColumn emp_last_nameColumn {
                get {
                    return this.columnemp_last_name;
                }
            }
            
            public employeesRow this[int index] {
                get {
                    return ((employeesRow)(this.Rows[index]));
                }
            }
            
            public event employeesRowChangeEventHandler employeesRowChanged;
            
            public event employeesRowChangeEventHandler employeesRowChanging;
            
            public event employeesRowChangeEventHandler employeesRowDeleted;
            
            public event employeesRowChangeEventHandler employeesRowDeleting;
            
            public void AddemployeesRow(employeesRow row) {
                this.Rows.Add(row);
            }
            
            public employeesRow AddemployeesRow(long employeeID, string emp_name, string emp_last_name) {
                employeesRow rowemployeesRow = ((employeesRow)(this.NewRow()));
                rowemployeesRow.ItemArray = new object[] {
                        employeeID,
                        emp_name,
                        emp_last_name};
                this.Rows.Add(rowemployeesRow);
                return rowemployeesRow;
            }
            
            public employeesRow FindByemployeeID(long employeeID) {
                return ((employeesRow)(this.Rows.Find(new object[] {
                            employeeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                employeesDataTable cln = ((employeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new employeesDataTable();
            }
            
            internal void InitVars() {
                this.columnemployeeID = this.Columns["employeeID"];
                this.columnemp_name = this.Columns["emp_name"];
                this.columnemp_last_name = this.Columns["emp_last_name"];
            }
            
            private void InitClass() {
                this.columnemployeeID = new DataColumn("employeeID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemployeeID);
                this.columnemp_name = new DataColumn("emp_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemp_name);
                this.columnemp_last_name = new DataColumn("emp_last_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemp_last_name);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnemployeeID}, true));
                this.columnemployeeID.AllowDBNull = false;
                this.columnemployeeID.Unique = true;
            }
            
            public employeesRow NewemployeesRow() {
                return ((employeesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new employeesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(employeesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.employeesRowChanged != null)) {
                    this.employeesRowChanged(this, new employeesRowChangeEvent(((employeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.employeesRowChanging != null)) {
                    this.employeesRowChanging(this, new employeesRowChangeEvent(((employeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.employeesRowDeleted != null)) {
                    this.employeesRowDeleted(this, new employeesRowChangeEvent(((employeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.employeesRowDeleting != null)) {
                    this.employeesRowDeleting(this, new employeesRowChangeEvent(((employeesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveemployeesRow(employeesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeesRow : DataRow {
            
            private employeesDataTable tableemployees;
            
            internal employeesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableemployees = ((employeesDataTable)(this.Table));
            }
            
            public long employeeID {
                get {
                    return ((long)(this[this.tableemployees.employeeIDColumn]));
                }
                set {
                    this[this.tableemployees.employeeIDColumn] = value;
                }
            }
            
            public string emp_name {
                get {
                    try {
                        return ((string)(this[this.tableemployees.emp_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployees.emp_nameColumn] = value;
                }
            }
            
            public string emp_last_name {
                get {
                    try {
                        return ((string)(this[this.tableemployees.emp_last_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployees.emp_last_nameColumn] = value;
                }
            }
            
            public bool Isemp_nameNull() {
                return this.IsNull(this.tableemployees.emp_nameColumn);
            }
            
            public void Setemp_nameNull() {
                this[this.tableemployees.emp_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isemp_last_nameNull() {
                return this.IsNull(this.tableemployees.emp_last_nameColumn);
            }
            
            public void Setemp_last_nameNull() {
                this[this.tableemployees.emp_last_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class employeesRowChangeEvent : EventArgs {
            
            private employeesRow eventRow;
            
            private DataRowAction eventAction;
            
            public employeesRowChangeEvent(employeesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public employeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
