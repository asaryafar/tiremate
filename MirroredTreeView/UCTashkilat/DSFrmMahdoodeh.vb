'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmMahdoodeh
    Inherits DataSet
    
    Private tabletas_bas_radeh_sazemani As tas_bas_radeh_sazemaniDataTable
    
    Private tabletas_bas_vahed As tas_bas_vahedDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tas_bas_radeh_sazemani")) Is Nothing) Then
                Me.Tables.Add(New tas_bas_radeh_sazemaniDataTable(ds.Tables("tas_bas_radeh_sazemani")))
            End If
            If (Not (ds.Tables("tas_bas_vahed")) Is Nothing) Then
                Me.Tables.Add(New tas_bas_vahedDataTable(ds.Tables("tas_bas_vahed")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tas_bas_radeh_sazemani As tas_bas_radeh_sazemaniDataTable
        Get
            Return Me.tabletas_bas_radeh_sazemani
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tas_bas_vahed As tas_bas_vahedDataTable
        Get
            Return Me.tabletas_bas_vahed
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmMahdoodeh = CType(MyBase.Clone,DSFrmMahdoodeh)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tas_bas_radeh_sazemani")) Is Nothing) Then
            Me.Tables.Add(New tas_bas_radeh_sazemaniDataTable(ds.Tables("tas_bas_radeh_sazemani")))
        End If
        If (Not (ds.Tables("tas_bas_vahed")) Is Nothing) Then
            Me.Tables.Add(New tas_bas_vahedDataTable(ds.Tables("tas_bas_vahed")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletas_bas_radeh_sazemani = CType(Me.Tables("tas_bas_radeh_sazemani"),tas_bas_radeh_sazemaniDataTable)
        If (Not (Me.tabletas_bas_radeh_sazemani) Is Nothing) Then
            Me.tabletas_bas_radeh_sazemani.InitVars
        End If
        Me.tabletas_bas_vahed = CType(Me.Tables("tas_bas_vahed"),tas_bas_vahedDataTable)
        If (Not (Me.tabletas_bas_vahed) Is Nothing) Then
            Me.tabletas_bas_vahed.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmMahdoodeh"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmMahdoodeh.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletas_bas_radeh_sazemani = New tas_bas_radeh_sazemaniDataTable
        Me.Tables.Add(Me.tabletas_bas_radeh_sazemani)
        Me.tabletas_bas_vahed = New tas_bas_vahedDataTable
        Me.Tables.Add(Me.tabletas_bas_vahed)
    End Sub
    
    Private Function ShouldSerializetas_bas_radeh_sazemani() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetas_bas_vahed() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tas_bas_radeh_sazemaniRowChangeEventHandler(ByVal sender As Object, ByVal e As tas_bas_radeh_sazemaniRowChangeEvent)
    
    Public Delegate Sub tas_bas_vahedRowChangeEventHandler(ByVal sender As Object, ByVal e As tas_bas_vahedRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_radeh_sazemaniDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode_radeh_sazemani As DataColumn
        
        Private columndesc_radeh_sazemani As DataColumn
        
        Friend Sub New()
            MyBase.New("tas_bas_radeh_sazemani")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property code_radeh_sazemaniColumn As DataColumn
            Get
                Return Me.columncode_radeh_sazemani
            End Get
        End Property
        
        Friend ReadOnly Property desc_radeh_sazemaniColumn As DataColumn
            Get
                Return Me.columndesc_radeh_sazemani
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tas_bas_radeh_sazemaniRow
            Get
                Return CType(Me.Rows(index),tas_bas_radeh_sazemaniRow)
            End Get
        End Property
        
        Public Event tas_bas_radeh_sazemaniRowChanged As tas_bas_radeh_sazemaniRowChangeEventHandler
        
        Public Event tas_bas_radeh_sazemaniRowChanging As tas_bas_radeh_sazemaniRowChangeEventHandler
        
        Public Event tas_bas_radeh_sazemaniRowDeleted As tas_bas_radeh_sazemaniRowChangeEventHandler
        
        Public Event tas_bas_radeh_sazemaniRowDeleting As tas_bas_radeh_sazemaniRowChangeEventHandler
        
        Public Overloads Sub Addtas_bas_radeh_sazemaniRow(ByVal row As tas_bas_radeh_sazemaniRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtas_bas_radeh_sazemaniRow(ByVal desc_radeh_sazemani As String) As tas_bas_radeh_sazemaniRow
            Dim rowtas_bas_radeh_sazemaniRow As tas_bas_radeh_sazemaniRow = CType(Me.NewRow,tas_bas_radeh_sazemaniRow)
            rowtas_bas_radeh_sazemaniRow.ItemArray = New Object() {Nothing, desc_radeh_sazemani}
            Me.Rows.Add(rowtas_bas_radeh_sazemaniRow)
            Return rowtas_bas_radeh_sazemaniRow
        End Function
        
        Public Function FindBycode_radeh_sazemani(ByVal code_radeh_sazemani As Short) As tas_bas_radeh_sazemaniRow
            Return CType(Me.Rows.Find(New Object() {code_radeh_sazemani}),tas_bas_radeh_sazemaniRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tas_bas_radeh_sazemaniDataTable = CType(MyBase.Clone,tas_bas_radeh_sazemaniDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tas_bas_radeh_sazemaniDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode_radeh_sazemani = Me.Columns("code_radeh_sazemani")
            Me.columndesc_radeh_sazemani = Me.Columns("desc_radeh_sazemani")
        End Sub
        
        Private Sub InitClass()
            Me.columncode_radeh_sazemani = New DataColumn("code_radeh_sazemani", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode_radeh_sazemani)
            Me.columndesc_radeh_sazemani = New DataColumn("desc_radeh_sazemani", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radeh_sazemani)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode_radeh_sazemani}, true))
            Me.columncode_radeh_sazemani.AutoIncrement = true
            Me.columncode_radeh_sazemani.AllowDBNull = false
            Me.columncode_radeh_sazemani.ReadOnly = true
            Me.columncode_radeh_sazemani.Unique = true
            Me.columndesc_radeh_sazemani.AllowDBNull = false
        End Sub
        
        Public Function Newtas_bas_radeh_sazemaniRow() As tas_bas_radeh_sazemaniRow
            Return CType(Me.NewRow,tas_bas_radeh_sazemaniRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tas_bas_radeh_sazemaniRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tas_bas_radeh_sazemaniRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tas_bas_radeh_sazemaniRowChangedEvent) Is Nothing) Then
                RaiseEvent tas_bas_radeh_sazemaniRowChanged(Me, New tas_bas_radeh_sazemaniRowChangeEvent(CType(e.Row,tas_bas_radeh_sazemaniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tas_bas_radeh_sazemaniRowChangingEvent) Is Nothing) Then
                RaiseEvent tas_bas_radeh_sazemaniRowChanging(Me, New tas_bas_radeh_sazemaniRowChangeEvent(CType(e.Row,tas_bas_radeh_sazemaniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tas_bas_radeh_sazemaniRowDeletedEvent) Is Nothing) Then
                RaiseEvent tas_bas_radeh_sazemaniRowDeleted(Me, New tas_bas_radeh_sazemaniRowChangeEvent(CType(e.Row,tas_bas_radeh_sazemaniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tas_bas_radeh_sazemaniRowDeletingEvent) Is Nothing) Then
                RaiseEvent tas_bas_radeh_sazemaniRowDeleting(Me, New tas_bas_radeh_sazemaniRowChangeEvent(CType(e.Row,tas_bas_radeh_sazemaniRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetas_bas_radeh_sazemaniRow(ByVal row As tas_bas_radeh_sazemaniRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_radeh_sazemaniRow
        Inherits DataRow
        
        Private tabletas_bas_radeh_sazemani As tas_bas_radeh_sazemaniDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletas_bas_radeh_sazemani = CType(Me.Table,tas_bas_radeh_sazemaniDataTable)
        End Sub
        
        Public Property code_radeh_sazemani As Short
            Get
                Return CType(Me(Me.tabletas_bas_radeh_sazemani.code_radeh_sazemaniColumn),Short)
            End Get
            Set
                Me(Me.tabletas_bas_radeh_sazemani.code_radeh_sazemaniColumn) = value
            End Set
        End Property
        
        Public Property desc_radeh_sazemani As String
            Get
                Return CType(Me(Me.tabletas_bas_radeh_sazemani.desc_radeh_sazemaniColumn),String)
            End Get
            Set
                Me(Me.tabletas_bas_radeh_sazemani.desc_radeh_sazemaniColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_radeh_sazemaniRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tas_bas_radeh_sazemaniRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tas_bas_radeh_sazemaniRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tas_bas_radeh_sazemaniRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_vahedDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_vahed As DataColumn
        
        Private columndesc_vahed As DataColumn
        
        Friend Sub New()
            MyBase.New("tas_bas_vahed")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_vahedColumn As DataColumn
            Get
                Return Me.columnid_vahed
            End Get
        End Property
        
        Friend ReadOnly Property desc_vahedColumn As DataColumn
            Get
                Return Me.columndesc_vahed
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tas_bas_vahedRow
            Get
                Return CType(Me.Rows(index),tas_bas_vahedRow)
            End Get
        End Property
        
        Public Event tas_bas_vahedRowChanged As tas_bas_vahedRowChangeEventHandler
        
        Public Event tas_bas_vahedRowChanging As tas_bas_vahedRowChangeEventHandler
        
        Public Event tas_bas_vahedRowDeleted As tas_bas_vahedRowChangeEventHandler
        
        Public Event tas_bas_vahedRowDeleting As tas_bas_vahedRowChangeEventHandler
        
        Public Overloads Sub Addtas_bas_vahedRow(ByVal row As tas_bas_vahedRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtas_bas_vahedRow(ByVal desc_vahed As String) As tas_bas_vahedRow
            Dim rowtas_bas_vahedRow As tas_bas_vahedRow = CType(Me.NewRow,tas_bas_vahedRow)
            rowtas_bas_vahedRow.ItemArray = New Object() {Nothing, desc_vahed}
            Me.Rows.Add(rowtas_bas_vahedRow)
            Return rowtas_bas_vahedRow
        End Function
        
        Public Function FindByid_vahed(ByVal id_vahed As Short) As tas_bas_vahedRow
            Return CType(Me.Rows.Find(New Object() {id_vahed}),tas_bas_vahedRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tas_bas_vahedDataTable = CType(MyBase.Clone,tas_bas_vahedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tas_bas_vahedDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_vahed = Me.Columns("id_vahed")
            Me.columndesc_vahed = Me.Columns("desc_vahed")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_vahed = New DataColumn("id_vahed", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vahed)
            Me.columndesc_vahed = New DataColumn("desc_vahed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vahed)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_vahed}, true))
            Me.columnid_vahed.AutoIncrement = true
            Me.columnid_vahed.AllowDBNull = false
            Me.columnid_vahed.ReadOnly = true
            Me.columnid_vahed.Unique = true
            Me.columndesc_vahed.AllowDBNull = false
        End Sub
        
        Public Function Newtas_bas_vahedRow() As tas_bas_vahedRow
            Return CType(Me.NewRow,tas_bas_vahedRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tas_bas_vahedRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tas_bas_vahedRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tas_bas_vahedRowChangedEvent) Is Nothing) Then
                RaiseEvent tas_bas_vahedRowChanged(Me, New tas_bas_vahedRowChangeEvent(CType(e.Row,tas_bas_vahedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tas_bas_vahedRowChangingEvent) Is Nothing) Then
                RaiseEvent tas_bas_vahedRowChanging(Me, New tas_bas_vahedRowChangeEvent(CType(e.Row,tas_bas_vahedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tas_bas_vahedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tas_bas_vahedRowDeleted(Me, New tas_bas_vahedRowChangeEvent(CType(e.Row,tas_bas_vahedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tas_bas_vahedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tas_bas_vahedRowDeleting(Me, New tas_bas_vahedRowChangeEvent(CType(e.Row,tas_bas_vahedRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetas_bas_vahedRow(ByVal row As tas_bas_vahedRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_vahedRow
        Inherits DataRow
        
        Private tabletas_bas_vahed As tas_bas_vahedDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletas_bas_vahed = CType(Me.Table,tas_bas_vahedDataTable)
        End Sub
        
        Public Property id_vahed As Short
            Get
                Return CType(Me(Me.tabletas_bas_vahed.id_vahedColumn),Short)
            End Get
            Set
                Me(Me.tabletas_bas_vahed.id_vahedColumn) = value
            End Set
        End Property
        
        Public Property desc_vahed As String
            Get
                Return CType(Me(Me.tabletas_bas_vahed.desc_vahedColumn),String)
            End Get
            Set
                Me(Me.tabletas_bas_vahed.desc_vahedColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tas_bas_vahedRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tas_bas_vahedRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tas_bas_vahedRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tas_bas_vahedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
