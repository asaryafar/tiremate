'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmFind
    Inherits DataSet
    
    Private tabless As ssDataTable
    
    Private tablekar_personal As kar_personalDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ss")) Is Nothing) Then
                Me.Tables.Add(New ssDataTable(ds.Tables("ss")))
            End If
            If (Not (ds.Tables("kar_personal")) Is Nothing) Then
                Me.Tables.Add(New kar_personalDataTable(ds.Tables("kar_personal")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ss As ssDataTable
        Get
            Return Me.tabless
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property kar_personal As kar_personalDataTable
        Get
            Return Me.tablekar_personal
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmFind = CType(MyBase.Clone,DSFrmFind)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ss")) Is Nothing) Then
            Me.Tables.Add(New ssDataTable(ds.Tables("ss")))
        End If
        If (Not (ds.Tables("kar_personal")) Is Nothing) Then
            Me.Tables.Add(New kar_personalDataTable(ds.Tables("kar_personal")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabless = CType(Me.Tables("ss"),ssDataTable)
        If (Not (Me.tabless) Is Nothing) Then
            Me.tabless.InitVars
        End If
        Me.tablekar_personal = CType(Me.Tables("kar_personal"),kar_personalDataTable)
        If (Not (Me.tablekar_personal) Is Nothing) Then
            Me.tablekar_personal.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmFind"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmFind.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabless = New ssDataTable
        Me.Tables.Add(Me.tabless)
        Me.tablekar_personal = New kar_personalDataTable
        Me.Tables.Add(Me.tablekar_personal)
    End Sub
    
    Private Function ShouldSerializess() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializekar_personal() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ssRowChangeEventHandler(ByVal sender As Object, ByVal e As ssRowChangeEvent)
    
    Public Delegate Sub kar_personalRowChangeEventHandler(ByVal sender As Object, ByVal e As kar_personalRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ssDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columndescript As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Friend Sub New()
            MyBase.New("ss")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property descriptColumn As DataColumn
            Get
                Return Me.columndescript
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ssRow
            Get
                Return CType(Me.Rows(index),ssRow)
            End Get
        End Property
        
        Public Event ssRowChanged As ssRowChangeEventHandler
        
        Public Event ssRowChanging As ssRowChangeEventHandler
        
        Public Event ssRowDeleted As ssRowChangeEventHandler
        
        Public Event ssRowDeleting As ssRowChangeEventHandler
        
        Public Overloads Sub AddssRow(ByVal row As ssRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddssRow(ByVal code As String, ByVal descript As String, ByVal one As String, ByVal two As String, ByVal three As String) As ssRow
            Dim rowssRow As ssRow = CType(Me.NewRow,ssRow)
            rowssRow.ItemArray = New Object() {code, descript, one, two, three, Nothing, Nothing}
            Me.Rows.Add(rowssRow)
            Return rowssRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ssDataTable = CType(MyBase.Clone,ssDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ssDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columndescript = Me.Columns("descript")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columndescript = New DataColumn("descript", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescript)
            Me.columnone = New DataColumn("one", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
            Me.columncode.AllowDBNull = false
            Me.columnfour.AutoIncrement = true
            Me.columnfour.ReadOnly = true
            Me.columnfive.AutoIncrement = true
            Me.columnfive.ReadOnly = true
        End Sub
        
        Public Function NewssRow() As ssRow
            Return CType(Me.NewRow,ssRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ssRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ssRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ssRowChangedEvent) Is Nothing) Then
                RaiseEvent ssRowChanged(Me, New ssRowChangeEvent(CType(e.Row,ssRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ssRowChangingEvent) Is Nothing) Then
                RaiseEvent ssRowChanging(Me, New ssRowChangeEvent(CType(e.Row,ssRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ssRowDeletedEvent) Is Nothing) Then
                RaiseEvent ssRowDeleted(Me, New ssRowChangeEvent(CType(e.Row,ssRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ssRowDeletingEvent) Is Nothing) Then
                RaiseEvent ssRowDeleting(Me, New ssRowChangeEvent(CType(e.Row,ssRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovessRow(ByVal row As ssRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ssRow
        Inherits DataRow
        
        Private tabless As ssDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabless = CType(Me.Table,ssDataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tabless.codeColumn),String)
            End Get
            Set
                Me(Me.tabless.codeColumn) = value
            End Set
        End Property
        
        Public Property descript As String
            Get
                Try 
                    Return CType(Me(Me.tabless.descriptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.descriptColumn) = value
            End Set
        End Property
        
        Public Property one As String
            Get
                Try 
                    Return CType(Me(Me.tabless.oneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.oneColumn) = value
            End Set
        End Property
        
        Public Property two As String
            Get
                Try 
                    Return CType(Me(Me.tabless.twoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.twoColumn) = value
            End Set
        End Property
        
        Public Property three As String
            Get
                Try 
                    Return CType(Me(Me.tabless.threeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.threeColumn) = value
            End Set
        End Property
        
        Public Property four As Integer
            Get
                Try 
                    Return CType(Me(Me.tabless.fourColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.fourColumn) = value
            End Set
        End Property
        
        Public Property five As Integer
            Get
                Try 
                    Return CType(Me(Me.tabless.fiveColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabless.fiveColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptNull() As Boolean
            Return Me.IsNull(Me.tabless.descriptColumn)
        End Function
        
        Public Sub SetdescriptNull()
            Me(Me.tabless.descriptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tabless.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tabless.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tabless.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tabless.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tabless.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tabless.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tabless.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tabless.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tabless.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tabless.fiveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ssRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ssRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ssRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ssRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class kar_personalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columndscript As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Friend Sub New()
            MyBase.New("kar_personal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property dscriptColumn As DataColumn
            Get
                Return Me.columndscript
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As kar_personalRow
            Get
                Return CType(Me.Rows(index),kar_personalRow)
            End Get
        End Property
        
        Public Event kar_personalRowChanged As kar_personalRowChangeEventHandler
        
        Public Event kar_personalRowChanging As kar_personalRowChangeEventHandler
        
        Public Event kar_personalRowDeleted As kar_personalRowChangeEventHandler
        
        Public Event kar_personalRowDeleting As kar_personalRowChangeEventHandler
        
        Public Overloads Sub Addkar_personalRow(ByVal row As kar_personalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addkar_personalRow(ByVal code As String, ByVal dscript As String, ByVal one As String, ByVal two As String, ByVal three As String, ByVal four As String, ByVal five As String) As kar_personalRow
            Dim rowkar_personalRow As kar_personalRow = CType(Me.NewRow,kar_personalRow)
            rowkar_personalRow.ItemArray = New Object() {code, dscript, one, two, three, four, five}
            Me.Rows.Add(rowkar_personalRow)
            Return rowkar_personalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As kar_personalDataTable = CType(MyBase.Clone,kar_personalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New kar_personalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columndscript = Me.Columns("dscript")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columndscript = New DataColumn("dscript", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndscript)
            Me.columnone = New DataColumn("one", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
        End Sub
        
        Public Function Newkar_personalRow() As kar_personalRow
            Return CType(Me.NewRow,kar_personalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New kar_personalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(kar_personalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.kar_personalRowChangedEvent) Is Nothing) Then
                RaiseEvent kar_personalRowChanged(Me, New kar_personalRowChangeEvent(CType(e.Row,kar_personalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.kar_personalRowChangingEvent) Is Nothing) Then
                RaiseEvent kar_personalRowChanging(Me, New kar_personalRowChangeEvent(CType(e.Row,kar_personalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.kar_personalRowDeletedEvent) Is Nothing) Then
                RaiseEvent kar_personalRowDeleted(Me, New kar_personalRowChangeEvent(CType(e.Row,kar_personalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.kar_personalRowDeletingEvent) Is Nothing) Then
                RaiseEvent kar_personalRowDeleting(Me, New kar_personalRowChangeEvent(CType(e.Row,kar_personalRow), e.Action))
            End If
        End Sub
        
        Public Sub Removekar_personalRow(ByVal row As kar_personalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class kar_personalRow
        Inherits DataRow
        
        Private tablekar_personal As kar_personalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablekar_personal = CType(Me.Table,kar_personalDataTable)
        End Sub
        
        Public Property code As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.codeColumn) = value
            End Set
        End Property
        
        Public Property dscript As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.dscriptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.dscriptColumn) = value
            End Set
        End Property
        
        Public Property one As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.oneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.oneColumn) = value
            End Set
        End Property
        
        Public Property two As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.twoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.twoColumn) = value
            End Set
        End Property
        
        Public Property three As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.threeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.threeColumn) = value
            End Set
        End Property
        
        Public Property four As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.fourColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.fourColumn) = value
            End Set
        End Property
        
        Public Property five As String
            Get
                Try 
                    Return CType(Me(Me.tablekar_personal.fiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekar_personal.fiveColumn) = value
            End Set
        End Property
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tablekar_personal.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdscriptNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.dscriptColumn)
        End Function
        
        Public Sub SetdscriptNull()
            Me(Me.tablekar_personal.dscriptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tablekar_personal.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tablekar_personal.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tablekar_personal.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tablekar_personal.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tablekar_personal.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tablekar_personal.fiveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class kar_personalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As kar_personalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As kar_personalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As kar_personalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
