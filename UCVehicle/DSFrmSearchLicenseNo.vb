'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchLicenseNo
    Inherits DataSet
    
    Private tableser_tr_vehicle As ser_tr_vehicleDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ser_tr_vehicle")) Is Nothing) Then
                Me.Tables.Add(New ser_tr_vehicleDataTable(ds.Tables("ser_tr_vehicle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ser_tr_vehicle As ser_tr_vehicleDataTable
        Get
            Return Me.tableser_tr_vehicle
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchLicenseNo = CType(MyBase.Clone,DSFrmSearchLicenseNo)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ser_tr_vehicle")) Is Nothing) Then
            Me.Tables.Add(New ser_tr_vehicleDataTable(ds.Tables("ser_tr_vehicle")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableser_tr_vehicle = CType(Me.Tables("ser_tr_vehicle"),ser_tr_vehicleDataTable)
        If (Not (Me.tableser_tr_vehicle) Is Nothing) Then
            Me.tableser_tr_vehicle.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchLicenseNo"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchLicenseNo.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableser_tr_vehicle = New ser_tr_vehicleDataTable
        Me.Tables.Add(Me.tableser_tr_vehicle)
    End Sub
    
    Private Function ShouldSerializeser_tr_vehicle() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ser_tr_vehicleRowChangeEventHandler(ByVal sender As Object, ByVal e As ser_tr_vehicleRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ser_tr_vehicleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerName As DataColumn
        
        Private columnid_vehicle As DataColumn
        
        Private columnlicense_no_vehicle As DataColumn
        
        Private columnvin As DataColumn
        
        Private columndesc_make As DataColumn
        
        Private columndesc_model As DataColumn
        
        Private columnmake_year As DataColumn
        
        Private columndesc_color As DataColumn
        
        Private columnCurrent_Mileage As DataColumn
        
        Private columncod_vehicle As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnunit_no As DataColumn
        
        Private columnvehicle_active As DataColumn
        
        Friend Sub New()
            MyBase.New("ser_tr_vehicle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerNameColumn As DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Friend ReadOnly Property id_vehicleColumn As DataColumn
            Get
                Return Me.columnid_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property license_no_vehicleColumn As DataColumn
            Get
                Return Me.columnlicense_no_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property vinColumn As DataColumn
            Get
                Return Me.columnvin
            End Get
        End Property
        
        Friend ReadOnly Property desc_makeColumn As DataColumn
            Get
                Return Me.columndesc_make
            End Get
        End Property
        
        Friend ReadOnly Property desc_modelColumn As DataColumn
            Get
                Return Me.columndesc_model
            End Get
        End Property
        
        Friend ReadOnly Property make_yearColumn As DataColumn
            Get
                Return Me.columnmake_year
            End Get
        End Property
        
        Friend ReadOnly Property desc_colorColumn As DataColumn
            Get
                Return Me.columndesc_color
            End Get
        End Property
        
        Friend ReadOnly Property Current_MileageColumn As DataColumn
            Get
                Return Me.columnCurrent_Mileage
            End Get
        End Property
        
        Friend ReadOnly Property cod_vehicleColumn As DataColumn
            Get
                Return Me.columncod_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property unit_noColumn As DataColumn
            Get
                Return Me.columnunit_no
            End Get
        End Property
        
        Friend ReadOnly Property vehicle_activeColumn As DataColumn
            Get
                Return Me.columnvehicle_active
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ser_tr_vehicleRow
            Get
                Return CType(Me.Rows(index),ser_tr_vehicleRow)
            End Get
        End Property
        
        Public Event ser_tr_vehicleRowChanged As ser_tr_vehicleRowChangeEventHandler
        
        Public Event ser_tr_vehicleRowChanging As ser_tr_vehicleRowChangeEventHandler
        
        Public Event ser_tr_vehicleRowDeleted As ser_tr_vehicleRowChangeEventHandler
        
        Public Event ser_tr_vehicleRowDeleting As ser_tr_vehicleRowChangeEventHandler
        
        Public Overloads Sub Addser_tr_vehicleRow(ByVal row As ser_tr_vehicleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addser_tr_vehicleRow(ByVal CustomerName As String, ByVal license_no_vehicle As String, ByVal vin As String, ByVal desc_make As String, ByVal desc_model As String, ByVal make_year As String, ByVal desc_color As String, ByVal Current_Mileage As Single, ByVal cod_vehicle As String, ByVal cod_customer As String, ByVal complete_name As String, ByVal l_name As String, ByVal unit_no As String, ByVal vehicle_active As Boolean) As ser_tr_vehicleRow
            Dim rowser_tr_vehicleRow As ser_tr_vehicleRow = CType(Me.NewRow,ser_tr_vehicleRow)
            rowser_tr_vehicleRow.ItemArray = New Object() {CustomerName, Nothing, license_no_vehicle, vin, desc_make, desc_model, make_year, desc_color, Current_Mileage, cod_vehicle, cod_customer, complete_name, l_name, unit_no, vehicle_active}
            Me.Rows.Add(rowser_tr_vehicleRow)
            Return rowser_tr_vehicleRow
        End Function
        
        Public Function FindByid_vehicle(ByVal id_vehicle As Integer) As ser_tr_vehicleRow
            Return CType(Me.Rows.Find(New Object() {id_vehicle}),ser_tr_vehicleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ser_tr_vehicleDataTable = CType(MyBase.Clone,ser_tr_vehicleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ser_tr_vehicleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerName = Me.Columns("CustomerName")
            Me.columnid_vehicle = Me.Columns("id_vehicle")
            Me.columnlicense_no_vehicle = Me.Columns("license_no_vehicle")
            Me.columnvin = Me.Columns("vin")
            Me.columndesc_make = Me.Columns("desc_make")
            Me.columndesc_model = Me.Columns("desc_model")
            Me.columnmake_year = Me.Columns("make_year")
            Me.columndesc_color = Me.Columns("desc_color")
            Me.columnCurrent_Mileage = Me.Columns("Current_Mileage")
            Me.columncod_vehicle = Me.Columns("cod_vehicle")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnunit_no = Me.Columns("unit_no")
            Me.columnvehicle_active = Me.Columns("vehicle_active")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerName = New DataColumn("CustomerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerName)
            Me.columnid_vehicle = New DataColumn("id_vehicle", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vehicle)
            Me.columnlicense_no_vehicle = New DataColumn("license_no_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlicense_no_vehicle)
            Me.columnvin = New DataColumn("vin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvin)
            Me.columndesc_make = New DataColumn("desc_make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_make)
            Me.columndesc_model = New DataColumn("desc_model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_model)
            Me.columnmake_year = New DataColumn("make_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake_year)
            Me.columndesc_color = New DataColumn("desc_color", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_color)
            Me.columnCurrent_Mileage = New DataColumn("Current_Mileage", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurrent_Mileage)
            Me.columncod_vehicle = New DataColumn("cod_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vehicle)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnunit_no = New DataColumn("unit_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_no)
            Me.columnvehicle_active = New DataColumn("vehicle_active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvehicle_active)
            Me.Constraints.Add(New UniqueConstraint("DSFrmSearchLicenseNoKey1", New DataColumn() {Me.columnid_vehicle}, true))
            Me.columnCustomerName.ReadOnly = true
            Me.columnid_vehicle.AutoIncrement = true
            Me.columnid_vehicle.AllowDBNull = false
            Me.columnid_vehicle.ReadOnly = true
            Me.columnid_vehicle.Unique = true
            Me.columnlicense_no_vehicle.AllowDBNull = false
        End Sub
        
        Public Function Newser_tr_vehicleRow() As ser_tr_vehicleRow
            Return CType(Me.NewRow,ser_tr_vehicleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ser_tr_vehicleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ser_tr_vehicleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ser_tr_vehicleRowChangedEvent) Is Nothing) Then
                RaiseEvent ser_tr_vehicleRowChanged(Me, New ser_tr_vehicleRowChangeEvent(CType(e.Row,ser_tr_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ser_tr_vehicleRowChangingEvent) Is Nothing) Then
                RaiseEvent ser_tr_vehicleRowChanging(Me, New ser_tr_vehicleRowChangeEvent(CType(e.Row,ser_tr_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ser_tr_vehicleRowDeletedEvent) Is Nothing) Then
                RaiseEvent ser_tr_vehicleRowDeleted(Me, New ser_tr_vehicleRowChangeEvent(CType(e.Row,ser_tr_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ser_tr_vehicleRowDeletingEvent) Is Nothing) Then
                RaiseEvent ser_tr_vehicleRowDeleting(Me, New ser_tr_vehicleRowChangeEvent(CType(e.Row,ser_tr_vehicleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeser_tr_vehicleRow(ByVal row As ser_tr_vehicleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ser_tr_vehicleRow
        Inherits DataRow
        
        Private tableser_tr_vehicle As ser_tr_vehicleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableser_tr_vehicle = CType(Me.Table,ser_tr_vehicleDataTable)
        End Sub
        
        Public Property CustomerName As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.CustomerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property id_vehicle As Integer
            Get
                Return CType(Me(Me.tableser_tr_vehicle.id_vehicleColumn),Integer)
            End Get
            Set
                Me(Me.tableser_tr_vehicle.id_vehicleColumn) = value
            End Set
        End Property
        
        Public Property license_no_vehicle As String
            Get
                Return CType(Me(Me.tableser_tr_vehicle.license_no_vehicleColumn),String)
            End Get
            Set
                Me(Me.tableser_tr_vehicle.license_no_vehicleColumn) = value
            End Set
        End Property
        
        Public Property vin As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.vinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.vinColumn) = value
            End Set
        End Property
        
        Public Property desc_make As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.desc_makeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.desc_makeColumn) = value
            End Set
        End Property
        
        Public Property desc_model As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.desc_modelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.desc_modelColumn) = value
            End Set
        End Property
        
        Public Property make_year As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.make_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.make_yearColumn) = value
            End Set
        End Property
        
        Public Property desc_color As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.desc_colorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.desc_colorColumn) = value
            End Set
        End Property
        
        Public Property Current_Mileage As Single
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.Current_MileageColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.Current_MileageColumn) = value
            End Set
        End Property
        
        Public Property cod_vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.cod_vehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.cod_vehicleColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.l_nameColumn) = value
            End Set
        End Property
        
        Public Property unit_no As String
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.unit_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.unit_noColumn) = value
            End Set
        End Property
        
        Public Property vehicle_active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableser_tr_vehicle.vehicle_activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableser_tr_vehicle.vehicle_activeColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.CustomerNameColumn)
        End Function
        
        Public Sub SetCustomerNameNull()
            Me(Me.tableser_tr_vehicle.CustomerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvinNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.vinColumn)
        End Function
        
        Public Sub SetvinNull()
            Me(Me.tableser_tr_vehicle.vinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_makeNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.desc_makeColumn)
        End Function
        
        Public Sub Setdesc_makeNull()
            Me(Me.tableser_tr_vehicle.desc_makeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_modelNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.desc_modelColumn)
        End Function
        
        Public Sub Setdesc_modelNull()
            Me(Me.tableser_tr_vehicle.desc_modelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismake_yearNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.make_yearColumn)
        End Function
        
        Public Sub Setmake_yearNull()
            Me(Me.tableser_tr_vehicle.make_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_colorNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.desc_colorColumn)
        End Function
        
        Public Sub Setdesc_colorNull()
            Me(Me.tableser_tr_vehicle.desc_colorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurrent_MileageNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.Current_MileageColumn)
        End Function
        
        Public Sub SetCurrent_MileageNull()
            Me(Me.tableser_tr_vehicle.Current_MileageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.cod_vehicleColumn)
        End Function
        
        Public Sub Setcod_vehicleNull()
            Me(Me.tableser_tr_vehicle.cod_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableser_tr_vehicle.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableser_tr_vehicle.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tableser_tr_vehicle.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_noNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.unit_noColumn)
        End Function
        
        Public Sub Setunit_noNull()
            Me(Me.tableser_tr_vehicle.unit_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvehicle_activeNull() As Boolean
            Return Me.IsNull(Me.tableser_tr_vehicle.vehicle_activeColumn)
        End Function
        
        Public Sub Setvehicle_activeNull()
            Me(Me.tableser_tr_vehicle.vehicle_activeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ser_tr_vehicleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ser_tr_vehicleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ser_tr_vehicleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ser_tr_vehicleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
