'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSInv_tab_pakage
    Inherits DataSet
    
    Private tableinv_tab_pakage_head As inv_tab_pakage_headDataTable
    
    Private tableinv_tab_pakage As inv_tab_pakageDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_pakage_head")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_pakage_headDataTable(ds.Tables("inv_tab_pakage_head")))
            End If
            If (Not (ds.Tables("inv_tab_pakage")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_pakageDataTable(ds.Tables("inv_tab_pakage")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_pakage_head As inv_tab_pakage_headDataTable
        Get
            Return Me.tableinv_tab_pakage_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_pakage As inv_tab_pakageDataTable
        Get
            Return Me.tableinv_tab_pakage
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSInv_tab_pakage = CType(MyBase.Clone,DSInv_tab_pakage)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_pakage_head")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_pakage_headDataTable(ds.Tables("inv_tab_pakage_head")))
        End If
        If (Not (ds.Tables("inv_tab_pakage")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_pakageDataTable(ds.Tables("inv_tab_pakage")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_pakage_head = CType(Me.Tables("inv_tab_pakage_head"),inv_tab_pakage_headDataTable)
        If (Not (Me.tableinv_tab_pakage_head) Is Nothing) Then
            Me.tableinv_tab_pakage_head.InitVars
        End If
        Me.tableinv_tab_pakage = CType(Me.Tables("inv_tab_pakage"),inv_tab_pakageDataTable)
        If (Not (Me.tableinv_tab_pakage) Is Nothing) Then
            Me.tableinv_tab_pakage.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSInv_tab_pakage"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSInv_tab_pakage.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_pakage_head = New inv_tab_pakage_headDataTable
        Me.Tables.Add(Me.tableinv_tab_pakage_head)
        Me.tableinv_tab_pakage = New inv_tab_pakageDataTable
        Me.Tables.Add(Me.tableinv_tab_pakage)
    End Sub
    
    Private Function ShouldSerializeinv_tab_pakage_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_pakage() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_pakage_headRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_pakage_headRowChangeEvent)
    
    Public Delegate Sub inv_tab_pakageRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_pakageRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakage_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_pakage As DataColumn
        
        Private columndesc_pakage As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_pakage_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_pakageColumn As DataColumn
            Get
                Return Me.columncod_pakage
            End Get
        End Property
        
        Friend ReadOnly Property desc_pakageColumn As DataColumn
            Get
                Return Me.columndesc_pakage
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_pakage_headRow
            Get
                Return CType(Me.Rows(index),inv_tab_pakage_headRow)
            End Get
        End Property
        
        Public Event inv_tab_pakage_headRowChanged As inv_tab_pakage_headRowChangeEventHandler
        
        Public Event inv_tab_pakage_headRowChanging As inv_tab_pakage_headRowChangeEventHandler
        
        Public Event inv_tab_pakage_headRowDeleted As inv_tab_pakage_headRowChangeEventHandler
        
        Public Event inv_tab_pakage_headRowDeleting As inv_tab_pakage_headRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_pakage_headRow(ByVal row As inv_tab_pakage_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_pakage_headRow(ByVal cod_pakage As String, ByVal desc_pakage As String) As inv_tab_pakage_headRow
            Dim rowinv_tab_pakage_headRow As inv_tab_pakage_headRow = CType(Me.NewRow,inv_tab_pakage_headRow)
            rowinv_tab_pakage_headRow.ItemArray = New Object() {cod_pakage, desc_pakage}
            Me.Rows.Add(rowinv_tab_pakage_headRow)
            Return rowinv_tab_pakage_headRow
        End Function
        
        Public Function FindBycod_pakage(ByVal cod_pakage As String) As inv_tab_pakage_headRow
            Return CType(Me.Rows.Find(New Object() {cod_pakage}),inv_tab_pakage_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_pakage_headDataTable = CType(MyBase.Clone,inv_tab_pakage_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_pakage_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_pakage = Me.Columns("cod_pakage")
            Me.columndesc_pakage = Me.Columns("desc_pakage")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_pakage = New DataColumn("cod_pakage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_pakage)
            Me.columndesc_pakage = New DataColumn("desc_pakage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_pakage)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_pakage}, true))
            Me.columncod_pakage.AllowDBNull = false
            Me.columncod_pakage.Unique = true
        End Sub
        
        Public Function Newinv_tab_pakage_headRow() As inv_tab_pakage_headRow
            Return CType(Me.NewRow,inv_tab_pakage_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_pakage_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_pakage_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_pakage_headRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakage_headRowChanged(Me, New inv_tab_pakage_headRowChangeEvent(CType(e.Row,inv_tab_pakage_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_pakage_headRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakage_headRowChanging(Me, New inv_tab_pakage_headRowChangeEvent(CType(e.Row,inv_tab_pakage_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_pakage_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakage_headRowDeleted(Me, New inv_tab_pakage_headRowChangeEvent(CType(e.Row,inv_tab_pakage_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_pakage_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakage_headRowDeleting(Me, New inv_tab_pakage_headRowChangeEvent(CType(e.Row,inv_tab_pakage_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_pakage_headRow(ByVal row As inv_tab_pakage_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakage_headRow
        Inherits DataRow
        
        Private tableinv_tab_pakage_head As inv_tab_pakage_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_pakage_head = CType(Me.Table,inv_tab_pakage_headDataTable)
        End Sub
        
        Public Property cod_pakage As String
            Get
                Return CType(Me(Me.tableinv_tab_pakage_head.cod_pakageColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_pakage_head.cod_pakageColumn) = value
            End Set
        End Property
        
        Public Property desc_pakage As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage_head.desc_pakageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage_head.desc_pakageColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_pakageNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage_head.desc_pakageColumn)
        End Function
        
        Public Sub Setdesc_pakageNull()
            Me(Me.tableinv_tab_pakage_head.desc_pakageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakage_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_pakage_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_pakage_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_pakage_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_pakage As DataColumn
        
        Private columnradif As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_pakage")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_pakageColumn As DataColumn
            Get
                Return Me.columncod_pakage
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_pakageRow
            Get
                Return CType(Me.Rows(index),inv_tab_pakageRow)
            End Get
        End Property
        
        Public Event inv_tab_pakageRowChanged As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowChanging As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowDeleted As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowDeleting As inv_tab_pakageRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_pakageRow(ByVal row As inv_tab_pakageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_pakageRow(ByVal cod_pakage As String, ByVal radif As Short, ByVal type_select As String, ByVal cod_select As String, ByVal desc_radif As String, ByVal qty As Decimal, ByVal price As Decimal) As inv_tab_pakageRow
            Dim rowinv_tab_pakageRow As inv_tab_pakageRow = CType(Me.NewRow,inv_tab_pakageRow)
            rowinv_tab_pakageRow.ItemArray = New Object() {cod_pakage, radif, type_select, cod_select, desc_radif, qty, price}
            Me.Rows.Add(rowinv_tab_pakageRow)
            Return rowinv_tab_pakageRow
        End Function
        
        Public Function FindBycod_pakageradif(ByVal cod_pakage As String, ByVal radif As Short) As inv_tab_pakageRow
            Return CType(Me.Rows.Find(New Object() {cod_pakage, radif}),inv_tab_pakageRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_pakageDataTable = CType(MyBase.Clone,inv_tab_pakageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_pakageDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_pakage = Me.Columns("cod_pakage")
            Me.columnradif = Me.Columns("radif")
            Me.columntype_select = Me.Columns("type_select")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_pakage = New DataColumn("cod_pakage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_pakage)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_pakage, Me.columnradif}, true))
            Me.columncod_pakage.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_pakageRow() As inv_tab_pakageRow
            Return CType(Me.NewRow,inv_tab_pakageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_pakageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_pakageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_pakageRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowChanged(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_pakageRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowChanging(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_pakageRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowDeleted(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_pakageRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowDeleting(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_pakageRow(ByVal row As inv_tab_pakageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageRow
        Inherits DataRow
        
        Private tableinv_tab_pakage As inv_tab_pakageDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_pakage = CType(Me.Table,inv_tab_pakageDataTable)
        End Sub
        
        Public Property cod_pakage As String
            Get
                Return CType(Me(Me.tableinv_tab_pakage.cod_pakageColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_pakage.cod_pakageColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableinv_tab_pakage.radifColumn),Short)
            End Get
            Set
                Me(Me.tableinv_tab_pakage.radifColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.type_selectColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.priceColumn) = value
            End Set
        End Property
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableinv_tab_pakage.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableinv_tab_pakage.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableinv_tab_pakage.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableinv_tab_pakage.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableinv_tab_pakage.priceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_pakageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_pakageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_pakageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
