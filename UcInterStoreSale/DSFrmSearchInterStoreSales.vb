'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchInterStoreSales
    Inherits DataSet
    
    Private tableinv_salse_transfer_head As inv_salse_transfer_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_salse_transfer_head")) Is Nothing) Then
                Me.Tables.Add(New inv_salse_transfer_headDataTable(ds.Tables("inv_salse_transfer_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_salse_transfer_head As inv_salse_transfer_headDataTable
        Get
            Return Me.tableinv_salse_transfer_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchInterStoreSales = CType(MyBase.Clone,DSFrmSearchInterStoreSales)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_salse_transfer_head")) Is Nothing) Then
            Me.Tables.Add(New inv_salse_transfer_headDataTable(ds.Tables("inv_salse_transfer_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_salse_transfer_head = CType(Me.Tables("inv_salse_transfer_head"),inv_salse_transfer_headDataTable)
        If (Not (Me.tableinv_salse_transfer_head) Is Nothing) Then
            Me.tableinv_salse_transfer_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchInterStoreSales"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchInterStoreSales.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_salse_transfer_head = New inv_salse_transfer_headDataTable
        Me.Tables.Add(Me.tableinv_salse_transfer_head)
    End Sub
    
    Private Function ShouldSerializeinv_salse_transfer_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_salse_transfer_headRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_salse_transfer_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_sales_transfer As DataColumn
        
        Private columntype_sales_transfer As DataColumn
        
        Private columnby_action As DataColumn
        
        Private columnauthoriz_action As DataColumn
        
        Private columnstore_from As DataColumn
        
        Private columnstore_to As DataColumn
        
        Private columndate_action As DataColumn
        
        Private columnnote As DataColumn
        
        Private columncomment As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnexcost As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_salse_transfer_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_sales_transferColumn As DataColumn
            Get
                Return Me.columnID_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property type_sales_transferColumn As DataColumn
            Get
                Return Me.columntype_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property by_actionColumn As DataColumn
            Get
                Return Me.columnby_action
            End Get
        End Property
        
        Friend ReadOnly Property authoriz_actionColumn As DataColumn
            Get
                Return Me.columnauthoriz_action
            End Get
        End Property
        
        Friend ReadOnly Property store_fromColumn As DataColumn
            Get
                Return Me.columnstore_from
            End Get
        End Property
        
        Friend ReadOnly Property store_toColumn As DataColumn
            Get
                Return Me.columnstore_to
            End Get
        End Property
        
        Friend ReadOnly Property date_actionColumn As DataColumn
            Get
                Return Me.columndate_action
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property commentColumn As DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property excostColumn As DataColumn
            Get
                Return Me.columnexcost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_salse_transfer_headRow
            Get
                Return CType(Me.Rows(index),inv_salse_transfer_headRow)
            End Get
        End Property
        
        Public Event inv_salse_transfer_headRowChanged As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowChanging As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowDeleted As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowDeleting As inv_salse_transfer_headRowChangeEventHandler
        
        Public Overloads Sub Addinv_salse_transfer_headRow(ByVal row As inv_salse_transfer_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_salse_transfer_headRow(ByVal ID_sales_transfer As String, ByVal type_sales_transfer As String, ByVal by_action As String, ByVal authoriz_action As String, ByVal store_from As String, ByVal store_to As String, ByVal date_action As String, ByVal note As String, ByVal comment As String, ByVal qty As Decimal, ByVal excost As Decimal) As inv_salse_transfer_headRow
            Dim rowinv_salse_transfer_headRow As inv_salse_transfer_headRow = CType(Me.NewRow,inv_salse_transfer_headRow)
            rowinv_salse_transfer_headRow.ItemArray = New Object() {ID_sales_transfer, type_sales_transfer, by_action, authoriz_action, store_from, store_to, date_action, note, comment, qty, excost}
            Me.Rows.Add(rowinv_salse_transfer_headRow)
            Return rowinv_salse_transfer_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_salse_transfer_headDataTable = CType(MyBase.Clone,inv_salse_transfer_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_salse_transfer_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_sales_transfer = Me.Columns("ID_sales_transfer")
            Me.columntype_sales_transfer = Me.Columns("type_sales_transfer")
            Me.columnby_action = Me.Columns("by_action")
            Me.columnauthoriz_action = Me.Columns("authoriz_action")
            Me.columnstore_from = Me.Columns("store_from")
            Me.columnstore_to = Me.Columns("store_to")
            Me.columndate_action = Me.Columns("date_action")
            Me.columnnote = Me.Columns("note")
            Me.columncomment = Me.Columns("comment")
            Me.columnqty = Me.Columns("qty")
            Me.columnexcost = Me.Columns("excost")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_sales_transfer = New DataColumn("ID_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_sales_transfer)
            Me.columntype_sales_transfer = New DataColumn("type_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_sales_transfer)
            Me.columnby_action = New DataColumn("by_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnby_action)
            Me.columnauthoriz_action = New DataColumn("authoriz_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnauthoriz_action)
            Me.columnstore_from = New DataColumn("store_from", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_from)
            Me.columnstore_to = New DataColumn("store_to", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_to)
            Me.columndate_action = New DataColumn("date_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_action)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columncomment = New DataColumn("comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomment)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnexcost = New DataColumn("excost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexcost)
            Me.columnID_sales_transfer.AllowDBNull = false
            Me.columntype_sales_transfer.AllowDBNull = false
            Me.columnqty.ReadOnly = true
            Me.columnexcost.ReadOnly = true
        End Sub
        
        Public Function Newinv_salse_transfer_headRow() As inv_salse_transfer_headRow
            Return CType(Me.NewRow,inv_salse_transfer_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_salse_transfer_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_salse_transfer_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_salse_transfer_headRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowChanged(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_salse_transfer_headRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowChanging(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_salse_transfer_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowDeleted(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_salse_transfer_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowDeleting(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_salse_transfer_headRow(ByVal row As inv_salse_transfer_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headRow
        Inherits DataRow
        
        Private tableinv_salse_transfer_head As inv_salse_transfer_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_salse_transfer_head = CType(Me.Table,inv_salse_transfer_headDataTable)
        End Sub
        
        Public Property ID_sales_transfer As String
            Get
                Return CType(Me(Me.tableinv_salse_transfer_head.ID_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.ID_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property type_sales_transfer As String
            Get
                Return CType(Me(Me.tableinv_salse_transfer_head.type_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.type_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property by_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.by_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.by_actionColumn) = value
            End Set
        End Property
        
        Public Property authoriz_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn) = value
            End Set
        End Property
        
        Public Property store_from As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.store_fromColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.store_fromColumn) = value
            End Set
        End Property
        
        Public Property store_to As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.store_toColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.store_toColumn) = value
            End Set
        End Property
        
        Public Property date_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.date_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.date_actionColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.noteColumn) = value
            End Set
        End Property
        
        Public Property comment As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.commentColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.qtyColumn) = value
            End Set
        End Property
        
        Public Property excost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.excostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.excostColumn) = value
            End Set
        End Property
        
        Public Function Isby_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.by_actionColumn)
        End Function
        
        Public Sub Setby_actionNull()
            Me(Me.tableinv_salse_transfer_head.by_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isauthoriz_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.authoriz_actionColumn)
        End Function
        
        Public Sub Setauthoriz_actionNull()
            Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_fromNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.store_fromColumn)
        End Function
        
        Public Sub Setstore_fromNull()
            Me(Me.tableinv_salse_transfer_head.store_fromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_toNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.store_toColumn)
        End Function
        
        Public Sub Setstore_toNull()
            Me(Me.tableinv_salse_transfer_head.store_toColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.date_actionColumn)
        End Function
        
        Public Sub Setdate_actionNull()
            Me(Me.tableinv_salse_transfer_head.date_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_salse_transfer_head.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.commentColumn)
        End Function
        
        Public Sub SetcommentNull()
            Me(Me.tableinv_salse_transfer_head.commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableinv_salse_transfer_head.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsexcostNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.excostColumn)
        End Function
        
        Public Sub SetexcostNull()
            Me(Me.tableinv_salse_transfer_head.excostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_salse_transfer_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_salse_transfer_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_salse_transfer_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
