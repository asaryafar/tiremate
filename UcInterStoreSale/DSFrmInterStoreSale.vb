'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmInterStoreSale
    Inherits DataSet
    
    Private tableemployee As employeeDataTable
    
    Private tableemployee1 As employee1DataTable
    
    Private tableSTORE_SETUP As STORE_SETUPDataTable
    
    Private tableSTORE_SETUP1 As STORE_SETUP1DataTable
    
    Private tableinv_salse_transfer_head As inv_salse_transfer_headDataTable
    
    Private tableinv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("employee1")) Is Nothing) Then
                Me.Tables.Add(New employee1DataTable(ds.Tables("employee1")))
            End If
            If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
                Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
            End If
            If (Not (ds.Tables("STORE_SETUP1")) Is Nothing) Then
                Me.Tables.Add(New STORE_SETUP1DataTable(ds.Tables("STORE_SETUP1")))
            End If
            If (Not (ds.Tables("inv_salse_transfer_head")) Is Nothing) Then
                Me.Tables.Add(New inv_salse_transfer_headDataTable(ds.Tables("inv_salse_transfer_head")))
            End If
            If (Not (ds.Tables("inv_sales_transfer_dtl")) Is Nothing) Then
                Me.Tables.Add(New inv_sales_transfer_dtlDataTable(ds.Tables("inv_sales_transfer_dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee1 As employee1DataTable
        Get
            Return Me.tableemployee1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STORE_SETUP As STORE_SETUPDataTable
        Get
            Return Me.tableSTORE_SETUP
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STORE_SETUP1 As STORE_SETUP1DataTable
        Get
            Return Me.tableSTORE_SETUP1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_salse_transfer_head As inv_salse_transfer_headDataTable
        Get
            Return Me.tableinv_salse_transfer_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
        Get
            Return Me.tableinv_sales_transfer_dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmInterStoreSale = CType(MyBase.Clone,DSFrmInterStoreSale)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("employee1")) Is Nothing) Then
            Me.Tables.Add(New employee1DataTable(ds.Tables("employee1")))
        End If
        If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
            Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
        End If
        If (Not (ds.Tables("STORE_SETUP1")) Is Nothing) Then
            Me.Tables.Add(New STORE_SETUP1DataTable(ds.Tables("STORE_SETUP1")))
        End If
        If (Not (ds.Tables("inv_salse_transfer_head")) Is Nothing) Then
            Me.Tables.Add(New inv_salse_transfer_headDataTable(ds.Tables("inv_salse_transfer_head")))
        End If
        If (Not (ds.Tables("inv_sales_transfer_dtl")) Is Nothing) Then
            Me.Tables.Add(New inv_sales_transfer_dtlDataTable(ds.Tables("inv_sales_transfer_dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableemployee1 = CType(Me.Tables("employee1"),employee1DataTable)
        If (Not (Me.tableemployee1) Is Nothing) Then
            Me.tableemployee1.InitVars
        End If
        Me.tableSTORE_SETUP = CType(Me.Tables("STORE_SETUP"),STORE_SETUPDataTable)
        If (Not (Me.tableSTORE_SETUP) Is Nothing) Then
            Me.tableSTORE_SETUP.InitVars
        End If
        Me.tableSTORE_SETUP1 = CType(Me.Tables("STORE_SETUP1"),STORE_SETUP1DataTable)
        If (Not (Me.tableSTORE_SETUP1) Is Nothing) Then
            Me.tableSTORE_SETUP1.InitVars
        End If
        Me.tableinv_salse_transfer_head = CType(Me.Tables("inv_salse_transfer_head"),inv_salse_transfer_headDataTable)
        If (Not (Me.tableinv_salse_transfer_head) Is Nothing) Then
            Me.tableinv_salse_transfer_head.InitVars
        End If
        Me.tableinv_sales_transfer_dtl = CType(Me.Tables("inv_sales_transfer_dtl"),inv_sales_transfer_dtlDataTable)
        If (Not (Me.tableinv_sales_transfer_dtl) Is Nothing) Then
            Me.tableinv_sales_transfer_dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmInterStoreSale"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmInterStoreSale.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableemployee1 = New employee1DataTable
        Me.Tables.Add(Me.tableemployee1)
        Me.tableSTORE_SETUP = New STORE_SETUPDataTable
        Me.Tables.Add(Me.tableSTORE_SETUP)
        Me.tableSTORE_SETUP1 = New STORE_SETUP1DataTable
        Me.Tables.Add(Me.tableSTORE_SETUP1)
        Me.tableinv_salse_transfer_head = New inv_salse_transfer_headDataTable
        Me.Tables.Add(Me.tableinv_salse_transfer_head)
        Me.tableinv_sales_transfer_dtl = New inv_sales_transfer_dtlDataTable
        Me.Tables.Add(Me.tableinv_sales_transfer_dtl)
    End Sub
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTORE_SETUP() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTORE_SETUP1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_salse_transfer_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_sales_transfer_dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub employee1RowChangeEventHandler(ByVal sender As Object, ByVal e As employee1RowChangeEvent)
    
    Public Delegate Sub STORE_SETUPRowChangeEventHandler(ByVal sender As Object, ByVal e As STORE_SETUPRowChangeEvent)
    
    Public Delegate Sub STORE_SETUP1RowChangeEventHandler(ByVal sender As Object, ByVal e As STORE_SETUP1RowChangeEvent)
    
    Public Delegate Sub inv_salse_transfer_headRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_salse_transfer_headRowChangeEvent)
    
    Public Delegate Sub inv_sales_transfer_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_sales_transfer_dtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnf_name As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal employee_code As String, ByVal l_name As String, ByVal m_name As String, ByVal f_name As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, l_name, m_name, f_name}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnf_name = Me.Columns("f_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.l_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.m_nameColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.f_nameColumn) = value
            End Set
        End Property
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tableemployee.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tableemployee.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableemployee.f_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnf_name As DataColumn
        
        Friend Sub New()
            MyBase.New("employee1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee1Row
            Get
                Return CType(Me.Rows(index),employee1Row)
            End Get
        End Property
        
        Public Event employee1RowChanged As employee1RowChangeEventHandler
        
        Public Event employee1RowChanging As employee1RowChangeEventHandler
        
        Public Event employee1RowDeleted As employee1RowChangeEventHandler
        
        Public Event employee1RowDeleting As employee1RowChangeEventHandler
        
        Public Overloads Sub Addemployee1Row(ByVal row As employee1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee1Row(ByVal employee_code As String, ByVal l_name As String, ByVal m_name As String, ByVal f_name As String) As employee1Row
            Dim rowemployee1Row As employee1Row = CType(Me.NewRow,employee1Row)
            rowemployee1Row.ItemArray = New Object() {employee_code, l_name, m_name, f_name}
            Me.Rows.Add(rowemployee1Row)
            Return rowemployee1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee1DataTable = CType(MyBase.Clone,employee1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnf_name = Me.Columns("f_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function Newemployee1Row() As employee1Row
            Return CType(Me.NewRow,employee1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee1RowChangedEvent) Is Nothing) Then
                RaiseEvent employee1RowChanged(Me, New employee1RowChangeEvent(CType(e.Row,employee1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee1RowChangingEvent) Is Nothing) Then
                RaiseEvent employee1RowChanging(Me, New employee1RowChangeEvent(CType(e.Row,employee1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee1RowDeletedEvent) Is Nothing) Then
                RaiseEvent employee1RowDeleted(Me, New employee1RowChangeEvent(CType(e.Row,employee1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee1RowDeletingEvent) Is Nothing) Then
                RaiseEvent employee1RowDeleting(Me, New employee1RowChangeEvent(CType(e.Row,employee1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee1Row(ByVal row As employee1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee1Row
        Inherits DataRow
        
        Private tableemployee1 As employee1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee1 = CType(Me.Table,employee1DataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee1.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee1.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee1.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee1.l_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee1.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee1.m_nameColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee1.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee1.f_nameColumn) = value
            End Set
        End Property
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee1.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tableemployee1.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee1.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tableemployee1.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee1.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableemployee1.f_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("STORE_SETUP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STORE_SETUPRow
            Get
                Return CType(Me.Rows(index),STORE_SETUPRow)
            End Get
        End Property
        
        Public Event STORE_SETUPRowChanged As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowChanging As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleted As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleting As STORE_SETUPRowChangeEventHandler
        
        Public Overloads Sub AddSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTORE_SETUPRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As STORE_SETUPRow
            Dim rowSTORE_SETUPRow As STORE_SETUPRow = CType(Me.NewRow,STORE_SETUPRow)
            rowSTORE_SETUPRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowSTORE_SETUPRow)
            Return rowSTORE_SETUPRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As STORE_SETUPRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),STORE_SETUPRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STORE_SETUPDataTable = CType(MyBase.Clone,STORE_SETUPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STORE_SETUPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewSTORE_SETUPRow() As STORE_SETUPRow
            Return CType(Me.NewRow,STORE_SETUPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STORE_SETUPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STORE_SETUPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STORE_SETUPRowChangedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanged(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STORE_SETUPRowChangingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanging(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STORE_SETUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleted(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STORE_SETUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleting(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRow
        Inherits DataRow
        
        Private tableSTORE_SETUP As STORE_SETUPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTORE_SETUP = CType(Me.Table,STORE_SETUPDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableSTORE_SETUP.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableSTORE_SETUP.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STORE_SETUPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STORE_SETUPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STORE_SETUPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUP1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("STORE_SETUP1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STORE_SETUP1Row
            Get
                Return CType(Me.Rows(index),STORE_SETUP1Row)
            End Get
        End Property
        
        Public Event STORE_SETUP1RowChanged As STORE_SETUP1RowChangeEventHandler
        
        Public Event STORE_SETUP1RowChanging As STORE_SETUP1RowChangeEventHandler
        
        Public Event STORE_SETUP1RowDeleted As STORE_SETUP1RowChangeEventHandler
        
        Public Event STORE_SETUP1RowDeleting As STORE_SETUP1RowChangeEventHandler
        
        Public Overloads Sub AddSTORE_SETUP1Row(ByVal row As STORE_SETUP1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTORE_SETUP1Row(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As STORE_SETUP1Row
            Dim rowSTORE_SETUP1Row As STORE_SETUP1Row = CType(Me.NewRow,STORE_SETUP1Row)
            rowSTORE_SETUP1Row.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowSTORE_SETUP1Row)
            Return rowSTORE_SETUP1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STORE_SETUP1DataTable = CType(MyBase.Clone,STORE_SETUP1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STORE_SETUP1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnSTORENO.AllowDBNull = false
        End Sub
        
        Public Function NewSTORE_SETUP1Row() As STORE_SETUP1Row
            Return CType(Me.NewRow,STORE_SETUP1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STORE_SETUP1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STORE_SETUP1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STORE_SETUP1RowChangedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUP1RowChanged(Me, New STORE_SETUP1RowChangeEvent(CType(e.Row,STORE_SETUP1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STORE_SETUP1RowChangingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUP1RowChanging(Me, New STORE_SETUP1RowChangeEvent(CType(e.Row,STORE_SETUP1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STORE_SETUP1RowDeletedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUP1RowDeleted(Me, New STORE_SETUP1RowChangeEvent(CType(e.Row,STORE_SETUP1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STORE_SETUP1RowDeletingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUP1RowDeleting(Me, New STORE_SETUP1RowChangeEvent(CType(e.Row,STORE_SETUP1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTORE_SETUP1Row(ByVal row As STORE_SETUP1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUP1Row
        Inherits DataRow
        
        Private tableSTORE_SETUP1 As STORE_SETUP1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTORE_SETUP1 = CType(Me.Table,STORE_SETUP1DataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableSTORE_SETUP1.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableSTORE_SETUP1.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP1.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP1.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP1.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP1.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP1.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableSTORE_SETUP1.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP1.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableSTORE_SETUP1.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUP1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STORE_SETUP1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STORE_SETUP1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STORE_SETUP1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_sales_transfer As DataColumn
        
        Private columntype_sales_transfer As DataColumn
        
        Private columnby_action As DataColumn
        
        Private columnauthoriz_action As DataColumn
        
        Private columnstore_from As DataColumn
        
        Private columnstore_to As DataColumn
        
        Private columndate_action As DataColumn
        
        Private columnnote As DataColumn
        
        Private columncomment As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_salse_transfer_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_sales_transferColumn As DataColumn
            Get
                Return Me.columnID_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property type_sales_transferColumn As DataColumn
            Get
                Return Me.columntype_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property by_actionColumn As DataColumn
            Get
                Return Me.columnby_action
            End Get
        End Property
        
        Friend ReadOnly Property authoriz_actionColumn As DataColumn
            Get
                Return Me.columnauthoriz_action
            End Get
        End Property
        
        Friend ReadOnly Property store_fromColumn As DataColumn
            Get
                Return Me.columnstore_from
            End Get
        End Property
        
        Friend ReadOnly Property store_toColumn As DataColumn
            Get
                Return Me.columnstore_to
            End Get
        End Property
        
        Friend ReadOnly Property date_actionColumn As DataColumn
            Get
                Return Me.columndate_action
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property commentColumn As DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_salse_transfer_headRow
            Get
                Return CType(Me.Rows(index),inv_salse_transfer_headRow)
            End Get
        End Property
        
        Public Event inv_salse_transfer_headRowChanged As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowChanging As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowDeleted As inv_salse_transfer_headRowChangeEventHandler
        
        Public Event inv_salse_transfer_headRowDeleting As inv_salse_transfer_headRowChangeEventHandler
        
        Public Overloads Sub Addinv_salse_transfer_headRow(ByVal row As inv_salse_transfer_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_salse_transfer_headRow(ByVal ID_sales_transfer As String, ByVal type_sales_transfer As String, ByVal by_action As String, ByVal authoriz_action As String, ByVal store_from As String, ByVal store_to As String, ByVal date_action As String, ByVal note As String, ByVal comment As String) As inv_salse_transfer_headRow
            Dim rowinv_salse_transfer_headRow As inv_salse_transfer_headRow = CType(Me.NewRow,inv_salse_transfer_headRow)
            rowinv_salse_transfer_headRow.ItemArray = New Object() {ID_sales_transfer, type_sales_transfer, by_action, authoriz_action, store_from, store_to, date_action, note, comment}
            Me.Rows.Add(rowinv_salse_transfer_headRow)
            Return rowinv_salse_transfer_headRow
        End Function
        
        Public Function FindByID_sales_transfer(ByVal ID_sales_transfer As String) As inv_salse_transfer_headRow
            Return CType(Me.Rows.Find(New Object() {ID_sales_transfer}),inv_salse_transfer_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_salse_transfer_headDataTable = CType(MyBase.Clone,inv_salse_transfer_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_salse_transfer_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_sales_transfer = Me.Columns("ID_sales_transfer")
            Me.columntype_sales_transfer = Me.Columns("type_sales_transfer")
            Me.columnby_action = Me.Columns("by_action")
            Me.columnauthoriz_action = Me.Columns("authoriz_action")
            Me.columnstore_from = Me.Columns("store_from")
            Me.columnstore_to = Me.Columns("store_to")
            Me.columndate_action = Me.Columns("date_action")
            Me.columnnote = Me.Columns("note")
            Me.columncomment = Me.Columns("comment")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_sales_transfer = New DataColumn("ID_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_sales_transfer)
            Me.columntype_sales_transfer = New DataColumn("type_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_sales_transfer)
            Me.columnby_action = New DataColumn("by_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnby_action)
            Me.columnauthoriz_action = New DataColumn("authoriz_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnauthoriz_action)
            Me.columnstore_from = New DataColumn("store_from", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_from)
            Me.columnstore_to = New DataColumn("store_to", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_to)
            Me.columndate_action = New DataColumn("date_action", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_action)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columncomment = New DataColumn("comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomment)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_sales_transfer}, true))
            Me.columnID_sales_transfer.AllowDBNull = false
            Me.columnID_sales_transfer.Unique = true
            Me.columntype_sales_transfer.AllowDBNull = false
        End Sub
        
        Public Function Newinv_salse_transfer_headRow() As inv_salse_transfer_headRow
            Return CType(Me.NewRow,inv_salse_transfer_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_salse_transfer_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_salse_transfer_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_salse_transfer_headRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowChanged(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_salse_transfer_headRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowChanging(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_salse_transfer_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowDeleted(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_salse_transfer_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_salse_transfer_headRowDeleting(Me, New inv_salse_transfer_headRowChangeEvent(CType(e.Row,inv_salse_transfer_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_salse_transfer_headRow(ByVal row As inv_salse_transfer_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headRow
        Inherits DataRow
        
        Private tableinv_salse_transfer_head As inv_salse_transfer_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_salse_transfer_head = CType(Me.Table,inv_salse_transfer_headDataTable)
        End Sub
        
        Public Property ID_sales_transfer As String
            Get
                Return CType(Me(Me.tableinv_salse_transfer_head.ID_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.ID_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property type_sales_transfer As String
            Get
                Return CType(Me(Me.tableinv_salse_transfer_head.type_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.type_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property by_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.by_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.by_actionColumn) = value
            End Set
        End Property
        
        Public Property authoriz_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn) = value
            End Set
        End Property
        
        Public Property store_from As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.store_fromColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.store_fromColumn) = value
            End Set
        End Property
        
        Public Property store_to As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.store_toColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.store_toColumn) = value
            End Set
        End Property
        
        Public Property date_action As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.date_actionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.date_actionColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.noteColumn) = value
            End Set
        End Property
        
        Public Property comment As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_salse_transfer_head.commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_salse_transfer_head.commentColumn) = value
            End Set
        End Property
        
        Public Function Isby_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.by_actionColumn)
        End Function
        
        Public Sub Setby_actionNull()
            Me(Me.tableinv_salse_transfer_head.by_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isauthoriz_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.authoriz_actionColumn)
        End Function
        
        Public Sub Setauthoriz_actionNull()
            Me(Me.tableinv_salse_transfer_head.authoriz_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_fromNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.store_fromColumn)
        End Function
        
        Public Sub Setstore_fromNull()
            Me(Me.tableinv_salse_transfer_head.store_fromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_toNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.store_toColumn)
        End Function
        
        Public Sub Setstore_toNull()
            Me(Me.tableinv_salse_transfer_head.store_toColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_actionNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.date_actionColumn)
        End Function
        
        Public Sub Setdate_actionNull()
            Me(Me.tableinv_salse_transfer_head.date_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_salse_transfer_head.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tableinv_salse_transfer_head.commentColumn)
        End Function
        
        Public Sub SetcommentNull()
            Me(Me.tableinv_salse_transfer_head.commentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_salse_transfer_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_salse_transfer_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_salse_transfer_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_salse_transfer_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_sales_transfer As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnfet As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnexcost As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_sales_transfer_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_sales_transferColumn As DataColumn
            Get
                Return Me.columnID_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property excostColumn As DataColumn
            Get
                Return Me.columnexcost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_sales_transfer_dtlRow
            Get
                Return CType(Me.Rows(index),inv_sales_transfer_dtlRow)
            End Get
        End Property
        
        Public Event inv_sales_transfer_dtlRowChanged As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowChanging As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowDeleted As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowDeleting As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Overloads Sub Addinv_sales_transfer_dtlRow(ByVal row As inv_sales_transfer_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_sales_transfer_dtlRow(ByVal ID_sales_transfer As String, ByVal item_no As String, ByVal qty As Single, ByVal price As Single, ByVal fet As Single, ByVal desc_item As String, ByVal excost As Decimal) As inv_sales_transfer_dtlRow
            Dim rowinv_sales_transfer_dtlRow As inv_sales_transfer_dtlRow = CType(Me.NewRow,inv_sales_transfer_dtlRow)
            rowinv_sales_transfer_dtlRow.ItemArray = New Object() {ID_sales_transfer, item_no, qty, price, fet, desc_item, excost}
            Me.Rows.Add(rowinv_sales_transfer_dtlRow)
            Return rowinv_sales_transfer_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_sales_transfer_dtlDataTable = CType(MyBase.Clone,inv_sales_transfer_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_sales_transfer_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_sales_transfer = Me.Columns("ID_sales_transfer")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnfet = Me.Columns("fet")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnexcost = Me.Columns("excost")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_sales_transfer = New DataColumn("ID_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_sales_transfer)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnexcost = New DataColumn("excost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexcost)
            Me.columnID_sales_transfer.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function Newinv_sales_transfer_dtlRow() As inv_sales_transfer_dtlRow
            Return CType(Me.NewRow,inv_sales_transfer_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_sales_transfer_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_sales_transfer_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_sales_transfer_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowChanged(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_sales_transfer_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowChanging(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_sales_transfer_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowDeleted(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_sales_transfer_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowDeleting(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_sales_transfer_dtlRow(ByVal row As inv_sales_transfer_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlRow
        Inherits DataRow
        
        Private tableinv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_sales_transfer_dtl = CType(Me.Table,inv_sales_transfer_dtlDataTable)
        End Sub
        
        Public Property ID_sales_transfer As String
            Get
                Return CType(Me(Me.tableinv_sales_transfer_dtl.ID_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.ID_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_sales_transfer_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property excost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.excostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.excostColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableinv_sales_transfer_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableinv_sales_transfer_dtl.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_sales_transfer_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_sales_transfer_dtl.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsexcostNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.excostColumn)
        End Function
        
        Public Sub SetexcostNull()
            Me(Me.tableinv_sales_transfer_dtl.excostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_sales_transfer_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_sales_transfer_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_sales_transfer_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
