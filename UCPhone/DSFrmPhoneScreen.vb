'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPhoneScreen
    Inherits DataSet
    
    Private tablebas_tab_phone_type1 As bas_tab_phone_type1DataTable
    
    Private tablebas_tab_phone_type2 As bas_tab_phone_type2DataTable
    
    Private tablebas_tab_phone_type3 As bas_tab_phone_type3DataTable
    
    Private tablebas_tab_phone_type4 As bas_tab_phone_type4DataTable
    
    Private tablebas_tab_phone_type5 As bas_tab_phone_type5DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_tab_phone_type1")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_type1DataTable(ds.Tables("bas_tab_phone_type1")))
            End If
            If (Not (ds.Tables("bas_tab_phone_type2")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_type2DataTable(ds.Tables("bas_tab_phone_type2")))
            End If
            If (Not (ds.Tables("bas_tab_phone_type3")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_type3DataTable(ds.Tables("bas_tab_phone_type3")))
            End If
            If (Not (ds.Tables("bas_tab_phone_type4")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_type4DataTable(ds.Tables("bas_tab_phone_type4")))
            End If
            If (Not (ds.Tables("bas_tab_phone_type5")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_type5DataTable(ds.Tables("bas_tab_phone_type5")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type1 As bas_tab_phone_type1DataTable
        Get
            Return Me.tablebas_tab_phone_type1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type2 As bas_tab_phone_type2DataTable
        Get
            Return Me.tablebas_tab_phone_type2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type3 As bas_tab_phone_type3DataTable
        Get
            Return Me.tablebas_tab_phone_type3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type4 As bas_tab_phone_type4DataTable
        Get
            Return Me.tablebas_tab_phone_type4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type5 As bas_tab_phone_type5DataTable
        Get
            Return Me.tablebas_tab_phone_type5
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPhoneScreen = CType(MyBase.Clone,DSFrmPhoneScreen)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_tab_phone_type1")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_type1DataTable(ds.Tables("bas_tab_phone_type1")))
        End If
        If (Not (ds.Tables("bas_tab_phone_type2")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_type2DataTable(ds.Tables("bas_tab_phone_type2")))
        End If
        If (Not (ds.Tables("bas_tab_phone_type3")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_type3DataTable(ds.Tables("bas_tab_phone_type3")))
        End If
        If (Not (ds.Tables("bas_tab_phone_type4")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_type4DataTable(ds.Tables("bas_tab_phone_type4")))
        End If
        If (Not (ds.Tables("bas_tab_phone_type5")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_type5DataTable(ds.Tables("bas_tab_phone_type5")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_tab_phone_type1 = CType(Me.Tables("bas_tab_phone_type1"),bas_tab_phone_type1DataTable)
        If (Not (Me.tablebas_tab_phone_type1) Is Nothing) Then
            Me.tablebas_tab_phone_type1.InitVars
        End If
        Me.tablebas_tab_phone_type2 = CType(Me.Tables("bas_tab_phone_type2"),bas_tab_phone_type2DataTable)
        If (Not (Me.tablebas_tab_phone_type2) Is Nothing) Then
            Me.tablebas_tab_phone_type2.InitVars
        End If
        Me.tablebas_tab_phone_type3 = CType(Me.Tables("bas_tab_phone_type3"),bas_tab_phone_type3DataTable)
        If (Not (Me.tablebas_tab_phone_type3) Is Nothing) Then
            Me.tablebas_tab_phone_type3.InitVars
        End If
        Me.tablebas_tab_phone_type4 = CType(Me.Tables("bas_tab_phone_type4"),bas_tab_phone_type4DataTable)
        If (Not (Me.tablebas_tab_phone_type4) Is Nothing) Then
            Me.tablebas_tab_phone_type4.InitVars
        End If
        Me.tablebas_tab_phone_type5 = CType(Me.Tables("bas_tab_phone_type5"),bas_tab_phone_type5DataTable)
        If (Not (Me.tablebas_tab_phone_type5) Is Nothing) Then
            Me.tablebas_tab_phone_type5.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPhoneScreen"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPhoneScreen.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_tab_phone_type1 = New bas_tab_phone_type1DataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type1)
        Me.tablebas_tab_phone_type2 = New bas_tab_phone_type2DataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type2)
        Me.tablebas_tab_phone_type3 = New bas_tab_phone_type3DataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type3)
        Me.tablebas_tab_phone_type4 = New bas_tab_phone_type4DataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type4)
        Me.tablebas_tab_phone_type5 = New bas_tab_phone_type5DataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type5)
    End Sub
    
    Private Function ShouldSerializebas_tab_phone_type1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_tab_phone_type2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_tab_phone_type3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_tab_phone_type4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_tab_phone_type5() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_tab_phone_type1RowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_type1RowChangeEvent)
    
    Public Delegate Sub bas_tab_phone_type2RowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_type2RowChangeEvent)
    
    Public Delegate Sub bas_tab_phone_type3RowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_type3RowChangeEvent)
    
    Public Delegate Sub bas_tab_phone_type4RowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_type4RowChangeEvent)
    
    Public Delegate Sub bas_tab_phone_type5RowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_type5RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_type1Row
            Get
                Return CType(Me.Rows(index),bas_tab_phone_type1Row)
            End Get
        End Property
        
        Public Event bas_tab_phone_type1RowChanged As bas_tab_phone_type1RowChangeEventHandler
        
        Public Event bas_tab_phone_type1RowChanging As bas_tab_phone_type1RowChangeEventHandler
        
        Public Event bas_tab_phone_type1RowDeleted As bas_tab_phone_type1RowChangeEventHandler
        
        Public Event bas_tab_phone_type1RowDeleting As bas_tab_phone_type1RowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_type1Row(ByVal row As bas_tab_phone_type1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_type1Row(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_type1Row
            Dim rowbas_tab_phone_type1Row As bas_tab_phone_type1Row = CType(Me.NewRow,bas_tab_phone_type1Row)
            rowbas_tab_phone_type1Row.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_type1Row)
            Return rowbas_tab_phone_type1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_type1DataTable = CType(MyBase.Clone,bas_tab_phone_type1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_type1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.columncod_type_phone.AllowDBNull = false
        End Sub
        
        Public Function Newbas_tab_phone_type1Row() As bas_tab_phone_type1Row
            Return CType(Me.NewRow,bas_tab_phone_type1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_type1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_type1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_type1RowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type1RowChanged(Me, New bas_tab_phone_type1RowChangeEvent(CType(e.Row,bas_tab_phone_type1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_type1RowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type1RowChanging(Me, New bas_tab_phone_type1RowChangeEvent(CType(e.Row,bas_tab_phone_type1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_type1RowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type1RowDeleted(Me, New bas_tab_phone_type1RowChangeEvent(CType(e.Row,bas_tab_phone_type1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_type1RowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type1RowDeleting(Me, New bas_tab_phone_type1RowChangeEvent(CType(e.Row,bas_tab_phone_type1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_type1Row(ByVal row As bas_tab_phone_type1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type1Row
        Inherits DataRow
        
        Private tablebas_tab_phone_type1 As bas_tab_phone_type1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type1 = CType(Me.Table,bas_tab_phone_type1DataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type1.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type1.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type1.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type1.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type1.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type1.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_type1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_type1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_type1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_type2Row
            Get
                Return CType(Me.Rows(index),bas_tab_phone_type2Row)
            End Get
        End Property
        
        Public Event bas_tab_phone_type2RowChanged As bas_tab_phone_type2RowChangeEventHandler
        
        Public Event bas_tab_phone_type2RowChanging As bas_tab_phone_type2RowChangeEventHandler
        
        Public Event bas_tab_phone_type2RowDeleted As bas_tab_phone_type2RowChangeEventHandler
        
        Public Event bas_tab_phone_type2RowDeleting As bas_tab_phone_type2RowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_type2Row(ByVal row As bas_tab_phone_type2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_type2Row(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_type2Row
            Dim rowbas_tab_phone_type2Row As bas_tab_phone_type2Row = CType(Me.NewRow,bas_tab_phone_type2Row)
            rowbas_tab_phone_type2Row.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_type2Row)
            Return rowbas_tab_phone_type2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_type2DataTable = CType(MyBase.Clone,bas_tab_phone_type2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_type2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.columncod_type_phone.AllowDBNull = false
        End Sub
        
        Public Function Newbas_tab_phone_type2Row() As bas_tab_phone_type2Row
            Return CType(Me.NewRow,bas_tab_phone_type2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_type2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_type2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_type2RowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type2RowChanged(Me, New bas_tab_phone_type2RowChangeEvent(CType(e.Row,bas_tab_phone_type2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_type2RowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type2RowChanging(Me, New bas_tab_phone_type2RowChangeEvent(CType(e.Row,bas_tab_phone_type2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_type2RowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type2RowDeleted(Me, New bas_tab_phone_type2RowChangeEvent(CType(e.Row,bas_tab_phone_type2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_type2RowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type2RowDeleting(Me, New bas_tab_phone_type2RowChangeEvent(CType(e.Row,bas_tab_phone_type2Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_type2Row(ByVal row As bas_tab_phone_type2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type2Row
        Inherits DataRow
        
        Private tablebas_tab_phone_type2 As bas_tab_phone_type2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type2 = CType(Me.Table,bas_tab_phone_type2DataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type2.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type2.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type2.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type2.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type2.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type2.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_type2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_type2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_type2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_type3Row
            Get
                Return CType(Me.Rows(index),bas_tab_phone_type3Row)
            End Get
        End Property
        
        Public Event bas_tab_phone_type3RowChanged As bas_tab_phone_type3RowChangeEventHandler
        
        Public Event bas_tab_phone_type3RowChanging As bas_tab_phone_type3RowChangeEventHandler
        
        Public Event bas_tab_phone_type3RowDeleted As bas_tab_phone_type3RowChangeEventHandler
        
        Public Event bas_tab_phone_type3RowDeleting As bas_tab_phone_type3RowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_type3Row(ByVal row As bas_tab_phone_type3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_type3Row(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_type3Row
            Dim rowbas_tab_phone_type3Row As bas_tab_phone_type3Row = CType(Me.NewRow,bas_tab_phone_type3Row)
            rowbas_tab_phone_type3Row.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_type3Row)
            Return rowbas_tab_phone_type3Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_type3DataTable = CType(MyBase.Clone,bas_tab_phone_type3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_type3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.columncod_type_phone.AllowDBNull = false
        End Sub
        
        Public Function Newbas_tab_phone_type3Row() As bas_tab_phone_type3Row
            Return CType(Me.NewRow,bas_tab_phone_type3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_type3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_type3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_type3RowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type3RowChanged(Me, New bas_tab_phone_type3RowChangeEvent(CType(e.Row,bas_tab_phone_type3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_type3RowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type3RowChanging(Me, New bas_tab_phone_type3RowChangeEvent(CType(e.Row,bas_tab_phone_type3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_type3RowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type3RowDeleted(Me, New bas_tab_phone_type3RowChangeEvent(CType(e.Row,bas_tab_phone_type3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_type3RowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type3RowDeleting(Me, New bas_tab_phone_type3RowChangeEvent(CType(e.Row,bas_tab_phone_type3Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_type3Row(ByVal row As bas_tab_phone_type3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type3Row
        Inherits DataRow
        
        Private tablebas_tab_phone_type3 As bas_tab_phone_type3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type3 = CType(Me.Table,bas_tab_phone_type3DataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type3.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type3.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type3.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type3.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type3.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type3.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_type3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_type3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_type3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_type4Row
            Get
                Return CType(Me.Rows(index),bas_tab_phone_type4Row)
            End Get
        End Property
        
        Public Event bas_tab_phone_type4RowChanged As bas_tab_phone_type4RowChangeEventHandler
        
        Public Event bas_tab_phone_type4RowChanging As bas_tab_phone_type4RowChangeEventHandler
        
        Public Event bas_tab_phone_type4RowDeleted As bas_tab_phone_type4RowChangeEventHandler
        
        Public Event bas_tab_phone_type4RowDeleting As bas_tab_phone_type4RowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_type4Row(ByVal row As bas_tab_phone_type4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_type4Row(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_type4Row
            Dim rowbas_tab_phone_type4Row As bas_tab_phone_type4Row = CType(Me.NewRow,bas_tab_phone_type4Row)
            rowbas_tab_phone_type4Row.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_type4Row)
            Return rowbas_tab_phone_type4Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_type4DataTable = CType(MyBase.Clone,bas_tab_phone_type4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_type4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.columncod_type_phone.AllowDBNull = false
        End Sub
        
        Public Function Newbas_tab_phone_type4Row() As bas_tab_phone_type4Row
            Return CType(Me.NewRow,bas_tab_phone_type4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_type4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_type4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_type4RowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type4RowChanged(Me, New bas_tab_phone_type4RowChangeEvent(CType(e.Row,bas_tab_phone_type4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_type4RowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type4RowChanging(Me, New bas_tab_phone_type4RowChangeEvent(CType(e.Row,bas_tab_phone_type4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_type4RowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type4RowDeleted(Me, New bas_tab_phone_type4RowChangeEvent(CType(e.Row,bas_tab_phone_type4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_type4RowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type4RowDeleting(Me, New bas_tab_phone_type4RowChangeEvent(CType(e.Row,bas_tab_phone_type4Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_type4Row(ByVal row As bas_tab_phone_type4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type4Row
        Inherits DataRow
        
        Private tablebas_tab_phone_type4 As bas_tab_phone_type4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type4 = CType(Me.Table,bas_tab_phone_type4DataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type4.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type4.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type4.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type4.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type4.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type4.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_type4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_type4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_type4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type5DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type5")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_type5Row
            Get
                Return CType(Me.Rows(index),bas_tab_phone_type5Row)
            End Get
        End Property
        
        Public Event bas_tab_phone_type5RowChanged As bas_tab_phone_type5RowChangeEventHandler
        
        Public Event bas_tab_phone_type5RowChanging As bas_tab_phone_type5RowChangeEventHandler
        
        Public Event bas_tab_phone_type5RowDeleted As bas_tab_phone_type5RowChangeEventHandler
        
        Public Event bas_tab_phone_type5RowDeleting As bas_tab_phone_type5RowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_type5Row(ByVal row As bas_tab_phone_type5Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_type5Row(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_type5Row
            Dim rowbas_tab_phone_type5Row As bas_tab_phone_type5Row = CType(Me.NewRow,bas_tab_phone_type5Row)
            rowbas_tab_phone_type5Row.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_type5Row)
            Return rowbas_tab_phone_type5Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_type5DataTable = CType(MyBase.Clone,bas_tab_phone_type5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_type5DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.columncod_type_phone.AllowDBNull = false
        End Sub
        
        Public Function Newbas_tab_phone_type5Row() As bas_tab_phone_type5Row
            Return CType(Me.NewRow,bas_tab_phone_type5Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_type5Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_type5Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_type5RowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type5RowChanged(Me, New bas_tab_phone_type5RowChangeEvent(CType(e.Row,bas_tab_phone_type5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_type5RowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type5RowChanging(Me, New bas_tab_phone_type5RowChangeEvent(CType(e.Row,bas_tab_phone_type5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_type5RowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type5RowDeleted(Me, New bas_tab_phone_type5RowChangeEvent(CType(e.Row,bas_tab_phone_type5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_type5RowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_type5RowDeleting(Me, New bas_tab_phone_type5RowChangeEvent(CType(e.Row,bas_tab_phone_type5Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_type5Row(ByVal row As bas_tab_phone_type5Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type5Row
        Inherits DataRow
        
        Private tablebas_tab_phone_type5 As bas_tab_phone_type5DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type5 = CType(Me.Table,bas_tab_phone_type5DataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type5.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type5.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type5.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type5.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type5.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type5.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_type5RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_type5Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_type5Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_type5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
