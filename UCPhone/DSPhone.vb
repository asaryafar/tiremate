'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSPhone
    Inherits DataSet
    
    Private tablePhone As PhoneDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Phone")) Is Nothing) Then
                Me.Tables.Add(New PhoneDataTable(ds.Tables("Phone")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Phone As PhoneDataTable
        Get
            Return Me.tablePhone
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSPhone = CType(MyBase.Clone,DSPhone)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Phone")) Is Nothing) Then
            Me.Tables.Add(New PhoneDataTable(ds.Tables("Phone")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePhone = CType(Me.Tables("Phone"),PhoneDataTable)
        If (Not (Me.tablePhone) Is Nothing) Then
            Me.tablePhone.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSPhone"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSPhone.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePhone = New PhoneDataTable
        Me.Tables.Add(Me.tablePhone)
    End Sub
    
    Private Function ShouldSerializePhone() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PhoneRowChangeEventHandler(ByVal sender As Object, ByVal e As PhoneRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PhoneDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Friend Sub New()
            MyBase.New("Phone")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PhoneRow
            Get
                Return CType(Me.Rows(index),PhoneRow)
            End Get
        End Property
        
        Public Event PhoneRowChanged As PhoneRowChangeEventHandler
        
        Public Event PhoneRowChanging As PhoneRowChangeEventHandler
        
        Public Event PhoneRowDeleted As PhoneRowChangeEventHandler
        
        Public Event PhoneRowDeleting As PhoneRowChangeEventHandler
        
        Public Overloads Sub AddPhoneRow(ByVal row As PhoneRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPhoneRow( _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean) As PhoneRow
            Dim rowPhoneRow As PhoneRow = CType(Me.NewRow,PhoneRow)
            rowPhoneRow.ItemArray = New Object() {phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5}
            Me.Rows.Add(rowPhoneRow)
            Return rowPhoneRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PhoneDataTable = CType(MyBase.Clone,PhoneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PhoneDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
        End Sub
        
        Private Sub InitClass()
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columnphone_main_1.DefaultValue = true
            Me.columnphone_main_2.DefaultValue = false
            Me.columnphone_main_3.DefaultValue = false
            Me.columnphone_main_4.DefaultValue = false
            Me.columnphone_main_5.DefaultValue = false
        End Sub
        
        Public Function NewPhoneRow() As PhoneRow
            Return CType(Me.NewRow,PhoneRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PhoneRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PhoneRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PhoneRowChangedEvent) Is Nothing) Then
                RaiseEvent PhoneRowChanged(Me, New PhoneRowChangeEvent(CType(e.Row,PhoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PhoneRowChangingEvent) Is Nothing) Then
                RaiseEvent PhoneRowChanging(Me, New PhoneRowChangeEvent(CType(e.Row,PhoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PhoneRowDeletedEvent) Is Nothing) Then
                RaiseEvent PhoneRowDeleted(Me, New PhoneRowChangeEvent(CType(e.Row,PhoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PhoneRowDeletingEvent) Is Nothing) Then
                RaiseEvent PhoneRowDeleting(Me, New PhoneRowChangeEvent(CType(e.Row,PhoneRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePhoneRow(ByVal row As PhoneRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PhoneRow
        Inherits DataRow
        
        Private tablePhone As PhoneDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePhone = CType(Me.Table,PhoneDataTable)
        End Sub
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhone.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhone.phone_main_5Column) = value
            End Set
        End Property
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablePhone.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablePhone.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablePhone.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablePhone.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablePhone.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablePhone.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablePhone.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablePhone.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablePhone.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablePhone.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablePhone.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablePhone.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablePhone.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablePhone.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablePhone.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablePhone.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablePhone.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablePhone.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablePhone.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablePhone.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablePhone.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablePhone.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablePhone.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablePhone.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablePhone.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablePhone.phone_main_5Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PhoneRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PhoneRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PhoneRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PhoneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
