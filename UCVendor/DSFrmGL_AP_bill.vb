'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmGL_AP_bill
    Inherits DataSet
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
    
    Private tableGL_AP_bill_Dtl As GL_AP_bill_DtlDataTable
    
    Private tableGL_payment_bill_COA As GL_payment_bill_COADataTable
    
    Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
                Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
            End If
            If (Not (ds.Tables("GL_AP_bill_Dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_bill_DtlDataTable(ds.Tables("GL_AP_bill_Dtl")))
            End If
            If (Not (ds.Tables("GL_payment_bill_COA")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_bill_COADataTable(ds.Tables("GL_payment_bill_COA")))
            End If
            If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        Get
            Return Me.tableGL_TAB_AR_TERM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_bill_Dtl As GL_AP_bill_DtlDataTable
        Get
            Return Me.tableGL_AP_bill_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_bill_COA As GL_payment_bill_COADataTable
        Get
            Return Me.tableGL_payment_bill_COA
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        Get
            Return Me.tableGL_AP_bill_Dtl_Dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmGL_AP_bill = CType(MyBase.Clone,DSFrmGL_AP_bill)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
            Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
        End If
        If (Not (ds.Tables("GL_AP_bill_Dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_bill_DtlDataTable(ds.Tables("GL_AP_bill_Dtl")))
        End If
        If (Not (ds.Tables("GL_payment_bill_COA")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_bill_COADataTable(ds.Tables("GL_payment_bill_COA")))
        End If
        If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableGL_TAB_AR_TERM = CType(Me.Tables("GL_TAB_AR_TERM"),GL_TAB_AR_TERMDataTable)
        If (Not (Me.tableGL_TAB_AR_TERM) Is Nothing) Then
            Me.tableGL_TAB_AR_TERM.InitVars
        End If
        Me.tableGL_AP_bill_Dtl = CType(Me.Tables("GL_AP_bill_Dtl"),GL_AP_bill_DtlDataTable)
        If (Not (Me.tableGL_AP_bill_Dtl) Is Nothing) Then
            Me.tableGL_AP_bill_Dtl.InitVars
        End If
        Me.tableGL_payment_bill_COA = CType(Me.Tables("GL_payment_bill_COA"),GL_payment_bill_COADataTable)
        If (Not (Me.tableGL_payment_bill_COA) Is Nothing) Then
            Me.tableGL_payment_bill_COA.InitVars
        End If
        Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Tables("GL_AP_bill_Dtl_Dtl"),GL_AP_bill_Dtl_DtlDataTable)
        If (Not (Me.tableGL_AP_bill_Dtl_Dtl) Is Nothing) Then
            Me.tableGL_AP_bill_Dtl_Dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmGL_AP_bill"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmGL_AP_bill.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableGL_TAB_AR_TERM = New GL_TAB_AR_TERMDataTable
        Me.Tables.Add(Me.tableGL_TAB_AR_TERM)
        Me.tableGL_AP_bill_Dtl = New GL_AP_bill_DtlDataTable
        Me.Tables.Add(Me.tableGL_AP_bill_Dtl)
        Me.tableGL_payment_bill_COA = New GL_payment_bill_COADataTable
        Me.Tables.Add(Me.tableGL_payment_bill_COA)
        Me.tableGL_AP_bill_Dtl_Dtl = New GL_AP_bill_Dtl_DtlDataTable
        Me.Tables.Add(Me.tableGL_AP_bill_Dtl_Dtl)
    End Sub
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_TAB_AR_TERM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_AP_bill_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_bill_COA() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_AP_bill_Dtl_Dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub GL_TAB_AR_TERMRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_TAB_AR_TERMRowChangeEvent)
    
    Public Delegate Sub GL_AP_bill_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_bill_DtlRowChangeEvent)
    
    Public Delegate Sub GL_payment_bill_COARowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_bill_COARowChangeEvent)
    
    Public Delegate Sub GL_AP_bill_Dtl_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_bill_Dtl_DtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAR_terms As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_TAB_AR_TERM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_TAB_AR_TERMRow
            Get
                Return CType(Me.Rows(index),GL_TAB_AR_TERMRow)
            End Get
        End Property
        
        Public Event GL_TAB_AR_TERMRowChanged As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowChanging As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleted As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleting As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Overloads Sub AddGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_TAB_AR_TERMRow(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Dim rowGL_TAB_AR_TERMRow As GL_TAB_AR_TERMRow = CType(Me.NewRow,GL_TAB_AR_TERMRow)
            rowGL_TAB_AR_TERMRow.ItemArray = New Object() {AR_terms}
            Me.Rows.Add(rowGL_TAB_AR_TERMRow)
            Return rowGL_TAB_AR_TERMRow
        End Function
        
        Public Function FindByAR_terms(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Return CType(Me.Rows.Find(New Object() {AR_terms}),GL_TAB_AR_TERMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_TAB_AR_TERMDataTable = CType(MyBase.Clone,GL_TAB_AR_TERMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_TAB_AR_TERMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAR_terms = Me.Columns("AR_terms")
        End Sub
        
        Private Sub InitClass()
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAR_terms}, true))
            Me.columnAR_terms.AllowDBNull = false
            Me.columnAR_terms.Unique = true
        End Sub
        
        Public Function NewGL_TAB_AR_TERMRow() As GL_TAB_AR_TERMRow
            Return CType(Me.NewRow,GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_TAB_AR_TERMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanged(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanging(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleted(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleting(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRow
        Inherits DataRow
        
        Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_TAB_AR_TERM = CType(Me.Table,GL_TAB_AR_TERMDataTable)
        End Sub
        
        Public Property AR_terms As String
            Get
                Return CType(Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn),String)
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_TAB_AR_TERMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_TAB_AR_TERMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_TAB_AR_TERMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_AP_bill_dtl As DataColumn
        
        Private columnref_no As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnRef_date As DataColumn
        
        Private columnMin_due_date As DataColumn
        
        Private columnDesc_Bill As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_bill_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl
            End Get
        End Property
        
        Friend ReadOnly Property ref_noColumn As DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property Ref_dateColumn As DataColumn
            Get
                Return Me.columnRef_date
            End Get
        End Property
        
        Friend ReadOnly Property Min_due_dateColumn As DataColumn
            Get
                Return Me.columnMin_due_date
            End Get
        End Property
        
        Friend ReadOnly Property Desc_BillColumn As DataColumn
            Get
                Return Me.columnDesc_Bill
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_bill_DtlRow
            Get
                Return CType(Me.Rows(index),GL_AP_bill_DtlRow)
            End Get
        End Property
        
        Public Event GL_AP_bill_DtlRowChanged As GL_AP_bill_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_DtlRowChanging As GL_AP_bill_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_DtlRowDeleted As GL_AP_bill_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_DtlRowDeleting As GL_AP_bill_DtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_bill_DtlRow(ByVal row As GL_AP_bill_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_bill_DtlRow(ByVal ref_no As String, ByVal AR_terms As String, ByVal amount As Decimal, ByVal Discount As Decimal, ByVal id_GL_journal As Integer, ByVal Ref_date As String, ByVal Min_due_date As String, ByVal Desc_Bill As String) As GL_AP_bill_DtlRow
            Dim rowGL_AP_bill_DtlRow As GL_AP_bill_DtlRow = CType(Me.NewRow,GL_AP_bill_DtlRow)
            rowGL_AP_bill_DtlRow.ItemArray = New Object() {Nothing, ref_no, AR_terms, amount, Discount, id_GL_journal, Ref_date, Min_due_date, Desc_Bill}
            Me.Rows.Add(rowGL_AP_bill_DtlRow)
            Return rowGL_AP_bill_DtlRow
        End Function
        
        Public Function FindById_AP_bill_dtl(ByVal Id_AP_bill_dtl As Integer) As GL_AP_bill_DtlRow
            Return CType(Me.Rows.Find(New Object() {Id_AP_bill_dtl}),GL_AP_bill_DtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_bill_DtlDataTable = CType(MyBase.Clone,GL_AP_bill_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_bill_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_AP_bill_dtl = Me.Columns("Id_AP_bill_dtl")
            Me.columnref_no = Me.Columns("ref_no")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnamount = Me.Columns("amount")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnRef_date = Me.Columns("Ref_date")
            Me.columnMin_due_date = Me.Columns("Min_due_date")
            Me.columnDesc_Bill = Me.Columns("Desc_Bill")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_AP_bill_dtl = New DataColumn("Id_AP_bill_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl)
            Me.columnref_no = New DataColumn("ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref_no)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnRef_date = New DataColumn("Ref_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRef_date)
            Me.columnMin_due_date = New DataColumn("Min_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMin_due_date)
            Me.columnDesc_Bill = New DataColumn("Desc_Bill", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc_Bill)
            Me.Constraints.Add(New UniqueConstraint("DSFrmGL_AP_billKey1", New DataColumn() {Me.columnId_AP_bill_dtl}, true))
            Me.columnId_AP_bill_dtl.AutoIncrement = true
            Me.columnId_AP_bill_dtl.AutoIncrementSeed = 1
            Me.columnId_AP_bill_dtl.AllowDBNull = false
            Me.columnId_AP_bill_dtl.ReadOnly = true
            Me.columnId_AP_bill_dtl.Unique = true
        End Sub
        
        Public Function NewGL_AP_bill_DtlRow() As GL_AP_bill_DtlRow
            Return CType(Me.NewRow,GL_AP_bill_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_bill_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_bill_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_bill_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_DtlRowChanged(Me, New GL_AP_bill_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_bill_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_DtlRowChanging(Me, New GL_AP_bill_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_bill_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_DtlRowDeleted(Me, New GL_AP_bill_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_bill_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_DtlRowDeleting(Me, New GL_AP_bill_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_bill_DtlRow(ByVal row As GL_AP_bill_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_DtlRow
        Inherits DataRow
        
        Private tableGL_AP_bill_Dtl As GL_AP_bill_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_bill_Dtl = CType(Me.Table,GL_AP_bill_DtlDataTable)
        End Sub
        
        Public Property Id_AP_bill_dtl As Integer
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl.Id_AP_bill_dtlColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.Id_AP_bill_dtlColumn) = value
            End Set
        End Property
        
        Public Property ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.ref_noColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.DiscountColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Ref_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.Ref_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.Ref_dateColumn) = value
            End Set
        End Property
        
        Public Property Min_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.Min_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.Min_due_dateColumn) = value
            End Set
        End Property
        
        Public Property Desc_Bill As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl.Desc_BillColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl.Desc_BillColumn) = value
            End Set
        End Property
        
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.ref_noColumn)
        End Function
        
        Public Sub Setref_noNull()
            Me(Me.tableGL_AP_bill_Dtl.ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableGL_AP_bill_Dtl.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_AP_bill_Dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGL_AP_bill_Dtl.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_AP_bill_Dtl.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRef_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.Ref_dateColumn)
        End Function
        
        Public Sub SetRef_dateNull()
            Me(Me.tableGL_AP_bill_Dtl.Ref_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMin_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.Min_due_dateColumn)
        End Function
        
        Public Sub SetMin_due_dateNull()
            Me(Me.tableGL_AP_bill_Dtl.Min_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesc_BillNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl.Desc_BillColumn)
        End Function
        
        Public Sub SetDesc_BillNull()
            Me(Me.tableGL_AP_bill_Dtl.Desc_BillColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_bill_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_bill_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_bill_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_bill_COADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_AP_bill_dtl As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnMemo As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_bill_COA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_bill_COARow
            Get
                Return CType(Me.Rows(index),GL_payment_bill_COARow)
            End Get
        End Property
        
        Public Event GL_payment_bill_COARowChanged As GL_payment_bill_COARowChangeEventHandler
        
        Public Event GL_payment_bill_COARowChanging As GL_payment_bill_COARowChangeEventHandler
        
        Public Event GL_payment_bill_COARowDeleted As GL_payment_bill_COARowChangeEventHandler
        
        Public Event GL_payment_bill_COARowDeleting As GL_payment_bill_COARowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_bill_COARow(ByVal row As GL_payment_bill_COARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_bill_COARow(ByVal Id_AP_bill_dtl As Integer, ByVal GL_account As String, ByVal Amount As Decimal, ByVal Memo As String, ByVal desc_GL_account As String) As GL_payment_bill_COARow
            Dim rowGL_payment_bill_COARow As GL_payment_bill_COARow = CType(Me.NewRow,GL_payment_bill_COARow)
            rowGL_payment_bill_COARow.ItemArray = New Object() {Id_AP_bill_dtl, GL_account, Amount, Memo, desc_GL_account}
            Me.Rows.Add(rowGL_payment_bill_COARow)
            Return rowGL_payment_bill_COARow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_bill_COADataTable = CType(MyBase.Clone,GL_payment_bill_COADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_bill_COADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_AP_bill_dtl = Me.Columns("Id_AP_bill_dtl")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnMemo = Me.Columns("Memo")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_AP_bill_dtl = New DataColumn("Id_AP_bill_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnId_AP_bill_dtl.AllowDBNull = false
            Me.columnGL_account.AllowDBNull = false
            Me.columnAmount.DefaultValue = 0
        End Sub
        
        Public Function NewGL_payment_bill_COARow() As GL_payment_bill_COARow
            Return CType(Me.NewRow,GL_payment_bill_COARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_bill_COARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_bill_COARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_bill_COARowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_bill_COARowChanged(Me, New GL_payment_bill_COARowChangeEvent(CType(e.Row,GL_payment_bill_COARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_bill_COARowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_bill_COARowChanging(Me, New GL_payment_bill_COARowChangeEvent(CType(e.Row,GL_payment_bill_COARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_bill_COARowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_bill_COARowDeleted(Me, New GL_payment_bill_COARowChangeEvent(CType(e.Row,GL_payment_bill_COARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_bill_COARowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_bill_COARowDeleting(Me, New GL_payment_bill_COARowChangeEvent(CType(e.Row,GL_payment_bill_COARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_bill_COARow(ByVal row As GL_payment_bill_COARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_bill_COARow
        Inherits DataRow
        
        Private tableGL_payment_bill_COA As GL_payment_bill_COADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_bill_COA = CType(Me.Table,GL_payment_bill_COADataTable)
        End Sub
        
        Public Property Id_AP_bill_dtl As Integer
            Get
                Return CType(Me(Me.tableGL_payment_bill_COA.Id_AP_bill_dtlColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_bill_COA.Id_AP_bill_dtlColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_payment_bill_COA.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_payment_bill_COA.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                If Me.IsAmountNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableGL_payment_bill_COA.AmountColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableGL_payment_bill_COA.AmountColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_bill_COA.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_bill_COA.MemoColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_bill_COA.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_bill_COA.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_bill_COA.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableGL_payment_bill_COA.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_bill_COA.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_payment_bill_COA.MemoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_bill_COA.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_payment_bill_COA.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_bill_COARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_bill_COARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_bill_COARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_bill_COARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndue_date As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnId_AP_bill_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_bill_Dtl_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_bill_Dtl_DtlRow
            Get
                Return CType(Me.Rows(index),GL_AP_bill_Dtl_DtlRow)
            End Get
        End Property
        
        Public Event GL_AP_bill_Dtl_DtlRowChanged As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowChanging As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleted As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleting As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_bill_Dtl_DtlRow(ByVal due_date As String, ByVal amount As Decimal, ByVal Id_AP_bill_dtl As Integer) As GL_AP_bill_Dtl_DtlRow
            Dim rowGL_AP_bill_Dtl_DtlRow As GL_AP_bill_Dtl_DtlRow = CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
            rowGL_AP_bill_Dtl_DtlRow.ItemArray = New Object() {due_date, amount, Id_AP_bill_dtl}
            Me.Rows.Add(rowGL_AP_bill_Dtl_DtlRow)
            Return rowGL_AP_bill_Dtl_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_bill_Dtl_DtlDataTable = CType(MyBase.Clone,GL_AP_bill_Dtl_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_bill_Dtl_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndue_date = Me.Columns("due_date")
            Me.columnamount = Me.Columns("amount")
            Me.columnId_AP_bill_dtl = Me.Columns("Id_AP_bill_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnId_AP_bill_dtl = New DataColumn("Id_AP_bill_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl)
        End Sub
        
        Public Function NewGL_AP_bill_Dtl_DtlRow() As GL_AP_bill_Dtl_DtlRow
            Return CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_bill_Dtl_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanged(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanging(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleted(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleting(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRow
        Inherits DataRow
        
        Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Table,GL_AP_bill_Dtl_DtlDataTable)
        End Sub
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = value
            End Set
        End Property
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_AP_bill_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtlNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_bill_Dtl_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_bill_Dtl_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_bill_Dtl_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
