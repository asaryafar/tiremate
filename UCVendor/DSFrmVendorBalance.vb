'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmVendorBalance
    Inherits DataSet
    
    Private tableVendorBalace As VendorBalaceDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VendorBalace")) Is Nothing) Then
                Me.Tables.Add(New VendorBalaceDataTable(ds.Tables("VendorBalace")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VendorBalace As VendorBalaceDataTable
        Get
            Return Me.tableVendorBalace
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmVendorBalance = CType(MyBase.Clone,DSFrmVendorBalance)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VendorBalace")) Is Nothing) Then
            Me.Tables.Add(New VendorBalaceDataTable(ds.Tables("VendorBalace")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVendorBalace = CType(Me.Tables("VendorBalace"),VendorBalaceDataTable)
        If (Not (Me.tableVendorBalace) Is Nothing) Then
            Me.tableVendorBalace.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmVendorBalance"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmVendorBalance.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVendorBalace = New VendorBalaceDataTable
        Me.Tables.Add(Me.tableVendorBalace)
    End Sub
    
    Private Function ShouldSerializeVendorBalace() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VendorBalaceRowChangeEventHandler(ByVal sender As Object, ByVal e As VendorBalaceRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorBalaceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRef_No As DataColumn
        
        Private columnRef_Desc As DataColumn
        
        Private columnRef_Date As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnTypeOfRecord As DataColumn
        
        Private columnId_AP_bill_Head As DataColumn
        
        Private columnSortOrder As DataColumn
        
        Friend Sub New()
            MyBase.New("VendorBalace")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ref_NoColumn As DataColumn
            Get
                Return Me.columnRef_No
            End Get
        End Property
        
        Friend ReadOnly Property Ref_DescColumn As DataColumn
            Get
                Return Me.columnRef_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Ref_DateColumn As DataColumn
            Get
                Return Me.columnRef_Date
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfRecordColumn As DataColumn
            Get
                Return Me.columnTypeOfRecord
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_HeadColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_Head
            End Get
        End Property
        
        Friend ReadOnly Property SortOrderColumn As DataColumn
            Get
                Return Me.columnSortOrder
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VendorBalaceRow
            Get
                Return CType(Me.Rows(index),VendorBalaceRow)
            End Get
        End Property
        
        Public Event VendorBalaceRowChanged As VendorBalaceRowChangeEventHandler
        
        Public Event VendorBalaceRowChanging As VendorBalaceRowChangeEventHandler
        
        Public Event VendorBalaceRowDeleted As VendorBalaceRowChangeEventHandler
        
        Public Event VendorBalaceRowDeleting As VendorBalaceRowChangeEventHandler
        
        Public Overloads Sub AddVendorBalaceRow(ByVal row As VendorBalaceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVendorBalaceRow(ByVal Ref_No As String, ByVal Ref_Desc As String, ByVal Ref_Date As String, ByVal amount As Decimal, ByVal due_date As String, ByVal TypeOfRecord As Long, ByVal Id_AP_bill_Head As String, ByVal SortOrder As String) As VendorBalaceRow
            Dim rowVendorBalaceRow As VendorBalaceRow = CType(Me.NewRow,VendorBalaceRow)
            rowVendorBalaceRow.ItemArray = New Object() {Ref_No, Ref_Desc, Ref_Date, amount, due_date, TypeOfRecord, Id_AP_bill_Head, SortOrder}
            Me.Rows.Add(rowVendorBalaceRow)
            Return rowVendorBalaceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VendorBalaceDataTable = CType(MyBase.Clone,VendorBalaceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VendorBalaceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRef_No = Me.Columns("Ref_No")
            Me.columnRef_Desc = Me.Columns("Ref_Desc")
            Me.columnRef_Date = Me.Columns("Ref_Date")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnTypeOfRecord = Me.Columns("TypeOfRecord")
            Me.columnId_AP_bill_Head = Me.Columns("Id_AP_bill_Head")
            Me.columnSortOrder = Me.Columns("SortOrder")
        End Sub
        
        Private Sub InitClass()
            Me.columnRef_No = New DataColumn("Ref_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRef_No)
            Me.columnRef_Desc = New DataColumn("Ref_Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRef_Desc)
            Me.columnRef_Date = New DataColumn("Ref_Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRef_Date)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnTypeOfRecord = New DataColumn("TypeOfRecord", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfRecord)
            Me.columnId_AP_bill_Head = New DataColumn("Id_AP_bill_Head", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_Head)
            Me.columnSortOrder = New DataColumn("SortOrder", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSortOrder)
            Me.columnRef_No.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columndue_date.AllowDBNull = false
            Me.columnId_AP_bill_Head.AllowDBNull = false
        End Sub
        
        Public Function NewVendorBalaceRow() As VendorBalaceRow
            Return CType(Me.NewRow,VendorBalaceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VendorBalaceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VendorBalaceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VendorBalaceRowChangedEvent) Is Nothing) Then
                RaiseEvent VendorBalaceRowChanged(Me, New VendorBalaceRowChangeEvent(CType(e.Row,VendorBalaceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VendorBalaceRowChangingEvent) Is Nothing) Then
                RaiseEvent VendorBalaceRowChanging(Me, New VendorBalaceRowChangeEvent(CType(e.Row,VendorBalaceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VendorBalaceRowDeletedEvent) Is Nothing) Then
                RaiseEvent VendorBalaceRowDeleted(Me, New VendorBalaceRowChangeEvent(CType(e.Row,VendorBalaceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VendorBalaceRowDeletingEvent) Is Nothing) Then
                RaiseEvent VendorBalaceRowDeleting(Me, New VendorBalaceRowChangeEvent(CType(e.Row,VendorBalaceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVendorBalaceRow(ByVal row As VendorBalaceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorBalaceRow
        Inherits DataRow
        
        Private tableVendorBalace As VendorBalaceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendorBalace = CType(Me.Table,VendorBalaceDataTable)
        End Sub
        
        Public Property Ref_No As String
            Get
                Return CType(Me(Me.tableVendorBalace.Ref_NoColumn),String)
            End Get
            Set
                Me(Me.tableVendorBalace.Ref_NoColumn) = value
            End Set
        End Property
        
        Public Property Ref_Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorBalace.Ref_DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorBalace.Ref_DescColumn) = value
            End Set
        End Property
        
        Public Property Ref_Date As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorBalace.Ref_DateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorBalace.Ref_DateColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableVendorBalace.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableVendorBalace.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Return CType(Me(Me.tableVendorBalace.due_dateColumn),String)
            End Get
            Set
                Me(Me.tableVendorBalace.due_dateColumn) = value
            End Set
        End Property
        
        Public Property TypeOfRecord As Long
            Get
                Try 
                    Return CType(Me(Me.tableVendorBalace.TypeOfRecordColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorBalace.TypeOfRecordColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_Head As String
            Get
                Return CType(Me(Me.tableVendorBalace.Id_AP_bill_HeadColumn),String)
            End Get
            Set
                Me(Me.tableVendorBalace.Id_AP_bill_HeadColumn) = value
            End Set
        End Property
        
        Public Property SortOrder As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorBalace.SortOrderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorBalace.SortOrderColumn) = value
            End Set
        End Property
        
        Public Function IsRef_DescNull() As Boolean
            Return Me.IsNull(Me.tableVendorBalace.Ref_DescColumn)
        End Function
        
        Public Sub SetRef_DescNull()
            Me(Me.tableVendorBalace.Ref_DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRef_DateNull() As Boolean
            Return Me.IsNull(Me.tableVendorBalace.Ref_DateColumn)
        End Function
        
        Public Sub SetRef_DateNull()
            Me(Me.tableVendorBalace.Ref_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfRecordNull() As Boolean
            Return Me.IsNull(Me.tableVendorBalace.TypeOfRecordColumn)
        End Function
        
        Public Sub SetTypeOfRecordNull()
            Me(Me.tableVendorBalace.TypeOfRecordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSortOrderNull() As Boolean
            Return Me.IsNull(Me.tableVendorBalace.SortOrderColumn)
        End Function
        
        Public Sub SetSortOrderNull()
            Me(Me.tableVendorBalace.SortOrderColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorBalaceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VendorBalaceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VendorBalaceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VendorBalaceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
