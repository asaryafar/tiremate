'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmItemHistory
    Inherits DataSet
    
    Private tableBiginQty As BiginQtyDataTable
    
    Private tableLedger As LedgerDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BiginQty")) Is Nothing) Then
                Me.Tables.Add(New BiginQtyDataTable(ds.Tables("BiginQty")))
            End If
            If (Not (ds.Tables("Ledger")) Is Nothing) Then
                Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BiginQty As BiginQtyDataTable
        Get
            Return Me.tableBiginQty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ledger As LedgerDataTable
        Get
            Return Me.tableLedger
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmItemHistory = CType(MyBase.Clone,DSFrmItemHistory)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BiginQty")) Is Nothing) Then
            Me.Tables.Add(New BiginQtyDataTable(ds.Tables("BiginQty")))
        End If
        If (Not (ds.Tables("Ledger")) Is Nothing) Then
            Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBiginQty = CType(Me.Tables("BiginQty"),BiginQtyDataTable)
        If (Not (Me.tableBiginQty) Is Nothing) Then
            Me.tableBiginQty.InitVars
        End If
        Me.tableLedger = CType(Me.Tables("Ledger"),LedgerDataTable)
        If (Not (Me.tableLedger) Is Nothing) Then
            Me.tableLedger.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmItemHistory"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmItemHistory.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBiginQty = New BiginQtyDataTable
        Me.Tables.Add(Me.tableBiginQty)
        Me.tableLedger = New LedgerDataTable
        Me.Tables.Add(Me.tableLedger)
    End Sub
    
    Private Function ShouldSerializeBiginQty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLedger() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BiginQtyRowChangeEventHandler(ByVal sender As Object, ByVal e As BiginQtyRowChangeEvent)
    
    Public Delegate Sub LedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnBeginingQty As DataColumn
        
        Private columnQtyOut As DataColumn
        
        Private columnQtyIn As DataColumn
        
        Private columnflag As DataColumn
        
        Private columndesc_item_ As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflagshow As DataColumn
        
        Private columnOnHand As DataColumn
        
        Friend Sub New()
            MyBase.New("BiginQty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property BeginingQtyColumn As DataColumn
            Get
                Return Me.columnBeginingQty
            End Get
        End Property
        
        Friend ReadOnly Property QtyOutColumn As DataColumn
            Get
                Return Me.columnQtyOut
            End Get
        End Property
        
        Friend ReadOnly Property QtyInColumn As DataColumn
            Get
                Return Me.columnQtyIn
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_Column As DataColumn
            Get
                Return Me.columndesc_item_
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagshowColumn As DataColumn
            Get
                Return Me.columnflagshow
            End Get
        End Property
        
        Friend ReadOnly Property OnHandColumn As DataColumn
            Get
                Return Me.columnOnHand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BiginQtyRow
            Get
                Return CType(Me.Rows(index),BiginQtyRow)
            End Get
        End Property
        
        Public Event BiginQtyRowChanged As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowChanging As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowDeleted As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowDeleting As BiginQtyRowChangeEventHandler
        
        Public Overloads Sub AddBiginQtyRow(ByVal row As BiginQtyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBiginQtyRow(ByVal item_no As String, ByVal BeginingQty As Integer, ByVal QtyOut As Integer, ByVal QtyIn As Integer, ByVal flag As Boolean, ByVal desc_item_ As String, ByVal desc_item_type As String, ByVal line As String, ByVal complete_desc_brand As String, ByVal desc_style As String, ByVal store_no As Integer, ByVal flagshow As Boolean, ByVal OnHand As Integer) As BiginQtyRow
            Dim rowBiginQtyRow As BiginQtyRow = CType(Me.NewRow,BiginQtyRow)
            rowBiginQtyRow.ItemArray = New Object() {item_no, BeginingQty, QtyOut, QtyIn, flag, desc_item_, desc_item_type, line, complete_desc_brand, desc_style, store_no, flagshow, OnHand}
            Me.Rows.Add(rowBiginQtyRow)
            Return rowBiginQtyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BiginQtyDataTable = CType(MyBase.Clone,BiginQtyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BiginQtyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnBeginingQty = Me.Columns("BeginingQty")
            Me.columnQtyOut = Me.Columns("QtyOut")
            Me.columnQtyIn = Me.Columns("QtyIn")
            Me.columnflag = Me.Columns("flag")
            Me.columndesc_item_ = Me.Columns("desc_item ")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflagshow = Me.Columns("flagshow")
            Me.columnOnHand = Me.Columns("OnHand")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnBeginingQty = New DataColumn("BeginingQty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeginingQty)
            Me.columnQtyOut = New DataColumn("QtyOut", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQtyOut)
            Me.columnQtyIn = New DataColumn("QtyIn", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQtyIn)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columndesc_item_ = New DataColumn("desc_item ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflagshow = New DataColumn("flagshow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagshow)
            Me.columnOnHand = New DataColumn("OnHand", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOnHand)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnitem_no}, false))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewBiginQtyRow() As BiginQtyRow
            Return CType(Me.NewRow,BiginQtyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BiginQtyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BiginQtyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BiginQtyRowChangedEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowChanged(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BiginQtyRowChangingEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowChanging(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BiginQtyRowDeletedEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowDeleted(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BiginQtyRowDeletingEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowDeleting(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBiginQtyRow(ByVal row As BiginQtyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyRow
        Inherits DataRow
        
        Private tableBiginQty As BiginQtyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBiginQty = CType(Me.Table,BiginQtyDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableBiginQty.item_noColumn),String)
            End Get
            Set
                Me(Me.tableBiginQty.item_noColumn) = value
            End Set
        End Property
        
        Public Property BeginingQty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.BeginingQtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.BeginingQtyColumn) = value
            End Set
        End Property
        
        Public Property QtyOut As Integer
            Get
                If Me.IsQtyOutNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableBiginQty.QtyOutColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableBiginQty.QtyOutColumn) = value
            End Set
        End Property
        
        Public Property QtyIn As Integer
            Get
                If Me.IsQtyInNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableBiginQty.QtyInColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableBiginQty.QtyInColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.flagColumn) = value
            End Set
        End Property
        
        Public Property desc_item_ As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_item_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_item_Column) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableBiginQty.lineColumn),String)
            End Get
            Set
                Me(Me.tableBiginQty.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.store_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.store_noColumn) = value
            End Set
        End Property
        
        Public Property flagshow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.flagshowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.flagshowColumn) = value
            End Set
        End Property
        
        Public Property OnHand As Integer
            Get
                If Me.IsOnHandNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableBiginQty.OnHandColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableBiginQty.OnHandColumn) = value
            End Set
        End Property
        
        Public Function IsBeginingQtyNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.BeginingQtyColumn)
        End Function
        
        Public Sub SetBeginingQtyNull()
            Me(Me.tableBiginQty.BeginingQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyOutNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.QtyOutColumn)
        End Function
        
        Public Sub SetQtyOutNull()
            Me(Me.tableBiginQty.QtyOutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyInNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.QtyInColumn)
        End Function
        
        Public Sub SetQtyInNull()
            Me(Me.tableBiginQty.QtyInColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableBiginQty.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_Null() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_item_Column)
        End Function
        
        Public Sub Setdesc_item_Null()
            Me(Me.tableBiginQty.desc_item_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableBiginQty.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableBiginQty.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableBiginQty.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableBiginQty.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagshowNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.flagshowColumn)
        End Function
        
        Public Sub SetflagshowNull()
            Me(Me.tableBiginQty.flagshowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOnHandNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.OnHandColumn)
        End Function
        
        Public Sub SetOnHandNull()
            Me(Me.tableBiginQty.OnHandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BiginQtyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BiginQtyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BiginQtyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnrefno As DataColumn
        
        Private column_date As DataColumn
        
        Private columnqtyin As DataColumn
        
        Private columnqtyout As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columncustomer As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnvendor As DataColumn
        
        Private columnbill_credit As DataColumn
        
        Private columnBegining As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnkind As DataColumn
        
        Friend Sub New()
            MyBase.New("Ledger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property refnoColumn As DataColumn
            Get
                Return Me.columnrefno
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property qtyinColumn As DataColumn
            Get
                Return Me.columnqtyin
            End Get
        End Property
        
        Friend ReadOnly Property qtyoutColumn As DataColumn
            Get
                Return Me.columnqtyout
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property customerColumn As DataColumn
            Get
                Return Me.columncustomer
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property vendorColumn As DataColumn
            Get
                Return Me.columnvendor
            End Get
        End Property
        
        Friend ReadOnly Property bill_creditColumn As DataColumn
            Get
                Return Me.columnbill_credit
            End Get
        End Property
        
        Friend ReadOnly Property BeginingColumn As DataColumn
            Get
                Return Me.columnBegining
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property kindColumn As DataColumn
            Get
                Return Me.columnkind
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerRow
            Get
                Return CType(Me.Rows(index),LedgerRow)
            End Get
        End Property
        
        Public Event LedgerRowChanged As LedgerRowChangeEventHandler
        
        Public Event LedgerRowChanging As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleted As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleting As LedgerRowChangeEventHandler
        
        Public Overloads Sub AddLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLedgerRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal refno As String,  _
                    ByVal _date As String,  _
                    ByVal qtyin As Integer,  _
                    ByVal qtyout As Integer,  _
                    ByVal desc_item_type As String,  _
                    ByVal customer As String,  _
                    ByVal line As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_style As String,  _
                    ByVal store_no As Integer,  _
                    ByVal flag As Boolean,  _
                    ByVal vendor As String,  _
                    ByVal bill_credit As String,  _
                    ByVal Begining As Decimal,  _
                    ByVal OrderDate As String,  _
                    ByVal kind As String) As LedgerRow
            Dim rowLedgerRow As LedgerRow = CType(Me.NewRow,LedgerRow)
            rowLedgerRow.ItemArray = New Object() {item_no, desc_item, refno, _date, qtyin, qtyout, desc_item_type, customer, line, complete_desc_brand, desc_style, store_no, flag, vendor, bill_credit, Begining, OrderDate, kind}
            Me.Rows.Add(rowLedgerRow)
            Return rowLedgerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LedgerDataTable = CType(MyBase.Clone,LedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LedgerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnrefno = Me.Columns("refno")
            Me.column_date = Me.Columns("date")
            Me.columnqtyin = Me.Columns("qtyin")
            Me.columnqtyout = Me.Columns("qtyout")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columncustomer = Me.Columns("customer")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflag = Me.Columns("flag")
            Me.columnvendor = Me.Columns("vendor")
            Me.columnbill_credit = Me.Columns("bill_credit")
            Me.columnBegining = Me.Columns("Begining")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnkind = Me.Columns("kind")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnrefno = New DataColumn("refno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefno)
            Me.column_date = New DataColumn("date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnqtyin = New DataColumn("qtyin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyin)
            Me.columnqtyout = New DataColumn("qtyout", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyout)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columncustomer = New DataColumn("customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnvendor = New DataColumn("vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor)
            Me.columnbill_credit = New DataColumn("bill_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_credit)
            Me.columnBegining = New DataColumn("Begining", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBegining)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnkind = New DataColumn("kind", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkind)
            Me.columnitem_no.AllowDBNull = false
            Me.columnrefno.AllowDBNull = false
        End Sub
        
        Public Function NewLedgerRow() As LedgerRow
            Return CType(Me.NewRow,LedgerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LedgerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LedgerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanged(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanging(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleted(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleting(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRow
        Inherits DataRow
        
        Private tableLedger As LedgerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedger = CType(Me.Table,LedgerDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableLedger.item_noColumn),String)
            End Get
            Set
                Me(Me.tableLedger.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property refno As String
            Get
                Return CType(Me(Me.tableLedger.refnoColumn),String)
            End Get
            Set
                Me(Me.tableLedger.refnoColumn) = value
            End Set
        End Property
        
        Public Property _date As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger._dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger._dateColumn) = value
            End Set
        End Property
        
        Public Property qtyin As Integer
            Get
                If Me.IsqtyinNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.qtyinColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableLedger.qtyinColumn) = value
            End Set
        End Property
        
        Public Property qtyout As Integer
            Get
                If Me.IsqtyoutNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.qtyoutColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableLedger.qtyoutColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property customer As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.customerColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLedger.store_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.store_noColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableLedger.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.flagColumn) = value
            End Set
        End Property
        
        Public Property vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.vendorColumn) = value
            End Set
        End Property
        
        Public Property bill_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.bill_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.bill_creditColumn) = value
            End Set
        End Property
        
        Public Property Begining As Decimal
            Get
                If Me.IsBeginingNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.BeginingColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableLedger.BeginingColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property kind As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.kindColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.kindColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableLedger.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableLedger._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableLedger._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyinNull() As Boolean
            Return Me.IsNull(Me.tableLedger.qtyinColumn)
        End Function
        
        Public Sub SetqtyinNull()
            Me(Me.tableLedger.qtyinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyoutNull() As Boolean
            Return Me.IsNull(Me.tableLedger.qtyoutColumn)
        End Function
        
        Public Sub SetqtyoutNull()
            Me(Me.tableLedger.qtyoutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableLedger.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscustomerNull() As Boolean
            Return Me.IsNull(Me.tableLedger.customerColumn)
        End Function
        
        Public Sub SetcustomerNull()
            Me(Me.tableLedger.customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableLedger.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableLedger.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableLedger.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableLedger.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableLedger.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableLedger.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableLedger.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableLedger.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableLedger.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorNull() As Boolean
            Return Me.IsNull(Me.tableLedger.vendorColumn)
        End Function
        
        Public Sub SetvendorNull()
            Me(Me.tableLedger.vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_creditNull() As Boolean
            Return Me.IsNull(Me.tableLedger.bill_creditColumn)
        End Function
        
        Public Sub Setbill_creditNull()
            Me(Me.tableLedger.bill_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeginingNull() As Boolean
            Return Me.IsNull(Me.tableLedger.BeginingColumn)
        End Function
        
        Public Sub SetBeginingNull()
            Me(Me.tableLedger.BeginingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableLedger.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableLedger.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IskindNull() As Boolean
            Return Me.IsNull(Me.tableLedger.kindColumn)
        End Function
        
        Public Sub SetkindNull()
            Me(Me.tableLedger.kindColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LedgerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LedgerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
