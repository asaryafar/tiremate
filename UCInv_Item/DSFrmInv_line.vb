'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmInv_line
    Inherits DataSet
    
    Private tableInv_Construction As Inv_ConstructionDataTable
    
    Private tableInv_LimitedWarranty As Inv_LimitedWarrantyDataTable
    
    Private tableinv_tab_brand As inv_tab_brandDataTable
    
    Private tableInv_Temperature As Inv_TemperatureDataTable
    
    Private tableInv_Traction As Inv_TractionDataTable
    
    Private tableInv_Treadwear As Inv_TreadwearDataTable
    
    Private tableinv_tab_style As inv_tab_styleDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Inv_Construction")) Is Nothing) Then
                Me.Tables.Add(New Inv_ConstructionDataTable(ds.Tables("Inv_Construction")))
            End If
            If (Not (ds.Tables("Inv_LimitedWarranty")) Is Nothing) Then
                Me.Tables.Add(New Inv_LimitedWarrantyDataTable(ds.Tables("Inv_LimitedWarranty")))
            End If
            If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
            End If
            If (Not (ds.Tables("Inv_Temperature")) Is Nothing) Then
                Me.Tables.Add(New Inv_TemperatureDataTable(ds.Tables("Inv_Temperature")))
            End If
            If (Not (ds.Tables("Inv_Traction")) Is Nothing) Then
                Me.Tables.Add(New Inv_TractionDataTable(ds.Tables("Inv_Traction")))
            End If
            If (Not (ds.Tables("Inv_Treadwear")) Is Nothing) Then
                Me.Tables.Add(New Inv_TreadwearDataTable(ds.Tables("Inv_Treadwear")))
            End If
            If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Construction As Inv_ConstructionDataTable
        Get
            Return Me.tableInv_Construction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_LimitedWarranty As Inv_LimitedWarrantyDataTable
        Get
            Return Me.tableInv_LimitedWarranty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_brand As inv_tab_brandDataTable
        Get
            Return Me.tableinv_tab_brand
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Temperature As Inv_TemperatureDataTable
        Get
            Return Me.tableInv_Temperature
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Traction As Inv_TractionDataTable
        Get
            Return Me.tableInv_Traction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Treadwear As Inv_TreadwearDataTable
        Get
            Return Me.tableInv_Treadwear
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_style As inv_tab_styleDataTable
        Get
            Return Me.tableinv_tab_style
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmInv_line = CType(MyBase.Clone,DSFrmInv_line)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Inv_Construction")) Is Nothing) Then
            Me.Tables.Add(New Inv_ConstructionDataTable(ds.Tables("Inv_Construction")))
        End If
        If (Not (ds.Tables("Inv_LimitedWarranty")) Is Nothing) Then
            Me.Tables.Add(New Inv_LimitedWarrantyDataTable(ds.Tables("Inv_LimitedWarranty")))
        End If
        If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
        End If
        If (Not (ds.Tables("Inv_Temperature")) Is Nothing) Then
            Me.Tables.Add(New Inv_TemperatureDataTable(ds.Tables("Inv_Temperature")))
        End If
        If (Not (ds.Tables("Inv_Traction")) Is Nothing) Then
            Me.Tables.Add(New Inv_TractionDataTable(ds.Tables("Inv_Traction")))
        End If
        If (Not (ds.Tables("Inv_Treadwear")) Is Nothing) Then
            Me.Tables.Add(New Inv_TreadwearDataTable(ds.Tables("Inv_Treadwear")))
        End If
        If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInv_Construction = CType(Me.Tables("Inv_Construction"),Inv_ConstructionDataTable)
        If (Not (Me.tableInv_Construction) Is Nothing) Then
            Me.tableInv_Construction.InitVars
        End If
        Me.tableInv_LimitedWarranty = CType(Me.Tables("Inv_LimitedWarranty"),Inv_LimitedWarrantyDataTable)
        If (Not (Me.tableInv_LimitedWarranty) Is Nothing) Then
            Me.tableInv_LimitedWarranty.InitVars
        End If
        Me.tableinv_tab_brand = CType(Me.Tables("inv_tab_brand"),inv_tab_brandDataTable)
        If (Not (Me.tableinv_tab_brand) Is Nothing) Then
            Me.tableinv_tab_brand.InitVars
        End If
        Me.tableInv_Temperature = CType(Me.Tables("Inv_Temperature"),Inv_TemperatureDataTable)
        If (Not (Me.tableInv_Temperature) Is Nothing) Then
            Me.tableInv_Temperature.InitVars
        End If
        Me.tableInv_Traction = CType(Me.Tables("Inv_Traction"),Inv_TractionDataTable)
        If (Not (Me.tableInv_Traction) Is Nothing) Then
            Me.tableInv_Traction.InitVars
        End If
        Me.tableInv_Treadwear = CType(Me.Tables("Inv_Treadwear"),Inv_TreadwearDataTable)
        If (Not (Me.tableInv_Treadwear) Is Nothing) Then
            Me.tableInv_Treadwear.InitVars
        End If
        Me.tableinv_tab_style = CType(Me.Tables("inv_tab_style"),inv_tab_styleDataTable)
        If (Not (Me.tableinv_tab_style) Is Nothing) Then
            Me.tableinv_tab_style.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmInv_line"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmInv_line.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInv_Construction = New Inv_ConstructionDataTable
        Me.Tables.Add(Me.tableInv_Construction)
        Me.tableInv_LimitedWarranty = New Inv_LimitedWarrantyDataTable
        Me.Tables.Add(Me.tableInv_LimitedWarranty)
        Me.tableinv_tab_brand = New inv_tab_brandDataTable
        Me.Tables.Add(Me.tableinv_tab_brand)
        Me.tableInv_Temperature = New Inv_TemperatureDataTable
        Me.Tables.Add(Me.tableInv_Temperature)
        Me.tableInv_Traction = New Inv_TractionDataTable
        Me.Tables.Add(Me.tableInv_Traction)
        Me.tableInv_Treadwear = New Inv_TreadwearDataTable
        Me.Tables.Add(Me.tableInv_Treadwear)
        Me.tableinv_tab_style = New inv_tab_styleDataTable
        Me.Tables.Add(Me.tableinv_tab_style)
    End Sub
    
    Private Function ShouldSerializeInv_Construction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_LimitedWarranty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_brand() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Temperature() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Traction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Treadwear() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_style() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Inv_ConstructionRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_ConstructionRowChangeEvent)
    
    Public Delegate Sub Inv_LimitedWarrantyRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_LimitedWarrantyRowChangeEvent)
    
    Public Delegate Sub inv_tab_brandRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_brandRowChangeEvent)
    
    Public Delegate Sub Inv_TemperatureRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_TemperatureRowChangeEvent)
    
    Public Delegate Sub Inv_TractionRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_TractionRowChangeEvent)
    
    Public Delegate Sub Inv_TreadwearRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_TreadwearRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ConstructionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnconstruction As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Construction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property constructionColumn As DataColumn
            Get
                Return Me.columnconstruction
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_ConstructionRow
            Get
                Return CType(Me.Rows(index),Inv_ConstructionRow)
            End Get
        End Property
        
        Public Event Inv_ConstructionRowChanged As Inv_ConstructionRowChangeEventHandler
        
        Public Event Inv_ConstructionRowChanging As Inv_ConstructionRowChangeEventHandler
        
        Public Event Inv_ConstructionRowDeleted As Inv_ConstructionRowChangeEventHandler
        
        Public Event Inv_ConstructionRowDeleting As Inv_ConstructionRowChangeEventHandler
        
        Public Overloads Sub AddInv_ConstructionRow(ByVal row As Inv_ConstructionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_ConstructionRow(ByVal construction As String) As Inv_ConstructionRow
            Dim rowInv_ConstructionRow As Inv_ConstructionRow = CType(Me.NewRow,Inv_ConstructionRow)
            rowInv_ConstructionRow.ItemArray = New Object() {construction}
            Me.Rows.Add(rowInv_ConstructionRow)
            Return rowInv_ConstructionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_ConstructionDataTable = CType(MyBase.Clone,Inv_ConstructionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_ConstructionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnconstruction = Me.Columns("construction")
        End Sub
        
        Private Sub InitClass()
            Me.columnconstruction = New DataColumn("construction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconstruction)
        End Sub
        
        Public Function NewInv_ConstructionRow() As Inv_ConstructionRow
            Return CType(Me.NewRow,Inv_ConstructionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_ConstructionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_ConstructionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_ConstructionRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_ConstructionRowChanged(Me, New Inv_ConstructionRowChangeEvent(CType(e.Row,Inv_ConstructionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_ConstructionRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_ConstructionRowChanging(Me, New Inv_ConstructionRowChangeEvent(CType(e.Row,Inv_ConstructionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_ConstructionRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_ConstructionRowDeleted(Me, New Inv_ConstructionRowChangeEvent(CType(e.Row,Inv_ConstructionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_ConstructionRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_ConstructionRowDeleting(Me, New Inv_ConstructionRowChangeEvent(CType(e.Row,Inv_ConstructionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_ConstructionRow(ByVal row As Inv_ConstructionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ConstructionRow
        Inherits DataRow
        
        Private tableInv_Construction As Inv_ConstructionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Construction = CType(Me.Table,Inv_ConstructionDataTable)
        End Sub
        
        Public Property construction As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Construction.constructionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Construction.constructionColumn) = value
            End Set
        End Property
        
        Public Function IsconstructionNull() As Boolean
            Return Me.IsNull(Me.tableInv_Construction.constructionColumn)
        End Function
        
        Public Sub SetconstructionNull()
            Me(Me.tableInv_Construction.constructionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ConstructionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_ConstructionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_ConstructionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_ConstructionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_LimitedWarrantyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlimit_warranty As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_LimitedWarranty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property limit_warrantyColumn As DataColumn
            Get
                Return Me.columnlimit_warranty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_LimitedWarrantyRow
            Get
                Return CType(Me.Rows(index),Inv_LimitedWarrantyRow)
            End Get
        End Property
        
        Public Event Inv_LimitedWarrantyRowChanged As Inv_LimitedWarrantyRowChangeEventHandler
        
        Public Event Inv_LimitedWarrantyRowChanging As Inv_LimitedWarrantyRowChangeEventHandler
        
        Public Event Inv_LimitedWarrantyRowDeleted As Inv_LimitedWarrantyRowChangeEventHandler
        
        Public Event Inv_LimitedWarrantyRowDeleting As Inv_LimitedWarrantyRowChangeEventHandler
        
        Public Overloads Sub AddInv_LimitedWarrantyRow(ByVal row As Inv_LimitedWarrantyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_LimitedWarrantyRow(ByVal limit_warranty As String) As Inv_LimitedWarrantyRow
            Dim rowInv_LimitedWarrantyRow As Inv_LimitedWarrantyRow = CType(Me.NewRow,Inv_LimitedWarrantyRow)
            rowInv_LimitedWarrantyRow.ItemArray = New Object() {limit_warranty}
            Me.Rows.Add(rowInv_LimitedWarrantyRow)
            Return rowInv_LimitedWarrantyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_LimitedWarrantyDataTable = CType(MyBase.Clone,Inv_LimitedWarrantyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_LimitedWarrantyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlimit_warranty = Me.Columns("limit_warranty")
        End Sub
        
        Private Sub InitClass()
            Me.columnlimit_warranty = New DataColumn("limit_warranty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlimit_warranty)
        End Sub
        
        Public Function NewInv_LimitedWarrantyRow() As Inv_LimitedWarrantyRow
            Return CType(Me.NewRow,Inv_LimitedWarrantyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_LimitedWarrantyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_LimitedWarrantyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_LimitedWarrantyRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_LimitedWarrantyRowChanged(Me, New Inv_LimitedWarrantyRowChangeEvent(CType(e.Row,Inv_LimitedWarrantyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_LimitedWarrantyRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_LimitedWarrantyRowChanging(Me, New Inv_LimitedWarrantyRowChangeEvent(CType(e.Row,Inv_LimitedWarrantyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_LimitedWarrantyRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_LimitedWarrantyRowDeleted(Me, New Inv_LimitedWarrantyRowChangeEvent(CType(e.Row,Inv_LimitedWarrantyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_LimitedWarrantyRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_LimitedWarrantyRowDeleting(Me, New Inv_LimitedWarrantyRowChangeEvent(CType(e.Row,Inv_LimitedWarrantyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_LimitedWarrantyRow(ByVal row As Inv_LimitedWarrantyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_LimitedWarrantyRow
        Inherits DataRow
        
        Private tableInv_LimitedWarranty As Inv_LimitedWarrantyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_LimitedWarranty = CType(Me.Table,Inv_LimitedWarrantyDataTable)
        End Sub
        
        Public Property limit_warranty As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_LimitedWarranty.limit_warrantyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_LimitedWarranty.limit_warrantyColumn) = value
            End Set
        End Property
        
        Public Function Islimit_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableInv_LimitedWarranty.limit_warrantyColumn)
        End Function
        
        Public Sub Setlimit_warrantyNull()
            Me(Me.tableInv_LimitedWarranty.limit_warrantyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_LimitedWarrantyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_LimitedWarrantyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_LimitedWarrantyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_LimitedWarrantyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columntel As DataColumn
        
        Private columnconect_personal As DataColumn
        
        Private columnicon_brand As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_brand")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property telColumn As DataColumn
            Get
                Return Me.columntel
            End Get
        End Property
        
        Friend ReadOnly Property conect_personalColumn As DataColumn
            Get
                Return Me.columnconect_personal
            End Get
        End Property
        
        Friend ReadOnly Property icon_brandColumn As DataColumn
            Get
                Return Me.columnicon_brand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_brandRow
            Get
                Return CType(Me.Rows(index),inv_tab_brandRow)
            End Get
        End Property
        
        Public Event inv_tab_brandRowChanged As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowChanging As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleted As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleting As inv_tab_brandRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_brandRow(ByVal cod_brand As String, ByVal complete_desc_brand As String, ByVal abbreviation_desc_brand As String, ByVal address As String, ByVal tel As String, ByVal conect_personal As String, ByVal icon_brand() As Byte) As inv_tab_brandRow
            Dim rowinv_tab_brandRow As inv_tab_brandRow = CType(Me.NewRow,inv_tab_brandRow)
            rowinv_tab_brandRow.ItemArray = New Object() {cod_brand, complete_desc_brand, abbreviation_desc_brand, address, tel, conect_personal, icon_brand}
            Me.Rows.Add(rowinv_tab_brandRow)
            Return rowinv_tab_brandRow
        End Function
        
        Public Function FindBycod_brand(ByVal cod_brand As String) As inv_tab_brandRow
            Return CType(Me.Rows.Find(New Object() {cod_brand}),inv_tab_brandRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_brandDataTable = CType(MyBase.Clone,inv_tab_brandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_brandDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columnaddress = Me.Columns("address")
            Me.columntel = Me.Columns("tel")
            Me.columnconect_personal = Me.Columns("conect_personal")
            Me.columnicon_brand = Me.Columns("icon_brand")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columntel = New DataColumn("tel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntel)
            Me.columnconect_personal = New DataColumn("conect_personal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconect_personal)
            Me.columnicon_brand = New DataColumn("icon_brand", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnicon_brand)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_brand}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columncod_brand.Unique = true
        End Sub
        
        Public Function Newinv_tab_brandRow() As inv_tab_brandRow
            Return CType(Me.NewRow,inv_tab_brandRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_brandRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_brandRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_brandRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanged(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_brandRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanging(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_brandRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleted(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_brandRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleting(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRow
        Inherits DataRow
        
        Private tableinv_tab_brand As inv_tab_brandDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_brand = CType(Me.Table,inv_tab_brandDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_brand.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_brand.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.addressColumn) = value
            End Set
        End Property
        
        Public Property tel As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.telColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.telColumn) = value
            End Set
        End Property
        
        Public Property conect_personal As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.conect_personalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.conect_personalColumn) = value
            End Set
        End Property
        
        Public Property icon_brand As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.icon_brandColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.icon_brandColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableinv_tab_brand.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstelNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.telColumn)
        End Function
        
        Public Sub SettelNull()
            Me(Me.tableinv_tab_brand.telColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isconect_personalNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.conect_personalColumn)
        End Function
        
        Public Sub Setconect_personalNull()
            Me(Me.tableinv_tab_brand.conect_personalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isicon_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.icon_brandColumn)
        End Function
        
        Public Sub Seticon_brandNull()
            Me(Me.tableinv_tab_brand.icon_brandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_brandRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_brandRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_brandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TemperatureDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntemperature As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Temperature")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_TemperatureRow
            Get
                Return CType(Me.Rows(index),Inv_TemperatureRow)
            End Get
        End Property
        
        Public Event Inv_TemperatureRowChanged As Inv_TemperatureRowChangeEventHandler
        
        Public Event Inv_TemperatureRowChanging As Inv_TemperatureRowChangeEventHandler
        
        Public Event Inv_TemperatureRowDeleted As Inv_TemperatureRowChangeEventHandler
        
        Public Event Inv_TemperatureRowDeleting As Inv_TemperatureRowChangeEventHandler
        
        Public Overloads Sub AddInv_TemperatureRow(ByVal row As Inv_TemperatureRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_TemperatureRow(ByVal temperature As String) As Inv_TemperatureRow
            Dim rowInv_TemperatureRow As Inv_TemperatureRow = CType(Me.NewRow,Inv_TemperatureRow)
            rowInv_TemperatureRow.ItemArray = New Object() {temperature}
            Me.Rows.Add(rowInv_TemperatureRow)
            Return rowInv_TemperatureRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_TemperatureDataTable = CType(MyBase.Clone,Inv_TemperatureDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_TemperatureDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntemperature = Me.Columns("temperature")
        End Sub
        
        Private Sub InitClass()
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
        End Sub
        
        Public Function NewInv_TemperatureRow() As Inv_TemperatureRow
            Return CType(Me.NewRow,Inv_TemperatureRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_TemperatureRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_TemperatureRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_TemperatureRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_TemperatureRowChanged(Me, New Inv_TemperatureRowChangeEvent(CType(e.Row,Inv_TemperatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_TemperatureRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_TemperatureRowChanging(Me, New Inv_TemperatureRowChangeEvent(CType(e.Row,Inv_TemperatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_TemperatureRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_TemperatureRowDeleted(Me, New Inv_TemperatureRowChangeEvent(CType(e.Row,Inv_TemperatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_TemperatureRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_TemperatureRowDeleting(Me, New Inv_TemperatureRowChangeEvent(CType(e.Row,Inv_TemperatureRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_TemperatureRow(ByVal row As Inv_TemperatureRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TemperatureRow
        Inherits DataRow
        
        Private tableInv_Temperature As Inv_TemperatureDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Temperature = CType(Me.Table,Inv_TemperatureDataTable)
        End Sub
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Temperature.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Temperature.temperatureColumn) = value
            End Set
        End Property
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableInv_Temperature.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableInv_Temperature.temperatureColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TemperatureRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_TemperatureRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_TemperatureRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_TemperatureRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TractionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntraction As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Traction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_TractionRow
            Get
                Return CType(Me.Rows(index),Inv_TractionRow)
            End Get
        End Property
        
        Public Event Inv_TractionRowChanged As Inv_TractionRowChangeEventHandler
        
        Public Event Inv_TractionRowChanging As Inv_TractionRowChangeEventHandler
        
        Public Event Inv_TractionRowDeleted As Inv_TractionRowChangeEventHandler
        
        Public Event Inv_TractionRowDeleting As Inv_TractionRowChangeEventHandler
        
        Public Overloads Sub AddInv_TractionRow(ByVal row As Inv_TractionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_TractionRow(ByVal traction As String) As Inv_TractionRow
            Dim rowInv_TractionRow As Inv_TractionRow = CType(Me.NewRow,Inv_TractionRow)
            rowInv_TractionRow.ItemArray = New Object() {traction}
            Me.Rows.Add(rowInv_TractionRow)
            Return rowInv_TractionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_TractionDataTable = CType(MyBase.Clone,Inv_TractionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_TractionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntraction = Me.Columns("traction")
        End Sub
        
        Private Sub InitClass()
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
        End Sub
        
        Public Function NewInv_TractionRow() As Inv_TractionRow
            Return CType(Me.NewRow,Inv_TractionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_TractionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_TractionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_TractionRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_TractionRowChanged(Me, New Inv_TractionRowChangeEvent(CType(e.Row,Inv_TractionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_TractionRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_TractionRowChanging(Me, New Inv_TractionRowChangeEvent(CType(e.Row,Inv_TractionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_TractionRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_TractionRowDeleted(Me, New Inv_TractionRowChangeEvent(CType(e.Row,Inv_TractionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_TractionRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_TractionRowDeleting(Me, New Inv_TractionRowChangeEvent(CType(e.Row,Inv_TractionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_TractionRow(ByVal row As Inv_TractionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TractionRow
        Inherits DataRow
        
        Private tableInv_Traction As Inv_TractionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Traction = CType(Me.Table,Inv_TractionDataTable)
        End Sub
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Traction.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Traction.tractionColumn) = value
            End Set
        End Property
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableInv_Traction.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableInv_Traction.tractionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TractionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_TractionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_TractionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_TractionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TreadwearDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntreadwear As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Treadwear")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_TreadwearRow
            Get
                Return CType(Me.Rows(index),Inv_TreadwearRow)
            End Get
        End Property
        
        Public Event Inv_TreadwearRowChanged As Inv_TreadwearRowChangeEventHandler
        
        Public Event Inv_TreadwearRowChanging As Inv_TreadwearRowChangeEventHandler
        
        Public Event Inv_TreadwearRowDeleted As Inv_TreadwearRowChangeEventHandler
        
        Public Event Inv_TreadwearRowDeleting As Inv_TreadwearRowChangeEventHandler
        
        Public Overloads Sub AddInv_TreadwearRow(ByVal row As Inv_TreadwearRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_TreadwearRow(ByVal treadwear As String) As Inv_TreadwearRow
            Dim rowInv_TreadwearRow As Inv_TreadwearRow = CType(Me.NewRow,Inv_TreadwearRow)
            rowInv_TreadwearRow.ItemArray = New Object() {treadwear}
            Me.Rows.Add(rowInv_TreadwearRow)
            Return rowInv_TreadwearRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_TreadwearDataTable = CType(MyBase.Clone,Inv_TreadwearDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_TreadwearDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntreadwear = Me.Columns("treadwear")
        End Sub
        
        Private Sub InitClass()
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
        End Sub
        
        Public Function NewInv_TreadwearRow() As Inv_TreadwearRow
            Return CType(Me.NewRow,Inv_TreadwearRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_TreadwearRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_TreadwearRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_TreadwearRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_TreadwearRowChanged(Me, New Inv_TreadwearRowChangeEvent(CType(e.Row,Inv_TreadwearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_TreadwearRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_TreadwearRowChanging(Me, New Inv_TreadwearRowChangeEvent(CType(e.Row,Inv_TreadwearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_TreadwearRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_TreadwearRowDeleted(Me, New Inv_TreadwearRowChangeEvent(CType(e.Row,Inv_TreadwearRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_TreadwearRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_TreadwearRowDeleting(Me, New Inv_TreadwearRowChangeEvent(CType(e.Row,Inv_TreadwearRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_TreadwearRow(ByVal row As Inv_TreadwearRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TreadwearRow
        Inherits DataRow
        
        Private tableInv_Treadwear As Inv_TreadwearDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Treadwear = CType(Me.Table,Inv_TreadwearDataTable)
        End Sub
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Treadwear.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Treadwear.treadwearColumn) = value
            End Set
        End Property
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableInv_Treadwear.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableInv_Treadwear.treadwearColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_TreadwearRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_TreadwearRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_TreadwearRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_TreadwearRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleRow)
            End Get
        End Property
        
        Public Event inv_tab_styleRowChanged As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowChanging As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleted As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleting As inv_tab_styleRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleRow(ByVal style As String, ByVal desc_style As String, ByVal remark As String, ByVal image_remark() As Byte) As inv_tab_styleRow
            Dim rowinv_tab_styleRow As inv_tab_styleRow = CType(Me.NewRow,inv_tab_styleRow)
            rowinv_tab_styleRow.ItemArray = New Object() {style, desc_style, remark, image_remark}
            Me.Rows.Add(rowinv_tab_styleRow)
            Return rowinv_tab_styleRow
        End Function
        
        Public Function FindBystyle(ByVal style As String) As inv_tab_styleRow
            Return CType(Me.Rows.Find(New Object() {style}),inv_tab_styleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleDataTable = CType(MyBase.Clone,inv_tab_styleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstyle}, true))
            Me.columnstyle.AllowDBNull = false
            Me.columnstyle.Unique = true
        End Sub
        
        Public Function Newinv_tab_styleRow() As inv_tab_styleRow
            Return CType(Me.NewRow,inv_tab_styleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanged(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanging(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleted(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleting(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRow
        Inherits DataRow
        
        Private tableinv_tab_style As inv_tab_styleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_style = CType(Me.Table,inv_tab_styleDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_style.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_style.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.image_remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_style.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_style.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_style.image_remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
