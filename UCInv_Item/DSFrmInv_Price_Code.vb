'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmInv_Price_Code
    Inherits DataSet
    
    Private tableinv_price_code1 As inv_price_code1DataTable
    
    Private tableinv_price_code2 As inv_price_code2DataTable
    
    Private tableinv_price_code As inv_price_codeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_price_code1")) Is Nothing) Then
                Me.Tables.Add(New inv_price_code1DataTable(ds.Tables("inv_price_code1")))
            End If
            If (Not (ds.Tables("inv_price_code2")) Is Nothing) Then
                Me.Tables.Add(New inv_price_code2DataTable(ds.Tables("inv_price_code2")))
            End If
            If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
                Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code1 As inv_price_code1DataTable
        Get
            Return Me.tableinv_price_code1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code2 As inv_price_code2DataTable
        Get
            Return Me.tableinv_price_code2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code As inv_price_codeDataTable
        Get
            Return Me.tableinv_price_code
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmInv_Price_Code = CType(MyBase.Clone,DSFrmInv_Price_Code)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_price_code1")) Is Nothing) Then
            Me.Tables.Add(New inv_price_code1DataTable(ds.Tables("inv_price_code1")))
        End If
        If (Not (ds.Tables("inv_price_code2")) Is Nothing) Then
            Me.Tables.Add(New inv_price_code2DataTable(ds.Tables("inv_price_code2")))
        End If
        If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
            Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_price_code1 = CType(Me.Tables("inv_price_code1"),inv_price_code1DataTable)
        If (Not (Me.tableinv_price_code1) Is Nothing) Then
            Me.tableinv_price_code1.InitVars
        End If
        Me.tableinv_price_code2 = CType(Me.Tables("inv_price_code2"),inv_price_code2DataTable)
        If (Not (Me.tableinv_price_code2) Is Nothing) Then
            Me.tableinv_price_code2.InitVars
        End If
        Me.tableinv_price_code = CType(Me.Tables("inv_price_code"),inv_price_codeDataTable)
        If (Not (Me.tableinv_price_code) Is Nothing) Then
            Me.tableinv_price_code.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmInv_Price_Code"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmInv_Price_Code.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_price_code1 = New inv_price_code1DataTable
        Me.Tables.Add(Me.tableinv_price_code1)
        Me.tableinv_price_code2 = New inv_price_code2DataTable
        Me.Tables.Add(Me.tableinv_price_code2)
        Me.tableinv_price_code = New inv_price_codeDataTable
        Me.Tables.Add(Me.tableinv_price_code)
    End Sub
    
    Private Function ShouldSerializeinv_price_code1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_price_code1RowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_code1RowChangeEvent)
    
    Public Delegate Sub inv_price_code2RowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_code2RowChangeEvent)
    
    Public Delegate Sub inv_price_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_codeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_code1Row
            Get
                Return CType(Me.Rows(index),inv_price_code1Row)
            End Get
        End Property
        
        Public Event inv_price_code1RowChanged As inv_price_code1RowChangeEventHandler
        
        Public Event inv_price_code1RowChanging As inv_price_code1RowChangeEventHandler
        
        Public Event inv_price_code1RowDeleted As inv_price_code1RowChangeEventHandler
        
        Public Event inv_price_code1RowDeleting As inv_price_code1RowChangeEventHandler
        
        Public Overloads Sub Addinv_price_code1Row(ByVal row As inv_price_code1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_code1Row(ByVal price_code As String, ByVal desc_price_code As String) As inv_price_code1Row
            Dim rowinv_price_code1Row As inv_price_code1Row = CType(Me.NewRow,inv_price_code1Row)
            rowinv_price_code1Row.ItemArray = New Object() {price_code, desc_price_code}
            Me.Rows.Add(rowinv_price_code1Row)
            Return rowinv_price_code1Row
        End Function
        
        Public Function FindByprice_code(ByVal price_code As String) As inv_price_code1Row
            Return CType(Me.Rows.Find(New Object() {price_code}),inv_price_code1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_code1DataTable = CType(MyBase.Clone,inv_price_code1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_code1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnprice_code}, true))
            Me.columnprice_code.AllowDBNull = false
            Me.columnprice_code.Unique = true
        End Sub
        
        Public Function Newinv_price_code1Row() As inv_price_code1Row
            Return CType(Me.NewRow,inv_price_code1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_code1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_code1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_code1RowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_code1RowChanged(Me, New inv_price_code1RowChangeEvent(CType(e.Row,inv_price_code1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_code1RowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_code1RowChanging(Me, New inv_price_code1RowChangeEvent(CType(e.Row,inv_price_code1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_code1RowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_code1RowDeleted(Me, New inv_price_code1RowChangeEvent(CType(e.Row,inv_price_code1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_code1RowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_code1RowDeleting(Me, New inv_price_code1RowChangeEvent(CType(e.Row,inv_price_code1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_code1Row(ByVal row As inv_price_code1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code1Row
        Inherits DataRow
        
        Private tableinv_price_code1 As inv_price_code1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code1 = CType(Me.Table,inv_price_code1DataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code1.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code1.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code1.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code1.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code1.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code1.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_code1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_code1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_code1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_code2Row
            Get
                Return CType(Me.Rows(index),inv_price_code2Row)
            End Get
        End Property
        
        Public Event inv_price_code2RowChanged As inv_price_code2RowChangeEventHandler
        
        Public Event inv_price_code2RowChanging As inv_price_code2RowChangeEventHandler
        
        Public Event inv_price_code2RowDeleted As inv_price_code2RowChangeEventHandler
        
        Public Event inv_price_code2RowDeleting As inv_price_code2RowChangeEventHandler
        
        Public Overloads Sub Addinv_price_code2Row(ByVal row As inv_price_code2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_code2Row(ByVal price_code As String, ByVal desc_price_code As String) As inv_price_code2Row
            Dim rowinv_price_code2Row As inv_price_code2Row = CType(Me.NewRow,inv_price_code2Row)
            rowinv_price_code2Row.ItemArray = New Object() {price_code, desc_price_code}
            Me.Rows.Add(rowinv_price_code2Row)
            Return rowinv_price_code2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_code2DataTable = CType(MyBase.Clone,inv_price_code2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_code2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice_code.AllowDBNull = false
        End Sub
        
        Public Function Newinv_price_code2Row() As inv_price_code2Row
            Return CType(Me.NewRow,inv_price_code2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_code2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_code2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_code2RowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_code2RowChanged(Me, New inv_price_code2RowChangeEvent(CType(e.Row,inv_price_code2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_code2RowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_code2RowChanging(Me, New inv_price_code2RowChangeEvent(CType(e.Row,inv_price_code2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_code2RowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_code2RowDeleted(Me, New inv_price_code2RowChangeEvent(CType(e.Row,inv_price_code2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_code2RowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_code2RowDeleting(Me, New inv_price_code2RowChangeEvent(CType(e.Row,inv_price_code2Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_code2Row(ByVal row As inv_price_code2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code2Row
        Inherits DataRow
        
        Private tableinv_price_code2 As inv_price_code2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code2 = CType(Me.Table,inv_price_code2DataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code2.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code2.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code2.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code2.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code2.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code2.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_code2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_code2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_code2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_code2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_codeRow
            Get
                Return CType(Me.Rows(index),inv_price_codeRow)
            End Get
        End Property
        
        Public Event inv_price_codeRowChanged As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowChanging As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleted As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleting As inv_price_codeRowChangeEventHandler
        
        Public Overloads Sub Addinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_codeRow(ByVal price_code As String, ByVal desc_price_code As String) As inv_price_codeRow
            Dim rowinv_price_codeRow As inv_price_codeRow = CType(Me.NewRow,inv_price_codeRow)
            rowinv_price_codeRow.ItemArray = New Object() {price_code, desc_price_code}
            Me.Rows.Add(rowinv_price_codeRow)
            Return rowinv_price_codeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_codeDataTable = CType(MyBase.Clone,inv_price_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_codeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice_code.AllowDBNull = false
        End Sub
        
        Public Function Newinv_price_codeRow() As inv_price_codeRow
            Return CType(Me.NewRow,inv_price_codeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_codeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_codeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanged(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanging(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleted(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleting(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRow
        Inherits DataRow
        
        Private tableinv_price_code As inv_price_codeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code = CType(Me.Table,inv_price_codeDataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_codeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_codeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
