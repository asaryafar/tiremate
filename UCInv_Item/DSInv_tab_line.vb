'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSInv_tab_line
    Inherits DataSet
    
    Private tableinv_tab_line As inv_tab_lineDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_line As inv_tab_lineDataTable
        Get
            Return Me.tableinv_tab_line
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSInv_tab_line = CType(MyBase.Clone,DSInv_tab_line)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_line = CType(Me.Tables("inv_tab_line"),inv_tab_lineDataTable)
        If (Not (Me.tableinv_tab_line) Is Nothing) Then
            Me.tableinv_tab_line.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSInv_tab_line"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSInv_tab_line.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_line = New inv_tab_lineDataTable
        Me.Tables.Add(Me.tableinv_tab_line)
    End Sub
    
    Private Function ShouldSerializeinv_tab_line() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_lineRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_lineRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_lineRow
            Get
                Return CType(Me.Rows(index),inv_tab_lineRow)
            End Get
        End Property
        
        Public Event inv_tab_lineRowChanged As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowChanging As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleted As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleting As inv_tab_lineRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_lineRow(ByVal cod_brand As String, ByVal style As String, ByVal line As String, ByVal complete_desc_brand As String, ByVal desc_style As String, ByVal remark As String) As inv_tab_lineRow
            Dim rowinv_tab_lineRow As inv_tab_lineRow = CType(Me.NewRow,inv_tab_lineRow)
            rowinv_tab_lineRow.ItemArray = New Object() {cod_brand, style, line, complete_desc_brand, desc_style, remark}
            Me.Rows.Add(rowinv_tab_lineRow)
            Return rowinv_tab_lineRow
        End Function
        
        Public Function FindByline(ByVal line As String) As inv_tab_lineRow
            Return CType(Me.Rows.Find(New Object() {line}),inv_tab_lineRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_lineDataTable = CType(MyBase.Clone,inv_tab_lineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_lineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("DSInv_tab_lineKey1", New DataColumn() {Me.columnline}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnline.Unique = true
        End Sub
        
        Public Function Newinv_tab_lineRow() As inv_tab_lineRow
            Return CType(Me.NewRow,inv_tab_lineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_lineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_lineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_lineRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanged(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_lineRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanging(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_lineRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleted(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_lineRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleting(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRow
        Inherits DataRow
        
        Private tableinv_tab_line As inv_tab_lineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_line = CType(Me.Table,inv_tab_lineDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_line.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_line.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_tab_line.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.remarkColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_tab_line.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_line.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_line.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_lineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_lineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_lineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
