'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmChargeGroupCostItem
    Inherits DataSet
    
    Private tableinv_item_cost_transaction As inv_item_cost_transactionDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_item_cost_transaction")) Is Nothing) Then
                Me.Tables.Add(New inv_item_cost_transactionDataTable(ds.Tables("inv_item_cost_transaction")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_cost_transaction As inv_item_cost_transactionDataTable
        Get
            Return Me.tableinv_item_cost_transaction
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmChargeGroupCostItem = CType(MyBase.Clone,DSFrmChargeGroupCostItem)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_item_cost_transaction")) Is Nothing) Then
            Me.Tables.Add(New inv_item_cost_transactionDataTable(ds.Tables("inv_item_cost_transaction")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_item_cost_transaction = CType(Me.Tables("inv_item_cost_transaction"),inv_item_cost_transactionDataTable)
        If (Not (Me.tableinv_item_cost_transaction) Is Nothing) Then
            Me.tableinv_item_cost_transaction.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmChargeGroupCostItem"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmChargeGroupCostItem.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_item_cost_transaction = New inv_item_cost_transactionDataTable
        Me.Tables.Add(Me.tableinv_item_cost_transaction)
    End Sub
    
    Private Function ShouldSerializeinv_item_cost_transaction() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_item_cost_transactionRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_cost_transactionRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_cost_change As DataColumn
        
        Private columncost As DataColumn
        
        Private columnlast_flag As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnline As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columndelivery As DataColumn
        
        Private columnfrieght As DataColumn
        
        Private columnprice_code As DataColumn
        
        Private columnamount_price1 As DataColumn
        
        Private columnamount_price2 As DataColumn
        
        Private columnamount_price3 As DataColumn
        
        Private columnamount_price4 As DataColumn
        
        Private columnamount_price5 As DataColumn
        
        Private columnamount_price6 As DataColumn
        
        Private columnflg1 As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_cost_transaction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_cost_changeColumn As DataColumn
            Get
                Return Me.columndate_cost_change
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property last_flagColumn As DataColumn
            Get
                Return Me.columnlast_flag
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property deliveryColumn As DataColumn
            Get
                Return Me.columndelivery
            End Get
        End Property
        
        Friend ReadOnly Property frieghtColumn As DataColumn
            Get
                Return Me.columnfrieght
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property amount_price1Column As DataColumn
            Get
                Return Me.columnamount_price1
            End Get
        End Property
        
        Friend ReadOnly Property amount_price2Column As DataColumn
            Get
                Return Me.columnamount_price2
            End Get
        End Property
        
        Friend ReadOnly Property amount_price3Column As DataColumn
            Get
                Return Me.columnamount_price3
            End Get
        End Property
        
        Friend ReadOnly Property amount_price4Column As DataColumn
            Get
                Return Me.columnamount_price4
            End Get
        End Property
        
        Friend ReadOnly Property amount_price5Column As DataColumn
            Get
                Return Me.columnamount_price5
            End Get
        End Property
        
        Friend ReadOnly Property amount_price6Column As DataColumn
            Get
                Return Me.columnamount_price6
            End Get
        End Property
        
        Friend ReadOnly Property flg1Column As DataColumn
            Get
                Return Me.columnflg1
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_cost_transactionRow
            Get
                Return CType(Me.Rows(index),inv_item_cost_transactionRow)
            End Get
        End Property
        
        Public Event inv_item_cost_transactionRowChanged As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowChanging As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowDeleted As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowDeleting As inv_item_cost_transactionRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_cost_transactionRow(ByVal row As inv_item_cost_transactionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_cost_transactionRow( _
                    ByVal date_cost_change As String,  _
                    ByVal cost As Single,  _
                    ByVal last_flag As Boolean,  _
                    ByVal style As String,  _
                    ByVal desc_style As String,  _
                    ByVal line As String,  _
                    ByVal cod_brand As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_item As String,  _
                    ByVal item_no As String,  _
                    ByVal list_price As Single,  _
                    ByVal fet As Single,  _
                    ByVal delivery As Single,  _
                    ByVal frieght As Single,  _
                    ByVal price_code As String,  _
                    ByVal amount_price1 As Single,  _
                    ByVal amount_price2 As Single,  _
                    ByVal amount_price3 As Single,  _
                    ByVal amount_price4 As Single,  _
                    ByVal amount_price5 As Single,  _
                    ByVal amount_price6 As Single,  _
                    ByVal flg1 As Boolean,  _
                    ByVal desc_quick_refrence As String) As inv_item_cost_transactionRow
            Dim rowinv_item_cost_transactionRow As inv_item_cost_transactionRow = CType(Me.NewRow,inv_item_cost_transactionRow)
            rowinv_item_cost_transactionRow.ItemArray = New Object() {date_cost_change, cost, last_flag, style, desc_style, line, cod_brand, complete_desc_brand, desc_item, item_no, list_price, fet, delivery, frieght, price_code, amount_price1, amount_price2, amount_price3, amount_price4, amount_price5, amount_price6, flg1, desc_quick_refrence}
            Me.Rows.Add(rowinv_item_cost_transactionRow)
            Return rowinv_item_cost_transactionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_cost_transactionDataTable = CType(MyBase.Clone,inv_item_cost_transactionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_cost_transactionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_cost_change = Me.Columns("date_cost_change")
            Me.columncost = Me.Columns("cost")
            Me.columnlast_flag = Me.Columns("last_flag")
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnline = Me.Columns("line")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columnfet = Me.Columns("fet")
            Me.columndelivery = Me.Columns("delivery")
            Me.columnfrieght = Me.Columns("frieght")
            Me.columnprice_code = Me.Columns("price_code")
            Me.columnamount_price1 = Me.Columns("amount_price1")
            Me.columnamount_price2 = Me.Columns("amount_price2")
            Me.columnamount_price3 = Me.Columns("amount_price3")
            Me.columnamount_price4 = Me.Columns("amount_price4")
            Me.columnamount_price5 = Me.Columns("amount_price5")
            Me.columnamount_price6 = Me.Columns("amount_price6")
            Me.columnflg1 = Me.Columns("flg1")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_cost_change = New DataColumn("date_cost_change", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_cost_change)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnlast_flag = New DataColumn("last_flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_flag)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columndelivery = New DataColumn("delivery", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndelivery)
            Me.columnfrieght = New DataColumn("frieght", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrieght)
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columnamount_price1 = New DataColumn("amount_price1", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price1)
            Me.columnamount_price2 = New DataColumn("amount_price2", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price2)
            Me.columnamount_price3 = New DataColumn("amount_price3", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price3)
            Me.columnamount_price4 = New DataColumn("amount_price4", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price4)
            Me.columnamount_price5 = New DataColumn("amount_price5", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price5)
            Me.columnamount_price6 = New DataColumn("amount_price6", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price6)
            Me.columnflg1 = New DataColumn("flg1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflg1)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columndate_cost_change.AllowDBNull = false
            Me.columncost.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columncod_brand.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
            Me.columnflg1.DefaultValue = false
        End Sub
        
        Public Function Newinv_item_cost_transactionRow() As inv_item_cost_transactionRow
            Return CType(Me.NewRow,inv_item_cost_transactionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_cost_transactionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_cost_transactionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_cost_transactionRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowChanged(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_cost_transactionRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowChanging(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_cost_transactionRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowDeleted(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_cost_transactionRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowDeleting(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_cost_transactionRow(ByVal row As inv_item_cost_transactionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionRow
        Inherits DataRow
        
        Private tableinv_item_cost_transaction As inv_item_cost_transactionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_cost_transaction = CType(Me.Table,inv_item_cost_transactionDataTable)
        End Sub
        
        Public Property date_cost_change As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.date_cost_changeColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.date_cost_changeColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.costColumn),Single)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.costColumn) = value
            End Set
        End Property
        
        Public Property last_flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.last_flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.last_flagColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.lineColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.item_noColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.list_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.fetColumn) = value
            End Set
        End Property
        
        Public Property delivery As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.deliveryColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.deliveryColumn) = value
            End Set
        End Property
        
        Public Property frieght As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.frieghtColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.frieghtColumn) = value
            End Set
        End Property
        
        Public Property price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.price_codeColumn) = value
            End Set
        End Property
        
        Public Property amount_price1 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price1Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price1Column) = value
            End Set
        End Property
        
        Public Property amount_price2 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price2Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price2Column) = value
            End Set
        End Property
        
        Public Property amount_price3 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price3Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price3Column) = value
            End Set
        End Property
        
        Public Property amount_price4 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price4Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price4Column) = value
            End Set
        End Property
        
        Public Property amount_price5 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price5Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price5Column) = value
            End Set
        End Property
        
        Public Property amount_price6 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.amount_price6Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.amount_price6Column) = value
            End Set
        End Property
        
        Public Property flg1 As Boolean
            Get
                If Me.Isflg1Null Then
                    Return false
                Else
                    Return CType(Me(Me.tableinv_item_cost_transaction.flg1Column),Boolean)
                End If
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.flg1Column) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Islast_flagNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.last_flagColumn)
        End Function
        
        Public Sub Setlast_flagNull()
            Me(Me.tableinv_item_cost_transaction.last_flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_item_cost_transaction.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_item_cost_transaction.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item_cost_transaction.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableinv_item_cost_transaction.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_item_cost_transaction.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdeliveryNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.deliveryColumn)
        End Function
        
        Public Sub SetdeliveryNull()
            Me(Me.tableinv_item_cost_transaction.deliveryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfrieghtNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.frieghtColumn)
        End Function
        
        Public Sub SetfrieghtNull()
            Me(Me.tableinv_item_cost_transaction.frieghtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.price_codeColumn)
        End Function
        
        Public Sub Setprice_codeNull()
            Me(Me.tableinv_item_cost_transaction.price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price1Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price1Column)
        End Function
        
        Public Sub Setamount_price1Null()
            Me(Me.tableinv_item_cost_transaction.amount_price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price2Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price2Column)
        End Function
        
        Public Sub Setamount_price2Null()
            Me(Me.tableinv_item_cost_transaction.amount_price2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price3Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price3Column)
        End Function
        
        Public Sub Setamount_price3Null()
            Me(Me.tableinv_item_cost_transaction.amount_price3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price4Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price4Column)
        End Function
        
        Public Sub Setamount_price4Null()
            Me(Me.tableinv_item_cost_transaction.amount_price4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price5Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price5Column)
        End Function
        
        Public Sub Setamount_price5Null()
            Me(Me.tableinv_item_cost_transaction.amount_price5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price6Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.amount_price6Column)
        End Function
        
        Public Sub Setamount_price6Null()
            Me(Me.tableinv_item_cost_transaction.amount_price6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isflg1Null() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.flg1Column)
        End Function
        
        Public Sub Setflg1Null()
            Me(Me.tableinv_item_cost_transaction.flg1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item_cost_transaction.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_cost_transactionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_cost_transactionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_cost_transactionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
