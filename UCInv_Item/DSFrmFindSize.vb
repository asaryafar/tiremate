'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmFindSize
    Inherits DataSet
    
    Private tablebas_vehicle_company As bas_vehicle_companyDataTable
    
    Private tablebas_vehicle_model As bas_vehicle_modelDataTable
    
    Private tableinv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
    
    Private tablebas_vehicle As bas_vehicleDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_vehicle_company")) Is Nothing) Then
                Me.Tables.Add(New bas_vehicle_companyDataTable(ds.Tables("bas_vehicle_company")))
            End If
            If (Not (ds.Tables("bas_vehicle_model")) Is Nothing) Then
                Me.Tables.Add(New bas_vehicle_modelDataTable(ds.Tables("bas_vehicle_model")))
            End If
            If (Not (ds.Tables("inv_tab_vehicle_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vehicle_typeDataTable(ds.Tables("inv_tab_vehicle_type")))
            End If
            If (Not (ds.Tables("bas_vehicle")) Is Nothing) Then
                Me.Tables.Add(New bas_vehicleDataTable(ds.Tables("bas_vehicle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_vehicle_company As bas_vehicle_companyDataTable
        Get
            Return Me.tablebas_vehicle_company
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_vehicle_model As bas_vehicle_modelDataTable
        Get
            Return Me.tablebas_vehicle_model
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
        Get
            Return Me.tableinv_tab_vehicle_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_vehicle As bas_vehicleDataTable
        Get
            Return Me.tablebas_vehicle
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmFindSize = CType(MyBase.Clone,DSFrmFindSize)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_vehicle_company")) Is Nothing) Then
            Me.Tables.Add(New bas_vehicle_companyDataTable(ds.Tables("bas_vehicle_company")))
        End If
        If (Not (ds.Tables("bas_vehicle_model")) Is Nothing) Then
            Me.Tables.Add(New bas_vehicle_modelDataTable(ds.Tables("bas_vehicle_model")))
        End If
        If (Not (ds.Tables("inv_tab_vehicle_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vehicle_typeDataTable(ds.Tables("inv_tab_vehicle_type")))
        End If
        If (Not (ds.Tables("bas_vehicle")) Is Nothing) Then
            Me.Tables.Add(New bas_vehicleDataTable(ds.Tables("bas_vehicle")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_vehicle_company = CType(Me.Tables("bas_vehicle_company"),bas_vehicle_companyDataTable)
        If (Not (Me.tablebas_vehicle_company) Is Nothing) Then
            Me.tablebas_vehicle_company.InitVars
        End If
        Me.tablebas_vehicle_model = CType(Me.Tables("bas_vehicle_model"),bas_vehicle_modelDataTable)
        If (Not (Me.tablebas_vehicle_model) Is Nothing) Then
            Me.tablebas_vehicle_model.InitVars
        End If
        Me.tableinv_tab_vehicle_type = CType(Me.Tables("inv_tab_vehicle_type"),inv_tab_vehicle_typeDataTable)
        If (Not (Me.tableinv_tab_vehicle_type) Is Nothing) Then
            Me.tableinv_tab_vehicle_type.InitVars
        End If
        Me.tablebas_vehicle = CType(Me.Tables("bas_vehicle"),bas_vehicleDataTable)
        If (Not (Me.tablebas_vehicle) Is Nothing) Then
            Me.tablebas_vehicle.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmFindSize"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmFindSize.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_vehicle_company = New bas_vehicle_companyDataTable
        Me.Tables.Add(Me.tablebas_vehicle_company)
        Me.tablebas_vehicle_model = New bas_vehicle_modelDataTable
        Me.Tables.Add(Me.tablebas_vehicle_model)
        Me.tableinv_tab_vehicle_type = New inv_tab_vehicle_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_vehicle_type)
        Me.tablebas_vehicle = New bas_vehicleDataTable
        Me.Tables.Add(Me.tablebas_vehicle)
    End Sub
    
    Private Function ShouldSerializebas_vehicle_company() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_vehicle_model() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vehicle_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_vehicle() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_vehicle_companyRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_vehicle_companyRowChangeEvent)
    
    Public Delegate Sub bas_vehicle_modelRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_vehicle_modelRowChangeEvent)
    
    Public Delegate Sub inv_tab_vehicle_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vehicle_typeRowChangeEvent)
    
    Public Delegate Sub bas_vehicleRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_vehicleRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_companyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndesc_make As DataColumn
        
        Private columncod_make As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_vehicle_company")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property desc_makeColumn As DataColumn
            Get
                Return Me.columndesc_make
            End Get
        End Property
        
        Friend ReadOnly Property cod_makeColumn As DataColumn
            Get
                Return Me.columncod_make
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_vehicle_companyRow
            Get
                Return CType(Me.Rows(index),bas_vehicle_companyRow)
            End Get
        End Property
        
        Public Event bas_vehicle_companyRowChanged As bas_vehicle_companyRowChangeEventHandler
        
        Public Event bas_vehicle_companyRowChanging As bas_vehicle_companyRowChangeEventHandler
        
        Public Event bas_vehicle_companyRowDeleted As bas_vehicle_companyRowChangeEventHandler
        
        Public Event bas_vehicle_companyRowDeleting As bas_vehicle_companyRowChangeEventHandler
        
        Public Overloads Sub Addbas_vehicle_companyRow(ByVal row As bas_vehicle_companyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_vehicle_companyRow(ByVal desc_make As String, ByVal cod_make As String) As bas_vehicle_companyRow
            Dim rowbas_vehicle_companyRow As bas_vehicle_companyRow = CType(Me.NewRow,bas_vehicle_companyRow)
            rowbas_vehicle_companyRow.ItemArray = New Object() {desc_make, cod_make}
            Me.Rows.Add(rowbas_vehicle_companyRow)
            Return rowbas_vehicle_companyRow
        End Function
        
        Public Function FindBycod_make(ByVal cod_make As String) As bas_vehicle_companyRow
            Return CType(Me.Rows.Find(New Object() {cod_make}),bas_vehicle_companyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_vehicle_companyDataTable = CType(MyBase.Clone,bas_vehicle_companyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_vehicle_companyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndesc_make = Me.Columns("desc_make")
            Me.columncod_make = Me.Columns("cod_make")
        End Sub
        
        Private Sub InitClass()
            Me.columndesc_make = New DataColumn("desc_make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_make)
            Me.columncod_make = New DataColumn("cod_make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_make)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_make}, true))
            Me.columncod_make.AllowDBNull = false
            Me.columncod_make.Unique = true
        End Sub
        
        Public Function Newbas_vehicle_companyRow() As bas_vehicle_companyRow
            Return CType(Me.NewRow,bas_vehicle_companyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_vehicle_companyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_vehicle_companyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_vehicle_companyRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_companyRowChanged(Me, New bas_vehicle_companyRowChangeEvent(CType(e.Row,bas_vehicle_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_vehicle_companyRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_companyRowChanging(Me, New bas_vehicle_companyRowChangeEvent(CType(e.Row,bas_vehicle_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_vehicle_companyRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_companyRowDeleted(Me, New bas_vehicle_companyRowChangeEvent(CType(e.Row,bas_vehicle_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_vehicle_companyRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_companyRowDeleting(Me, New bas_vehicle_companyRowChangeEvent(CType(e.Row,bas_vehicle_companyRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_vehicle_companyRow(ByVal row As bas_vehicle_companyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_companyRow
        Inherits DataRow
        
        Private tablebas_vehicle_company As bas_vehicle_companyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_vehicle_company = CType(Me.Table,bas_vehicle_companyDataTable)
        End Sub
        
        Public Property desc_make As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_vehicle_company.desc_makeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_vehicle_company.desc_makeColumn) = value
            End Set
        End Property
        
        Public Property cod_make As String
            Get
                Return CType(Me(Me.tablebas_vehicle_company.cod_makeColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle_company.cod_makeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_makeNull() As Boolean
            Return Me.IsNull(Me.tablebas_vehicle_company.desc_makeColumn)
        End Function
        
        Public Sub Setdesc_makeNull()
            Me(Me.tablebas_vehicle_company.desc_makeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_companyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_vehicle_companyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_vehicle_companyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_vehicle_companyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_modelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_model As DataColumn
        
        Private columndesc_model As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_vehicle_model")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_modelColumn As DataColumn
            Get
                Return Me.columncod_model
            End Get
        End Property
        
        Friend ReadOnly Property desc_modelColumn As DataColumn
            Get
                Return Me.columndesc_model
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_vehicle_modelRow
            Get
                Return CType(Me.Rows(index),bas_vehicle_modelRow)
            End Get
        End Property
        
        Public Event bas_vehicle_modelRowChanged As bas_vehicle_modelRowChangeEventHandler
        
        Public Event bas_vehicle_modelRowChanging As bas_vehicle_modelRowChangeEventHandler
        
        Public Event bas_vehicle_modelRowDeleted As bas_vehicle_modelRowChangeEventHandler
        
        Public Event bas_vehicle_modelRowDeleting As bas_vehicle_modelRowChangeEventHandler
        
        Public Overloads Sub Addbas_vehicle_modelRow(ByVal row As bas_vehicle_modelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_vehicle_modelRow(ByVal cod_model As String, ByVal desc_model As String) As bas_vehicle_modelRow
            Dim rowbas_vehicle_modelRow As bas_vehicle_modelRow = CType(Me.NewRow,bas_vehicle_modelRow)
            rowbas_vehicle_modelRow.ItemArray = New Object() {cod_model, desc_model}
            Me.Rows.Add(rowbas_vehicle_modelRow)
            Return rowbas_vehicle_modelRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_vehicle_modelDataTable = CType(MyBase.Clone,bas_vehicle_modelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_vehicle_modelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_model = Me.Columns("cod_model")
            Me.columndesc_model = Me.Columns("desc_model")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_model = New DataColumn("cod_model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_model)
            Me.columndesc_model = New DataColumn("desc_model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_model)
            Me.columncod_model.AllowDBNull = false
        End Sub
        
        Public Function Newbas_vehicle_modelRow() As bas_vehicle_modelRow
            Return CType(Me.NewRow,bas_vehicle_modelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_vehicle_modelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_vehicle_modelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_vehicle_modelRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_modelRowChanged(Me, New bas_vehicle_modelRowChangeEvent(CType(e.Row,bas_vehicle_modelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_vehicle_modelRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_modelRowChanging(Me, New bas_vehicle_modelRowChangeEvent(CType(e.Row,bas_vehicle_modelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_vehicle_modelRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_modelRowDeleted(Me, New bas_vehicle_modelRowChangeEvent(CType(e.Row,bas_vehicle_modelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_vehicle_modelRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_vehicle_modelRowDeleting(Me, New bas_vehicle_modelRowChangeEvent(CType(e.Row,bas_vehicle_modelRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_vehicle_modelRow(ByVal row As bas_vehicle_modelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_modelRow
        Inherits DataRow
        
        Private tablebas_vehicle_model As bas_vehicle_modelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_vehicle_model = CType(Me.Table,bas_vehicle_modelDataTable)
        End Sub
        
        Public Property cod_model As String
            Get
                Return CType(Me(Me.tablebas_vehicle_model.cod_modelColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle_model.cod_modelColumn) = value
            End Set
        End Property
        
        Public Property desc_model As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_vehicle_model.desc_modelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_vehicle_model.desc_modelColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_modelNull() As Boolean
            Return Me.IsNull(Me.tablebas_vehicle_model.desc_modelColumn)
        End Function
        
        Public Sub Setdesc_modelNull()
            Me(Me.tablebas_vehicle_model.desc_modelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicle_modelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_vehicle_modelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_vehicle_modelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_vehicle_modelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndesc_vehicle_type As DataColumn
        
        Private columncod_vehicle_type As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vehicle_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property desc_vehicle_typeColumn As DataColumn
            Get
                Return Me.columndesc_vehicle_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_vehicle_typeColumn As DataColumn
            Get
                Return Me.columncod_vehicle_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vehicle_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_vehicle_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_vehicle_typeRowChanged As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowChanging As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowDeleted As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowDeleting As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vehicle_typeRow(ByVal row As inv_tab_vehicle_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vehicle_typeRow(ByVal desc_vehicle_type As String, ByVal cod_vehicle_type As String) As inv_tab_vehicle_typeRow
            Dim rowinv_tab_vehicle_typeRow As inv_tab_vehicle_typeRow = CType(Me.NewRow,inv_tab_vehicle_typeRow)
            rowinv_tab_vehicle_typeRow.ItemArray = New Object() {desc_vehicle_type, cod_vehicle_type}
            Me.Rows.Add(rowinv_tab_vehicle_typeRow)
            Return rowinv_tab_vehicle_typeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vehicle_typeDataTable = CType(MyBase.Clone,inv_tab_vehicle_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vehicle_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndesc_vehicle_type = Me.Columns("desc_vehicle_type")
            Me.columncod_vehicle_type = Me.Columns("cod_vehicle_type")
        End Sub
        
        Private Sub InitClass()
            Me.columndesc_vehicle_type = New DataColumn("desc_vehicle_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vehicle_type)
            Me.columncod_vehicle_type = New DataColumn("cod_vehicle_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vehicle_type)
            Me.columncod_vehicle_type.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_vehicle_typeRow() As inv_tab_vehicle_typeRow
            Return CType(Me.NewRow,inv_tab_vehicle_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vehicle_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vehicle_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vehicle_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowChanged(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vehicle_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowChanging(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vehicle_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowDeleted(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vehicle_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowDeleting(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vehicle_typeRow(ByVal row As inv_tab_vehicle_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeRow
        Inherits DataRow
        
        Private tableinv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vehicle_type = CType(Me.Table,inv_tab_vehicle_typeDataTable)
        End Sub
        
        Public Property desc_vehicle_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_vehicle_type As String
            Get
                Return CType(Me(Me.tableinv_tab_vehicle_type.cod_vehicle_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vehicle_type.cod_vehicle_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vehicle_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn)
        End Function
        
        Public Sub Setdesc_vehicle_typeNull()
            Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vehicle_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vehicle_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vehicle_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmake_year As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_vehicle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property make_yearColumn As DataColumn
            Get
                Return Me.columnmake_year
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_vehicleRow
            Get
                Return CType(Me.Rows(index),bas_vehicleRow)
            End Get
        End Property
        
        Public Event bas_vehicleRowChanged As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowChanging As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowDeleted As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowDeleting As bas_vehicleRowChangeEventHandler
        
        Public Overloads Sub Addbas_vehicleRow(ByVal row As bas_vehicleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_vehicleRow(ByVal make_year As String) As bas_vehicleRow
            Dim rowbas_vehicleRow As bas_vehicleRow = CType(Me.NewRow,bas_vehicleRow)
            rowbas_vehicleRow.ItemArray = New Object() {make_year}
            Me.Rows.Add(rowbas_vehicleRow)
            Return rowbas_vehicleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_vehicleDataTable = CType(MyBase.Clone,bas_vehicleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_vehicleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmake_year = Me.Columns("make_year")
        End Sub
        
        Private Sub InitClass()
            Me.columnmake_year = New DataColumn("make_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake_year)
            Me.columnmake_year.AllowDBNull = false
        End Sub
        
        Public Function Newbas_vehicleRow() As bas_vehicleRow
            Return CType(Me.NewRow,bas_vehicleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_vehicleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_vehicleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_vehicleRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowChanged(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_vehicleRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowChanging(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_vehicleRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowDeleted(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_vehicleRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowDeleting(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_vehicleRow(ByVal row As bas_vehicleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleRow
        Inherits DataRow
        
        Private tablebas_vehicle As bas_vehicleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_vehicle = CType(Me.Table,bas_vehicleDataTable)
        End Sub
        
        Public Property make_year As String
            Get
                Return CType(Me(Me.tablebas_vehicle.make_yearColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.make_yearColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_vehicleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_vehicleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_vehicleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
