'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSInvItemProduct
    Inherits DataSet
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableinv_tab_brand As inv_tab_brandDataTable
    
    Private tableinv_tab_style As inv_tab_styleDataTable
    
    Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
    
    Private tableTire_size As Tire_sizeDataTable
    
    Private tablesidwall As sidwallDataTable
    
    Private tableload_range As load_rangeDataTable
    
    Private tablewidth_mm As width_mmDataTable
    
    Private tableaspect_ratio As aspect_ratioDataTable
    
    Private tablerim_diameter_inch As rim_diameter_inchDataTable
    
    Private tablespeed_simbol As speed_simbolDataTable
    
    Private tableload_index As load_indexDataTable
    
    Private tablewheel_size As wheel_sizeDataTable
    
    Private tablefinish As finishDataTable
    
    Private tableinv_price_code As inv_price_codeDataTable
    
    Private tableinv_tab_location_warehouse As inv_tab_location_warehouseDataTable
    
    Private tableinv_tab_line As inv_tab_lineDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
            End If
            If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
            End If
            If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
                Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
            End If
            If (Not (ds.Tables("Tire_size")) Is Nothing) Then
                Me.Tables.Add(New Tire_sizeDataTable(ds.Tables("Tire_size")))
            End If
            If (Not (ds.Tables("sidwall")) Is Nothing) Then
                Me.Tables.Add(New sidwallDataTable(ds.Tables("sidwall")))
            End If
            If (Not (ds.Tables("load_range")) Is Nothing) Then
                Me.Tables.Add(New load_rangeDataTable(ds.Tables("load_range")))
            End If
            If (Not (ds.Tables("width_mm")) Is Nothing) Then
                Me.Tables.Add(New width_mmDataTable(ds.Tables("width_mm")))
            End If
            If (Not (ds.Tables("aspect_ratio")) Is Nothing) Then
                Me.Tables.Add(New aspect_ratioDataTable(ds.Tables("aspect_ratio")))
            End If
            If (Not (ds.Tables("rim_diameter_inch")) Is Nothing) Then
                Me.Tables.Add(New rim_diameter_inchDataTable(ds.Tables("rim_diameter_inch")))
            End If
            If (Not (ds.Tables("speed_simbol")) Is Nothing) Then
                Me.Tables.Add(New speed_simbolDataTable(ds.Tables("speed_simbol")))
            End If
            If (Not (ds.Tables("load_index")) Is Nothing) Then
                Me.Tables.Add(New load_indexDataTable(ds.Tables("load_index")))
            End If
            If (Not (ds.Tables("wheel_size")) Is Nothing) Then
                Me.Tables.Add(New wheel_sizeDataTable(ds.Tables("wheel_size")))
            End If
            If (Not (ds.Tables("finish")) Is Nothing) Then
                Me.Tables.Add(New finishDataTable(ds.Tables("finish")))
            End If
            If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
                Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
            End If
            If (Not (ds.Tables("inv_tab_location_warehouse")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_location_warehouseDataTable(ds.Tables("inv_tab_location_warehouse")))
            End If
            If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_brand As inv_tab_brandDataTable
        Get
            Return Me.tableinv_tab_brand
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_style As inv_tab_styleDataTable
        Get
            Return Me.tableinv_tab_style
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_quick_refrence As inv_item_quick_refrenceDataTable
        Get
            Return Me.tableinv_item_quick_refrence
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tire_size As Tire_sizeDataTable
        Get
            Return Me.tableTire_size
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sidwall As sidwallDataTable
        Get
            Return Me.tablesidwall
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property load_range As load_rangeDataTable
        Get
            Return Me.tableload_range
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property width_mm As width_mmDataTable
        Get
            Return Me.tablewidth_mm
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property aspect_ratio As aspect_ratioDataTable
        Get
            Return Me.tableaspect_ratio
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rim_diameter_inch As rim_diameter_inchDataTable
        Get
            Return Me.tablerim_diameter_inch
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property speed_simbol As speed_simbolDataTable
        Get
            Return Me.tablespeed_simbol
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property load_index As load_indexDataTable
        Get
            Return Me.tableload_index
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wheel_size As wheel_sizeDataTable
        Get
            Return Me.tablewheel_size
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property finish As finishDataTable
        Get
            Return Me.tablefinish
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code As inv_price_codeDataTable
        Get
            Return Me.tableinv_price_code
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_location_warehouse As inv_tab_location_warehouseDataTable
        Get
            Return Me.tableinv_tab_location_warehouse
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_line As inv_tab_lineDataTable
        Get
            Return Me.tableinv_tab_line
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSInvItemProduct = CType(MyBase.Clone,DSInvItemProduct)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
        End If
        If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
        End If
        If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
            Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
        End If
        If (Not (ds.Tables("Tire_size")) Is Nothing) Then
            Me.Tables.Add(New Tire_sizeDataTable(ds.Tables("Tire_size")))
        End If
        If (Not (ds.Tables("sidwall")) Is Nothing) Then
            Me.Tables.Add(New sidwallDataTable(ds.Tables("sidwall")))
        End If
        If (Not (ds.Tables("load_range")) Is Nothing) Then
            Me.Tables.Add(New load_rangeDataTable(ds.Tables("load_range")))
        End If
        If (Not (ds.Tables("width_mm")) Is Nothing) Then
            Me.Tables.Add(New width_mmDataTable(ds.Tables("width_mm")))
        End If
        If (Not (ds.Tables("aspect_ratio")) Is Nothing) Then
            Me.Tables.Add(New aspect_ratioDataTable(ds.Tables("aspect_ratio")))
        End If
        If (Not (ds.Tables("rim_diameter_inch")) Is Nothing) Then
            Me.Tables.Add(New rim_diameter_inchDataTable(ds.Tables("rim_diameter_inch")))
        End If
        If (Not (ds.Tables("speed_simbol")) Is Nothing) Then
            Me.Tables.Add(New speed_simbolDataTable(ds.Tables("speed_simbol")))
        End If
        If (Not (ds.Tables("load_index")) Is Nothing) Then
            Me.Tables.Add(New load_indexDataTable(ds.Tables("load_index")))
        End If
        If (Not (ds.Tables("wheel_size")) Is Nothing) Then
            Me.Tables.Add(New wheel_sizeDataTable(ds.Tables("wheel_size")))
        End If
        If (Not (ds.Tables("finish")) Is Nothing) Then
            Me.Tables.Add(New finishDataTable(ds.Tables("finish")))
        End If
        If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
            Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
        End If
        If (Not (ds.Tables("inv_tab_location_warehouse")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_location_warehouseDataTable(ds.Tables("inv_tab_location_warehouse")))
        End If
        If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableinv_tab_brand = CType(Me.Tables("inv_tab_brand"),inv_tab_brandDataTable)
        If (Not (Me.tableinv_tab_brand) Is Nothing) Then
            Me.tableinv_tab_brand.InitVars
        End If
        Me.tableinv_tab_style = CType(Me.Tables("inv_tab_style"),inv_tab_styleDataTable)
        If (Not (Me.tableinv_tab_style) Is Nothing) Then
            Me.tableinv_tab_style.InitVars
        End If
        Me.tableinv_item_quick_refrence = CType(Me.Tables("inv_item_quick_refrence"),inv_item_quick_refrenceDataTable)
        If (Not (Me.tableinv_item_quick_refrence) Is Nothing) Then
            Me.tableinv_item_quick_refrence.InitVars
        End If
        Me.tableTire_size = CType(Me.Tables("Tire_size"),Tire_sizeDataTable)
        If (Not (Me.tableTire_size) Is Nothing) Then
            Me.tableTire_size.InitVars
        End If
        Me.tablesidwall = CType(Me.Tables("sidwall"),sidwallDataTable)
        If (Not (Me.tablesidwall) Is Nothing) Then
            Me.tablesidwall.InitVars
        End If
        Me.tableload_range = CType(Me.Tables("load_range"),load_rangeDataTable)
        If (Not (Me.tableload_range) Is Nothing) Then
            Me.tableload_range.InitVars
        End If
        Me.tablewidth_mm = CType(Me.Tables("width_mm"),width_mmDataTable)
        If (Not (Me.tablewidth_mm) Is Nothing) Then
            Me.tablewidth_mm.InitVars
        End If
        Me.tableaspect_ratio = CType(Me.Tables("aspect_ratio"),aspect_ratioDataTable)
        If (Not (Me.tableaspect_ratio) Is Nothing) Then
            Me.tableaspect_ratio.InitVars
        End If
        Me.tablerim_diameter_inch = CType(Me.Tables("rim_diameter_inch"),rim_diameter_inchDataTable)
        If (Not (Me.tablerim_diameter_inch) Is Nothing) Then
            Me.tablerim_diameter_inch.InitVars
        End If
        Me.tablespeed_simbol = CType(Me.Tables("speed_simbol"),speed_simbolDataTable)
        If (Not (Me.tablespeed_simbol) Is Nothing) Then
            Me.tablespeed_simbol.InitVars
        End If
        Me.tableload_index = CType(Me.Tables("load_index"),load_indexDataTable)
        If (Not (Me.tableload_index) Is Nothing) Then
            Me.tableload_index.InitVars
        End If
        Me.tablewheel_size = CType(Me.Tables("wheel_size"),wheel_sizeDataTable)
        If (Not (Me.tablewheel_size) Is Nothing) Then
            Me.tablewheel_size.InitVars
        End If
        Me.tablefinish = CType(Me.Tables("finish"),finishDataTable)
        If (Not (Me.tablefinish) Is Nothing) Then
            Me.tablefinish.InitVars
        End If
        Me.tableinv_price_code = CType(Me.Tables("inv_price_code"),inv_price_codeDataTable)
        If (Not (Me.tableinv_price_code) Is Nothing) Then
            Me.tableinv_price_code.InitVars
        End If
        Me.tableinv_tab_location_warehouse = CType(Me.Tables("inv_tab_location_warehouse"),inv_tab_location_warehouseDataTable)
        If (Not (Me.tableinv_tab_location_warehouse) Is Nothing) Then
            Me.tableinv_tab_location_warehouse.InitVars
        End If
        Me.tableinv_tab_line = CType(Me.Tables("inv_tab_line"),inv_tab_lineDataTable)
        If (Not (Me.tableinv_tab_line) Is Nothing) Then
            Me.tableinv_tab_line.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSInvItemProduct"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSInvItemProduct.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableinv_tab_brand = New inv_tab_brandDataTable
        Me.Tables.Add(Me.tableinv_tab_brand)
        Me.tableinv_tab_style = New inv_tab_styleDataTable
        Me.Tables.Add(Me.tableinv_tab_style)
        Me.tableinv_item_quick_refrence = New inv_item_quick_refrenceDataTable
        Me.Tables.Add(Me.tableinv_item_quick_refrence)
        Me.tableTire_size = New Tire_sizeDataTable
        Me.Tables.Add(Me.tableTire_size)
        Me.tablesidwall = New sidwallDataTable
        Me.Tables.Add(Me.tablesidwall)
        Me.tableload_range = New load_rangeDataTable
        Me.Tables.Add(Me.tableload_range)
        Me.tablewidth_mm = New width_mmDataTable
        Me.Tables.Add(Me.tablewidth_mm)
        Me.tableaspect_ratio = New aspect_ratioDataTable
        Me.Tables.Add(Me.tableaspect_ratio)
        Me.tablerim_diameter_inch = New rim_diameter_inchDataTable
        Me.Tables.Add(Me.tablerim_diameter_inch)
        Me.tablespeed_simbol = New speed_simbolDataTable
        Me.Tables.Add(Me.tablespeed_simbol)
        Me.tableload_index = New load_indexDataTable
        Me.Tables.Add(Me.tableload_index)
        Me.tablewheel_size = New wheel_sizeDataTable
        Me.Tables.Add(Me.tablewheel_size)
        Me.tablefinish = New finishDataTable
        Me.Tables.Add(Me.tablefinish)
        Me.tableinv_price_code = New inv_price_codeDataTable
        Me.Tables.Add(Me.tableinv_price_code)
        Me.tableinv_tab_location_warehouse = New inv_tab_location_warehouseDataTable
        Me.Tables.Add(Me.tableinv_tab_location_warehouse)
        Me.tableinv_tab_line = New inv_tab_lineDataTable
        Me.Tables.Add(Me.tableinv_tab_line)
    End Sub
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_brand() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_style() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item_quick_refrence() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTire_size() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesidwall() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeload_range() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializewidth_mm() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeaspect_ratio() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializerim_diameter_inch() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializespeed_simbol() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeload_index() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializewheel_size() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializefinish() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_location_warehouse() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_line() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub inv_tab_brandRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_brandRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleRowChangeEvent)
    
    Public Delegate Sub inv_item_quick_refrenceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_quick_refrenceRowChangeEvent)
    
    Public Delegate Sub Tire_sizeRowChangeEventHandler(ByVal sender As Object, ByVal e As Tire_sizeRowChangeEvent)
    
    Public Delegate Sub sidwallRowChangeEventHandler(ByVal sender As Object, ByVal e As sidwallRowChangeEvent)
    
    Public Delegate Sub load_rangeRowChangeEventHandler(ByVal sender As Object, ByVal e As load_rangeRowChangeEvent)
    
    Public Delegate Sub width_mmRowChangeEventHandler(ByVal sender As Object, ByVal e As width_mmRowChangeEvent)
    
    Public Delegate Sub aspect_ratioRowChangeEventHandler(ByVal sender As Object, ByVal e As aspect_ratioRowChangeEvent)
    
    Public Delegate Sub rim_diameter_inchRowChangeEventHandler(ByVal sender As Object, ByVal e As rim_diameter_inchRowChangeEvent)
    
    Public Delegate Sub speed_simbolRowChangeEventHandler(ByVal sender As Object, ByVal e As speed_simbolRowChangeEvent)
    
    Public Delegate Sub load_indexRowChangeEventHandler(ByVal sender As Object, ByVal e As load_indexRowChangeEvent)
    
    Public Delegate Sub wheel_sizeRowChangeEventHandler(ByVal sender As Object, ByVal e As wheel_sizeRowChangeEvent)
    
    Public Delegate Sub finishRowChangeEventHandler(ByVal sender As Object, ByVal e As finishRowChangeEvent)
    
    Public Delegate Sub inv_price_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_codeRowChangeEvent)
    
    Public Delegate Sub inv_tab_location_warehouseRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_location_warehouseRowChangeEvent)
    
    Public Delegate Sub inv_tab_lineRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_lineRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnGL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal GL_account As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type, GL_account}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnGL_account = Me.Columns("GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableinv_tab_type_item.GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columntel As DataColumn
        
        Private columnconect_personal As DataColumn
        
        Private columnicon_brand As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_brand")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property telColumn As DataColumn
            Get
                Return Me.columntel
            End Get
        End Property
        
        Friend ReadOnly Property conect_personalColumn As DataColumn
            Get
                Return Me.columnconect_personal
            End Get
        End Property
        
        Friend ReadOnly Property icon_brandColumn As DataColumn
            Get
                Return Me.columnicon_brand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_brandRow
            Get
                Return CType(Me.Rows(index),inv_tab_brandRow)
            End Get
        End Property
        
        Public Event inv_tab_brandRowChanged As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowChanging As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleted As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleting As inv_tab_brandRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_brandRow(ByVal cod_brand As String, ByVal complete_desc_brand As String, ByVal abbreviation_desc_brand As String, ByVal address As String, ByVal tel As String, ByVal conect_personal As String, ByVal icon_brand() As Byte) As inv_tab_brandRow
            Dim rowinv_tab_brandRow As inv_tab_brandRow = CType(Me.NewRow,inv_tab_brandRow)
            rowinv_tab_brandRow.ItemArray = New Object() {cod_brand, complete_desc_brand, abbreviation_desc_brand, address, tel, conect_personal, icon_brand}
            Me.Rows.Add(rowinv_tab_brandRow)
            Return rowinv_tab_brandRow
        End Function
        
        Public Function FindBycod_brand(ByVal cod_brand As String) As inv_tab_brandRow
            Return CType(Me.Rows.Find(New Object() {cod_brand}),inv_tab_brandRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_brandDataTable = CType(MyBase.Clone,inv_tab_brandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_brandDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columnaddress = Me.Columns("address")
            Me.columntel = Me.Columns("tel")
            Me.columnconect_personal = Me.Columns("conect_personal")
            Me.columnicon_brand = Me.Columns("icon_brand")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columntel = New DataColumn("tel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntel)
            Me.columnconect_personal = New DataColumn("conect_personal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconect_personal)
            Me.columnicon_brand = New DataColumn("icon_brand", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnicon_brand)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_brand}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columncod_brand.Unique = true
        End Sub
        
        Public Function Newinv_tab_brandRow() As inv_tab_brandRow
            Return CType(Me.NewRow,inv_tab_brandRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_brandRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_brandRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_brandRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanged(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_brandRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanging(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_brandRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleted(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_brandRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleting(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRow
        Inherits DataRow
        
        Private tableinv_tab_brand As inv_tab_brandDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_brand = CType(Me.Table,inv_tab_brandDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_brand.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_brand.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.addressColumn) = value
            End Set
        End Property
        
        Public Property tel As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.telColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.telColumn) = value
            End Set
        End Property
        
        Public Property conect_personal As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.conect_personalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.conect_personalColumn) = value
            End Set
        End Property
        
        Public Property icon_brand As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.icon_brandColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.icon_brandColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableinv_tab_brand.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstelNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.telColumn)
        End Function
        
        Public Sub SettelNull()
            Me(Me.tableinv_tab_brand.telColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isconect_personalNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.conect_personalColumn)
        End Function
        
        Public Sub Setconect_personalNull()
            Me(Me.tableinv_tab_brand.conect_personalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isicon_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.icon_brandColumn)
        End Function
        
        Public Sub Seticon_brandNull()
            Me(Me.tableinv_tab_brand.icon_brandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_brandRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_brandRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_brandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columncod_fees_balance As DataColumn
        
        Private columncod_fees_tire As DataColumn
        
        Private columncod_fees_disposal As DataColumn
        
        Private columncod_valvestem As DataColumn
        
        Private columncod_roadhazard As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property cod_fees_balanceColumn As DataColumn
            Get
                Return Me.columncod_fees_balance
            End Get
        End Property
        
        Friend ReadOnly Property cod_fees_tireColumn As DataColumn
            Get
                Return Me.columncod_fees_tire
            End Get
        End Property
        
        Friend ReadOnly Property cod_fees_disposalColumn As DataColumn
            Get
                Return Me.columncod_fees_disposal
            End Get
        End Property
        
        Friend ReadOnly Property cod_valvestemColumn As DataColumn
            Get
                Return Me.columncod_valvestem
            End Get
        End Property
        
        Friend ReadOnly Property cod_roadhazardColumn As DataColumn
            Get
                Return Me.columncod_roadhazard
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleRow)
            End Get
        End Property
        
        Public Event inv_tab_styleRowChanged As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowChanging As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleted As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleting As inv_tab_styleRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleRow(ByVal style As String, ByVal desc_style As String, ByVal cod_fees_balance As String, ByVal cod_fees_tire As String, ByVal cod_fees_disposal As String, ByVal cod_valvestem As String, ByVal cod_roadhazard As String, ByVal remark As String, ByVal image_remark() As Byte) As inv_tab_styleRow
            Dim rowinv_tab_styleRow As inv_tab_styleRow = CType(Me.NewRow,inv_tab_styleRow)
            rowinv_tab_styleRow.ItemArray = New Object() {style, desc_style, cod_fees_balance, cod_fees_tire, cod_fees_disposal, cod_valvestem, cod_roadhazard, remark, image_remark}
            Me.Rows.Add(rowinv_tab_styleRow)
            Return rowinv_tab_styleRow
        End Function
        
        Public Function FindBystyle(ByVal style As String) As inv_tab_styleRow
            Return CType(Me.Rows.Find(New Object() {style}),inv_tab_styleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleDataTable = CType(MyBase.Clone,inv_tab_styleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columncod_fees_balance = Me.Columns("cod_fees_balance")
            Me.columncod_fees_tire = Me.Columns("cod_fees_tire")
            Me.columncod_fees_disposal = Me.Columns("cod_fees_disposal")
            Me.columncod_valvestem = Me.Columns("cod_valvestem")
            Me.columncod_roadhazard = Me.Columns("cod_roadhazard")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columncod_fees_balance = New DataColumn("cod_fees_balance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_fees_balance)
            Me.columncod_fees_tire = New DataColumn("cod_fees_tire", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_fees_tire)
            Me.columncod_fees_disposal = New DataColumn("cod_fees_disposal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_fees_disposal)
            Me.columncod_valvestem = New DataColumn("cod_valvestem", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_valvestem)
            Me.columncod_roadhazard = New DataColumn("cod_roadhazard", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_roadhazard)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstyle}, true))
            Me.columnstyle.AllowDBNull = false
            Me.columnstyle.Unique = true
        End Sub
        
        Public Function Newinv_tab_styleRow() As inv_tab_styleRow
            Return CType(Me.NewRow,inv_tab_styleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanged(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanging(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleted(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleting(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRow
        Inherits DataRow
        
        Private tableinv_tab_style As inv_tab_styleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_style = CType(Me.Table,inv_tab_styleDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_style.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_style.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property cod_fees_balance As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.cod_fees_balanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.cod_fees_balanceColumn) = value
            End Set
        End Property
        
        Public Property cod_fees_tire As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.cod_fees_tireColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.cod_fees_tireColumn) = value
            End Set
        End Property
        
        Public Property cod_fees_disposal As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.cod_fees_disposalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.cod_fees_disposalColumn) = value
            End Set
        End Property
        
        Public Property cod_valvestem As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.cod_valvestemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.cod_valvestemColumn) = value
            End Set
        End Property
        
        Public Property cod_roadhazard As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.cod_roadhazardColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.cod_roadhazardColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.image_remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_style.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_fees_balanceNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.cod_fees_balanceColumn)
        End Function
        
        Public Sub Setcod_fees_balanceNull()
            Me(Me.tableinv_tab_style.cod_fees_balanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_fees_tireNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.cod_fees_tireColumn)
        End Function
        
        Public Sub Setcod_fees_tireNull()
            Me(Me.tableinv_tab_style.cod_fees_tireColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_fees_disposalNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.cod_fees_disposalColumn)
        End Function
        
        Public Sub Setcod_fees_disposalNull()
            Me(Me.tableinv_tab_style.cod_fees_disposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_valvestemNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.cod_valvestemColumn)
        End Function
        
        Public Sub Setcod_valvestemNull()
            Me(Me.tableinv_tab_style.cod_valvestemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_roadhazardNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.cod_roadhazardColumn)
        End Function
        
        Public Sub Setcod_roadhazardNull()
            Me(Me.tableinv_tab_style.cod_roadhazardColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_style.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_style.image_remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_quick_refrence As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_quick_refrence")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_quick_refrenceRow
            Get
                Return CType(Me.Rows(index),inv_item_quick_refrenceRow)
            End Get
        End Property
        
        Public Event inv_item_quick_refrenceRowChanged As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowChanging As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleted As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleting As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_quick_refrenceRow(ByVal cod_quick_refrence As String, ByVal desc_quick_refrence As String) As inv_item_quick_refrenceRow
            Dim rowinv_item_quick_refrenceRow As inv_item_quick_refrenceRow = CType(Me.NewRow,inv_item_quick_refrenceRow)
            rowinv_item_quick_refrenceRow.ItemArray = New Object() {cod_quick_refrence, desc_quick_refrence}
            Me.Rows.Add(rowinv_item_quick_refrenceRow)
            Return rowinv_item_quick_refrenceRow
        End Function
        
        Public Function FindBycod_quick_refrence(ByVal cod_quick_refrence As String) As inv_item_quick_refrenceRow
            Return CType(Me.Rows.Find(New Object() {cod_quick_refrence}),inv_item_quick_refrenceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_quick_refrenceDataTable = CType(MyBase.Clone,inv_item_quick_refrenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_quick_refrenceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_quick_refrence}, true))
            Me.columncod_quick_refrence.AllowDBNull = false
            Me.columncod_quick_refrence.Unique = true
        End Sub
        
        Public Function Newinv_item_quick_refrenceRow() As inv_item_quick_refrenceRow
            Return CType(Me.NewRow,inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_quick_refrenceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_quick_refrenceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanged(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_quick_refrenceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanging(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleted(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleting(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRow
        Inherits DataRow
        
        Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_quick_refrence = CType(Me.Table,inv_item_quick_refrenceDataTable)
        End Sub
        
        Public Property cod_quick_refrence As String
            Get
                Return CType(Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_quick_refrenceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_quick_refrenceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_quick_refrenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("Tire_size")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tire_sizeRow
            Get
                Return CType(Me.Rows(index),Tire_sizeRow)
            End Get
        End Property
        
        Public Event Tire_sizeRowChanged As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowChanging As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowDeleted As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowDeleting As Tire_sizeRowChangeEventHandler
        
        Public Overloads Sub AddTire_sizeRow(ByVal row As Tire_sizeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTire_sizeRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As Tire_sizeRow
            Dim rowTire_sizeRow As Tire_sizeRow = CType(Me.NewRow,Tire_sizeRow)
            rowTire_sizeRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowTire_sizeRow)
            Return rowTire_sizeRow
        End Function
        
        Public Function FindBycod_maincod_table_public(ByVal cod_main As String, ByVal cod_table_public As String) As Tire_sizeRow
            Return CType(Me.Rows.Find(New Object() {cod_main, cod_table_public}),Tire_sizeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tire_sizeDataTable = CType(MyBase.Clone,Tire_sizeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tire_sizeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_main, Me.columncod_table_public}, true))
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewTire_sizeRow() As Tire_sizeRow
            Return CType(Me.NewRow,Tire_sizeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tire_sizeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tire_sizeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tire_sizeRowChangedEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowChanged(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tire_sizeRowChangingEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowChanging(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tire_sizeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowDeleted(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tire_sizeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowDeleting(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTire_sizeRow(ByVal row As Tire_sizeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeRow
        Inherits DataRow
        
        Private tableTire_size As Tire_sizeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTire_size = CType(Me.Table,Tire_sizeDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableTire_size.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableTire_size.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableTire_size.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableTire_size.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableTire_size.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTire_size.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableTire_size.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableTire_size.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tire_sizeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tire_sizeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tire_sizeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sidwallDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("sidwall")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sidwallRow
            Get
                Return CType(Me.Rows(index),sidwallRow)
            End Get
        End Property
        
        Public Event sidwallRowChanged As sidwallRowChangeEventHandler
        
        Public Event sidwallRowChanging As sidwallRowChangeEventHandler
        
        Public Event sidwallRowDeleted As sidwallRowChangeEventHandler
        
        Public Event sidwallRowDeleting As sidwallRowChangeEventHandler
        
        Public Overloads Sub AddsidwallRow(ByVal row As sidwallRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsidwallRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As sidwallRow
            Dim rowsidwallRow As sidwallRow = CType(Me.NewRow,sidwallRow)
            rowsidwallRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowsidwallRow)
            Return rowsidwallRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sidwallDataTable = CType(MyBase.Clone,sidwallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sidwallDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewsidwallRow() As sidwallRow
            Return CType(Me.NewRow,sidwallRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sidwallRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sidwallRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sidwallRowChangedEvent) Is Nothing) Then
                RaiseEvent sidwallRowChanged(Me, New sidwallRowChangeEvent(CType(e.Row,sidwallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sidwallRowChangingEvent) Is Nothing) Then
                RaiseEvent sidwallRowChanging(Me, New sidwallRowChangeEvent(CType(e.Row,sidwallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sidwallRowDeletedEvent) Is Nothing) Then
                RaiseEvent sidwallRowDeleted(Me, New sidwallRowChangeEvent(CType(e.Row,sidwallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sidwallRowDeletingEvent) Is Nothing) Then
                RaiseEvent sidwallRowDeleting(Me, New sidwallRowChangeEvent(CType(e.Row,sidwallRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesidwallRow(ByVal row As sidwallRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sidwallRow
        Inherits DataRow
        
        Private tablesidwall As sidwallDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesidwall = CType(Me.Table,sidwallDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablesidwall.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablesidwall.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablesidwall.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablesidwall.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablesidwall.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesidwall.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablesidwall.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablesidwall.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sidwallRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sidwallRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sidwallRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sidwallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_rangeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("load_range")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As load_rangeRow
            Get
                Return CType(Me.Rows(index),load_rangeRow)
            End Get
        End Property
        
        Public Event load_rangeRowChanged As load_rangeRowChangeEventHandler
        
        Public Event load_rangeRowChanging As load_rangeRowChangeEventHandler
        
        Public Event load_rangeRowDeleted As load_rangeRowChangeEventHandler
        
        Public Event load_rangeRowDeleting As load_rangeRowChangeEventHandler
        
        Public Overloads Sub Addload_rangeRow(ByVal row As load_rangeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addload_rangeRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As load_rangeRow
            Dim rowload_rangeRow As load_rangeRow = CType(Me.NewRow,load_rangeRow)
            rowload_rangeRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowload_rangeRow)
            Return rowload_rangeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As load_rangeDataTable = CType(MyBase.Clone,load_rangeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New load_rangeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newload_rangeRow() As load_rangeRow
            Return CType(Me.NewRow,load_rangeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New load_rangeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(load_rangeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.load_rangeRowChangedEvent) Is Nothing) Then
                RaiseEvent load_rangeRowChanged(Me, New load_rangeRowChangeEvent(CType(e.Row,load_rangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.load_rangeRowChangingEvent) Is Nothing) Then
                RaiseEvent load_rangeRowChanging(Me, New load_rangeRowChangeEvent(CType(e.Row,load_rangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.load_rangeRowDeletedEvent) Is Nothing) Then
                RaiseEvent load_rangeRowDeleted(Me, New load_rangeRowChangeEvent(CType(e.Row,load_rangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.load_rangeRowDeletingEvent) Is Nothing) Then
                RaiseEvent load_rangeRowDeleting(Me, New load_rangeRowChangeEvent(CType(e.Row,load_rangeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeload_rangeRow(ByVal row As load_rangeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_rangeRow
        Inherits DataRow
        
        Private tableload_range As load_rangeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableload_range = CType(Me.Table,load_rangeDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableload_range.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableload_range.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableload_range.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableload_range.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableload_range.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableload_range.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableload_range.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableload_range.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_rangeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As load_rangeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As load_rangeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As load_rangeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class width_mmDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("width_mm")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As width_mmRow
            Get
                Return CType(Me.Rows(index),width_mmRow)
            End Get
        End Property
        
        Public Event width_mmRowChanged As width_mmRowChangeEventHandler
        
        Public Event width_mmRowChanging As width_mmRowChangeEventHandler
        
        Public Event width_mmRowDeleted As width_mmRowChangeEventHandler
        
        Public Event width_mmRowDeleting As width_mmRowChangeEventHandler
        
        Public Overloads Sub Addwidth_mmRow(ByVal row As width_mmRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addwidth_mmRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As width_mmRow
            Dim rowwidth_mmRow As width_mmRow = CType(Me.NewRow,width_mmRow)
            rowwidth_mmRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowwidth_mmRow)
            Return rowwidth_mmRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As width_mmDataTable = CType(MyBase.Clone,width_mmDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New width_mmDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newwidth_mmRow() As width_mmRow
            Return CType(Me.NewRow,width_mmRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New width_mmRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(width_mmRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.width_mmRowChangedEvent) Is Nothing) Then
                RaiseEvent width_mmRowChanged(Me, New width_mmRowChangeEvent(CType(e.Row,width_mmRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.width_mmRowChangingEvent) Is Nothing) Then
                RaiseEvent width_mmRowChanging(Me, New width_mmRowChangeEvent(CType(e.Row,width_mmRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.width_mmRowDeletedEvent) Is Nothing) Then
                RaiseEvent width_mmRowDeleted(Me, New width_mmRowChangeEvent(CType(e.Row,width_mmRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.width_mmRowDeletingEvent) Is Nothing) Then
                RaiseEvent width_mmRowDeleting(Me, New width_mmRowChangeEvent(CType(e.Row,width_mmRow), e.Action))
            End If
        End Sub
        
        Public Sub Removewidth_mmRow(ByVal row As width_mmRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class width_mmRow
        Inherits DataRow
        
        Private tablewidth_mm As width_mmDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablewidth_mm = CType(Me.Table,width_mmDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablewidth_mm.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablewidth_mm.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablewidth_mm.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablewidth_mm.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablewidth_mm.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewidth_mm.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablewidth_mm.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablewidth_mm.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class width_mmRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As width_mmRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As width_mmRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As width_mmRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class aspect_ratioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("aspect_ratio")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As aspect_ratioRow
            Get
                Return CType(Me.Rows(index),aspect_ratioRow)
            End Get
        End Property
        
        Public Event aspect_ratioRowChanged As aspect_ratioRowChangeEventHandler
        
        Public Event aspect_ratioRowChanging As aspect_ratioRowChangeEventHandler
        
        Public Event aspect_ratioRowDeleted As aspect_ratioRowChangeEventHandler
        
        Public Event aspect_ratioRowDeleting As aspect_ratioRowChangeEventHandler
        
        Public Overloads Sub Addaspect_ratioRow(ByVal row As aspect_ratioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addaspect_ratioRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As aspect_ratioRow
            Dim rowaspect_ratioRow As aspect_ratioRow = CType(Me.NewRow,aspect_ratioRow)
            rowaspect_ratioRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowaspect_ratioRow)
            Return rowaspect_ratioRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As aspect_ratioDataTable = CType(MyBase.Clone,aspect_ratioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New aspect_ratioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newaspect_ratioRow() As aspect_ratioRow
            Return CType(Me.NewRow,aspect_ratioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New aspect_ratioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(aspect_ratioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.aspect_ratioRowChangedEvent) Is Nothing) Then
                RaiseEvent aspect_ratioRowChanged(Me, New aspect_ratioRowChangeEvent(CType(e.Row,aspect_ratioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.aspect_ratioRowChangingEvent) Is Nothing) Then
                RaiseEvent aspect_ratioRowChanging(Me, New aspect_ratioRowChangeEvent(CType(e.Row,aspect_ratioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.aspect_ratioRowDeletedEvent) Is Nothing) Then
                RaiseEvent aspect_ratioRowDeleted(Me, New aspect_ratioRowChangeEvent(CType(e.Row,aspect_ratioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.aspect_ratioRowDeletingEvent) Is Nothing) Then
                RaiseEvent aspect_ratioRowDeleting(Me, New aspect_ratioRowChangeEvent(CType(e.Row,aspect_ratioRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeaspect_ratioRow(ByVal row As aspect_ratioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class aspect_ratioRow
        Inherits DataRow
        
        Private tableaspect_ratio As aspect_ratioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableaspect_ratio = CType(Me.Table,aspect_ratioDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableaspect_ratio.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableaspect_ratio.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableaspect_ratio.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableaspect_ratio.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableaspect_ratio.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaspect_ratio.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableaspect_ratio.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableaspect_ratio.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class aspect_ratioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As aspect_ratioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As aspect_ratioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As aspect_ratioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rim_diameter_inchDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("rim_diameter_inch")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As rim_diameter_inchRow
            Get
                Return CType(Me.Rows(index),rim_diameter_inchRow)
            End Get
        End Property
        
        Public Event rim_diameter_inchRowChanged As rim_diameter_inchRowChangeEventHandler
        
        Public Event rim_diameter_inchRowChanging As rim_diameter_inchRowChangeEventHandler
        
        Public Event rim_diameter_inchRowDeleted As rim_diameter_inchRowChangeEventHandler
        
        Public Event rim_diameter_inchRowDeleting As rim_diameter_inchRowChangeEventHandler
        
        Public Overloads Sub Addrim_diameter_inchRow(ByVal row As rim_diameter_inchRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addrim_diameter_inchRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As rim_diameter_inchRow
            Dim rowrim_diameter_inchRow As rim_diameter_inchRow = CType(Me.NewRow,rim_diameter_inchRow)
            rowrim_diameter_inchRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowrim_diameter_inchRow)
            Return rowrim_diameter_inchRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As rim_diameter_inchDataTable = CType(MyBase.Clone,rim_diameter_inchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New rim_diameter_inchDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newrim_diameter_inchRow() As rim_diameter_inchRow
            Return CType(Me.NewRow,rim_diameter_inchRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New rim_diameter_inchRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rim_diameter_inchRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rim_diameter_inchRowChangedEvent) Is Nothing) Then
                RaiseEvent rim_diameter_inchRowChanged(Me, New rim_diameter_inchRowChangeEvent(CType(e.Row,rim_diameter_inchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rim_diameter_inchRowChangingEvent) Is Nothing) Then
                RaiseEvent rim_diameter_inchRowChanging(Me, New rim_diameter_inchRowChangeEvent(CType(e.Row,rim_diameter_inchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rim_diameter_inchRowDeletedEvent) Is Nothing) Then
                RaiseEvent rim_diameter_inchRowDeleted(Me, New rim_diameter_inchRowChangeEvent(CType(e.Row,rim_diameter_inchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rim_diameter_inchRowDeletingEvent) Is Nothing) Then
                RaiseEvent rim_diameter_inchRowDeleting(Me, New rim_diameter_inchRowChangeEvent(CType(e.Row,rim_diameter_inchRow), e.Action))
            End If
        End Sub
        
        Public Sub Removerim_diameter_inchRow(ByVal row As rim_diameter_inchRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rim_diameter_inchRow
        Inherits DataRow
        
        Private tablerim_diameter_inch As rim_diameter_inchDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablerim_diameter_inch = CType(Me.Table,rim_diameter_inchDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablerim_diameter_inch.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablerim_diameter_inch.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablerim_diameter_inch.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablerim_diameter_inch.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablerim_diameter_inch.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerim_diameter_inch.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablerim_diameter_inch.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablerim_diameter_inch.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rim_diameter_inchRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As rim_diameter_inchRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As rim_diameter_inchRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As rim_diameter_inchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class speed_simbolDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("speed_simbol")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As speed_simbolRow
            Get
                Return CType(Me.Rows(index),speed_simbolRow)
            End Get
        End Property
        
        Public Event speed_simbolRowChanged As speed_simbolRowChangeEventHandler
        
        Public Event speed_simbolRowChanging As speed_simbolRowChangeEventHandler
        
        Public Event speed_simbolRowDeleted As speed_simbolRowChangeEventHandler
        
        Public Event speed_simbolRowDeleting As speed_simbolRowChangeEventHandler
        
        Public Overloads Sub Addspeed_simbolRow(ByVal row As speed_simbolRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addspeed_simbolRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As speed_simbolRow
            Dim rowspeed_simbolRow As speed_simbolRow = CType(Me.NewRow,speed_simbolRow)
            rowspeed_simbolRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowspeed_simbolRow)
            Return rowspeed_simbolRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As speed_simbolDataTable = CType(MyBase.Clone,speed_simbolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New speed_simbolDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newspeed_simbolRow() As speed_simbolRow
            Return CType(Me.NewRow,speed_simbolRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New speed_simbolRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(speed_simbolRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.speed_simbolRowChangedEvent) Is Nothing) Then
                RaiseEvent speed_simbolRowChanged(Me, New speed_simbolRowChangeEvent(CType(e.Row,speed_simbolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.speed_simbolRowChangingEvent) Is Nothing) Then
                RaiseEvent speed_simbolRowChanging(Me, New speed_simbolRowChangeEvent(CType(e.Row,speed_simbolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.speed_simbolRowDeletedEvent) Is Nothing) Then
                RaiseEvent speed_simbolRowDeleted(Me, New speed_simbolRowChangeEvent(CType(e.Row,speed_simbolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.speed_simbolRowDeletingEvent) Is Nothing) Then
                RaiseEvent speed_simbolRowDeleting(Me, New speed_simbolRowChangeEvent(CType(e.Row,speed_simbolRow), e.Action))
            End If
        End Sub
        
        Public Sub Removespeed_simbolRow(ByVal row As speed_simbolRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class speed_simbolRow
        Inherits DataRow
        
        Private tablespeed_simbol As speed_simbolDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablespeed_simbol = CType(Me.Table,speed_simbolDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablespeed_simbol.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablespeed_simbol.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablespeed_simbol.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablespeed_simbol.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablespeed_simbol.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespeed_simbol.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablespeed_simbol.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablespeed_simbol.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class speed_simbolRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As speed_simbolRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As speed_simbolRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As speed_simbolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_indexDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("load_index")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As load_indexRow
            Get
                Return CType(Me.Rows(index),load_indexRow)
            End Get
        End Property
        
        Public Event load_indexRowChanged As load_indexRowChangeEventHandler
        
        Public Event load_indexRowChanging As load_indexRowChangeEventHandler
        
        Public Event load_indexRowDeleted As load_indexRowChangeEventHandler
        
        Public Event load_indexRowDeleting As load_indexRowChangeEventHandler
        
        Public Overloads Sub Addload_indexRow(ByVal row As load_indexRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addload_indexRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As load_indexRow
            Dim rowload_indexRow As load_indexRow = CType(Me.NewRow,load_indexRow)
            rowload_indexRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowload_indexRow)
            Return rowload_indexRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As load_indexDataTable = CType(MyBase.Clone,load_indexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New load_indexDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newload_indexRow() As load_indexRow
            Return CType(Me.NewRow,load_indexRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New load_indexRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(load_indexRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.load_indexRowChangedEvent) Is Nothing) Then
                RaiseEvent load_indexRowChanged(Me, New load_indexRowChangeEvent(CType(e.Row,load_indexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.load_indexRowChangingEvent) Is Nothing) Then
                RaiseEvent load_indexRowChanging(Me, New load_indexRowChangeEvent(CType(e.Row,load_indexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.load_indexRowDeletedEvent) Is Nothing) Then
                RaiseEvent load_indexRowDeleted(Me, New load_indexRowChangeEvent(CType(e.Row,load_indexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.load_indexRowDeletingEvent) Is Nothing) Then
                RaiseEvent load_indexRowDeleting(Me, New load_indexRowChangeEvent(CType(e.Row,load_indexRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeload_indexRow(ByVal row As load_indexRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_indexRow
        Inherits DataRow
        
        Private tableload_index As load_indexDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableload_index = CType(Me.Table,load_indexDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableload_index.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableload_index.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableload_index.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableload_index.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableload_index.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableload_index.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableload_index.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableload_index.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class load_indexRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As load_indexRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As load_indexRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As load_indexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class wheel_sizeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("wheel_size")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As wheel_sizeRow
            Get
                Return CType(Me.Rows(index),wheel_sizeRow)
            End Get
        End Property
        
        Public Event wheel_sizeRowChanged As wheel_sizeRowChangeEventHandler
        
        Public Event wheel_sizeRowChanging As wheel_sizeRowChangeEventHandler
        
        Public Event wheel_sizeRowDeleted As wheel_sizeRowChangeEventHandler
        
        Public Event wheel_sizeRowDeleting As wheel_sizeRowChangeEventHandler
        
        Public Overloads Sub Addwheel_sizeRow(ByVal row As wheel_sizeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addwheel_sizeRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As wheel_sizeRow
            Dim rowwheel_sizeRow As wheel_sizeRow = CType(Me.NewRow,wheel_sizeRow)
            rowwheel_sizeRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowwheel_sizeRow)
            Return rowwheel_sizeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As wheel_sizeDataTable = CType(MyBase.Clone,wheel_sizeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New wheel_sizeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newwheel_sizeRow() As wheel_sizeRow
            Return CType(Me.NewRow,wheel_sizeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New wheel_sizeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(wheel_sizeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wheel_sizeRowChangedEvent) Is Nothing) Then
                RaiseEvent wheel_sizeRowChanged(Me, New wheel_sizeRowChangeEvent(CType(e.Row,wheel_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wheel_sizeRowChangingEvent) Is Nothing) Then
                RaiseEvent wheel_sizeRowChanging(Me, New wheel_sizeRowChangeEvent(CType(e.Row,wheel_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wheel_sizeRowDeletedEvent) Is Nothing) Then
                RaiseEvent wheel_sizeRowDeleted(Me, New wheel_sizeRowChangeEvent(CType(e.Row,wheel_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wheel_sizeRowDeletingEvent) Is Nothing) Then
                RaiseEvent wheel_sizeRowDeleting(Me, New wheel_sizeRowChangeEvent(CType(e.Row,wheel_sizeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removewheel_sizeRow(ByVal row As wheel_sizeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class wheel_sizeRow
        Inherits DataRow
        
        Private tablewheel_size As wheel_sizeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablewheel_size = CType(Me.Table,wheel_sizeDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablewheel_size.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablewheel_size.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablewheel_size.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablewheel_size.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablewheel_size.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewheel_size.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablewheel_size.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablewheel_size.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class wheel_sizeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As wheel_sizeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As wheel_sizeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As wheel_sizeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class finishDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("finish")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As finishRow
            Get
                Return CType(Me.Rows(index),finishRow)
            End Get
        End Property
        
        Public Event finishRowChanged As finishRowChangeEventHandler
        
        Public Event finishRowChanging As finishRowChangeEventHandler
        
        Public Event finishRowDeleted As finishRowChangeEventHandler
        
        Public Event finishRowDeleting As finishRowChangeEventHandler
        
        Public Overloads Sub AddfinishRow(ByVal row As finishRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddfinishRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As finishRow
            Dim rowfinishRow As finishRow = CType(Me.NewRow,finishRow)
            rowfinishRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowfinishRow)
            Return rowfinishRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As finishDataTable = CType(MyBase.Clone,finishDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New finishDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewfinishRow() As finishRow
            Return CType(Me.NewRow,finishRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New finishRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(finishRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.finishRowChangedEvent) Is Nothing) Then
                RaiseEvent finishRowChanged(Me, New finishRowChangeEvent(CType(e.Row,finishRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.finishRowChangingEvent) Is Nothing) Then
                RaiseEvent finishRowChanging(Me, New finishRowChangeEvent(CType(e.Row,finishRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.finishRowDeletedEvent) Is Nothing) Then
                RaiseEvent finishRowDeleted(Me, New finishRowChangeEvent(CType(e.Row,finishRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.finishRowDeletingEvent) Is Nothing) Then
                RaiseEvent finishRowDeleting(Me, New finishRowChangeEvent(CType(e.Row,finishRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovefinishRow(ByVal row As finishRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class finishRow
        Inherits DataRow
        
        Private tablefinish As finishDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablefinish = CType(Me.Table,finishDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tablefinish.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tablefinish.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tablefinish.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tablefinish.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tablefinish.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefinish.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tablefinish.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tablefinish.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class finishRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As finishRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As finishRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As finishRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Private columnprice1_c_l_a_p As DataColumn
        
        Private columnprice1_operator As DataColumn
        
        Private columnprice1_d_persent As DataColumn
        
        Private columnprice1_amount As DataColumn
        
        Private columnprice1_odd_price As DataColumn
        
        Private columnprice1_price_level As DataColumn
        
        Private columnprice2_c_l_a_p As DataColumn
        
        Private columnprice2_operator As DataColumn
        
        Private columnprice2_d_persent As DataColumn
        
        Private columnprice2_amount As DataColumn
        
        Private columnprice2_odd_price As DataColumn
        
        Private columnprice2_price_level As DataColumn
        
        Private columnprice3_c_l_a_p As DataColumn
        
        Private columnprice3_operator As DataColumn
        
        Private columnprice3_d_persent As DataColumn
        
        Private columnprice3_amount As DataColumn
        
        Private columnprice3_odd_price As DataColumn
        
        Private columnprice3_price_level As DataColumn
        
        Private columnprice4_c_l_a_p As DataColumn
        
        Private columnprice4_operator As DataColumn
        
        Private columnprice4_d_persent As DataColumn
        
        Private columnprice4_amount As DataColumn
        
        Private columnprice4_odd_price As DataColumn
        
        Private columnprice4_price_level As DataColumn
        
        Private columnprice5_c_l_a_p As DataColumn
        
        Private columnprice5_operator As DataColumn
        
        Private columnprice5_d_persent As DataColumn
        
        Private columnprice5_amount As DataColumn
        
        Private columnprice5_odd_price As DataColumn
        
        Private columnprice5_price_level As DataColumn
        
        Private columnprice6_c_l_a_p As DataColumn
        
        Private columnprice6_operator As DataColumn
        
        Private columnprice6_d_persent As DataColumn
        
        Private columnprice6_amount As DataColumn
        
        Private columnprice6_odd_price As DataColumn
        
        Private columnprice6_price_level As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Friend ReadOnly Property price1_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice1_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price1_operatorColumn As DataColumn
            Get
                Return Me.columnprice1_operator
            End Get
        End Property
        
        Friend ReadOnly Property price1_d_persentColumn As DataColumn
            Get
                Return Me.columnprice1_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price1_amountColumn As DataColumn
            Get
                Return Me.columnprice1_amount
            End Get
        End Property
        
        Friend ReadOnly Property price1_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice1_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price1_price_levelColumn As DataColumn
            Get
                Return Me.columnprice1_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price2_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice2_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price2_operatorColumn As DataColumn
            Get
                Return Me.columnprice2_operator
            End Get
        End Property
        
        Friend ReadOnly Property price2_d_persentColumn As DataColumn
            Get
                Return Me.columnprice2_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price2_amountColumn As DataColumn
            Get
                Return Me.columnprice2_amount
            End Get
        End Property
        
        Friend ReadOnly Property price2_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice2_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price2_price_levelColumn As DataColumn
            Get
                Return Me.columnprice2_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price3_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice3_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price3_operatorColumn As DataColumn
            Get
                Return Me.columnprice3_operator
            End Get
        End Property
        
        Friend ReadOnly Property price3_d_persentColumn As DataColumn
            Get
                Return Me.columnprice3_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price3_amountColumn As DataColumn
            Get
                Return Me.columnprice3_amount
            End Get
        End Property
        
        Friend ReadOnly Property price3_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice3_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price3_price_levelColumn As DataColumn
            Get
                Return Me.columnprice3_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price4_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice4_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price4_operatorColumn As DataColumn
            Get
                Return Me.columnprice4_operator
            End Get
        End Property
        
        Friend ReadOnly Property price4_d_persentColumn As DataColumn
            Get
                Return Me.columnprice4_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price4_amountColumn As DataColumn
            Get
                Return Me.columnprice4_amount
            End Get
        End Property
        
        Friend ReadOnly Property price4_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice4_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price4_price_levelColumn As DataColumn
            Get
                Return Me.columnprice4_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price5_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice5_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price5_operatorColumn As DataColumn
            Get
                Return Me.columnprice5_operator
            End Get
        End Property
        
        Friend ReadOnly Property price5_d_persentColumn As DataColumn
            Get
                Return Me.columnprice5_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price5_amountColumn As DataColumn
            Get
                Return Me.columnprice5_amount
            End Get
        End Property
        
        Friend ReadOnly Property price5_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice5_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price5_price_levelColumn As DataColumn
            Get
                Return Me.columnprice5_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price6_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice6_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price6_operatorColumn As DataColumn
            Get
                Return Me.columnprice6_operator
            End Get
        End Property
        
        Friend ReadOnly Property price6_d_persentColumn As DataColumn
            Get
                Return Me.columnprice6_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price6_amountColumn As DataColumn
            Get
                Return Me.columnprice6_amount
            End Get
        End Property
        
        Friend ReadOnly Property price6_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice6_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price6_price_levelColumn As DataColumn
            Get
                Return Me.columnprice6_price_level
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_codeRow
            Get
                Return CType(Me.Rows(index),inv_price_codeRow)
            End Get
        End Property
        
        Public Event inv_price_codeRowChanged As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowChanging As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleted As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleting As inv_price_codeRowChangeEventHandler
        
        Public Overloads Sub Addinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_codeRow( _
                    ByVal price_code As String,  _
                    ByVal desc_price_code As String,  _
                    ByVal price1_c_l_a_p As String,  _
                    ByVal price1_operator As String,  _
                    ByVal price1_d_persent As String,  _
                    ByVal price1_amount As Single,  _
                    ByVal price1_odd_price As Single,  _
                    ByVal price1_price_level As String,  _
                    ByVal price2_c_l_a_p As String,  _
                    ByVal price2_operator As String,  _
                    ByVal price2_d_persent As String,  _
                    ByVal price2_amount As Single,  _
                    ByVal price2_odd_price As Single,  _
                    ByVal price2_price_level As String,  _
                    ByVal price3_c_l_a_p As String,  _
                    ByVal price3_operator As String,  _
                    ByVal price3_d_persent As String,  _
                    ByVal price3_amount As Single,  _
                    ByVal price3_odd_price As Single,  _
                    ByVal price3_price_level As String,  _
                    ByVal price4_c_l_a_p As String,  _
                    ByVal price4_operator As String,  _
                    ByVal price4_d_persent As String,  _
                    ByVal price4_amount As Single,  _
                    ByVal price4_odd_price As Single,  _
                    ByVal price4_price_level As String,  _
                    ByVal price5_c_l_a_p As String,  _
                    ByVal price5_operator As String,  _
                    ByVal price5_d_persent As String,  _
                    ByVal price5_amount As Single,  _
                    ByVal price5_odd_price As Single,  _
                    ByVal price5_price_level As String,  _
                    ByVal price6_c_l_a_p As String,  _
                    ByVal price6_operator As String,  _
                    ByVal price6_d_persent As String,  _
                    ByVal price6_amount As Single,  _
                    ByVal price6_odd_price As Single,  _
                    ByVal price6_price_level As String,  _
                    ByVal special_notice As String) As inv_price_codeRow
            Dim rowinv_price_codeRow As inv_price_codeRow = CType(Me.NewRow,inv_price_codeRow)
            rowinv_price_codeRow.ItemArray = New Object() {price_code, desc_price_code, price1_c_l_a_p, price1_operator, price1_d_persent, price1_amount, price1_odd_price, price1_price_level, price2_c_l_a_p, price2_operator, price2_d_persent, price2_amount, price2_odd_price, price2_price_level, price3_c_l_a_p, price3_operator, price3_d_persent, price3_amount, price3_odd_price, price3_price_level, price4_c_l_a_p, price4_operator, price4_d_persent, price4_amount, price4_odd_price, price4_price_level, price5_c_l_a_p, price5_operator, price5_d_persent, price5_amount, price5_odd_price, price5_price_level, price6_c_l_a_p, price6_operator, price6_d_persent, price6_amount, price6_odd_price, price6_price_level, special_notice}
            Me.Rows.Add(rowinv_price_codeRow)
            Return rowinv_price_codeRow
        End Function
        
        Public Function FindByprice_code(ByVal price_code As String) As inv_price_codeRow
            Return CType(Me.Rows.Find(New Object() {price_code}),inv_price_codeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_codeDataTable = CType(MyBase.Clone,inv_price_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_codeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
            Me.columnprice1_c_l_a_p = Me.Columns("price1_c_l_a_p")
            Me.columnprice1_operator = Me.Columns("price1_operator")
            Me.columnprice1_d_persent = Me.Columns("price1_d_persent")
            Me.columnprice1_amount = Me.Columns("price1_amount")
            Me.columnprice1_odd_price = Me.Columns("price1_odd_price")
            Me.columnprice1_price_level = Me.Columns("price1_price_level")
            Me.columnprice2_c_l_a_p = Me.Columns("price2_c_l_a_p")
            Me.columnprice2_operator = Me.Columns("price2_operator")
            Me.columnprice2_d_persent = Me.Columns("price2_d_persent")
            Me.columnprice2_amount = Me.Columns("price2_amount")
            Me.columnprice2_odd_price = Me.Columns("price2_odd_price")
            Me.columnprice2_price_level = Me.Columns("price2_price_level")
            Me.columnprice3_c_l_a_p = Me.Columns("price3_c_l_a_p")
            Me.columnprice3_operator = Me.Columns("price3_operator")
            Me.columnprice3_d_persent = Me.Columns("price3_d_persent")
            Me.columnprice3_amount = Me.Columns("price3_amount")
            Me.columnprice3_odd_price = Me.Columns("price3_odd_price")
            Me.columnprice3_price_level = Me.Columns("price3_price_level")
            Me.columnprice4_c_l_a_p = Me.Columns("price4_c_l_a_p")
            Me.columnprice4_operator = Me.Columns("price4_operator")
            Me.columnprice4_d_persent = Me.Columns("price4_d_persent")
            Me.columnprice4_amount = Me.Columns("price4_amount")
            Me.columnprice4_odd_price = Me.Columns("price4_odd_price")
            Me.columnprice4_price_level = Me.Columns("price4_price_level")
            Me.columnprice5_c_l_a_p = Me.Columns("price5_c_l_a_p")
            Me.columnprice5_operator = Me.Columns("price5_operator")
            Me.columnprice5_d_persent = Me.Columns("price5_d_persent")
            Me.columnprice5_amount = Me.Columns("price5_amount")
            Me.columnprice5_odd_price = Me.Columns("price5_odd_price")
            Me.columnprice5_price_level = Me.Columns("price5_price_level")
            Me.columnprice6_c_l_a_p = Me.Columns("price6_c_l_a_p")
            Me.columnprice6_operator = Me.Columns("price6_operator")
            Me.columnprice6_d_persent = Me.Columns("price6_d_persent")
            Me.columnprice6_amount = Me.Columns("price6_amount")
            Me.columnprice6_odd_price = Me.Columns("price6_odd_price")
            Me.columnprice6_price_level = Me.Columns("price6_price_level")
            Me.columnspecial_notice = Me.Columns("special_notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice1_c_l_a_p = New DataColumn("price1_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_c_l_a_p)
            Me.columnprice1_operator = New DataColumn("price1_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_operator)
            Me.columnprice1_d_persent = New DataColumn("price1_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_d_persent)
            Me.columnprice1_amount = New DataColumn("price1_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_amount)
            Me.columnprice1_odd_price = New DataColumn("price1_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_odd_price)
            Me.columnprice1_price_level = New DataColumn("price1_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_price_level)
            Me.columnprice2_c_l_a_p = New DataColumn("price2_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_c_l_a_p)
            Me.columnprice2_operator = New DataColumn("price2_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_operator)
            Me.columnprice2_d_persent = New DataColumn("price2_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_d_persent)
            Me.columnprice2_amount = New DataColumn("price2_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_amount)
            Me.columnprice2_odd_price = New DataColumn("price2_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_odd_price)
            Me.columnprice2_price_level = New DataColumn("price2_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_price_level)
            Me.columnprice3_c_l_a_p = New DataColumn("price3_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_c_l_a_p)
            Me.columnprice3_operator = New DataColumn("price3_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_operator)
            Me.columnprice3_d_persent = New DataColumn("price3_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_d_persent)
            Me.columnprice3_amount = New DataColumn("price3_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_amount)
            Me.columnprice3_odd_price = New DataColumn("price3_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_odd_price)
            Me.columnprice3_price_level = New DataColumn("price3_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_price_level)
            Me.columnprice4_c_l_a_p = New DataColumn("price4_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_c_l_a_p)
            Me.columnprice4_operator = New DataColumn("price4_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_operator)
            Me.columnprice4_d_persent = New DataColumn("price4_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_d_persent)
            Me.columnprice4_amount = New DataColumn("price4_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_amount)
            Me.columnprice4_odd_price = New DataColumn("price4_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_odd_price)
            Me.columnprice4_price_level = New DataColumn("price4_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_price_level)
            Me.columnprice5_c_l_a_p = New DataColumn("price5_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_c_l_a_p)
            Me.columnprice5_operator = New DataColumn("price5_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_operator)
            Me.columnprice5_d_persent = New DataColumn("price5_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_d_persent)
            Me.columnprice5_amount = New DataColumn("price5_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_amount)
            Me.columnprice5_odd_price = New DataColumn("price5_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_odd_price)
            Me.columnprice5_price_level = New DataColumn("price5_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_price_level)
            Me.columnprice6_c_l_a_p = New DataColumn("price6_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_c_l_a_p)
            Me.columnprice6_operator = New DataColumn("price6_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_operator)
            Me.columnprice6_d_persent = New DataColumn("price6_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_d_persent)
            Me.columnprice6_amount = New DataColumn("price6_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_amount)
            Me.columnprice6_odd_price = New DataColumn("price6_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_odd_price)
            Me.columnprice6_price_level = New DataColumn("price6_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_price_level)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnprice_code}, true))
            Me.columnprice_code.AllowDBNull = false
            Me.columnprice_code.Unique = true
        End Sub
        
        Public Function Newinv_price_codeRow() As inv_price_codeRow
            Return CType(Me.NewRow,inv_price_codeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_codeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_codeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanged(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanging(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleted(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleting(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRow
        Inherits DataRow
        
        Private tableinv_price_code As inv_price_codeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code = CType(Me.Table,inv_price_codeDataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Property price1_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price1_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_operatorColumn) = value
            End Set
        End Property
        
        Public Property price1_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price1_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_amountColumn) = value
            End Set
        End Property
        
        Public Property price1_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price1_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price2_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price2_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_operatorColumn) = value
            End Set
        End Property
        
        Public Property price2_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price2_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_amountColumn) = value
            End Set
        End Property
        
        Public Property price2_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price2_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price3_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price3_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_operatorColumn) = value
            End Set
        End Property
        
        Public Property price3_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price3_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_amountColumn) = value
            End Set
        End Property
        
        Public Property price3_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price3_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price4_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price4_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_operatorColumn) = value
            End Set
        End Property
        
        Public Property price4_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price4_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_amountColumn) = value
            End Set
        End Property
        
        Public Property price4_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price4_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price5_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price5_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_operatorColumn) = value
            End Set
        End Property
        
        Public Property price5_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price5_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_amountColumn) = value
            End Set
        End Property
        
        Public Property price5_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price5_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price6_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price6_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_operatorColumn) = value
            End Set
        End Property
        
        Public Property price6_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price6_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_amountColumn) = value
            End Set
        End Property
        
        Public Property price6_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price6_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_price_levelColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.special_noticeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice1_c_l_a_pNull()
            Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_operatorColumn)
        End Function
        
        Public Sub Setprice1_operatorNull()
            Me(Me.tableinv_price_code.price1_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_d_persentColumn)
        End Function
        
        Public Sub Setprice1_d_persentNull()
            Me(Me.tableinv_price_code.price1_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_amountColumn)
        End Function
        
        Public Sub Setprice1_amountNull()
            Me(Me.tableinv_price_code.price1_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_odd_priceColumn)
        End Function
        
        Public Sub Setprice1_odd_priceNull()
            Me(Me.tableinv_price_code.price1_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_price_levelColumn)
        End Function
        
        Public Sub Setprice1_price_levelNull()
            Me(Me.tableinv_price_code.price1_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice2_c_l_a_pNull()
            Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_operatorColumn)
        End Function
        
        Public Sub Setprice2_operatorNull()
            Me(Me.tableinv_price_code.price2_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_d_persentColumn)
        End Function
        
        Public Sub Setprice2_d_persentNull()
            Me(Me.tableinv_price_code.price2_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_amountColumn)
        End Function
        
        Public Sub Setprice2_amountNull()
            Me(Me.tableinv_price_code.price2_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_odd_priceColumn)
        End Function
        
        Public Sub Setprice2_odd_priceNull()
            Me(Me.tableinv_price_code.price2_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_price_levelColumn)
        End Function
        
        Public Sub Setprice2_price_levelNull()
            Me(Me.tableinv_price_code.price2_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice3_c_l_a_pNull()
            Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_operatorColumn)
        End Function
        
        Public Sub Setprice3_operatorNull()
            Me(Me.tableinv_price_code.price3_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_d_persentColumn)
        End Function
        
        Public Sub Setprice3_d_persentNull()
            Me(Me.tableinv_price_code.price3_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_amountColumn)
        End Function
        
        Public Sub Setprice3_amountNull()
            Me(Me.tableinv_price_code.price3_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_odd_priceColumn)
        End Function
        
        Public Sub Setprice3_odd_priceNull()
            Me(Me.tableinv_price_code.price3_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_price_levelColumn)
        End Function
        
        Public Sub Setprice3_price_levelNull()
            Me(Me.tableinv_price_code.price3_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice4_c_l_a_pNull()
            Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_operatorColumn)
        End Function
        
        Public Sub Setprice4_operatorNull()
            Me(Me.tableinv_price_code.price4_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_d_persentColumn)
        End Function
        
        Public Sub Setprice4_d_persentNull()
            Me(Me.tableinv_price_code.price4_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_amountColumn)
        End Function
        
        Public Sub Setprice4_amountNull()
            Me(Me.tableinv_price_code.price4_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_odd_priceColumn)
        End Function
        
        Public Sub Setprice4_odd_priceNull()
            Me(Me.tableinv_price_code.price4_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_price_levelColumn)
        End Function
        
        Public Sub Setprice4_price_levelNull()
            Me(Me.tableinv_price_code.price4_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice5_c_l_a_pNull()
            Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_operatorColumn)
        End Function
        
        Public Sub Setprice5_operatorNull()
            Me(Me.tableinv_price_code.price5_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_d_persentColumn)
        End Function
        
        Public Sub Setprice5_d_persentNull()
            Me(Me.tableinv_price_code.price5_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_amountColumn)
        End Function
        
        Public Sub Setprice5_amountNull()
            Me(Me.tableinv_price_code.price5_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_odd_priceColumn)
        End Function
        
        Public Sub Setprice5_odd_priceNull()
            Me(Me.tableinv_price_code.price5_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_price_levelColumn)
        End Function
        
        Public Sub Setprice5_price_levelNull()
            Me(Me.tableinv_price_code.price5_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice6_c_l_a_pNull()
            Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_operatorColumn)
        End Function
        
        Public Sub Setprice6_operatorNull()
            Me(Me.tableinv_price_code.price6_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_d_persentColumn)
        End Function
        
        Public Sub Setprice6_d_persentNull()
            Me(Me.tableinv_price_code.price6_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_amountColumn)
        End Function
        
        Public Sub Setprice6_amountNull()
            Me(Me.tableinv_price_code.price6_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_odd_priceColumn)
        End Function
        
        Public Sub Setprice6_odd_priceNull()
            Me(Me.tableinv_price_code.price6_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_price_levelColumn)
        End Function
        
        Public Sub Setprice6_price_levelNull()
            Me(Me.tableinv_price_code.price6_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_price_code.special_noticeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_codeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_codeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_location_warehouseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_warehouse As DataColumn
        
        Private columncod_location As DataColumn
        
        Private columndesc_location As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_location_warehouse")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_warehouseColumn As DataColumn
            Get
                Return Me.columncod_warehouse
            End Get
        End Property
        
        Friend ReadOnly Property cod_locationColumn As DataColumn
            Get
                Return Me.columncod_location
            End Get
        End Property
        
        Friend ReadOnly Property desc_locationColumn As DataColumn
            Get
                Return Me.columndesc_location
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_location_warehouseRow
            Get
                Return CType(Me.Rows(index),inv_tab_location_warehouseRow)
            End Get
        End Property
        
        Public Event inv_tab_location_warehouseRowChanged As inv_tab_location_warehouseRowChangeEventHandler
        
        Public Event inv_tab_location_warehouseRowChanging As inv_tab_location_warehouseRowChangeEventHandler
        
        Public Event inv_tab_location_warehouseRowDeleted As inv_tab_location_warehouseRowChangeEventHandler
        
        Public Event inv_tab_location_warehouseRowDeleting As inv_tab_location_warehouseRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_location_warehouseRow(ByVal row As inv_tab_location_warehouseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_location_warehouseRow(ByVal cod_warehouse As String, ByVal cod_location As String, ByVal desc_location As String, ByVal remark As String) As inv_tab_location_warehouseRow
            Dim rowinv_tab_location_warehouseRow As inv_tab_location_warehouseRow = CType(Me.NewRow,inv_tab_location_warehouseRow)
            rowinv_tab_location_warehouseRow.ItemArray = New Object() {cod_warehouse, cod_location, desc_location, remark}
            Me.Rows.Add(rowinv_tab_location_warehouseRow)
            Return rowinv_tab_location_warehouseRow
        End Function
        
        Public Function FindBycod_warehousecod_location(ByVal cod_warehouse As String, ByVal cod_location As String) As inv_tab_location_warehouseRow
            Return CType(Me.Rows.Find(New Object() {cod_warehouse, cod_location}),inv_tab_location_warehouseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_location_warehouseDataTable = CType(MyBase.Clone,inv_tab_location_warehouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_location_warehouseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_warehouse = Me.Columns("cod_warehouse")
            Me.columncod_location = Me.Columns("cod_location")
            Me.columndesc_location = Me.Columns("desc_location")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_warehouse = New DataColumn("cod_warehouse", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_warehouse)
            Me.columncod_location = New DataColumn("cod_location", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_location)
            Me.columndesc_location = New DataColumn("desc_location", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_location)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_warehouse, Me.columncod_location}, true))
            Me.columncod_warehouse.AllowDBNull = false
            Me.columncod_location.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_location_warehouseRow() As inv_tab_location_warehouseRow
            Return CType(Me.NewRow,inv_tab_location_warehouseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_location_warehouseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_location_warehouseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_location_warehouseRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_location_warehouseRowChanged(Me, New inv_tab_location_warehouseRowChangeEvent(CType(e.Row,inv_tab_location_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_location_warehouseRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_location_warehouseRowChanging(Me, New inv_tab_location_warehouseRowChangeEvent(CType(e.Row,inv_tab_location_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_location_warehouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_location_warehouseRowDeleted(Me, New inv_tab_location_warehouseRowChangeEvent(CType(e.Row,inv_tab_location_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_location_warehouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_location_warehouseRowDeleting(Me, New inv_tab_location_warehouseRowChangeEvent(CType(e.Row,inv_tab_location_warehouseRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_location_warehouseRow(ByVal row As inv_tab_location_warehouseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_location_warehouseRow
        Inherits DataRow
        
        Private tableinv_tab_location_warehouse As inv_tab_location_warehouseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_location_warehouse = CType(Me.Table,inv_tab_location_warehouseDataTable)
        End Sub
        
        Public Property cod_warehouse As String
            Get
                Return CType(Me(Me.tableinv_tab_location_warehouse.cod_warehouseColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_location_warehouse.cod_warehouseColumn) = value
            End Set
        End Property
        
        Public Property cod_location As String
            Get
                Return CType(Me(Me.tableinv_tab_location_warehouse.cod_locationColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_location_warehouse.cod_locationColumn) = value
            End Set
        End Property
        
        Public Property desc_location As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_location_warehouse.desc_locationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_location_warehouse.desc_locationColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_location_warehouse.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_location_warehouse.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_locationNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_location_warehouse.desc_locationColumn)
        End Function
        
        Public Sub Setdesc_locationNull()
            Me(Me.tableinv_tab_location_warehouse.desc_locationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_location_warehouse.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_location_warehouse.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_location_warehouseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_location_warehouseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_location_warehouseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_location_warehouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnline As DataColumn
        
        Private columnfeatures As DataColumn
        
        Private columnbenefits As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnlimit_warranty As DataColumn
        
        Private columnconstruction As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Private columntread_life As DataColumn
        
        Private columnwet_traction As DataColumn
        
        Private columnquiet_ride As DataColumn
        
        Private columnhandling As DataColumn
        
        Private columnwinter_traction As DataColumn
        
        Private columnnud_traction As DataColumn
        
        Private columnoverall_score As DataColumn
        
        Private columndry_traction As DataColumn
        
        Private columnride_comfort As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property featuresColumn As DataColumn
            Get
                Return Me.columnfeatures
            End Get
        End Property
        
        Friend ReadOnly Property benefitsColumn As DataColumn
            Get
                Return Me.columnbenefits
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property limit_warrantyColumn As DataColumn
            Get
                Return Me.columnlimit_warranty
            End Get
        End Property
        
        Friend ReadOnly Property constructionColumn As DataColumn
            Get
                Return Me.columnconstruction
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Friend ReadOnly Property tread_lifeColumn As DataColumn
            Get
                Return Me.columntread_life
            End Get
        End Property
        
        Friend ReadOnly Property wet_tractionColumn As DataColumn
            Get
                Return Me.columnwet_traction
            End Get
        End Property
        
        Friend ReadOnly Property quiet_rideColumn As DataColumn
            Get
                Return Me.columnquiet_ride
            End Get
        End Property
        
        Friend ReadOnly Property handlingColumn As DataColumn
            Get
                Return Me.columnhandling
            End Get
        End Property
        
        Friend ReadOnly Property winter_tractionColumn As DataColumn
            Get
                Return Me.columnwinter_traction
            End Get
        End Property
        
        Friend ReadOnly Property nud_tractionColumn As DataColumn
            Get
                Return Me.columnnud_traction
            End Get
        End Property
        
        Friend ReadOnly Property overall_scoreColumn As DataColumn
            Get
                Return Me.columnoverall_score
            End Get
        End Property
        
        Friend ReadOnly Property dry_tractionColumn As DataColumn
            Get
                Return Me.columndry_traction
            End Get
        End Property
        
        Friend ReadOnly Property ride_comfortColumn As DataColumn
            Get
                Return Me.columnride_comfort
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_lineRow
            Get
                Return CType(Me.Rows(index),inv_tab_lineRow)
            End Get
        End Property
        
        Public Event inv_tab_lineRowChanged As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowChanging As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleted As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleting As inv_tab_lineRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_lineRow( _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal line As String,  _
                    ByVal features As String,  _
                    ByVal benefits As String,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal limit_warranty As String,  _
                    ByVal construction As String,  _
                    ByVal remark As String,  _
                    ByVal image_remark() As Byte,  _
                    ByVal tread_life As String,  _
                    ByVal wet_traction As String,  _
                    ByVal quiet_ride As String,  _
                    ByVal handling As String,  _
                    ByVal winter_traction As String,  _
                    ByVal nud_traction As String,  _
                    ByVal overall_score As String,  _
                    ByVal dry_traction As String,  _
                    ByVal ride_comfort As String,  _
                    ByVal desc_style As String,  _
                    ByVal complete_desc_brand As String) As inv_tab_lineRow
            Dim rowinv_tab_lineRow As inv_tab_lineRow = CType(Me.NewRow,inv_tab_lineRow)
            rowinv_tab_lineRow.ItemArray = New Object() {cod_brand, style, line, features, benefits, treadwear, traction, temperature, limit_warranty, construction, remark, image_remark, tread_life, wet_traction, quiet_ride, handling, winter_traction, nud_traction, overall_score, dry_traction, ride_comfort, desc_style, complete_desc_brand}
            Me.Rows.Add(rowinv_tab_lineRow)
            Return rowinv_tab_lineRow
        End Function
        
        Public Function FindByline(ByVal line As String) As inv_tab_lineRow
            Return CType(Me.Rows.Find(New Object() {line}),inv_tab_lineRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_lineDataTable = CType(MyBase.Clone,inv_tab_lineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_lineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnline = Me.Columns("line")
            Me.columnfeatures = Me.Columns("features")
            Me.columnbenefits = Me.Columns("benefits")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnlimit_warranty = Me.Columns("limit_warranty")
            Me.columnconstruction = Me.Columns("construction")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
            Me.columntread_life = Me.Columns("tread_life")
            Me.columnwet_traction = Me.Columns("wet_traction")
            Me.columnquiet_ride = Me.Columns("quiet_ride")
            Me.columnhandling = Me.Columns("handling")
            Me.columnwinter_traction = Me.Columns("winter_traction")
            Me.columnnud_traction = Me.Columns("nud_traction")
            Me.columnoverall_score = Me.Columns("overall_score")
            Me.columndry_traction = Me.Columns("dry_traction")
            Me.columnride_comfort = Me.Columns("ride_comfort")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnfeatures = New DataColumn("features", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfeatures)
            Me.columnbenefits = New DataColumn("benefits", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbenefits)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnlimit_warranty = New DataColumn("limit_warranty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlimit_warranty)
            Me.columnconstruction = New DataColumn("construction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconstruction)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.columntread_life = New DataColumn("tread_life", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntread_life)
            Me.columnwet_traction = New DataColumn("wet_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwet_traction)
            Me.columnquiet_ride = New DataColumn("quiet_ride", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquiet_ride)
            Me.columnhandling = New DataColumn("handling", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhandling)
            Me.columnwinter_traction = New DataColumn("winter_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwinter_traction)
            Me.columnnud_traction = New DataColumn("nud_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnud_traction)
            Me.columnoverall_score = New DataColumn("overall_score", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverall_score)
            Me.columndry_traction = New DataColumn("dry_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndry_traction)
            Me.columnride_comfort = New DataColumn("ride_comfort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnride_comfort)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.Constraints.Add(New UniqueConstraint("DSInvItemProductKey1", New DataColumn() {Me.columnline}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnline.Unique = true
        End Sub
        
        Public Function Newinv_tab_lineRow() As inv_tab_lineRow
            Return CType(Me.NewRow,inv_tab_lineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_lineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_lineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_lineRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanged(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_lineRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanging(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_lineRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleted(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_lineRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleting(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRow
        Inherits DataRow
        
        Private tableinv_tab_line As inv_tab_lineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_line = CType(Me.Table,inv_tab_lineDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_line.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_line.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_tab_line.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.lineColumn) = value
            End Set
        End Property
        
        Public Property features As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.featuresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.featuresColumn) = value
            End Set
        End Property
        
        Public Property benefits As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.benefitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.benefitsColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.temperatureColumn) = value
            End Set
        End Property
        
        Public Property limit_warranty As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.limit_warrantyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.limit_warrantyColumn) = value
            End Set
        End Property
        
        Public Property construction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.constructionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.constructionColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.image_remarkColumn) = value
            End Set
        End Property
        
        Public Property tread_life As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tread_lifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tread_lifeColumn) = value
            End Set
        End Property
        
        Public Property wet_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.wet_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.wet_tractionColumn) = value
            End Set
        End Property
        
        Public Property quiet_ride As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.quiet_rideColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.quiet_rideColumn) = value
            End Set
        End Property
        
        Public Property handling As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.handlingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.handlingColumn) = value
            End Set
        End Property
        
        Public Property winter_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.winter_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.winter_tractionColumn) = value
            End Set
        End Property
        
        Public Property nud_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.nud_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.nud_tractionColumn) = value
            End Set
        End Property
        
        Public Property overall_score As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.overall_scoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.overall_scoreColumn) = value
            End Set
        End Property
        
        Public Property dry_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.dry_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.dry_tractionColumn) = value
            End Set
        End Property
        
        Public Property ride_comfort As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.ride_comfortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.ride_comfortColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Function IsfeaturesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.featuresColumn)
        End Function
        
        Public Sub SetfeaturesNull()
            Me(Me.tableinv_tab_line.featuresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbenefitsNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.benefitsColumn)
        End Function
        
        Public Sub SetbenefitsNull()
            Me(Me.tableinv_tab_line.benefitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_tab_line.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_tab_line.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_tab_line.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islimit_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.limit_warrantyColumn)
        End Function
        
        Public Sub Setlimit_warrantyNull()
            Me(Me.tableinv_tab_line.limit_warrantyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconstructionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.constructionColumn)
        End Function
        
        Public Sub SetconstructionNull()
            Me(Me.tableinv_tab_line.constructionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_line.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_line.image_remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istread_lifeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tread_lifeColumn)
        End Function
        
        Public Sub Settread_lifeNull()
            Me(Me.tableinv_tab_line.tread_lifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswet_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.wet_tractionColumn)
        End Function
        
        Public Sub Setwet_tractionNull()
            Me(Me.tableinv_tab_line.wet_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isquiet_rideNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.quiet_rideColumn)
        End Function
        
        Public Sub Setquiet_rideNull()
            Me(Me.tableinv_tab_line.quiet_rideColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshandlingNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.handlingColumn)
        End Function
        
        Public Sub SethandlingNull()
            Me(Me.tableinv_tab_line.handlingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswinter_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.winter_tractionColumn)
        End Function
        
        Public Sub Setwinter_tractionNull()
            Me(Me.tableinv_tab_line.winter_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnud_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.nud_tractionColumn)
        End Function
        
        Public Sub Setnud_tractionNull()
            Me(Me.tableinv_tab_line.nud_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isoverall_scoreNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.overall_scoreColumn)
        End Function
        
        Public Sub Setoverall_scoreNull()
            Me(Me.tableinv_tab_line.overall_scoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdry_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.dry_tractionColumn)
        End Function
        
        Public Sub Setdry_tractionNull()
            Me(Me.tableinv_tab_line.dry_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isride_comfortNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.ride_comfortColumn)
        End Function
        
        Public Sub Setride_comfortNull()
            Me(Me.tableinv_tab_line.ride_comfortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_line.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_tab_line.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_lineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_lineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_lineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
