'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSInv_Item
    Inherits DataSet
    
    Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableSpicification As SpicificationDataTable
    
    Private tableinv_item_vendor As inv_item_vendorDataTable
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableInv_ItemWheel As Inv_ItemWheelDataTable
    
    Private tableinv_ItemAutoPart As inv_ItemAutoPartDataTable
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Private tableinv_item As inv_itemDataTable
    
    Private tableprintitemdetail As printitemdetailDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
                Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("Spicification")) Is Nothing) Then
                Me.Tables.Add(New SpicificationDataTable(ds.Tables("Spicification")))
            End If
            If (Not (ds.Tables("inv_item_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_item_vendorDataTable(ds.Tables("inv_item_vendor")))
            End If
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("Inv_ItemWheel")) Is Nothing) Then
                Me.Tables.Add(New Inv_ItemWheelDataTable(ds.Tables("Inv_ItemWheel")))
            End If
            If (Not (ds.Tables("inv_ItemAutoPart")) Is Nothing) Then
                Me.Tables.Add(New inv_ItemAutoPartDataTable(ds.Tables("inv_ItemAutoPart")))
            End If
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            If (Not (ds.Tables("inv_item")) Is Nothing) Then
                Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
            End If
            If (Not (ds.Tables("printitemdetail")) Is Nothing) Then
                Me.Tables.Add(New printitemdetailDataTable(ds.Tables("printitemdetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_quick_refrence As inv_item_quick_refrenceDataTable
        Get
            Return Me.tableinv_item_quick_refrence
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Spicification As SpicificationDataTable
        Get
            Return Me.tableSpicification
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_vendor As inv_item_vendorDataTable
        Get
            Return Me.tableinv_item_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_ItemWheel As Inv_ItemWheelDataTable
        Get
            Return Me.tableInv_ItemWheel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_ItemAutoPart As inv_ItemAutoPartDataTable
        Get
            Return Me.tableinv_ItemAutoPart
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item As inv_itemDataTable
        Get
            Return Me.tableinv_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property printitemdetail As printitemdetailDataTable
        Get
            Return Me.tableprintitemdetail
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSInv_Item = CType(MyBase.Clone,DSInv_Item)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
            Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("Spicification")) Is Nothing) Then
            Me.Tables.Add(New SpicificationDataTable(ds.Tables("Spicification")))
        End If
        If (Not (ds.Tables("inv_item_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_item_vendorDataTable(ds.Tables("inv_item_vendor")))
        End If
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("Inv_ItemWheel")) Is Nothing) Then
            Me.Tables.Add(New Inv_ItemWheelDataTable(ds.Tables("Inv_ItemWheel")))
        End If
        If (Not (ds.Tables("inv_ItemAutoPart")) Is Nothing) Then
            Me.Tables.Add(New inv_ItemAutoPartDataTable(ds.Tables("inv_ItemAutoPart")))
        End If
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        If (Not (ds.Tables("inv_item")) Is Nothing) Then
            Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
        End If
        If (Not (ds.Tables("printitemdetail")) Is Nothing) Then
            Me.Tables.Add(New printitemdetailDataTable(ds.Tables("printitemdetail")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_item_quick_refrence = CType(Me.Tables("inv_item_quick_refrence"),inv_item_quick_refrenceDataTable)
        If (Not (Me.tableinv_item_quick_refrence) Is Nothing) Then
            Me.tableinv_item_quick_refrence.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableSpicification = CType(Me.Tables("Spicification"),SpicificationDataTable)
        If (Not (Me.tableSpicification) Is Nothing) Then
            Me.tableSpicification.InitVars
        End If
        Me.tableinv_item_vendor = CType(Me.Tables("inv_item_vendor"),inv_item_vendorDataTable)
        If (Not (Me.tableinv_item_vendor) Is Nothing) Then
            Me.tableinv_item_vendor.InitVars
        End If
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableInv_ItemWheel = CType(Me.Tables("Inv_ItemWheel"),Inv_ItemWheelDataTable)
        If (Not (Me.tableInv_ItemWheel) Is Nothing) Then
            Me.tableInv_ItemWheel.InitVars
        End If
        Me.tableinv_ItemAutoPart = CType(Me.Tables("inv_ItemAutoPart"),inv_ItemAutoPartDataTable)
        If (Not (Me.tableinv_ItemAutoPart) Is Nothing) Then
            Me.tableinv_ItemAutoPart.InitVars
        End If
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
        Me.tableinv_item = CType(Me.Tables("inv_item"),inv_itemDataTable)
        If (Not (Me.tableinv_item) Is Nothing) Then
            Me.tableinv_item.InitVars
        End If
        Me.tableprintitemdetail = CType(Me.Tables("printitemdetail"),printitemdetailDataTable)
        If (Not (Me.tableprintitemdetail) Is Nothing) Then
            Me.tableprintitemdetail.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSInv_Item"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSInv_Item.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_item_quick_refrence = New inv_item_quick_refrenceDataTable
        Me.Tables.Add(Me.tableinv_item_quick_refrence)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableSpicification = New SpicificationDataTable
        Me.Tables.Add(Me.tableSpicification)
        Me.tableinv_item_vendor = New inv_item_vendorDataTable
        Me.Tables.Add(Me.tableinv_item_vendor)
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableInv_ItemWheel = New Inv_ItemWheelDataTable
        Me.Tables.Add(Me.tableInv_ItemWheel)
        Me.tableinv_ItemAutoPart = New inv_ItemAutoPartDataTable
        Me.Tables.Add(Me.tableinv_ItemAutoPart)
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
        Me.tableinv_item = New inv_itemDataTable
        Me.Tables.Add(Me.tableinv_item)
        Me.tableprintitemdetail = New printitemdetailDataTable
        Me.Tables.Add(Me.tableprintitemdetail)
    End Sub
    
    Private Function ShouldSerializeinv_item_quick_refrence() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpicification() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_ItemWheel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_ItemAutoPart() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeprintitemdetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_item_quick_refrenceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_quick_refrenceRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub SpicificationRowChangeEventHandler(ByVal sender As Object, ByVal e As SpicificationRowChangeEvent)
    
    Public Delegate Sub inv_item_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_vendorRowChangeEvent)
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub Inv_ItemWheelRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_ItemWheelRowChangeEvent)
    
    Public Delegate Sub inv_ItemAutoPartRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_ItemAutoPartRowChangeEvent)
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    Public Delegate Sub inv_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemRowChangeEvent)
    
    Public Delegate Sub printitemdetailRowChangeEventHandler(ByVal sender As Object, ByVal e As printitemdetailRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_quick_refrence As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_quick_refrence")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_quick_refrenceRow
            Get
                Return CType(Me.Rows(index),inv_item_quick_refrenceRow)
            End Get
        End Property
        
        Public Event inv_item_quick_refrenceRowChanged As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowChanging As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleted As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleting As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_quick_refrenceRow(ByVal cod_quick_refrence As String, ByVal desc_quick_refrence As String) As inv_item_quick_refrenceRow
            Dim rowinv_item_quick_refrenceRow As inv_item_quick_refrenceRow = CType(Me.NewRow,inv_item_quick_refrenceRow)
            rowinv_item_quick_refrenceRow.ItemArray = New Object() {cod_quick_refrence, desc_quick_refrence}
            Me.Rows.Add(rowinv_item_quick_refrenceRow)
            Return rowinv_item_quick_refrenceRow
        End Function
        
        Public Function FindBycod_quick_refrence(ByVal cod_quick_refrence As String) As inv_item_quick_refrenceRow
            Return CType(Me.Rows.Find(New Object() {cod_quick_refrence}),inv_item_quick_refrenceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_quick_refrenceDataTable = CType(MyBase.Clone,inv_item_quick_refrenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_quick_refrenceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_quick_refrence}, true))
            Me.columncod_quick_refrence.AllowDBNull = false
            Me.columncod_quick_refrence.Unique = true
        End Sub
        
        Public Function Newinv_item_quick_refrenceRow() As inv_item_quick_refrenceRow
            Return CType(Me.NewRow,inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_quick_refrenceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_quick_refrenceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanged(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_quick_refrenceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanging(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleted(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleting(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRow
        Inherits DataRow
        
        Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_quick_refrence = CType(Me.Table,inv_item_quick_refrenceDataTable)
        End Sub
        
        Public Property cod_quick_refrence As String
            Get
                Return CType(Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_quick_refrenceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_quick_refrenceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_quick_refrenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMonth As DataColumn
        
        Private columnSumQty As DataColumn
        
        Private columnSumPrice As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MonthColumn As DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        Friend ReadOnly Property SumQtyColumn As DataColumn
            Get
                Return Me.columnSumQty
            End Get
        End Property
        
        Friend ReadOnly Property SumPriceColumn As DataColumn
            Get
                Return Me.columnSumPrice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal Month As Integer, ByVal SumQty As Double, ByVal SumPrice As Double) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {Month, SumQty, SumPrice}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMonth = Me.Columns("Month")
            Me.columnSumQty = Me.Columns("SumQty")
            Me.columnSumPrice = Me.Columns("SumPrice")
        End Sub
        
        Private Sub InitClass()
            Me.columnMonth = New DataColumn("Month", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonth)
            Me.columnSumQty = New DataColumn("SumQty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumQty)
            Me.columnSumPrice = New DataColumn("SumPrice", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumPrice)
            Me.columnSumQty.ReadOnly = true
            Me.columnSumPrice.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property Month As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.MonthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.MonthColumn) = value
            End Set
        End Property
        
        Public Property SumQty As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.SumQtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.SumQtyColumn) = value
            End Set
        End Property
        
        Public Property SumPrice As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.SumPriceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.SumPriceColumn) = value
            End Set
        End Property
        
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.MonthColumn)
        End Function
        
        Public Sub SetMonthNull()
            Me(Me.tableservice_center_head.MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSumQtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.SumQtyColumn)
        End Function
        
        Public Sub SetSumQtyNull()
            Me(Me.tableservice_center_head.SumQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSumPriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.SumPriceColumn)
        End Function
        
        Public Sub SetSumPriceNull()
            Me(Me.tableservice_center_head.SumPriceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpicificationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncol1 As DataColumn
        
        Private columncol2 As DataColumn
        
        Private columncol3 As DataColumn
        
        Private columncol4 As DataColumn
        
        Private columncol5 As DataColumn
        
        Private columncol6 As DataColumn
        
        Private columncol7 As DataColumn
        
        Private columncol8 As DataColumn
        
        Private columncol9 As DataColumn
        
        Private columncol10 As DataColumn
        
        Friend Sub New()
            MyBase.New("Spicification")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property col1Column As DataColumn
            Get
                Return Me.columncol1
            End Get
        End Property
        
        Friend ReadOnly Property col2Column As DataColumn
            Get
                Return Me.columncol2
            End Get
        End Property
        
        Friend ReadOnly Property col3Column As DataColumn
            Get
                Return Me.columncol3
            End Get
        End Property
        
        Friend ReadOnly Property col4Column As DataColumn
            Get
                Return Me.columncol4
            End Get
        End Property
        
        Friend ReadOnly Property col5Column As DataColumn
            Get
                Return Me.columncol5
            End Get
        End Property
        
        Friend ReadOnly Property col6Column As DataColumn
            Get
                Return Me.columncol6
            End Get
        End Property
        
        Friend ReadOnly Property col7Column As DataColumn
            Get
                Return Me.columncol7
            End Get
        End Property
        
        Friend ReadOnly Property col8Column As DataColumn
            Get
                Return Me.columncol8
            End Get
        End Property
        
        Friend ReadOnly Property col9Column As DataColumn
            Get
                Return Me.columncol9
            End Get
        End Property
        
        Friend ReadOnly Property col10Column As DataColumn
            Get
                Return Me.columncol10
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpicificationRow
            Get
                Return CType(Me.Rows(index),SpicificationRow)
            End Get
        End Property
        
        Public Event SpicificationRowChanged As SpicificationRowChangeEventHandler
        
        Public Event SpicificationRowChanging As SpicificationRowChangeEventHandler
        
        Public Event SpicificationRowDeleted As SpicificationRowChangeEventHandler
        
        Public Event SpicificationRowDeleting As SpicificationRowChangeEventHandler
        
        Public Overloads Sub AddSpicificationRow(ByVal row As SpicificationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpicificationRow(ByVal col1 As String, ByVal col2 As String, ByVal col3 As String, ByVal col4 As String, ByVal col5 As String, ByVal col6 As String, ByVal col7 As String, ByVal col8 As String, ByVal col9 As String, ByVal col10 As String) As SpicificationRow
            Dim rowSpicificationRow As SpicificationRow = CType(Me.NewRow,SpicificationRow)
            rowSpicificationRow.ItemArray = New Object() {col1, col2, col3, col4, col5, col6, col7, col8, col9, col10}
            Me.Rows.Add(rowSpicificationRow)
            Return rowSpicificationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpicificationDataTable = CType(MyBase.Clone,SpicificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpicificationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncol1 = Me.Columns("col1")
            Me.columncol2 = Me.Columns("col2")
            Me.columncol3 = Me.Columns("col3")
            Me.columncol4 = Me.Columns("col4")
            Me.columncol5 = Me.Columns("col5")
            Me.columncol6 = Me.Columns("col6")
            Me.columncol7 = Me.Columns("col7")
            Me.columncol8 = Me.Columns("col8")
            Me.columncol9 = Me.Columns("col9")
            Me.columncol10 = Me.Columns("col10")
        End Sub
        
        Private Sub InitClass()
            Me.columncol1 = New DataColumn("col1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol1)
            Me.columncol2 = New DataColumn("col2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol2)
            Me.columncol3 = New DataColumn("col3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol3)
            Me.columncol4 = New DataColumn("col4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol4)
            Me.columncol5 = New DataColumn("col5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol5)
            Me.columncol6 = New DataColumn("col6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol6)
            Me.columncol7 = New DataColumn("col7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol7)
            Me.columncol8 = New DataColumn("col8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol8)
            Me.columncol9 = New DataColumn("col9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol9)
            Me.columncol10 = New DataColumn("col10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol10)
            Me.columncol2.ReadOnly = true
            Me.columncol3.ReadOnly = true
        End Sub
        
        Public Function NewSpicificationRow() As SpicificationRow
            Return CType(Me.NewRow,SpicificationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpicificationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpicificationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpicificationRowChangedEvent) Is Nothing) Then
                RaiseEvent SpicificationRowChanged(Me, New SpicificationRowChangeEvent(CType(e.Row,SpicificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpicificationRowChangingEvent) Is Nothing) Then
                RaiseEvent SpicificationRowChanging(Me, New SpicificationRowChangeEvent(CType(e.Row,SpicificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpicificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpicificationRowDeleted(Me, New SpicificationRowChangeEvent(CType(e.Row,SpicificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpicificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpicificationRowDeleting(Me, New SpicificationRowChangeEvent(CType(e.Row,SpicificationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpicificationRow(ByVal row As SpicificationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpicificationRow
        Inherits DataRow
        
        Private tableSpicification As SpicificationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpicification = CType(Me.Table,SpicificationDataTable)
        End Sub
        
        Public Property col1 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col1Column) = value
            End Set
        End Property
        
        Public Property col2 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col2Column) = value
            End Set
        End Property
        
        Public Property col3 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col3Column) = value
            End Set
        End Property
        
        Public Property col4 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col4Column) = value
            End Set
        End Property
        
        Public Property col5 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col5Column) = value
            End Set
        End Property
        
        Public Property col6 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col6Column) = value
            End Set
        End Property
        
        Public Property col7 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col7Column) = value
            End Set
        End Property
        
        Public Property col8 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col8Column) = value
            End Set
        End Property
        
        Public Property col9 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col9Column) = value
            End Set
        End Property
        
        Public Property col10 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpicification.col10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpicification.col10Column) = value
            End Set
        End Property
        
        Public Function Iscol1Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col1Column)
        End Function
        
        Public Sub Setcol1Null()
            Me(Me.tableSpicification.col1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol2Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col2Column)
        End Function
        
        Public Sub Setcol2Null()
            Me(Me.tableSpicification.col2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol3Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col3Column)
        End Function
        
        Public Sub Setcol3Null()
            Me(Me.tableSpicification.col3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol4Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col4Column)
        End Function
        
        Public Sub Setcol4Null()
            Me(Me.tableSpicification.col4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol5Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col5Column)
        End Function
        
        Public Sub Setcol5Null()
            Me(Me.tableSpicification.col5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol6Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col6Column)
        End Function
        
        Public Sub Setcol6Null()
            Me(Me.tableSpicification.col6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol7Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col7Column)
        End Function
        
        Public Sub Setcol7Null()
            Me(Me.tableSpicification.col7Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol8Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col8Column)
        End Function
        
        Public Sub Setcol8Null()
            Me(Me.tableSpicification.col8Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol9Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col9Column)
        End Function
        
        Public Sub Setcol9Null()
            Me(Me.tableSpicification.col9Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol10Null() As Boolean
            Return Me.IsNull(Me.tableSpicification.col10Column)
        End Function
        
        Public Sub Setcol10Null()
            Me(Me.tableSpicification.col10Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpicificationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpicificationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpicificationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpicificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnven_part_no As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property ven_part_noColumn As DataColumn
            Get
                Return Me.columnven_part_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_vendorRow
            Get
                Return CType(Me.Rows(index),inv_item_vendorRow)
            End Get
        End Property
        
        Public Event inv_item_vendorRowChanged As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowChanging As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowDeleted As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowDeleting As inv_item_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_vendorRow(ByVal row As inv_item_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_vendorRow(ByVal item_no As String, ByVal ven_part_no As String, ByVal desc_vendor As String, ByVal cod_vendor As String, ByVal remark As String) As inv_item_vendorRow
            Dim rowinv_item_vendorRow As inv_item_vendorRow = CType(Me.NewRow,inv_item_vendorRow)
            rowinv_item_vendorRow.ItemArray = New Object() {item_no, ven_part_no, desc_vendor, cod_vendor, remark}
            Me.Rows.Add(rowinv_item_vendorRow)
            Return rowinv_item_vendorRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_vendorDataTable = CType(MyBase.Clone,inv_item_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnven_part_no = Me.Columns("ven_part_no")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnven_part_no = New DataColumn("ven_part_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnven_part_no)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnitem_no.AllowDBNull = false
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function Newinv_item_vendorRow() As inv_item_vendorRow
            Return CType(Me.NewRow,inv_item_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowChanged(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowChanging(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowDeleted(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowDeleting(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_vendorRow(ByVal row As inv_item_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorRow
        Inherits DataRow
        
        Private tableinv_item_vendor As inv_item_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_vendor = CType(Me.Table,inv_item_vendorDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item_vendor.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_vendor.item_noColumn) = value
            End Set
        End Property
        
        Public Property ven_part_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_vendor.ven_part_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_vendor.ven_part_noColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_vendor.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_vendor.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_item_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_vendor.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_vendor.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isven_part_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_vendor.ven_part_noColumn)
        End Function
        
        Public Sub Setven_part_noNull()
            Me(Me.tableinv_item_vendor.ven_part_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_vendor.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableinv_item_vendor.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_vendor.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_item_vendor.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnGL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal GL_account As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type, GL_account}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnGL_account = Me.Columns("GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableinv_tab_type_item.GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ItemWheelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncod_quick_refrence As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnupc As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columndesc_line As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnamount_price1 As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnamount_onsale As DataColumn
        
        Private columnamount_spiff As DataColumn
        
        Private columndesc_table As DataColumn
        
        Private columncost As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columnwheel_size As DataColumn
        
        Private columnofset As DataColumn
        
        Private columnbolt_pattern As DataColumn
        
        Private columnmax_diameter As DataColumn
        
        Private columnlug_size As DataColumn
        
        Private columnReplcamentCost As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_ItemWheel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property upcColumn As DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_lineColumn As DataColumn
            Get
                Return Me.columndesc_line
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property amount_price1Column As DataColumn
            Get
                Return Me.columnamount_price1
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property amount_onsaleColumn As DataColumn
            Get
                Return Me.columnamount_onsale
            End Get
        End Property
        
        Friend ReadOnly Property amount_spiffColumn As DataColumn
            Get
                Return Me.columnamount_spiff
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property wheel_sizeColumn As DataColumn
            Get
                Return Me.columnwheel_size
            End Get
        End Property
        
        Friend ReadOnly Property ofsetColumn As DataColumn
            Get
                Return Me.columnofset
            End Get
        End Property
        
        Friend ReadOnly Property bolt_patternColumn As DataColumn
            Get
                Return Me.columnbolt_pattern
            End Get
        End Property
        
        Friend ReadOnly Property max_diameterColumn As DataColumn
            Get
                Return Me.columnmax_diameter
            End Get
        End Property
        
        Friend ReadOnly Property lug_sizeColumn As DataColumn
            Get
                Return Me.columnlug_size
            End Get
        End Property
        
        Friend ReadOnly Property ReplcamentCostColumn As DataColumn
            Get
                Return Me.columnReplcamentCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_ItemWheelRow
            Get
                Return CType(Me.Rows(index),Inv_ItemWheelRow)
            End Get
        End Property
        
        Public Event Inv_ItemWheelRowChanged As Inv_ItemWheelRowChangeEventHandler
        
        Public Event Inv_ItemWheelRowChanging As Inv_ItemWheelRowChangeEventHandler
        
        Public Event Inv_ItemWheelRowDeleted As Inv_ItemWheelRowChangeEventHandler
        
        Public Event Inv_ItemWheelRowDeleting As Inv_ItemWheelRowChangeEventHandler
        
        Public Overloads Sub AddInv_ItemWheelRow(ByVal row As Inv_ItemWheelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_ItemWheelRow( _
                    ByVal item_no As String,  _
                    ByVal cod_item_type As String,  _
                    ByVal desc_item As String,  _
                    ByVal cod_brand As String,  _
                    ByVal cod_quick_refrence As String,  _
                    ByVal taxable As Boolean,  _
                    ByVal style As String,  _
                    ByVal note As String,  _
                    ByVal picture() As Byte,  _
                    ByVal upc As String,  _
                    ByVal special_notice As String,  _
                    ByVal desc_quick_refrence As String,  _
                    ByVal abbreviation_desc_brand As String,  _
                    ByVal desc_line As String,  _
                    ByVal on_hand As Single,  _
                    ByVal amount_price1 As Single,  _
                    ByVal fet As Single,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal amount_onsale As Boolean,  _
                    ByVal amount_spiff As Boolean,  _
                    ByVal desc_table As String,  _
                    ByVal cost As Single,  _
                    ByVal list_price As Single,  _
                    ByVal wheel_size As String,  _
                    ByVal ofset As String,  _
                    ByVal bolt_pattern As String,  _
                    ByVal max_diameter As String,  _
                    ByVal lug_size As String,  _
                    ByVal ReplcamentCost As Decimal) As Inv_ItemWheelRow
            Dim rowInv_ItemWheelRow As Inv_ItemWheelRow = CType(Me.NewRow,Inv_ItemWheelRow)
            rowInv_ItemWheelRow.ItemArray = New Object() {item_no, cod_item_type, desc_item, cod_brand, cod_quick_refrence, taxable, style, note, picture, upc, special_notice, desc_quick_refrence, abbreviation_desc_brand, desc_line, on_hand, amount_price1, fet, treadwear, traction, temperature, amount_onsale, amount_spiff, desc_table, cost, list_price, wheel_size, ofset, bolt_pattern, max_diameter, lug_size, ReplcamentCost}
            Me.Rows.Add(rowInv_ItemWheelRow)
            Return rowInv_ItemWheelRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_ItemWheelDataTable = CType(MyBase.Clone,Inv_ItemWheelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_ItemWheelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnstyle = Me.Columns("style")
            Me.columnnote = Me.Columns("note")
            Me.columnpicture = Me.Columns("picture")
            Me.columnupc = Me.Columns("upc")
            Me.columnspecial_notice = Me.Columns("special_notice")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columndesc_line = Me.Columns("desc_line")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnamount_price1 = Me.Columns("amount_price1")
            Me.columnfet = Me.Columns("fet")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnamount_onsale = Me.Columns("amount_onsale")
            Me.columnamount_spiff = Me.Columns("amount_spiff")
            Me.columndesc_table = Me.Columns("desc_table")
            Me.columncost = Me.Columns("cost")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columnwheel_size = Me.Columns("wheel_size")
            Me.columnofset = Me.Columns("ofset")
            Me.columnbolt_pattern = Me.Columns("bolt_pattern")
            Me.columnmax_diameter = Me.Columns("max_diameter")
            Me.columnlug_size = Me.Columns("lug_size")
            Me.columnReplcamentCost = Me.Columns("ReplcamentCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnupc = New DataColumn("upc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupc)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columndesc_line = New DataColumn("desc_line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_line)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnamount_price1 = New DataColumn("amount_price1", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price1)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnamount_onsale = New DataColumn("amount_onsale", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_onsale)
            Me.columnamount_spiff = New DataColumn("amount_spiff", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_spiff)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columnwheel_size = New DataColumn("wheel_size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwheel_size)
            Me.columnofset = New DataColumn("ofset", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnofset)
            Me.columnbolt_pattern = New DataColumn("bolt_pattern", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbolt_pattern)
            Me.columnmax_diameter = New DataColumn("max_diameter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmax_diameter)
            Me.columnlug_size = New DataColumn("lug_size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlug_size)
            Me.columnReplcamentCost = New DataColumn("ReplcamentCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReplcamentCost)
            Me.columncod_brand.AllowDBNull = false
        End Sub
        
        Public Function NewInv_ItemWheelRow() As Inv_ItemWheelRow
            Return CType(Me.NewRow,Inv_ItemWheelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_ItemWheelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_ItemWheelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_ItemWheelRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_ItemWheelRowChanged(Me, New Inv_ItemWheelRowChangeEvent(CType(e.Row,Inv_ItemWheelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_ItemWheelRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_ItemWheelRowChanging(Me, New Inv_ItemWheelRowChangeEvent(CType(e.Row,Inv_ItemWheelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_ItemWheelRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_ItemWheelRowDeleted(Me, New Inv_ItemWheelRowChangeEvent(CType(e.Row,Inv_ItemWheelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_ItemWheelRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_ItemWheelRowDeleting(Me, New Inv_ItemWheelRowChangeEvent(CType(e.Row,Inv_ItemWheelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_ItemWheelRow(ByVal row As Inv_ItemWheelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ItemWheelRow
        Inherits DataRow
        
        Private tableInv_ItemWheel As Inv_ItemWheelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_ItemWheel = CType(Me.Table,Inv_ItemWheelDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableInv_ItemWheel.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableInv_ItemWheel.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property cod_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.cod_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.taxableColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.styleColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.noteColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.pictureColumn) = value
            End Set
        End Property
        
        Public Property upc As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.upcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.upcColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.special_noticeColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_line As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.desc_lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.desc_lineColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.on_handColumn) = value
            End Set
        End Property
        
        Public Property amount_price1 As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.amount_price1Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.amount_price1Column) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.fetColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.temperatureColumn) = value
            End Set
        End Property
        
        Public Property amount_onsale As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.amount_onsaleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.amount_onsaleColumn) = value
            End Set
        End Property
        
        Public Property amount_spiff As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.amount_spiffColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.amount_spiffColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.desc_tableColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.costColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.list_priceColumn) = value
            End Set
        End Property
        
        Public Property wheel_size As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.wheel_sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.wheel_sizeColumn) = value
            End Set
        End Property
        
        Public Property ofset As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.ofsetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.ofsetColumn) = value
            End Set
        End Property
        
        Public Property bolt_pattern As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.bolt_patternColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.bolt_patternColumn) = value
            End Set
        End Property
        
        Public Property max_diameter As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.max_diameterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.max_diameterColumn) = value
            End Set
        End Property
        
        Public Property lug_size As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.lug_sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.lug_sizeColumn) = value
            End Set
        End Property
        
        Public Property ReplcamentCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ItemWheel.ReplcamentCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ItemWheel.ReplcamentCostColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableInv_ItemWheel.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableInv_ItemWheel.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInv_ItemWheel.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.cod_quick_refrenceColumn)
        End Function
        
        Public Sub Setcod_quick_refrenceNull()
            Me(Me.tableInv_ItemWheel.cod_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_ItemWheel.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableInv_ItemWheel.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableInv_ItemWheel.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableInv_ItemWheel.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.upcColumn)
        End Function
        
        Public Sub SetupcNull()
            Me(Me.tableInv_ItemWheel.upcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableInv_ItemWheel.special_noticeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableInv_ItemWheel.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableInv_ItemWheel.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_lineNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.desc_lineColumn)
        End Function
        
        Public Sub Setdesc_lineNull()
            Me(Me.tableInv_ItemWheel.desc_lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableInv_ItemWheel.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price1Null() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.amount_price1Column)
        End Function
        
        Public Sub Setamount_price1Null()
            Me(Me.tableInv_ItemWheel.amount_price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableInv_ItemWheel.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableInv_ItemWheel.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableInv_ItemWheel.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableInv_ItemWheel.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_onsaleNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.amount_onsaleColumn)
        End Function
        
        Public Sub Setamount_onsaleNull()
            Me(Me.tableInv_ItemWheel.amount_onsaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_spiffNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.amount_spiffColumn)
        End Function
        
        Public Sub Setamount_spiffNull()
            Me(Me.tableInv_ItemWheel.amount_spiffColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableInv_ItemWheel.desc_tableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_ItemWheel.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableInv_ItemWheel.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswheel_sizeNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.wheel_sizeColumn)
        End Function
        
        Public Sub Setwheel_sizeNull()
            Me(Me.tableInv_ItemWheel.wheel_sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsofsetNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.ofsetColumn)
        End Function
        
        Public Sub SetofsetNull()
            Me(Me.tableInv_ItemWheel.ofsetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbolt_patternNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.bolt_patternColumn)
        End Function
        
        Public Sub Setbolt_patternNull()
            Me(Me.tableInv_ItemWheel.bolt_patternColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismax_diameterNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.max_diameterColumn)
        End Function
        
        Public Sub Setmax_diameterNull()
            Me(Me.tableInv_ItemWheel.max_diameterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islug_sizeNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.lug_sizeColumn)
        End Function
        
        Public Sub Setlug_sizeNull()
            Me(Me.tableInv_ItemWheel.lug_sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReplcamentCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_ItemWheel.ReplcamentCostColumn)
        End Function
        
        Public Sub SetReplcamentCostNull()
            Me(Me.tableInv_ItemWheel.ReplcamentCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ItemWheelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_ItemWheelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_ItemWheelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_ItemWheelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_ItemAutoPartDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncod_quick_refrence As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnupc As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columndesc_line As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnamount_price1 As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnamount_onsale As DataColumn
        
        Private columnamount_spiff As DataColumn
        
        Private columncost As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columncore_cost As DataColumn
        
        Private columnReplcamentCost As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_ItemAutoPart")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property upcColumn As DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_lineColumn As DataColumn
            Get
                Return Me.columndesc_line
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property amount_price1Column As DataColumn
            Get
                Return Me.columnamount_price1
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property amount_onsaleColumn As DataColumn
            Get
                Return Me.columnamount_onsale
            End Get
        End Property
        
        Friend ReadOnly Property amount_spiffColumn As DataColumn
            Get
                Return Me.columnamount_spiff
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property core_costColumn As DataColumn
            Get
                Return Me.columncore_cost
            End Get
        End Property
        
        Friend ReadOnly Property ReplcamentCostColumn As DataColumn
            Get
                Return Me.columnReplcamentCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_ItemAutoPartRow
            Get
                Return CType(Me.Rows(index),inv_ItemAutoPartRow)
            End Get
        End Property
        
        Public Event inv_ItemAutoPartRowChanged As inv_ItemAutoPartRowChangeEventHandler
        
        Public Event inv_ItemAutoPartRowChanging As inv_ItemAutoPartRowChangeEventHandler
        
        Public Event inv_ItemAutoPartRowDeleted As inv_ItemAutoPartRowChangeEventHandler
        
        Public Event inv_ItemAutoPartRowDeleting As inv_ItemAutoPartRowChangeEventHandler
        
        Public Overloads Sub Addinv_ItemAutoPartRow(ByVal row As inv_ItemAutoPartRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_ItemAutoPartRow( _
                    ByVal item_no As String,  _
                    ByVal cod_item_type As String,  _
                    ByVal desc_item As String,  _
                    ByVal cod_brand As String,  _
                    ByVal cod_quick_refrence As String,  _
                    ByVal taxable As Boolean,  _
                    ByVal style As String,  _
                    ByVal note As String,  _
                    ByVal picture() As Byte,  _
                    ByVal upc As String,  _
                    ByVal special_notice As String,  _
                    ByVal desc_quick_refrence As String,  _
                    ByVal abbreviation_desc_brand As String,  _
                    ByVal desc_line As String,  _
                    ByVal on_hand As Single,  _
                    ByVal amount_price1 As Single,  _
                    ByVal fet As Single,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal amount_onsale As Boolean,  _
                    ByVal amount_spiff As Boolean,  _
                    ByVal cost As Single,  _
                    ByVal list_price As Single,  _
                    ByVal core_cost As Single,  _
                    ByVal ReplcamentCost As Decimal) As inv_ItemAutoPartRow
            Dim rowinv_ItemAutoPartRow As inv_ItemAutoPartRow = CType(Me.NewRow,inv_ItemAutoPartRow)
            rowinv_ItemAutoPartRow.ItemArray = New Object() {item_no, cod_item_type, desc_item, cod_brand, cod_quick_refrence, taxable, style, note, picture, upc, special_notice, desc_quick_refrence, abbreviation_desc_brand, desc_line, on_hand, amount_price1, fet, treadwear, traction, temperature, amount_onsale, amount_spiff, cost, list_price, core_cost, ReplcamentCost}
            Me.Rows.Add(rowinv_ItemAutoPartRow)
            Return rowinv_ItemAutoPartRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_ItemAutoPartDataTable = CType(MyBase.Clone,inv_ItemAutoPartDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_ItemAutoPartDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnstyle = Me.Columns("style")
            Me.columnnote = Me.Columns("note")
            Me.columnpicture = Me.Columns("picture")
            Me.columnupc = Me.Columns("upc")
            Me.columnspecial_notice = Me.Columns("special_notice")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columndesc_line = Me.Columns("desc_line")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnamount_price1 = Me.Columns("amount_price1")
            Me.columnfet = Me.Columns("fet")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnamount_onsale = Me.Columns("amount_onsale")
            Me.columnamount_spiff = Me.Columns("amount_spiff")
            Me.columncost = Me.Columns("cost")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columncore_cost = Me.Columns("core_cost")
            Me.columnReplcamentCost = Me.Columns("ReplcamentCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnupc = New DataColumn("upc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupc)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columndesc_line = New DataColumn("desc_line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_line)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnamount_price1 = New DataColumn("amount_price1", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price1)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnamount_onsale = New DataColumn("amount_onsale", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_onsale)
            Me.columnamount_spiff = New DataColumn("amount_spiff", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_spiff)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columncore_cost = New DataColumn("core_cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncore_cost)
            Me.columnReplcamentCost = New DataColumn("ReplcamentCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReplcamentCost)
            Me.columncod_brand.AllowDBNull = false
        End Sub
        
        Public Function Newinv_ItemAutoPartRow() As inv_ItemAutoPartRow
            Return CType(Me.NewRow,inv_ItemAutoPartRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_ItemAutoPartRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_ItemAutoPartRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_ItemAutoPartRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_ItemAutoPartRowChanged(Me, New inv_ItemAutoPartRowChangeEvent(CType(e.Row,inv_ItemAutoPartRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_ItemAutoPartRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_ItemAutoPartRowChanging(Me, New inv_ItemAutoPartRowChangeEvent(CType(e.Row,inv_ItemAutoPartRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_ItemAutoPartRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_ItemAutoPartRowDeleted(Me, New inv_ItemAutoPartRowChangeEvent(CType(e.Row,inv_ItemAutoPartRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_ItemAutoPartRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_ItemAutoPartRowDeleting(Me, New inv_ItemAutoPartRowChangeEvent(CType(e.Row,inv_ItemAutoPartRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_ItemAutoPartRow(ByVal row As inv_ItemAutoPartRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_ItemAutoPartRow
        Inherits DataRow
        
        Private tableinv_ItemAutoPart As inv_ItemAutoPartDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_ItemAutoPart = CType(Me.Table,inv_ItemAutoPartDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_ItemAutoPart.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property cod_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.cod_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.taxableColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.styleColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.noteColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.pictureColumn) = value
            End Set
        End Property
        
        Public Property upc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.upcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.upcColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.special_noticeColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_line As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.desc_lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.desc_lineColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.on_handColumn) = value
            End Set
        End Property
        
        Public Property amount_price1 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.amount_price1Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.amount_price1Column) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.fetColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.temperatureColumn) = value
            End Set
        End Property
        
        Public Property amount_onsale As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.amount_onsaleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.amount_onsaleColumn) = value
            End Set
        End Property
        
        Public Property amount_spiff As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.amount_spiffColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.amount_spiffColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.costColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.list_priceColumn) = value
            End Set
        End Property
        
        Public Property core_cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.core_costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.core_costColumn) = value
            End Set
        End Property
        
        Public Property ReplcamentCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_ItemAutoPart.ReplcamentCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_ItemAutoPart.ReplcamentCostColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_ItemAutoPart.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableinv_ItemAutoPart.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_ItemAutoPart.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.cod_quick_refrenceColumn)
        End Function
        
        Public Sub Setcod_quick_refrenceNull()
            Me(Me.tableinv_ItemAutoPart.cod_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_ItemAutoPart.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableinv_ItemAutoPart.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_ItemAutoPart.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableinv_ItemAutoPart.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.upcColumn)
        End Function
        
        Public Sub SetupcNull()
            Me(Me.tableinv_ItemAutoPart.upcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_ItemAutoPart.special_noticeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_ItemAutoPart.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableinv_ItemAutoPart.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_lineNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.desc_lineColumn)
        End Function
        
        Public Sub Setdesc_lineNull()
            Me(Me.tableinv_ItemAutoPart.desc_lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableinv_ItemAutoPart.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price1Null() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.amount_price1Column)
        End Function
        
        Public Sub Setamount_price1Null()
            Me(Me.tableinv_ItemAutoPart.amount_price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_ItemAutoPart.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_ItemAutoPart.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_ItemAutoPart.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_ItemAutoPart.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_onsaleNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.amount_onsaleColumn)
        End Function
        
        Public Sub Setamount_onsaleNull()
            Me(Me.tableinv_ItemAutoPart.amount_onsaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_spiffNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.amount_spiffColumn)
        End Function
        
        Public Sub Setamount_spiffNull()
            Me(Me.tableinv_ItemAutoPart.amount_spiffColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableinv_ItemAutoPart.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableinv_ItemAutoPart.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscore_costNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.core_costColumn)
        End Function
        
        Public Sub Setcore_costNull()
            Me(Me.tableinv_ItemAutoPart.core_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReplcamentCostNull() As Boolean
            Return Me.IsNull(Me.tableinv_ItemAutoPart.ReplcamentCostColumn)
        End Function
        
        Public Sub SetReplcamentCostNull()
            Me(Me.tableinv_ItemAutoPart.ReplcamentCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_ItemAutoPartRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_ItemAutoPartRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_ItemAutoPartRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_ItemAutoPartRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnSTORENO.AllowDBNull = false
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncod_quick_refrence As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnupc As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columndesc_line As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnamount_price1 As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnamount_onsale As DataColumn
        
        Private columnamount_spiff As DataColumn
        
        Private columnservice_description As DataColumn
        
        Private columntire_size As DataColumn
        
        Private columndesc_table As DataColumn
        
        Private columncost As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columncod_warehouse As DataColumn
        
        Private columndesc_location As DataColumn
        
        Private columnReplcamentCost As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property upcColumn As DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_lineColumn As DataColumn
            Get
                Return Me.columndesc_line
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property amount_price1Column As DataColumn
            Get
                Return Me.columnamount_price1
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property amount_onsaleColumn As DataColumn
            Get
                Return Me.columnamount_onsale
            End Get
        End Property
        
        Friend ReadOnly Property amount_spiffColumn As DataColumn
            Get
                Return Me.columnamount_spiff
            End Get
        End Property
        
        Friend ReadOnly Property service_descriptionColumn As DataColumn
            Get
                Return Me.columnservice_description
            End Get
        End Property
        
        Friend ReadOnly Property tire_sizeColumn As DataColumn
            Get
                Return Me.columntire_size
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property cod_warehouseColumn As DataColumn
            Get
                Return Me.columncod_warehouse
            End Get
        End Property
        
        Friend ReadOnly Property desc_locationColumn As DataColumn
            Get
                Return Me.columndesc_location
            End Get
        End Property
        
        Friend ReadOnly Property ReplcamentCostColumn As DataColumn
            Get
                Return Me.columnReplcamentCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemRow
            Get
                Return CType(Me.Rows(index),inv_itemRow)
            End Get
        End Property
        
        Public Event inv_itemRowChanged As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowChanging As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleted As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleting As inv_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemRow( _
                    ByVal item_no As String,  _
                    ByVal cod_item_type As String,  _
                    ByVal desc_item As String,  _
                    ByVal cod_brand As String,  _
                    ByVal cod_quick_refrence As String,  _
                    ByVal taxable As Boolean,  _
                    ByVal style As String,  _
                    ByVal note As String,  _
                    ByVal picture() As Byte,  _
                    ByVal upc As String,  _
                    ByVal special_notice As String,  _
                    ByVal desc_quick_refrence As String,  _
                    ByVal abbreviation_desc_brand As String,  _
                    ByVal desc_line As String,  _
                    ByVal on_hand As Single,  _
                    ByVal amount_price1 As Single,  _
                    ByVal fet As Single,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal amount_onsale As Boolean,  _
                    ByVal amount_spiff As Boolean,  _
                    ByVal service_description As String,  _
                    ByVal tire_size As String,  _
                    ByVal desc_table As String,  _
                    ByVal cost As Single,  _
                    ByVal list_price As Single,  _
                    ByVal cod_warehouse As String,  _
                    ByVal desc_location As String,  _
                    ByVal ReplcamentCost As Decimal) As inv_itemRow
            Dim rowinv_itemRow As inv_itemRow = CType(Me.NewRow,inv_itemRow)
            rowinv_itemRow.ItemArray = New Object() {item_no, cod_item_type, desc_item, cod_brand, cod_quick_refrence, taxable, style, note, picture, upc, special_notice, desc_quick_refrence, abbreviation_desc_brand, desc_line, on_hand, amount_price1, fet, treadwear, traction, temperature, amount_onsale, amount_spiff, service_description, tire_size, desc_table, cost, list_price, cod_warehouse, desc_location, ReplcamentCost}
            Me.Rows.Add(rowinv_itemRow)
            Return rowinv_itemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemDataTable = CType(MyBase.Clone,inv_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnstyle = Me.Columns("style")
            Me.columnnote = Me.Columns("note")
            Me.columnpicture = Me.Columns("picture")
            Me.columnupc = Me.Columns("upc")
            Me.columnspecial_notice = Me.Columns("special_notice")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columndesc_line = Me.Columns("desc_line")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnamount_price1 = Me.Columns("amount_price1")
            Me.columnfet = Me.Columns("fet")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnamount_onsale = Me.Columns("amount_onsale")
            Me.columnamount_spiff = Me.Columns("amount_spiff")
            Me.columnservice_description = Me.Columns("service_description")
            Me.columntire_size = Me.Columns("tire_size")
            Me.columndesc_table = Me.Columns("desc_table")
            Me.columncost = Me.Columns("cost")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columncod_warehouse = Me.Columns("cod_warehouse")
            Me.columndesc_location = Me.Columns("desc_location")
            Me.columnReplcamentCost = Me.Columns("ReplcamentCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnupc = New DataColumn("upc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupc)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columndesc_line = New DataColumn("desc_line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_line)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnamount_price1 = New DataColumn("amount_price1", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price1)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnamount_onsale = New DataColumn("amount_onsale", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_onsale)
            Me.columnamount_spiff = New DataColumn("amount_spiff", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_spiff)
            Me.columnservice_description = New DataColumn("service_description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_description)
            Me.columntire_size = New DataColumn("tire_size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntire_size)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columncod_warehouse = New DataColumn("cod_warehouse", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_warehouse)
            Me.columndesc_location = New DataColumn("desc_location", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_location)
            Me.columnReplcamentCost = New DataColumn("ReplcamentCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReplcamentCost)
            Me.columncod_brand.AllowDBNull = false
            Me.columnon_hand.ReadOnly = true
        End Sub
        
        Public Function Newinv_itemRow() As inv_itemRow
            Return CType(Me.NewRow,inv_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanged(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanging(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleted(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleting(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRow
        Inherits DataRow
        
        Private tableinv_item As inv_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item = CType(Me.Table,inv_itemDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_item.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property cod_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.taxableColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.styleColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.noteColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.pictureColumn) = value
            End Set
        End Property
        
        Public Property upc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.upcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.upcColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.special_noticeColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_line As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_lineColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.on_handColumn) = value
            End Set
        End Property
        
        Public Property amount_price1 As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.amount_price1Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.amount_price1Column) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.fetColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.temperatureColumn) = value
            End Set
        End Property
        
        Public Property amount_onsale As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.amount_onsaleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.amount_onsaleColumn) = value
            End Set
        End Property
        
        Public Property amount_spiff As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.amount_spiffColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.amount_spiffColumn) = value
            End Set
        End Property
        
        Public Property service_description As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.service_descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.service_descriptionColumn) = value
            End Set
        End Property
        
        Public Property tire_size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.tire_sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.tire_sizeColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_tableColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.costColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.list_priceColumn) = value
            End Set
        End Property
        
        Public Property cod_warehouse As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_warehouseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_warehouseColumn) = value
            End Set
        End Property
        
        Public Property desc_location As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_locationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_locationColumn) = value
            End Set
        End Property
        
        Public Property ReplcamentCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.ReplcamentCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.ReplcamentCostColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_item.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableinv_item.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_quick_refrenceColumn)
        End Function
        
        Public Sub Setcod_quick_refrenceNull()
            Me(Me.tableinv_item.cod_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_item.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableinv_item.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_item.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableinv_item.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.upcColumn)
        End Function
        
        Public Sub SetupcNull()
            Me(Me.tableinv_item.upcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_item.special_noticeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableinv_item.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_lineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_lineColumn)
        End Function
        
        Public Sub Setdesc_lineNull()
            Me(Me.tableinv_item.desc_lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableinv_item.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price1Null() As Boolean
            Return Me.IsNull(Me.tableinv_item.amount_price1Column)
        End Function
        
        Public Sub Setamount_price1Null()
            Me(Me.tableinv_item.amount_price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_item.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_item.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_item.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_item.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_onsaleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.amount_onsaleColumn)
        End Function
        
        Public Sub Setamount_onsaleNull()
            Me(Me.tableinv_item.amount_onsaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_spiffNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.amount_spiffColumn)
        End Function
        
        Public Sub Setamount_spiffNull()
            Me(Me.tableinv_item.amount_spiffColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.service_descriptionColumn)
        End Function
        
        Public Sub Setservice_descriptionNull()
            Me(Me.tableinv_item.service_descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istire_sizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.tire_sizeColumn)
        End Function
        
        Public Sub Settire_sizeNull()
            Me(Me.tableinv_item.tire_sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableinv_item.desc_tableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableinv_item.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableinv_item.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_warehouseNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_warehouseColumn)
        End Function
        
        Public Sub Setcod_warehouseNull()
            Me(Me.tableinv_item.cod_warehouseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_locationNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_locationColumn)
        End Function
        
        Public Sub Setdesc_locationNull()
            Me(Me.tableinv_item.desc_locationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReplcamentCostNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.ReplcamentCostColumn)
        End Function
        
        Public Sub SetReplcamentCostNull()
            Me(Me.tableinv_item.ReplcamentCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class printitemdetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncheck1 As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnitemno As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnFEt As DataColumn
        
        Private columnEtension As DataColumn
        
        Friend Sub New()
            MyBase.New("printitemdetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property check1Column As DataColumn
            Get
                Return Me.columncheck1
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property itemnoColumn As DataColumn
            Get
                Return Me.columnitemno
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property FEtColumn As DataColumn
            Get
                Return Me.columnFEt
            End Get
        End Property
        
        Friend ReadOnly Property EtensionColumn As DataColumn
            Get
                Return Me.columnEtension
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As printitemdetailRow
            Get
                Return CType(Me.Rows(index),printitemdetailRow)
            End Get
        End Property
        
        Public Event printitemdetailRowChanged As printitemdetailRowChangeEventHandler
        
        Public Event printitemdetailRowChanging As printitemdetailRowChangeEventHandler
        
        Public Event printitemdetailRowDeleted As printitemdetailRowChangeEventHandler
        
        Public Event printitemdetailRowDeleting As printitemdetailRowChangeEventHandler
        
        Public Overloads Sub AddprintitemdetailRow(ByVal row As printitemdetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddprintitemdetailRow(ByVal check1 As String, ByVal description As String, ByVal itemno As String, ByVal qty As Integer, ByVal price As Decimal, ByVal FEt As Decimal, ByVal Etension As Decimal) As printitemdetailRow
            Dim rowprintitemdetailRow As printitemdetailRow = CType(Me.NewRow,printitemdetailRow)
            rowprintitemdetailRow.ItemArray = New Object() {check1, description, itemno, qty, price, FEt, Etension}
            Me.Rows.Add(rowprintitemdetailRow)
            Return rowprintitemdetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As printitemdetailDataTable = CType(MyBase.Clone,printitemdetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New printitemdetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncheck1 = Me.Columns("check1")
            Me.columndescription = Me.Columns("description")
            Me.columnitemno = Me.Columns("itemno")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnFEt = Me.Columns("FEt")
            Me.columnEtension = Me.Columns("Etension")
        End Sub
        
        Private Sub InitClass()
            Me.columncheck1 = New DataColumn("check1", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columncheck1)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnitemno = New DataColumn("itemno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemno)
            Me.columnqty = New DataColumn("qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnFEt = New DataColumn("FEt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEt)
            Me.columnEtension = New DataColumn("Etension", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEtension)
            Me.columncheck1.Namespace = "http://www.tempuri.org/DSInv_Item.xsd"
        End Sub
        
        Public Function NewprintitemdetailRow() As printitemdetailRow
            Return CType(Me.NewRow,printitemdetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New printitemdetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(printitemdetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.printitemdetailRowChangedEvent) Is Nothing) Then
                RaiseEvent printitemdetailRowChanged(Me, New printitemdetailRowChangeEvent(CType(e.Row,printitemdetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.printitemdetailRowChangingEvent) Is Nothing) Then
                RaiseEvent printitemdetailRowChanging(Me, New printitemdetailRowChangeEvent(CType(e.Row,printitemdetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.printitemdetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent printitemdetailRowDeleted(Me, New printitemdetailRowChangeEvent(CType(e.Row,printitemdetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.printitemdetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent printitemdetailRowDeleting(Me, New printitemdetailRowChangeEvent(CType(e.Row,printitemdetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveprintitemdetailRow(ByVal row As printitemdetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class printitemdetailRow
        Inherits DataRow
        
        Private tableprintitemdetail As printitemdetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableprintitemdetail = CType(Me.Table,printitemdetailDataTable)
        End Sub
        
        Public Property check1 As String
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.check1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.check1Column) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.descriptionColumn) = value
            End Set
        End Property
        
        Public Property itemno As String
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.itemnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.itemnoColumn) = value
            End Set
        End Property
        
        Public Property qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.qtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.priceColumn) = value
            End Set
        End Property
        
        Public Property FEt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.FEtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.FEtColumn) = value
            End Set
        End Property
        
        Public Property Etension As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableprintitemdetail.EtensionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprintitemdetail.EtensionColumn) = value
            End Set
        End Property
        
        Public Function Ischeck1Null() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.check1Column)
        End Function
        
        Public Sub Setcheck1Null()
            Me(Me.tableprintitemdetail.check1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableprintitemdetail.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemnoNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.itemnoColumn)
        End Function
        
        Public Sub SetitemnoNull()
            Me(Me.tableprintitemdetail.itemnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableprintitemdetail.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableprintitemdetail.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEtNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.FEtColumn)
        End Function
        
        Public Sub SetFEtNull()
            Me(Me.tableprintitemdetail.FEtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEtensionNull() As Boolean
            Return Me.IsNull(Me.tableprintitemdetail.EtensionColumn)
        End Function
        
        Public Sub SetEtensionNull()
            Me(Me.tableprintitemdetail.EtensionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class printitemdetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As printitemdetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As printitemdetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As printitemdetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
