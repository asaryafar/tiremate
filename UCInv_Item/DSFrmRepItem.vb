'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepItem
    Inherits DataSet
    
    Private tableitem As itemDataTable
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableLine As LineDataTable
    
    Private tableBrand As BrandDataTable
    
    Private tableStyle As StyleDataTable
    
    Private tableSize As SizeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("item")) Is Nothing) Then
                Me.Tables.Add(New itemDataTable(ds.Tables("item")))
            End If
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("Line")) Is Nothing) Then
                Me.Tables.Add(New LineDataTable(ds.Tables("Line")))
            End If
            If (Not (ds.Tables("Brand")) Is Nothing) Then
                Me.Tables.Add(New BrandDataTable(ds.Tables("Brand")))
            End If
            If (Not (ds.Tables("Style")) Is Nothing) Then
                Me.Tables.Add(New StyleDataTable(ds.Tables("Style")))
            End If
            If (Not (ds.Tables("Size")) Is Nothing) Then
                Me.Tables.Add(New SizeDataTable(ds.Tables("Size")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property item As itemDataTable
        Get
            Return Me.tableitem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Line As LineDataTable
        Get
            Return Me.tableLine
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Brand As BrandDataTable
        Get
            Return Me.tableBrand
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Style As StyleDataTable
        Get
            Return Me.tableStyle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Size As SizeDataTable
        Get
            Return Me.tableSize
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepItem = CType(MyBase.Clone,DSFrmRepItem)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("item")) Is Nothing) Then
            Me.Tables.Add(New itemDataTable(ds.Tables("item")))
        End If
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("Line")) Is Nothing) Then
            Me.Tables.Add(New LineDataTable(ds.Tables("Line")))
        End If
        If (Not (ds.Tables("Brand")) Is Nothing) Then
            Me.Tables.Add(New BrandDataTable(ds.Tables("Brand")))
        End If
        If (Not (ds.Tables("Style")) Is Nothing) Then
            Me.Tables.Add(New StyleDataTable(ds.Tables("Style")))
        End If
        If (Not (ds.Tables("Size")) Is Nothing) Then
            Me.Tables.Add(New SizeDataTable(ds.Tables("Size")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableitem = CType(Me.Tables("item"),itemDataTable)
        If (Not (Me.tableitem) Is Nothing) Then
            Me.tableitem.InitVars
        End If
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableLine = CType(Me.Tables("Line"),LineDataTable)
        If (Not (Me.tableLine) Is Nothing) Then
            Me.tableLine.InitVars
        End If
        Me.tableBrand = CType(Me.Tables("Brand"),BrandDataTable)
        If (Not (Me.tableBrand) Is Nothing) Then
            Me.tableBrand.InitVars
        End If
        Me.tableStyle = CType(Me.Tables("Style"),StyleDataTable)
        If (Not (Me.tableStyle) Is Nothing) Then
            Me.tableStyle.InitVars
        End If
        Me.tableSize = CType(Me.Tables("Size"),SizeDataTable)
        If (Not (Me.tableSize) Is Nothing) Then
            Me.tableSize.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepItem"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepItem.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableitem = New itemDataTable
        Me.Tables.Add(Me.tableitem)
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableLine = New LineDataTable
        Me.Tables.Add(Me.tableLine)
        Me.tableBrand = New BrandDataTable
        Me.Tables.Add(Me.tableBrand)
        Me.tableStyle = New StyleDataTable
        Me.Tables.Add(Me.tableStyle)
        Me.tableSize = New SizeDataTable
        Me.Tables.Add(Me.tableSize)
    End Sub
    
    Private Function ShouldSerializeitem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLine() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBrand() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStyle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSize() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub itemRowChangeEventHandler(ByVal sender As Object, ByVal e As itemRowChangeEvent)
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub LineRowChangeEventHandler(ByVal sender As Object, ByVal e As LineRowChangeEvent)
    
    Public Delegate Sub BrandRowChangeEventHandler(ByVal sender As Object, ByVal e As BrandRowChangeEvent)
    
    Public Delegate Sub StyleRowChangeEventHandler(ByVal sender As Object, ByVal e As StyleRowChangeEvent)
    
    Public Delegate Sub SizeRowChangeEventHandler(ByVal sender As Object, ByVal e As SizeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As itemRow
            Get
                Return CType(Me.Rows(index),itemRow)
            End Get
        End Property
        
        Public Event itemRowChanged As itemRowChangeEventHandler
        
        Public Event itemRowChanging As itemRowChangeEventHandler
        
        Public Event itemRowDeleted As itemRowChangeEventHandler
        
        Public Event itemRowDeleting As itemRowChangeEventHandler
        
        Public Overloads Sub AdditemRow(ByVal row As itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdditemRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As itemRow
            Dim rowitemRow As itemRow = CType(Me.NewRow,itemRow)
            rowitemRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowitemRow)
            Return rowitemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As itemDataTable = CType(MyBase.Clone,itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewitemRow() As itemRow
            Return CType(Me.NewRow,itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.itemRowChangedEvent) Is Nothing) Then
                RaiseEvent itemRowChanged(Me, New itemRowChangeEvent(CType(e.Row,itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.itemRowChangingEvent) Is Nothing) Then
                RaiseEvent itemRowChanging(Me, New itemRowChangeEvent(CType(e.Row,itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent itemRowDeleted(Me, New itemRowChangeEvent(CType(e.Row,itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent itemRowDeleting(Me, New itemRowChangeEvent(CType(e.Row,itemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveitemRow(ByVal row As itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itemRow
        Inherits DataRow
        
        Private tableitem As itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableitem = CType(Me.Table,itemDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableitem.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableitem.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                If Me.IscodeNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableitem.codeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableitem.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                If Me.IsnameNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableitem.nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableitem.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableitem.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableitem.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableitem.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableitem.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableitem.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableitem.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("Line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LineRow
            Get
                Return CType(Me.Rows(index),LineRow)
            End Get
        End Property
        
        Public Event LineRowChanged As LineRowChangeEventHandler
        
        Public Event LineRowChanging As LineRowChangeEventHandler
        
        Public Event LineRowDeleted As LineRowChangeEventHandler
        
        Public Event LineRowDeleting As LineRowChangeEventHandler
        
        Public Overloads Sub AddLineRow(ByVal row As LineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLineRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As LineRow
            Dim rowLineRow As LineRow = CType(Me.NewRow,LineRow)
            rowLineRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowLineRow)
            Return rowLineRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LineDataTable = CType(MyBase.Clone,LineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewLineRow() As LineRow
            Return CType(Me.NewRow,LineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LineRowChangedEvent) Is Nothing) Then
                RaiseEvent LineRowChanged(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LineRowChangingEvent) Is Nothing) Then
                RaiseEvent LineRowChanging(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LineRowDeletedEvent) Is Nothing) Then
                RaiseEvent LineRowDeleted(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LineRowDeletingEvent) Is Nothing) Then
                RaiseEvent LineRowDeleting(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLineRow(ByVal row As LineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineRow
        Inherits DataRow
        
        Private tableLine As LineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLine = CType(Me.Table,LineDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableLine.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableLine.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                If Me.IscodeNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableLine.codeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableLine.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                If Me.IsnameNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableLine.nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableLine.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableLine.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableLine.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableLine.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableLine.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableLine.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableLine.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BrandDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("Brand")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BrandRow
            Get
                Return CType(Me.Rows(index),BrandRow)
            End Get
        End Property
        
        Public Event BrandRowChanged As BrandRowChangeEventHandler
        
        Public Event BrandRowChanging As BrandRowChangeEventHandler
        
        Public Event BrandRowDeleted As BrandRowChangeEventHandler
        
        Public Event BrandRowDeleting As BrandRowChangeEventHandler
        
        Public Overloads Sub AddBrandRow(ByVal row As BrandRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBrandRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As BrandRow
            Dim rowBrandRow As BrandRow = CType(Me.NewRow,BrandRow)
            rowBrandRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowBrandRow)
            Return rowBrandRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BrandDataTable = CType(MyBase.Clone,BrandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BrandDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewBrandRow() As BrandRow
            Return CType(Me.NewRow,BrandRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BrandRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BrandRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrandRowChangedEvent) Is Nothing) Then
                RaiseEvent BrandRowChanged(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrandRowChangingEvent) Is Nothing) Then
                RaiseEvent BrandRowChanging(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrandRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrandRowDeleted(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrandRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrandRowDeleting(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBrandRow(ByVal row As BrandRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BrandRow
        Inherits DataRow
        
        Private tableBrand As BrandDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBrand = CType(Me.Table,BrandDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableBrand.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableBrand.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                If Me.IscodeNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableBrand.codeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableBrand.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                If Me.IsnameNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableBrand.nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableBrand.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableBrand.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableBrand.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableBrand.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableBrand.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableBrand.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableBrand.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BrandRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BrandRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BrandRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BrandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("Style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StyleRow
            Get
                Return CType(Me.Rows(index),StyleRow)
            End Get
        End Property
        
        Public Event StyleRowChanged As StyleRowChangeEventHandler
        
        Public Event StyleRowChanging As StyleRowChangeEventHandler
        
        Public Event StyleRowDeleted As StyleRowChangeEventHandler
        
        Public Event StyleRowDeleting As StyleRowChangeEventHandler
        
        Public Overloads Sub AddStyleRow(ByVal row As StyleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStyleRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As StyleRow
            Dim rowStyleRow As StyleRow = CType(Me.NewRow,StyleRow)
            rowStyleRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowStyleRow)
            Return rowStyleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StyleDataTable = CType(MyBase.Clone,StyleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StyleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewStyleRow() As StyleRow
            Return CType(Me.NewRow,StyleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StyleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StyleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StyleRowChangedEvent) Is Nothing) Then
                RaiseEvent StyleRowChanged(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StyleRowChangingEvent) Is Nothing) Then
                RaiseEvent StyleRowChanging(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StyleRowDeletedEvent) Is Nothing) Then
                RaiseEvent StyleRowDeleted(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StyleRowDeletingEvent) Is Nothing) Then
                RaiseEvent StyleRowDeleting(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStyleRow(ByVal row As StyleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleRow
        Inherits DataRow
        
        Private tableStyle As StyleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStyle = CType(Me.Table,StyleDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableStyle.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableStyle.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                If Me.IscodeNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableStyle.codeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableStyle.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                If Me.IsnameNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableStyle.nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableStyle.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableStyle.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableStyle.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableStyle.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableStyle.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableStyle.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableStyle.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StyleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StyleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StyleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SizeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("Size")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SizeRow
            Get
                Return CType(Me.Rows(index),SizeRow)
            End Get
        End Property
        
        Public Event SizeRowChanged As SizeRowChangeEventHandler
        
        Public Event SizeRowChanging As SizeRowChangeEventHandler
        
        Public Event SizeRowDeleted As SizeRowChangeEventHandler
        
        Public Event SizeRowDeleting As SizeRowChangeEventHandler
        
        Public Overloads Sub AddSizeRow(ByVal row As SizeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSizeRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As SizeRow
            Dim rowSizeRow As SizeRow = CType(Me.NewRow,SizeRow)
            rowSizeRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowSizeRow)
            Return rowSizeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SizeDataTable = CType(MyBase.Clone,SizeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SizeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewSizeRow() As SizeRow
            Return CType(Me.NewRow,SizeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SizeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SizeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SizeRowChangedEvent) Is Nothing) Then
                RaiseEvent SizeRowChanged(Me, New SizeRowChangeEvent(CType(e.Row,SizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SizeRowChangingEvent) Is Nothing) Then
                RaiseEvent SizeRowChanging(Me, New SizeRowChangeEvent(CType(e.Row,SizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SizeRowDeletedEvent) Is Nothing) Then
                RaiseEvent SizeRowDeleted(Me, New SizeRowChangeEvent(CType(e.Row,SizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SizeRowDeletingEvent) Is Nothing) Then
                RaiseEvent SizeRowDeleting(Me, New SizeRowChangeEvent(CType(e.Row,SizeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSizeRow(ByVal row As SizeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SizeRow
        Inherits DataRow
        
        Private tableSize As SizeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSize = CType(Me.Table,SizeDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableSize.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableSize.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                If Me.IscodeNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableSize.codeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSize.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                If Me.IsnameNull Then
                    Return """"""
                Else
                    Return CType(Me(Me.tableSize.nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSize.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableSize.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableSize.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableSize.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableSize.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableSize.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableSize.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SizeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SizeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SizeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SizeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
