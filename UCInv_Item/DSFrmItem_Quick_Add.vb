'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmItem_Quick_Add
    Inherits DataSet
    
    Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
    
    Private tableinv_price_code As inv_price_codeDataTable
    
    Private tableTire_size As Tire_sizeDataTable
    
    Private tableinv_vendor As inv_vendorDataTable
    
    Private tableSideWall As SideWallDataTable
    
    Private tableLoadRange As LoadRangeDataTable
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableinv_item As inv_itemDataTable
    
    Private tableinv_tab_line As inv_tab_lineDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
                Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
            End If
            If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
                Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
            End If
            If (Not (ds.Tables("Tire_size")) Is Nothing) Then
                Me.Tables.Add(New Tire_sizeDataTable(ds.Tables("Tire_size")))
            End If
            If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
            End If
            If (Not (ds.Tables("SideWall")) Is Nothing) Then
                Me.Tables.Add(New SideWallDataTable(ds.Tables("SideWall")))
            End If
            If (Not (ds.Tables("LoadRange")) Is Nothing) Then
                Me.Tables.Add(New LoadRangeDataTable(ds.Tables("LoadRange")))
            End If
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("inv_item")) Is Nothing) Then
                Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
            End If
            If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_quick_refrence As inv_item_quick_refrenceDataTable
        Get
            Return Me.tableinv_item_quick_refrence
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code As inv_price_codeDataTable
        Get
            Return Me.tableinv_price_code
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tire_size As Tire_sizeDataTable
        Get
            Return Me.tableTire_size
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_vendor As inv_vendorDataTable
        Get
            Return Me.tableinv_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SideWall As SideWallDataTable
        Get
            Return Me.tableSideWall
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LoadRange As LoadRangeDataTable
        Get
            Return Me.tableLoadRange
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item As inv_itemDataTable
        Get
            Return Me.tableinv_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_line As inv_tab_lineDataTable
        Get
            Return Me.tableinv_tab_line
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmItem_Quick_Add = CType(MyBase.Clone,DSFrmItem_Quick_Add)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
            Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
        End If
        If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
            Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
        End If
        If (Not (ds.Tables("Tire_size")) Is Nothing) Then
            Me.Tables.Add(New Tire_sizeDataTable(ds.Tables("Tire_size")))
        End If
        If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
        End If
        If (Not (ds.Tables("SideWall")) Is Nothing) Then
            Me.Tables.Add(New SideWallDataTable(ds.Tables("SideWall")))
        End If
        If (Not (ds.Tables("LoadRange")) Is Nothing) Then
            Me.Tables.Add(New LoadRangeDataTable(ds.Tables("LoadRange")))
        End If
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("inv_item")) Is Nothing) Then
            Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
        End If
        If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_item_quick_refrence = CType(Me.Tables("inv_item_quick_refrence"),inv_item_quick_refrenceDataTable)
        If (Not (Me.tableinv_item_quick_refrence) Is Nothing) Then
            Me.tableinv_item_quick_refrence.InitVars
        End If
        Me.tableinv_price_code = CType(Me.Tables("inv_price_code"),inv_price_codeDataTable)
        If (Not (Me.tableinv_price_code) Is Nothing) Then
            Me.tableinv_price_code.InitVars
        End If
        Me.tableTire_size = CType(Me.Tables("Tire_size"),Tire_sizeDataTable)
        If (Not (Me.tableTire_size) Is Nothing) Then
            Me.tableTire_size.InitVars
        End If
        Me.tableinv_vendor = CType(Me.Tables("inv_vendor"),inv_vendorDataTable)
        If (Not (Me.tableinv_vendor) Is Nothing) Then
            Me.tableinv_vendor.InitVars
        End If
        Me.tableSideWall = CType(Me.Tables("SideWall"),SideWallDataTable)
        If (Not (Me.tableSideWall) Is Nothing) Then
            Me.tableSideWall.InitVars
        End If
        Me.tableLoadRange = CType(Me.Tables("LoadRange"),LoadRangeDataTable)
        If (Not (Me.tableLoadRange) Is Nothing) Then
            Me.tableLoadRange.InitVars
        End If
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableinv_item = CType(Me.Tables("inv_item"),inv_itemDataTable)
        If (Not (Me.tableinv_item) Is Nothing) Then
            Me.tableinv_item.InitVars
        End If
        Me.tableinv_tab_line = CType(Me.Tables("inv_tab_line"),inv_tab_lineDataTable)
        If (Not (Me.tableinv_tab_line) Is Nothing) Then
            Me.tableinv_tab_line.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmItem_Quick_Add"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmItem_Quick_Add.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_item_quick_refrence = New inv_item_quick_refrenceDataTable
        Me.Tables.Add(Me.tableinv_item_quick_refrence)
        Me.tableinv_price_code = New inv_price_codeDataTable
        Me.Tables.Add(Me.tableinv_price_code)
        Me.tableTire_size = New Tire_sizeDataTable
        Me.Tables.Add(Me.tableTire_size)
        Me.tableinv_vendor = New inv_vendorDataTable
        Me.Tables.Add(Me.tableinv_vendor)
        Me.tableSideWall = New SideWallDataTable
        Me.Tables.Add(Me.tableSideWall)
        Me.tableLoadRange = New LoadRangeDataTable
        Me.Tables.Add(Me.tableLoadRange)
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableinv_item = New inv_itemDataTable
        Me.Tables.Add(Me.tableinv_item)
        Me.tableinv_tab_line = New inv_tab_lineDataTable
        Me.Tables.Add(Me.tableinv_tab_line)
    End Sub
    
    Private Function ShouldSerializeinv_item_quick_refrence() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTire_size() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSideWall() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLoadRange() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_line() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_item_quick_refrenceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_quick_refrenceRowChangeEvent)
    
    Public Delegate Sub inv_price_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_codeRowChangeEvent)
    
    Public Delegate Sub Tire_sizeRowChangeEventHandler(ByVal sender As Object, ByVal e As Tire_sizeRowChangeEvent)
    
    Public Delegate Sub inv_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_vendorRowChangeEvent)
    
    Public Delegate Sub SideWallRowChangeEventHandler(ByVal sender As Object, ByVal e As SideWallRowChangeEvent)
    
    Public Delegate Sub LoadRangeRowChangeEventHandler(ByVal sender As Object, ByVal e As LoadRangeRowChangeEvent)
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub inv_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemRowChangeEvent)
    
    Public Delegate Sub inv_tab_lineRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_lineRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_quick_refrence As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_quick_refrence")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_quick_refrenceRow
            Get
                Return CType(Me.Rows(index),inv_item_quick_refrenceRow)
            End Get
        End Property
        
        Public Event inv_item_quick_refrenceRowChanged As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowChanging As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleted As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleting As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_quick_refrenceRow(ByVal cod_quick_refrence As String, ByVal desc_quick_refrence As String) As inv_item_quick_refrenceRow
            Dim rowinv_item_quick_refrenceRow As inv_item_quick_refrenceRow = CType(Me.NewRow,inv_item_quick_refrenceRow)
            rowinv_item_quick_refrenceRow.ItemArray = New Object() {cod_quick_refrence, desc_quick_refrence}
            Me.Rows.Add(rowinv_item_quick_refrenceRow)
            Return rowinv_item_quick_refrenceRow
        End Function
        
        Public Function FindBycod_quick_refrence(ByVal cod_quick_refrence As String) As inv_item_quick_refrenceRow
            Return CType(Me.Rows.Find(New Object() {cod_quick_refrence}),inv_item_quick_refrenceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_quick_refrenceDataTable = CType(MyBase.Clone,inv_item_quick_refrenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_quick_refrenceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_quick_refrence}, true))
            Me.columncod_quick_refrence.AllowDBNull = false
            Me.columncod_quick_refrence.Unique = true
        End Sub
        
        Public Function Newinv_item_quick_refrenceRow() As inv_item_quick_refrenceRow
            Return CType(Me.NewRow,inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_quick_refrenceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_quick_refrenceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanged(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_quick_refrenceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanging(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleted(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleting(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRow
        Inherits DataRow
        
        Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_quick_refrence = CType(Me.Table,inv_item_quick_refrenceDataTable)
        End Sub
        
        Public Property cod_quick_refrence As String
            Get
                Return CType(Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_quick_refrenceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_quick_refrenceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_quick_refrenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Private columnprice1_c_l_a_p As DataColumn
        
        Private columnprice1_operator As DataColumn
        
        Private columnprice1_d_persent As DataColumn
        
        Private columnprice1_amount As DataColumn
        
        Private columnprice1_odd_price As DataColumn
        
        Private columnprice1_price_level As DataColumn
        
        Private columnprice2_c_l_a_p As DataColumn
        
        Private columnprice2_operator As DataColumn
        
        Private columnprice2_d_persent As DataColumn
        
        Private columnprice2_amount As DataColumn
        
        Private columnprice2_odd_price As DataColumn
        
        Private columnprice2_price_level As DataColumn
        
        Private columnprice3_c_l_a_p As DataColumn
        
        Private columnprice3_operator As DataColumn
        
        Private columnprice3_d_persent As DataColumn
        
        Private columnprice3_amount As DataColumn
        
        Private columnprice3_odd_price As DataColumn
        
        Private columnprice3_price_level As DataColumn
        
        Private columnprice4_c_l_a_p As DataColumn
        
        Private columnprice4_operator As DataColumn
        
        Private columnprice4_d_persent As DataColumn
        
        Private columnprice4_amount As DataColumn
        
        Private columnprice4_odd_price As DataColumn
        
        Private columnprice4_price_level As DataColumn
        
        Private columnprice5_c_l_a_p As DataColumn
        
        Private columnprice5_operator As DataColumn
        
        Private columnprice5_d_persent As DataColumn
        
        Private columnprice5_amount As DataColumn
        
        Private columnprice5_odd_price As DataColumn
        
        Private columnprice5_price_level As DataColumn
        
        Private columnprice6_c_l_a_p As DataColumn
        
        Private columnprice6_operator As DataColumn
        
        Private columnprice6_d_persent As DataColumn
        
        Private columnprice6_amount As DataColumn
        
        Private columnprice6_odd_price As DataColumn
        
        Private columnprice6_price_level As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Friend ReadOnly Property price1_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice1_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price1_operatorColumn As DataColumn
            Get
                Return Me.columnprice1_operator
            End Get
        End Property
        
        Friend ReadOnly Property price1_d_persentColumn As DataColumn
            Get
                Return Me.columnprice1_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price1_amountColumn As DataColumn
            Get
                Return Me.columnprice1_amount
            End Get
        End Property
        
        Friend ReadOnly Property price1_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice1_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price1_price_levelColumn As DataColumn
            Get
                Return Me.columnprice1_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price2_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice2_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price2_operatorColumn As DataColumn
            Get
                Return Me.columnprice2_operator
            End Get
        End Property
        
        Friend ReadOnly Property price2_d_persentColumn As DataColumn
            Get
                Return Me.columnprice2_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price2_amountColumn As DataColumn
            Get
                Return Me.columnprice2_amount
            End Get
        End Property
        
        Friend ReadOnly Property price2_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice2_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price2_price_levelColumn As DataColumn
            Get
                Return Me.columnprice2_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price3_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice3_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price3_operatorColumn As DataColumn
            Get
                Return Me.columnprice3_operator
            End Get
        End Property
        
        Friend ReadOnly Property price3_d_persentColumn As DataColumn
            Get
                Return Me.columnprice3_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price3_amountColumn As DataColumn
            Get
                Return Me.columnprice3_amount
            End Get
        End Property
        
        Friend ReadOnly Property price3_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice3_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price3_price_levelColumn As DataColumn
            Get
                Return Me.columnprice3_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price4_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice4_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price4_operatorColumn As DataColumn
            Get
                Return Me.columnprice4_operator
            End Get
        End Property
        
        Friend ReadOnly Property price4_d_persentColumn As DataColumn
            Get
                Return Me.columnprice4_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price4_amountColumn As DataColumn
            Get
                Return Me.columnprice4_amount
            End Get
        End Property
        
        Friend ReadOnly Property price4_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice4_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price4_price_levelColumn As DataColumn
            Get
                Return Me.columnprice4_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price5_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice5_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price5_operatorColumn As DataColumn
            Get
                Return Me.columnprice5_operator
            End Get
        End Property
        
        Friend ReadOnly Property price5_d_persentColumn As DataColumn
            Get
                Return Me.columnprice5_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price5_amountColumn As DataColumn
            Get
                Return Me.columnprice5_amount
            End Get
        End Property
        
        Friend ReadOnly Property price5_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice5_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price5_price_levelColumn As DataColumn
            Get
                Return Me.columnprice5_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price6_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice6_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price6_operatorColumn As DataColumn
            Get
                Return Me.columnprice6_operator
            End Get
        End Property
        
        Friend ReadOnly Property price6_d_persentColumn As DataColumn
            Get
                Return Me.columnprice6_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price6_amountColumn As DataColumn
            Get
                Return Me.columnprice6_amount
            End Get
        End Property
        
        Friend ReadOnly Property price6_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice6_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price6_price_levelColumn As DataColumn
            Get
                Return Me.columnprice6_price_level
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_codeRow
            Get
                Return CType(Me.Rows(index),inv_price_codeRow)
            End Get
        End Property
        
        Public Event inv_price_codeRowChanged As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowChanging As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleted As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleting As inv_price_codeRowChangeEventHandler
        
        Public Overloads Sub Addinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_codeRow( _
                    ByVal price_code As String,  _
                    ByVal desc_price_code As String,  _
                    ByVal price1_c_l_a_p As String,  _
                    ByVal price1_operator As String,  _
                    ByVal price1_d_persent As String,  _
                    ByVal price1_amount As Single,  _
                    ByVal price1_odd_price As Single,  _
                    ByVal price1_price_level As String,  _
                    ByVal price2_c_l_a_p As String,  _
                    ByVal price2_operator As String,  _
                    ByVal price2_d_persent As String,  _
                    ByVal price2_amount As Single,  _
                    ByVal price2_odd_price As Single,  _
                    ByVal price2_price_level As String,  _
                    ByVal price3_c_l_a_p As String,  _
                    ByVal price3_operator As String,  _
                    ByVal price3_d_persent As String,  _
                    ByVal price3_amount As Single,  _
                    ByVal price3_odd_price As Single,  _
                    ByVal price3_price_level As String,  _
                    ByVal price4_c_l_a_p As String,  _
                    ByVal price4_operator As String,  _
                    ByVal price4_d_persent As String,  _
                    ByVal price4_amount As Single,  _
                    ByVal price4_odd_price As Single,  _
                    ByVal price4_price_level As String,  _
                    ByVal price5_c_l_a_p As String,  _
                    ByVal price5_operator As String,  _
                    ByVal price5_d_persent As String,  _
                    ByVal price5_amount As Single,  _
                    ByVal price5_odd_price As Single,  _
                    ByVal price5_price_level As String,  _
                    ByVal price6_c_l_a_p As String,  _
                    ByVal price6_operator As String,  _
                    ByVal price6_d_persent As String,  _
                    ByVal price6_amount As Single,  _
                    ByVal price6_odd_price As Single,  _
                    ByVal price6_price_level As String,  _
                    ByVal special_notice As String) As inv_price_codeRow
            Dim rowinv_price_codeRow As inv_price_codeRow = CType(Me.NewRow,inv_price_codeRow)
            rowinv_price_codeRow.ItemArray = New Object() {price_code, desc_price_code, price1_c_l_a_p, price1_operator, price1_d_persent, price1_amount, price1_odd_price, price1_price_level, price2_c_l_a_p, price2_operator, price2_d_persent, price2_amount, price2_odd_price, price2_price_level, price3_c_l_a_p, price3_operator, price3_d_persent, price3_amount, price3_odd_price, price3_price_level, price4_c_l_a_p, price4_operator, price4_d_persent, price4_amount, price4_odd_price, price4_price_level, price5_c_l_a_p, price5_operator, price5_d_persent, price5_amount, price5_odd_price, price5_price_level, price6_c_l_a_p, price6_operator, price6_d_persent, price6_amount, price6_odd_price, price6_price_level, special_notice}
            Me.Rows.Add(rowinv_price_codeRow)
            Return rowinv_price_codeRow
        End Function
        
        Public Function FindByprice_code(ByVal price_code As String) As inv_price_codeRow
            Return CType(Me.Rows.Find(New Object() {price_code}),inv_price_codeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_codeDataTable = CType(MyBase.Clone,inv_price_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_codeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
            Me.columnprice1_c_l_a_p = Me.Columns("price1_c_l_a_p")
            Me.columnprice1_operator = Me.Columns("price1_operator")
            Me.columnprice1_d_persent = Me.Columns("price1_d_persent")
            Me.columnprice1_amount = Me.Columns("price1_amount")
            Me.columnprice1_odd_price = Me.Columns("price1_odd_price")
            Me.columnprice1_price_level = Me.Columns("price1_price_level")
            Me.columnprice2_c_l_a_p = Me.Columns("price2_c_l_a_p")
            Me.columnprice2_operator = Me.Columns("price2_operator")
            Me.columnprice2_d_persent = Me.Columns("price2_d_persent")
            Me.columnprice2_amount = Me.Columns("price2_amount")
            Me.columnprice2_odd_price = Me.Columns("price2_odd_price")
            Me.columnprice2_price_level = Me.Columns("price2_price_level")
            Me.columnprice3_c_l_a_p = Me.Columns("price3_c_l_a_p")
            Me.columnprice3_operator = Me.Columns("price3_operator")
            Me.columnprice3_d_persent = Me.Columns("price3_d_persent")
            Me.columnprice3_amount = Me.Columns("price3_amount")
            Me.columnprice3_odd_price = Me.Columns("price3_odd_price")
            Me.columnprice3_price_level = Me.Columns("price3_price_level")
            Me.columnprice4_c_l_a_p = Me.Columns("price4_c_l_a_p")
            Me.columnprice4_operator = Me.Columns("price4_operator")
            Me.columnprice4_d_persent = Me.Columns("price4_d_persent")
            Me.columnprice4_amount = Me.Columns("price4_amount")
            Me.columnprice4_odd_price = Me.Columns("price4_odd_price")
            Me.columnprice4_price_level = Me.Columns("price4_price_level")
            Me.columnprice5_c_l_a_p = Me.Columns("price5_c_l_a_p")
            Me.columnprice5_operator = Me.Columns("price5_operator")
            Me.columnprice5_d_persent = Me.Columns("price5_d_persent")
            Me.columnprice5_amount = Me.Columns("price5_amount")
            Me.columnprice5_odd_price = Me.Columns("price5_odd_price")
            Me.columnprice5_price_level = Me.Columns("price5_price_level")
            Me.columnprice6_c_l_a_p = Me.Columns("price6_c_l_a_p")
            Me.columnprice6_operator = Me.Columns("price6_operator")
            Me.columnprice6_d_persent = Me.Columns("price6_d_persent")
            Me.columnprice6_amount = Me.Columns("price6_amount")
            Me.columnprice6_odd_price = Me.Columns("price6_odd_price")
            Me.columnprice6_price_level = Me.Columns("price6_price_level")
            Me.columnspecial_notice = Me.Columns("special_notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice1_c_l_a_p = New DataColumn("price1_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_c_l_a_p)
            Me.columnprice1_operator = New DataColumn("price1_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_operator)
            Me.columnprice1_d_persent = New DataColumn("price1_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_d_persent)
            Me.columnprice1_amount = New DataColumn("price1_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_amount)
            Me.columnprice1_odd_price = New DataColumn("price1_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_odd_price)
            Me.columnprice1_price_level = New DataColumn("price1_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_price_level)
            Me.columnprice2_c_l_a_p = New DataColumn("price2_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_c_l_a_p)
            Me.columnprice2_operator = New DataColumn("price2_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_operator)
            Me.columnprice2_d_persent = New DataColumn("price2_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_d_persent)
            Me.columnprice2_amount = New DataColumn("price2_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_amount)
            Me.columnprice2_odd_price = New DataColumn("price2_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_odd_price)
            Me.columnprice2_price_level = New DataColumn("price2_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_price_level)
            Me.columnprice3_c_l_a_p = New DataColumn("price3_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_c_l_a_p)
            Me.columnprice3_operator = New DataColumn("price3_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_operator)
            Me.columnprice3_d_persent = New DataColumn("price3_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_d_persent)
            Me.columnprice3_amount = New DataColumn("price3_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_amount)
            Me.columnprice3_odd_price = New DataColumn("price3_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_odd_price)
            Me.columnprice3_price_level = New DataColumn("price3_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_price_level)
            Me.columnprice4_c_l_a_p = New DataColumn("price4_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_c_l_a_p)
            Me.columnprice4_operator = New DataColumn("price4_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_operator)
            Me.columnprice4_d_persent = New DataColumn("price4_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_d_persent)
            Me.columnprice4_amount = New DataColumn("price4_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_amount)
            Me.columnprice4_odd_price = New DataColumn("price4_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_odd_price)
            Me.columnprice4_price_level = New DataColumn("price4_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_price_level)
            Me.columnprice5_c_l_a_p = New DataColumn("price5_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_c_l_a_p)
            Me.columnprice5_operator = New DataColumn("price5_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_operator)
            Me.columnprice5_d_persent = New DataColumn("price5_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_d_persent)
            Me.columnprice5_amount = New DataColumn("price5_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_amount)
            Me.columnprice5_odd_price = New DataColumn("price5_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_odd_price)
            Me.columnprice5_price_level = New DataColumn("price5_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_price_level)
            Me.columnprice6_c_l_a_p = New DataColumn("price6_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_c_l_a_p)
            Me.columnprice6_operator = New DataColumn("price6_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_operator)
            Me.columnprice6_d_persent = New DataColumn("price6_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_d_persent)
            Me.columnprice6_amount = New DataColumn("price6_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_amount)
            Me.columnprice6_odd_price = New DataColumn("price6_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_odd_price)
            Me.columnprice6_price_level = New DataColumn("price6_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_price_level)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnprice_code}, true))
            Me.columnprice_code.AllowDBNull = false
            Me.columnprice_code.Unique = true
        End Sub
        
        Public Function Newinv_price_codeRow() As inv_price_codeRow
            Return CType(Me.NewRow,inv_price_codeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_codeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_codeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanged(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanging(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleted(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleting(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRow
        Inherits DataRow
        
        Private tableinv_price_code As inv_price_codeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code = CType(Me.Table,inv_price_codeDataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Property price1_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price1_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_operatorColumn) = value
            End Set
        End Property
        
        Public Property price1_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price1_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_amountColumn) = value
            End Set
        End Property
        
        Public Property price1_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price1_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price2_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price2_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_operatorColumn) = value
            End Set
        End Property
        
        Public Property price2_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price2_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_amountColumn) = value
            End Set
        End Property
        
        Public Property price2_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price2_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price3_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price3_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_operatorColumn) = value
            End Set
        End Property
        
        Public Property price3_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price3_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_amountColumn) = value
            End Set
        End Property
        
        Public Property price3_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price3_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price4_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price4_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_operatorColumn) = value
            End Set
        End Property
        
        Public Property price4_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price4_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_amountColumn) = value
            End Set
        End Property
        
        Public Property price4_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price4_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price5_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price5_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_operatorColumn) = value
            End Set
        End Property
        
        Public Property price5_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price5_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_amountColumn) = value
            End Set
        End Property
        
        Public Property price5_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price5_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price6_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price6_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_operatorColumn) = value
            End Set
        End Property
        
        Public Property price6_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price6_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_amountColumn) = value
            End Set
        End Property
        
        Public Property price6_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price6_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_price_levelColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.special_noticeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice1_c_l_a_pNull()
            Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_operatorColumn)
        End Function
        
        Public Sub Setprice1_operatorNull()
            Me(Me.tableinv_price_code.price1_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_d_persentColumn)
        End Function
        
        Public Sub Setprice1_d_persentNull()
            Me(Me.tableinv_price_code.price1_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_amountColumn)
        End Function
        
        Public Sub Setprice1_amountNull()
            Me(Me.tableinv_price_code.price1_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_odd_priceColumn)
        End Function
        
        Public Sub Setprice1_odd_priceNull()
            Me(Me.tableinv_price_code.price1_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_price_levelColumn)
        End Function
        
        Public Sub Setprice1_price_levelNull()
            Me(Me.tableinv_price_code.price1_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice2_c_l_a_pNull()
            Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_operatorColumn)
        End Function
        
        Public Sub Setprice2_operatorNull()
            Me(Me.tableinv_price_code.price2_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_d_persentColumn)
        End Function
        
        Public Sub Setprice2_d_persentNull()
            Me(Me.tableinv_price_code.price2_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_amountColumn)
        End Function
        
        Public Sub Setprice2_amountNull()
            Me(Me.tableinv_price_code.price2_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_odd_priceColumn)
        End Function
        
        Public Sub Setprice2_odd_priceNull()
            Me(Me.tableinv_price_code.price2_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_price_levelColumn)
        End Function
        
        Public Sub Setprice2_price_levelNull()
            Me(Me.tableinv_price_code.price2_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice3_c_l_a_pNull()
            Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_operatorColumn)
        End Function
        
        Public Sub Setprice3_operatorNull()
            Me(Me.tableinv_price_code.price3_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_d_persentColumn)
        End Function
        
        Public Sub Setprice3_d_persentNull()
            Me(Me.tableinv_price_code.price3_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_amountColumn)
        End Function
        
        Public Sub Setprice3_amountNull()
            Me(Me.tableinv_price_code.price3_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_odd_priceColumn)
        End Function
        
        Public Sub Setprice3_odd_priceNull()
            Me(Me.tableinv_price_code.price3_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_price_levelColumn)
        End Function
        
        Public Sub Setprice3_price_levelNull()
            Me(Me.tableinv_price_code.price3_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice4_c_l_a_pNull()
            Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_operatorColumn)
        End Function
        
        Public Sub Setprice4_operatorNull()
            Me(Me.tableinv_price_code.price4_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_d_persentColumn)
        End Function
        
        Public Sub Setprice4_d_persentNull()
            Me(Me.tableinv_price_code.price4_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_amountColumn)
        End Function
        
        Public Sub Setprice4_amountNull()
            Me(Me.tableinv_price_code.price4_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_odd_priceColumn)
        End Function
        
        Public Sub Setprice4_odd_priceNull()
            Me(Me.tableinv_price_code.price4_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_price_levelColumn)
        End Function
        
        Public Sub Setprice4_price_levelNull()
            Me(Me.tableinv_price_code.price4_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice5_c_l_a_pNull()
            Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_operatorColumn)
        End Function
        
        Public Sub Setprice5_operatorNull()
            Me(Me.tableinv_price_code.price5_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_d_persentColumn)
        End Function
        
        Public Sub Setprice5_d_persentNull()
            Me(Me.tableinv_price_code.price5_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_amountColumn)
        End Function
        
        Public Sub Setprice5_amountNull()
            Me(Me.tableinv_price_code.price5_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_odd_priceColumn)
        End Function
        
        Public Sub Setprice5_odd_priceNull()
            Me(Me.tableinv_price_code.price5_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_price_levelColumn)
        End Function
        
        Public Sub Setprice5_price_levelNull()
            Me(Me.tableinv_price_code.price5_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice6_c_l_a_pNull()
            Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_operatorColumn)
        End Function
        
        Public Sub Setprice6_operatorNull()
            Me(Me.tableinv_price_code.price6_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_d_persentColumn)
        End Function
        
        Public Sub Setprice6_d_persentNull()
            Me(Me.tableinv_price_code.price6_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_amountColumn)
        End Function
        
        Public Sub Setprice6_amountNull()
            Me(Me.tableinv_price_code.price6_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_odd_priceColumn)
        End Function
        
        Public Sub Setprice6_odd_priceNull()
            Me(Me.tableinv_price_code.price6_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_price_levelColumn)
        End Function
        
        Public Sub Setprice6_price_levelNull()
            Me(Me.tableinv_price_code.price6_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_price_code.special_noticeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_codeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_codeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("Tire_size")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tire_sizeRow
            Get
                Return CType(Me.Rows(index),Tire_sizeRow)
            End Get
        End Property
        
        Public Event Tire_sizeRowChanged As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowChanging As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowDeleted As Tire_sizeRowChangeEventHandler
        
        Public Event Tire_sizeRowDeleting As Tire_sizeRowChangeEventHandler
        
        Public Overloads Sub AddTire_sizeRow(ByVal row As Tire_sizeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTire_sizeRow(ByVal cod_table_public As String, ByVal desc_table As String) As Tire_sizeRow
            Dim rowTire_sizeRow As Tire_sizeRow = CType(Me.NewRow,Tire_sizeRow)
            rowTire_sizeRow.ItemArray = New Object() {cod_table_public, desc_table}
            Me.Rows.Add(rowTire_sizeRow)
            Return rowTire_sizeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tire_sizeDataTable = CType(MyBase.Clone,Tire_sizeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tire_sizeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewTire_sizeRow() As Tire_sizeRow
            Return CType(Me.NewRow,Tire_sizeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tire_sizeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tire_sizeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tire_sizeRowChangedEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowChanged(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tire_sizeRowChangingEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowChanging(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tire_sizeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowDeleted(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tire_sizeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tire_sizeRowDeleting(Me, New Tire_sizeRowChangeEvent(CType(e.Row,Tire_sizeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTire_sizeRow(ByVal row As Tire_sizeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeRow
        Inherits DataRow
        
        Private tableTire_size As Tire_sizeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTire_size = CType(Me.Table,Tire_sizeDataTable)
        End Sub
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableTire_size.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableTire_size.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableTire_size.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTire_size.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableTire_size.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableTire_size.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tire_sizeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tire_sizeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tire_sizeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tire_sizeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columncod_city As DataColumn
        
        Private columncod_state As DataColumn
        
        Private columnzipcode As DataColumn
        
        Private columnphone_main As DataColumn
        
        Private columnphone_cell As DataColumn
        
        Private columnphone_work As DataColumn
        
        Private columnphone_ext1 As DataColumn
        
        Private columnphone_ext2 As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnwww As DataColumn
        
        Private columnfederal_tax_id As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columnap_terms As DataColumn
        
        Private columnvendor_type As DataColumn
        
        Private columnclass_vendor As DataColumn
        
        Private columnbuyer_id As DataColumn
        
        Private columnvendor_since As DataColumn
        
        Private columnf_1099 As DataColumn
        
        Private columnon_hold As DataColumn
        
        Private columninactive As DataColumn
        
        Private columnnotes As DataColumn
        
        Private columncredit_limited As DataColumn
        
        Private columnremit_to_company As DataColumn
        
        Private columnremit_to_address As DataColumn
        
        Private columnremit_to_city As DataColumn
        
        Private columnremit_to_state As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property cod_cityColumn As DataColumn
            Get
                Return Me.columncod_city
            End Get
        End Property
        
        Friend ReadOnly Property cod_stateColumn As DataColumn
            Get
                Return Me.columncod_state
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property phone_mainColumn As DataColumn
            Get
                Return Me.columnphone_main
            End Get
        End Property
        
        Friend ReadOnly Property phone_cellColumn As DataColumn
            Get
                Return Me.columnphone_cell
            End Get
        End Property
        
        Friend ReadOnly Property phone_workColumn As DataColumn
            Get
                Return Me.columnphone_work
            End Get
        End Property
        
        Friend ReadOnly Property phone_ext1Column As DataColumn
            Get
                Return Me.columnphone_ext1
            End Get
        End Property
        
        Friend ReadOnly Property phone_ext2Column As DataColumn
            Get
                Return Me.columnphone_ext2
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property wwwColumn As DataColumn
            Get
                Return Me.columnwww
            End Get
        End Property
        
        Friend ReadOnly Property federal_tax_idColumn As DataColumn
            Get
                Return Me.columnfederal_tax_id
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property ap_termsColumn As DataColumn
            Get
                Return Me.columnap_terms
            End Get
        End Property
        
        Friend ReadOnly Property vendor_typeColumn As DataColumn
            Get
                Return Me.columnvendor_type
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property vendor_sinceColumn As DataColumn
            Get
                Return Me.columnvendor_since
            End Get
        End Property
        
        Friend ReadOnly Property f_1099Column As DataColumn
            Get
                Return Me.columnf_1099
            End Get
        End Property
        
        Friend ReadOnly Property on_holdColumn As DataColumn
            Get
                Return Me.columnon_hold
            End Get
        End Property
        
        Friend ReadOnly Property inactiveColumn As DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Friend ReadOnly Property credit_limitedColumn As DataColumn
            Get
                Return Me.columncredit_limited
            End Get
        End Property
        
        Friend ReadOnly Property remit_to_companyColumn As DataColumn
            Get
                Return Me.columnremit_to_company
            End Get
        End Property
        
        Friend ReadOnly Property remit_to_addressColumn As DataColumn
            Get
                Return Me.columnremit_to_address
            End Get
        End Property
        
        Friend ReadOnly Property remit_to_cityColumn As DataColumn
            Get
                Return Me.columnremit_to_city
            End Get
        End Property
        
        Friend ReadOnly Property remit_to_stateColumn As DataColumn
            Get
                Return Me.columnremit_to_state
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_vendorRow
            Get
                Return CType(Me.Rows(index),inv_vendorRow)
            End Get
        End Property
        
        Public Event inv_vendorRowChanged As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowChanging As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleted As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleting As inv_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_vendorRow( _
                    ByVal cod_vendor As String,  _
                    ByVal desc_vendor As String,  _
                    ByVal address As String,  _
                    ByVal cod_city As String,  _
                    ByVal cod_state As String,  _
                    ByVal zipcode As String,  _
                    ByVal phone_main As String,  _
                    ByVal phone_cell As String,  _
                    ByVal phone_work As String,  _
                    ByVal phone_ext1 As String,  _
                    ByVal phone_ext2 As String,  _
                    ByVal email As String,  _
                    ByVal www As String,  _
                    ByVal federal_tax_id As String,  _
                    ByVal social_security_no As String,  _
                    ByVal ap_terms As String,  _
                    ByVal vendor_type As String,  _
                    ByVal class_vendor As String,  _
                    ByVal buyer_id As String,  _
                    ByVal vendor_since As String,  _
                    ByVal f_1099 As Boolean,  _
                    ByVal on_hold As Boolean,  _
                    ByVal inactive As Boolean,  _
                    ByVal notes As String,  _
                    ByVal credit_limited As Single,  _
                    ByVal remit_to_company As String,  _
                    ByVal remit_to_address As String,  _
                    ByVal remit_to_city As String,  _
                    ByVal remit_to_state As String) As inv_vendorRow
            Dim rowinv_vendorRow As inv_vendorRow = CType(Me.NewRow,inv_vendorRow)
            rowinv_vendorRow.ItemArray = New Object() {cod_vendor, desc_vendor, address, cod_city, cod_state, zipcode, phone_main, phone_cell, phone_work, phone_ext1, phone_ext2, email, www, federal_tax_id, social_security_no, ap_terms, vendor_type, class_vendor, buyer_id, vendor_since, f_1099, on_hold, inactive, notes, credit_limited, remit_to_company, remit_to_address, remit_to_city, remit_to_state}
            Me.Rows.Add(rowinv_vendorRow)
            Return rowinv_vendorRow
        End Function
        
        Public Function FindBycod_vendor(ByVal cod_vendor As String) As inv_vendorRow
            Return CType(Me.Rows.Find(New Object() {cod_vendor}),inv_vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_vendorDataTable = CType(MyBase.Clone,inv_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnaddress = Me.Columns("address")
            Me.columncod_city = Me.Columns("cod_city")
            Me.columncod_state = Me.Columns("cod_state")
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columnphone_main = Me.Columns("phone_main")
            Me.columnphone_cell = Me.Columns("phone_cell")
            Me.columnphone_work = Me.Columns("phone_work")
            Me.columnphone_ext1 = Me.Columns("phone_ext1")
            Me.columnphone_ext2 = Me.Columns("phone_ext2")
            Me.columnemail = Me.Columns("email")
            Me.columnwww = Me.Columns("www")
            Me.columnfederal_tax_id = Me.Columns("federal_tax_id")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columnap_terms = Me.Columns("ap_terms")
            Me.columnvendor_type = Me.Columns("vendor_type")
            Me.columnclass_vendor = Me.Columns("class_vendor")
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columnvendor_since = Me.Columns("vendor_since")
            Me.columnf_1099 = Me.Columns("f_1099")
            Me.columnon_hold = Me.Columns("on_hold")
            Me.columninactive = Me.Columns("inactive")
            Me.columnnotes = Me.Columns("notes")
            Me.columncredit_limited = Me.Columns("credit_limited")
            Me.columnremit_to_company = Me.Columns("remit_to_company")
            Me.columnremit_to_address = Me.Columns("remit_to_address")
            Me.columnremit_to_city = Me.Columns("remit_to_city")
            Me.columnremit_to_state = Me.Columns("remit_to_state")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columncod_city = New DataColumn("cod_city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_city)
            Me.columncod_state = New DataColumn("cod_state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_state)
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columnphone_main = New DataColumn("phone_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main)
            Me.columnphone_cell = New DataColumn("phone_cell", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_cell)
            Me.columnphone_work = New DataColumn("phone_work", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_work)
            Me.columnphone_ext1 = New DataColumn("phone_ext1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_ext1)
            Me.columnphone_ext2 = New DataColumn("phone_ext2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_ext2)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnwww = New DataColumn("www", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwww)
            Me.columnfederal_tax_id = New DataColumn("federal_tax_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfederal_tax_id)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columnap_terms = New DataColumn("ap_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnap_terms)
            Me.columnvendor_type = New DataColumn("vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_type)
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columnvendor_since = New DataColumn("vendor_since", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_since)
            Me.columnf_1099 = New DataColumn("f_1099", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_1099)
            Me.columnon_hold = New DataColumn("on_hold", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hold)
            Me.columninactive = New DataColumn("inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninactive)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.columncredit_limited = New DataColumn("credit_limited", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_limited)
            Me.columnremit_to_company = New DataColumn("remit_to_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremit_to_company)
            Me.columnremit_to_address = New DataColumn("remit_to_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremit_to_address)
            Me.columnremit_to_city = New DataColumn("remit_to_city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremit_to_city)
            Me.columnremit_to_state = New DataColumn("remit_to_state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremit_to_state)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vendor}, true))
            Me.columncod_vendor.AllowDBNull = false
            Me.columncod_vendor.Unique = true
        End Sub
        
        Public Function Newinv_vendorRow() As inv_vendorRow
            Return CType(Me.NewRow,inv_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanged(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanging(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleted(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleting(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRow
        Inherits DataRow
        
        Private tableinv_vendor As inv_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_vendor = CType(Me.Table,inv_vendorDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.addressColumn) = value
            End Set
        End Property
        
        Public Property cod_city As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.cod_cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.cod_cityColumn) = value
            End Set
        End Property
        
        Public Property cod_state As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.cod_stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.cod_stateColumn) = value
            End Set
        End Property
        
        Public Property zipcode As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.zipcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property phone_main As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_mainColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_mainColumn) = value
            End Set
        End Property
        
        Public Property phone_cell As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_cellColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_cellColumn) = value
            End Set
        End Property
        
        Public Property phone_work As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_workColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_workColumn) = value
            End Set
        End Property
        
        Public Property phone_ext1 As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_ext1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_ext1Column) = value
            End Set
        End Property
        
        Public Property phone_ext2 As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_ext2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_ext2Column) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.emailColumn) = value
            End Set
        End Property
        
        Public Property www As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.wwwColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.wwwColumn) = value
            End Set
        End Property
        
        Public Property federal_tax_id As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.federal_tax_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.federal_tax_idColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property ap_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.ap_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.ap_termsColumn) = value
            End Set
        End Property
        
        Public Property vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property class_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.class_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.class_vendorColumn) = value
            End Set
        End Property
        
        Public Property buyer_id As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.buyer_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property vendor_since As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.vendor_sinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.vendor_sinceColumn) = value
            End Set
        End Property
        
        Public Property f_1099 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.f_1099Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.f_1099Column) = value
            End Set
        End Property
        
        Public Property on_hold As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.on_holdColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.on_holdColumn) = value
            End Set
        End Property
        
        Public Property inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.inactiveColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.notesColumn) = value
            End Set
        End Property
        
        Public Property credit_limited As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.credit_limitedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.credit_limitedColumn) = value
            End Set
        End Property
        
        Public Property remit_to_company As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.remit_to_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.remit_to_companyColumn) = value
            End Set
        End Property
        
        Public Property remit_to_address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.remit_to_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.remit_to_addressColumn) = value
            End Set
        End Property
        
        Public Property remit_to_city As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.remit_to_cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.remit_to_cityColumn) = value
            End Set
        End Property
        
        Public Property remit_to_state As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.remit_to_stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.remit_to_stateColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableinv_vendor.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableinv_vendor.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_cityNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.cod_cityColumn)
        End Function
        
        Public Sub Setcod_cityNull()
            Me(Me.tableinv_vendor.cod_cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_stateNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.cod_stateColumn)
        End Function
        
        Public Sub Setcod_stateNull()
            Me(Me.tableinv_vendor.cod_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipcodeNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.zipcodeColumn)
        End Function
        
        Public Sub SetzipcodeNull()
            Me(Me.tableinv_vendor.zipcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_mainNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_mainColumn)
        End Function
        
        Public Sub Setphone_mainNull()
            Me(Me.tableinv_vendor.phone_mainColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_cellNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_cellColumn)
        End Function
        
        Public Sub Setphone_cellNull()
            Me(Me.tableinv_vendor.phone_cellColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_workNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_workColumn)
        End Function
        
        Public Sub Setphone_workNull()
            Me(Me.tableinv_vendor.phone_workColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_ext1Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_ext1Column)
        End Function
        
        Public Sub Setphone_ext1Null()
            Me(Me.tableinv_vendor.phone_ext1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_ext2Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_ext2Column)
        End Function
        
        Public Sub Setphone_ext2Null()
            Me(Me.tableinv_vendor.phone_ext2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableinv_vendor.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IswwwNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.wwwColumn)
        End Function
        
        Public Sub SetwwwNull()
            Me(Me.tableinv_vendor.wwwColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfederal_tax_idNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.federal_tax_idColumn)
        End Function
        
        Public Sub Setfederal_tax_idNull()
            Me(Me.tableinv_vendor.federal_tax_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tableinv_vendor.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isap_termsNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.ap_termsColumn)
        End Function
        
        Public Sub Setap_termsNull()
            Me(Me.tableinv_vendor.ap_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.vendor_typeColumn)
        End Function
        
        Public Sub Setvendor_typeNull()
            Me(Me.tableinv_vendor.vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isclass_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.class_vendorColumn)
        End Function
        
        Public Sub Setclass_vendorNull()
            Me(Me.tableinv_vendor.class_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbuyer_idNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.buyer_idColumn)
        End Function
        
        Public Sub Setbuyer_idNull()
            Me(Me.tableinv_vendor.buyer_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_sinceNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.vendor_sinceColumn)
        End Function
        
        Public Sub Setvendor_sinceNull()
            Me(Me.tableinv_vendor.vendor_sinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_1099Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.f_1099Column)
        End Function
        
        Public Sub Setf_1099Null()
            Me(Me.tableinv_vendor.f_1099Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_holdNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.on_holdColumn)
        End Function
        
        Public Sub Seton_holdNull()
            Me(Me.tableinv_vendor.on_holdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.inactiveColumn)
        End Function
        
        Public Sub SetinactiveNull()
            Me(Me.tableinv_vendor.inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tableinv_vendor.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_limitedNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.credit_limitedColumn)
        End Function
        
        Public Sub Setcredit_limitedNull()
            Me(Me.tableinv_vendor.credit_limitedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isremit_to_companyNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.remit_to_companyColumn)
        End Function
        
        Public Sub Setremit_to_companyNull()
            Me(Me.tableinv_vendor.remit_to_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isremit_to_addressNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.remit_to_addressColumn)
        End Function
        
        Public Sub Setremit_to_addressNull()
            Me(Me.tableinv_vendor.remit_to_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isremit_to_cityNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.remit_to_cityColumn)
        End Function
        
        Public Sub Setremit_to_cityNull()
            Me(Me.tableinv_vendor.remit_to_cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isremit_to_stateNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.remit_to_stateColumn)
        End Function
        
        Public Sub Setremit_to_stateNull()
            Me(Me.tableinv_vendor.remit_to_stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SideWallDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("SideWall")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SideWallRow
            Get
                Return CType(Me.Rows(index),SideWallRow)
            End Get
        End Property
        
        Public Event SideWallRowChanged As SideWallRowChangeEventHandler
        
        Public Event SideWallRowChanging As SideWallRowChangeEventHandler
        
        Public Event SideWallRowDeleted As SideWallRowChangeEventHandler
        
        Public Event SideWallRowDeleting As SideWallRowChangeEventHandler
        
        Public Overloads Sub AddSideWallRow(ByVal row As SideWallRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSideWallRow(ByVal cod_table_public As String, ByVal desc_table As String) As SideWallRow
            Dim rowSideWallRow As SideWallRow = CType(Me.NewRow,SideWallRow)
            rowSideWallRow.ItemArray = New Object() {cod_table_public, desc_table}
            Me.Rows.Add(rowSideWallRow)
            Return rowSideWallRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SideWallDataTable = CType(MyBase.Clone,SideWallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SideWallDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewSideWallRow() As SideWallRow
            Return CType(Me.NewRow,SideWallRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SideWallRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SideWallRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SideWallRowChangedEvent) Is Nothing) Then
                RaiseEvent SideWallRowChanged(Me, New SideWallRowChangeEvent(CType(e.Row,SideWallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SideWallRowChangingEvent) Is Nothing) Then
                RaiseEvent SideWallRowChanging(Me, New SideWallRowChangeEvent(CType(e.Row,SideWallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SideWallRowDeletedEvent) Is Nothing) Then
                RaiseEvent SideWallRowDeleted(Me, New SideWallRowChangeEvent(CType(e.Row,SideWallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SideWallRowDeletingEvent) Is Nothing) Then
                RaiseEvent SideWallRowDeleting(Me, New SideWallRowChangeEvent(CType(e.Row,SideWallRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSideWallRow(ByVal row As SideWallRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SideWallRow
        Inherits DataRow
        
        Private tableSideWall As SideWallDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSideWall = CType(Me.Table,SideWallDataTable)
        End Sub
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableSideWall.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableSideWall.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableSideWall.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSideWall.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableSideWall.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableSideWall.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SideWallRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SideWallRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SideWallRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SideWallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LoadRangeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("LoadRange")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LoadRangeRow
            Get
                Return CType(Me.Rows(index),LoadRangeRow)
            End Get
        End Property
        
        Public Event LoadRangeRowChanged As LoadRangeRowChangeEventHandler
        
        Public Event LoadRangeRowChanging As LoadRangeRowChangeEventHandler
        
        Public Event LoadRangeRowDeleted As LoadRangeRowChangeEventHandler
        
        Public Event LoadRangeRowDeleting As LoadRangeRowChangeEventHandler
        
        Public Overloads Sub AddLoadRangeRow(ByVal row As LoadRangeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLoadRangeRow(ByVal cod_table_public As String, ByVal desc_table As String) As LoadRangeRow
            Dim rowLoadRangeRow As LoadRangeRow = CType(Me.NewRow,LoadRangeRow)
            rowLoadRangeRow.ItemArray = New Object() {cod_table_public, desc_table}
            Me.Rows.Add(rowLoadRangeRow)
            Return rowLoadRangeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LoadRangeDataTable = CType(MyBase.Clone,LoadRangeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LoadRangeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function NewLoadRangeRow() As LoadRangeRow
            Return CType(Me.NewRow,LoadRangeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LoadRangeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LoadRangeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LoadRangeRowChangedEvent) Is Nothing) Then
                RaiseEvent LoadRangeRowChanged(Me, New LoadRangeRowChangeEvent(CType(e.Row,LoadRangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LoadRangeRowChangingEvent) Is Nothing) Then
                RaiseEvent LoadRangeRowChanging(Me, New LoadRangeRowChangeEvent(CType(e.Row,LoadRangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LoadRangeRowDeletedEvent) Is Nothing) Then
                RaiseEvent LoadRangeRowDeleted(Me, New LoadRangeRowChangeEvent(CType(e.Row,LoadRangeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LoadRangeRowDeletingEvent) Is Nothing) Then
                RaiseEvent LoadRangeRowDeleting(Me, New LoadRangeRowChangeEvent(CType(e.Row,LoadRangeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLoadRangeRow(ByVal row As LoadRangeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LoadRangeRow
        Inherits DataRow
        
        Private tableLoadRange As LoadRangeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLoadRange = CType(Me.Table,LoadRangeDataTable)
        End Sub
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableLoadRange.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableLoadRange.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableLoadRange.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLoadRange.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableLoadRange.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableLoadRange.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LoadRangeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LoadRangeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LoadRangeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LoadRangeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnGL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal GL_account As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type, GL_account}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnGL_account = Me.Columns("GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableinv_tab_type_item.GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncod_quick_refrence As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnline As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnupc As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Private columnwheel_size As DataColumn
        
        Private columntire_size As DataColumn
        
        Private columnservice_description As DataColumn
        
        Private columnsidwall As DataColumn
        
        Private columnload_range As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnprice_code As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property upcColumn As DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Friend ReadOnly Property wheel_sizeColumn As DataColumn
            Get
                Return Me.columnwheel_size
            End Get
        End Property
        
        Friend ReadOnly Property tire_sizeColumn As DataColumn
            Get
                Return Me.columntire_size
            End Get
        End Property
        
        Friend ReadOnly Property service_descriptionColumn As DataColumn
            Get
                Return Me.columnservice_description
            End Get
        End Property
        
        Friend ReadOnly Property sidwallColumn As DataColumn
            Get
                Return Me.columnsidwall
            End Get
        End Property
        
        Friend ReadOnly Property load_rangeColumn As DataColumn
            Get
                Return Me.columnload_range
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemRow
            Get
                Return CType(Me.Rows(index),inv_itemRow)
            End Get
        End Property
        
        Public Event inv_itemRowChanged As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowChanging As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleted As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleting As inv_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemRow( _
                    ByVal item_no As String,  _
                    ByVal cod_item_type As String,  _
                    ByVal desc_item As String,  _
                    ByVal cod_quick_refrence As String,  _
                    ByVal taxable As Boolean,  _
                    ByVal line As String,  _
                    ByVal note As String,  _
                    ByVal picture() As Byte,  _
                    ByVal upc As String,  _
                    ByVal special_notice As String,  _
                    ByVal wheel_size As String,  _
                    ByVal tire_size As String,  _
                    ByVal service_description As String,  _
                    ByVal sidwall As String,  _
                    ByVal load_range As String,  _
                    ByVal cost As Single,  _
                    ByVal fet As Single,  _
                    ByVal price_code As String,  _
                    ByVal cod_vendor As String) As inv_itemRow
            Dim rowinv_itemRow As inv_itemRow = CType(Me.NewRow,inv_itemRow)
            rowinv_itemRow.ItemArray = New Object() {item_no, cod_item_type, desc_item, cod_quick_refrence, taxable, line, note, picture, upc, special_notice, wheel_size, tire_size, service_description, sidwall, load_range, cost, fet, price_code, cod_vendor}
            Me.Rows.Add(rowinv_itemRow)
            Return rowinv_itemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemDataTable = CType(MyBase.Clone,inv_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnline = Me.Columns("line")
            Me.columnnote = Me.Columns("note")
            Me.columnpicture = Me.Columns("picture")
            Me.columnupc = Me.Columns("upc")
            Me.columnspecial_notice = Me.Columns("special_notice")
            Me.columnwheel_size = Me.Columns("wheel_size")
            Me.columntire_size = Me.Columns("tire_size")
            Me.columnservice_description = Me.Columns("service_description")
            Me.columnsidwall = Me.Columns("sidwall")
            Me.columnload_range = Me.Columns("load_range")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
            Me.columnprice_code = Me.Columns("price_code")
            Me.columncod_vendor = Me.Columns("cod_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnupc = New DataColumn("upc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupc)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.columnwheel_size = New DataColumn("wheel_size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwheel_size)
            Me.columntire_size = New DataColumn("tire_size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntire_size)
            Me.columnservice_description = New DataColumn("service_description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_description)
            Me.columnsidwall = New DataColumn("sidwall", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsidwall)
            Me.columnload_range = New DataColumn("load_range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnload_range)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function Newinv_itemRow() As inv_itemRow
            Return CType(Me.NewRow,inv_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanged(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanging(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleted(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleting(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRow
        Inherits DataRow
        
        Private tableinv_item As inv_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item = CType(Me.Table,inv_itemDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cod_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.taxableColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.lineColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.noteColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.pictureColumn) = value
            End Set
        End Property
        
        Public Property upc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.upcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.upcColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.special_noticeColumn) = value
            End Set
        End Property
        
        Public Property wheel_size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.wheel_sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.wheel_sizeColumn) = value
            End Set
        End Property
        
        Public Property tire_size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.tire_sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.tire_sizeColumn) = value
            End Set
        End Property
        
        Public Property service_description As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.service_descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.service_descriptionColumn) = value
            End Set
        End Property
        
        Public Property sidwall As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.sidwallColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.sidwallColumn) = value
            End Set
        End Property
        
        Public Property load_range As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.load_rangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.load_rangeColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.fetColumn) = value
            End Set
        End Property
        
        Public Property price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.price_codeColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableinv_item.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_quick_refrenceColumn)
        End Function
        
        Public Sub Setcod_quick_refrenceNull()
            Me(Me.tableinv_item.cod_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_item.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableinv_item.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_item.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableinv_item.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.upcColumn)
        End Function
        
        Public Sub SetupcNull()
            Me(Me.tableinv_item.upcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_item.special_noticeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswheel_sizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.wheel_sizeColumn)
        End Function
        
        Public Sub Setwheel_sizeNull()
            Me(Me.tableinv_item.wheel_sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istire_sizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.tire_sizeColumn)
        End Function
        
        Public Sub Settire_sizeNull()
            Me(Me.tableinv_item.tire_sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.service_descriptionColumn)
        End Function
        
        Public Sub Setservice_descriptionNull()
            Me(Me.tableinv_item.service_descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssidwallNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.sidwallColumn)
        End Function
        
        Public Sub SetsidwallNull()
            Me(Me.tableinv_item.sidwallColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isload_rangeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.load_rangeColumn)
        End Function
        
        Public Sub Setload_rangeNull()
            Me(Me.tableinv_item.load_rangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableinv_item.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_item.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.price_codeColumn)
        End Function
        
        Public Sub Setprice_codeNull()
            Me(Me.tableinv_item.price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableinv_item.cod_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnline As DataColumn
        
        Private columnfeatures As DataColumn
        
        Private columnbenefits As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnlimit_warranty As DataColumn
        
        Private columnconstruction As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Private columntread_life As DataColumn
        
        Private columnwet_traction As DataColumn
        
        Private columnquiet_ride As DataColumn
        
        Private columnhandling As DataColumn
        
        Private columnwinter_traction As DataColumn
        
        Private columnnud_traction As DataColumn
        
        Private columnoverall_score As DataColumn
        
        Private columndry_traction As DataColumn
        
        Private columnride_comfort As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property featuresColumn As DataColumn
            Get
                Return Me.columnfeatures
            End Get
        End Property
        
        Friend ReadOnly Property benefitsColumn As DataColumn
            Get
                Return Me.columnbenefits
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property limit_warrantyColumn As DataColumn
            Get
                Return Me.columnlimit_warranty
            End Get
        End Property
        
        Friend ReadOnly Property constructionColumn As DataColumn
            Get
                Return Me.columnconstruction
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Friend ReadOnly Property tread_lifeColumn As DataColumn
            Get
                Return Me.columntread_life
            End Get
        End Property
        
        Friend ReadOnly Property wet_tractionColumn As DataColumn
            Get
                Return Me.columnwet_traction
            End Get
        End Property
        
        Friend ReadOnly Property quiet_rideColumn As DataColumn
            Get
                Return Me.columnquiet_ride
            End Get
        End Property
        
        Friend ReadOnly Property handlingColumn As DataColumn
            Get
                Return Me.columnhandling
            End Get
        End Property
        
        Friend ReadOnly Property winter_tractionColumn As DataColumn
            Get
                Return Me.columnwinter_traction
            End Get
        End Property
        
        Friend ReadOnly Property nud_tractionColumn As DataColumn
            Get
                Return Me.columnnud_traction
            End Get
        End Property
        
        Friend ReadOnly Property overall_scoreColumn As DataColumn
            Get
                Return Me.columnoverall_score
            End Get
        End Property
        
        Friend ReadOnly Property dry_tractionColumn As DataColumn
            Get
                Return Me.columndry_traction
            End Get
        End Property
        
        Friend ReadOnly Property ride_comfortColumn As DataColumn
            Get
                Return Me.columnride_comfort
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_lineRow
            Get
                Return CType(Me.Rows(index),inv_tab_lineRow)
            End Get
        End Property
        
        Public Event inv_tab_lineRowChanged As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowChanging As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleted As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleting As inv_tab_lineRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_lineRow( _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal line As String,  _
                    ByVal features As String,  _
                    ByVal benefits As String,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal limit_warranty As String,  _
                    ByVal construction As String,  _
                    ByVal remark As String,  _
                    ByVal image_remark() As Byte,  _
                    ByVal tread_life As String,  _
                    ByVal wet_traction As String,  _
                    ByVal quiet_ride As String,  _
                    ByVal handling As String,  _
                    ByVal winter_traction As String,  _
                    ByVal nud_traction As String,  _
                    ByVal overall_score As String,  _
                    ByVal dry_traction As String,  _
                    ByVal ride_comfort As String) As inv_tab_lineRow
            Dim rowinv_tab_lineRow As inv_tab_lineRow = CType(Me.NewRow,inv_tab_lineRow)
            rowinv_tab_lineRow.ItemArray = New Object() {cod_brand, style, line, features, benefits, treadwear, traction, temperature, limit_warranty, construction, remark, image_remark, tread_life, wet_traction, quiet_ride, handling, winter_traction, nud_traction, overall_score, dry_traction, ride_comfort}
            Me.Rows.Add(rowinv_tab_lineRow)
            Return rowinv_tab_lineRow
        End Function
        
        Public Function FindByline(ByVal line As String) As inv_tab_lineRow
            Return CType(Me.Rows.Find(New Object() {line}),inv_tab_lineRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_lineDataTable = CType(MyBase.Clone,inv_tab_lineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_lineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnline = Me.Columns("line")
            Me.columnfeatures = Me.Columns("features")
            Me.columnbenefits = Me.Columns("benefits")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnlimit_warranty = Me.Columns("limit_warranty")
            Me.columnconstruction = Me.Columns("construction")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
            Me.columntread_life = Me.Columns("tread_life")
            Me.columnwet_traction = Me.Columns("wet_traction")
            Me.columnquiet_ride = Me.Columns("quiet_ride")
            Me.columnhandling = Me.Columns("handling")
            Me.columnwinter_traction = Me.Columns("winter_traction")
            Me.columnnud_traction = Me.Columns("nud_traction")
            Me.columnoverall_score = Me.Columns("overall_score")
            Me.columndry_traction = Me.Columns("dry_traction")
            Me.columnride_comfort = Me.Columns("ride_comfort")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnfeatures = New DataColumn("features", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfeatures)
            Me.columnbenefits = New DataColumn("benefits", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbenefits)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnlimit_warranty = New DataColumn("limit_warranty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlimit_warranty)
            Me.columnconstruction = New DataColumn("construction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconstruction)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.columntread_life = New DataColumn("tread_life", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntread_life)
            Me.columnwet_traction = New DataColumn("wet_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwet_traction)
            Me.columnquiet_ride = New DataColumn("quiet_ride", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquiet_ride)
            Me.columnhandling = New DataColumn("handling", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhandling)
            Me.columnwinter_traction = New DataColumn("winter_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwinter_traction)
            Me.columnnud_traction = New DataColumn("nud_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnud_traction)
            Me.columnoverall_score = New DataColumn("overall_score", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverall_score)
            Me.columndry_traction = New DataColumn("dry_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndry_traction)
            Me.columnride_comfort = New DataColumn("ride_comfort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnride_comfort)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnline}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnline.Unique = true
        End Sub
        
        Public Function Newinv_tab_lineRow() As inv_tab_lineRow
            Return CType(Me.NewRow,inv_tab_lineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_lineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_lineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_lineRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanged(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_lineRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanging(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_lineRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleted(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_lineRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleting(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRow
        Inherits DataRow
        
        Private tableinv_tab_line As inv_tab_lineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_line = CType(Me.Table,inv_tab_lineDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_line.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_line.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_tab_line.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.lineColumn) = value
            End Set
        End Property
        
        Public Property features As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.featuresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.featuresColumn) = value
            End Set
        End Property
        
        Public Property benefits As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.benefitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.benefitsColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.temperatureColumn) = value
            End Set
        End Property
        
        Public Property limit_warranty As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.limit_warrantyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.limit_warrantyColumn) = value
            End Set
        End Property
        
        Public Property construction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.constructionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.constructionColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.image_remarkColumn) = value
            End Set
        End Property
        
        Public Property tread_life As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tread_lifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tread_lifeColumn) = value
            End Set
        End Property
        
        Public Property wet_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.wet_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.wet_tractionColumn) = value
            End Set
        End Property
        
        Public Property quiet_ride As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.quiet_rideColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.quiet_rideColumn) = value
            End Set
        End Property
        
        Public Property handling As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.handlingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.handlingColumn) = value
            End Set
        End Property
        
        Public Property winter_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.winter_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.winter_tractionColumn) = value
            End Set
        End Property
        
        Public Property nud_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.nud_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.nud_tractionColumn) = value
            End Set
        End Property
        
        Public Property overall_score As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.overall_scoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.overall_scoreColumn) = value
            End Set
        End Property
        
        Public Property dry_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.dry_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.dry_tractionColumn) = value
            End Set
        End Property
        
        Public Property ride_comfort As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.ride_comfortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.ride_comfortColumn) = value
            End Set
        End Property
        
        Public Function IsfeaturesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.featuresColumn)
        End Function
        
        Public Sub SetfeaturesNull()
            Me(Me.tableinv_tab_line.featuresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbenefitsNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.benefitsColumn)
        End Function
        
        Public Sub SetbenefitsNull()
            Me(Me.tableinv_tab_line.benefitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_tab_line.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_tab_line.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_tab_line.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islimit_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.limit_warrantyColumn)
        End Function
        
        Public Sub Setlimit_warrantyNull()
            Me(Me.tableinv_tab_line.limit_warrantyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconstructionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.constructionColumn)
        End Function
        
        Public Sub SetconstructionNull()
            Me(Me.tableinv_tab_line.constructionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_line.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_line.image_remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istread_lifeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tread_lifeColumn)
        End Function
        
        Public Sub Settread_lifeNull()
            Me(Me.tableinv_tab_line.tread_lifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswet_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.wet_tractionColumn)
        End Function
        
        Public Sub Setwet_tractionNull()
            Me(Me.tableinv_tab_line.wet_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isquiet_rideNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.quiet_rideColumn)
        End Function
        
        Public Sub Setquiet_rideNull()
            Me(Me.tableinv_tab_line.quiet_rideColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshandlingNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.handlingColumn)
        End Function
        
        Public Sub SethandlingNull()
            Me(Me.tableinv_tab_line.handlingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswinter_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.winter_tractionColumn)
        End Function
        
        Public Sub Setwinter_tractionNull()
            Me(Me.tableinv_tab_line.winter_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnud_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.nud_tractionColumn)
        End Function
        
        Public Sub Setnud_tractionNull()
            Me(Me.tableinv_tab_line.nud_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isoverall_scoreNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.overall_scoreColumn)
        End Function
        
        Public Sub Setoverall_scoreNull()
            Me(Me.tableinv_tab_line.overall_scoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdry_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.dry_tractionColumn)
        End Function
        
        Public Sub Setdry_tractionNull()
            Me(Me.tableinv_tab_line.dry_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isride_comfortNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.ride_comfortColumn)
        End Function
        
        Public Sub Setride_comfortNull()
            Me(Me.tableinv_tab_line.ride_comfortColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_lineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_lineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_lineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
