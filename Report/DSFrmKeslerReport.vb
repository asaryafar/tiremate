'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmKeslerReport
    Inherits DataSet
    
    Private tableServices As ServicesDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Services")) Is Nothing) Then
                Me.Tables.Add(New ServicesDataTable(ds.Tables("Services")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Services As ServicesDataTable
        Get
            Return Me.tableServices
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmKeslerReport = CType(MyBase.Clone,DSFrmKeslerReport)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Services")) Is Nothing) Then
            Me.Tables.Add(New ServicesDataTable(ds.Tables("Services")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableServices = CType(Me.Tables("Services"),ServicesDataTable)
        If (Not (Me.tableServices) Is Nothing) Then
            Me.tableServices.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmKeslerReport"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmKeslerReport.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableServices = New ServicesDataTable
        Me.Tables.Add(Me.tableServices)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
    End Sub
    
    Private Function ShouldSerializeServices() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ServicesRowChangeEventHandler(ByVal sender As Object, ByVal e As ServicesRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServicesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Friend Sub New()
            MyBase.New("Services")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ServicesRow
            Get
                Return CType(Me.Rows(index),ServicesRow)
            End Get
        End Property
        
        Public Event ServicesRowChanged As ServicesRowChangeEventHandler
        
        Public Event ServicesRowChanging As ServicesRowChangeEventHandler
        
        Public Event ServicesRowDeleted As ServicesRowChangeEventHandler
        
        Public Event ServicesRowDeleting As ServicesRowChangeEventHandler
        
        Public Overloads Sub AddServicesRow(ByVal row As ServicesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddServicesRow(ByVal flag As Boolean, ByVal code As String, ByVal name As String) As ServicesRow
            Dim rowServicesRow As ServicesRow = CType(Me.NewRow,ServicesRow)
            rowServicesRow.ItemArray = New Object() {flag, code, name}
            Me.Rows.Add(rowServicesRow)
            Return rowServicesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ServicesDataTable = CType(MyBase.Clone,ServicesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ServicesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
        End Sub
        
        Public Function NewServicesRow() As ServicesRow
            Return CType(Me.NewRow,ServicesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ServicesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ServicesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ServicesRowChangedEvent) Is Nothing) Then
                RaiseEvent ServicesRowChanged(Me, New ServicesRowChangeEvent(CType(e.Row,ServicesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ServicesRowChangingEvent) Is Nothing) Then
                RaiseEvent ServicesRowChanging(Me, New ServicesRowChangeEvent(CType(e.Row,ServicesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ServicesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ServicesRowDeleted(Me, New ServicesRowChangeEvent(CType(e.Row,ServicesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ServicesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ServicesRowDeleting(Me, New ServicesRowChangeEvent(CType(e.Row,ServicesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveServicesRow(ByVal row As ServicesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServicesRow
        Inherits DataRow
        
        Private tableServices As ServicesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableServices = CType(Me.Table,ServicesDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableServices.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableServices.flagColumn) = value
            End Set
        End Property
        
        Public Property code As String
            Get
                Try 
                    Return CType(Me(Me.tableServices.codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableServices.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableServices.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableServices.nameColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableServices.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableServices.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tableServices.codeColumn)
        End Function
        
        Public Sub SetcodeNull()
            Me(Me.tableServices.codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableServices.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableServices.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServicesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ServicesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ServicesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ServicesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFirst As DataColumn
        
        Private columnLname As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZip As DataColumn
        
        Private columnPhone As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnyear As DataColumn
        
        Private columnmake As DataColumn
        
        Private columnModel As DataColumn
        
        Private columnMileage As DataColumn
        
        Private columnAmount As DataColumn
        
        Private column_Date As DataColumn
        
        Private columnIgnore_Flag As DataColumn
        
        Private columnService_Type_codes As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FirstColumn As DataColumn
            Get
                Return Me.columnFirst
            End Get
        End Property
        
        Friend ReadOnly Property LnameColumn As DataColumn
            Get
                Return Me.columnLname
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property ZipColumn As DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        Friend ReadOnly Property PhoneColumn As DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Friend ReadOnly Property yearColumn As DataColumn
            Get
                Return Me.columnyear
            End Get
        End Property
        
        Friend ReadOnly Property makeColumn As DataColumn
            Get
                Return Me.columnmake
            End Get
        End Property
        
        Friend ReadOnly Property ModelColumn As DataColumn
            Get
                Return Me.columnModel
            End Get
        End Property
        
        Friend ReadOnly Property MileageColumn As DataColumn
            Get
                Return Me.columnMileage
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property Ignore_FlagColumn As DataColumn
            Get
                Return Me.columnIgnore_Flag
            End Get
        End Property
        
        Friend ReadOnly Property Service_Type_codesColumn As DataColumn
            Get
                Return Me.columnService_Type_codes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow( _
                    ByVal First As String,  _
                    ByVal Lname As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal Phone As String,  _
                    ByVal email As String,  _
                    ByVal License As String,  _
                    ByVal year As String,  _
                    ByVal make As String,  _
                    ByVal Model As String,  _
                    ByVal Mileage As Single,  _
                    ByVal Amount As Decimal,  _
                    ByVal _Date As String,  _
                    ByVal Ignore_Flag As String,  _
                    ByVal Service_Type_codes As String) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {First, Lname, Address, City, State, Zip, Phone, email, License, year, make, Model, Mileage, Amount, _Date, Ignore_Flag, Service_Type_codes}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFirst = Me.Columns("First")
            Me.columnLname = Me.Columns("Lname")
            Me.columnAddress = Me.Columns("Address")
            Me.columnCity = Me.Columns("City")
            Me.columnState = Me.Columns("State")
            Me.columnZip = Me.Columns("Zip")
            Me.columnPhone = Me.Columns("Phone")
            Me.columnemail = Me.Columns("email")
            Me.columnLicense = Me.Columns("License")
            Me.columnyear = Me.Columns("year")
            Me.columnmake = Me.Columns("make")
            Me.columnModel = Me.Columns("Model")
            Me.columnMileage = Me.Columns("Mileage")
            Me.columnAmount = Me.Columns("Amount")
            Me.column_Date = Me.Columns("Date")
            Me.columnIgnore_Flag = Me.Columns("Ignore_Flag")
            Me.columnService_Type_codes = Me.Columns("Service_Type_codes")
        End Sub
        
        Private Sub InitClass()
            Me.columnFirst = New DataColumn("First", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirst)
            Me.columnLname = New DataColumn("Lname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLname)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZip = New DataColumn("Zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZip)
            Me.columnPhone = New DataColumn("Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhone)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnyear = New DataColumn("year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnyear)
            Me.columnmake = New DataColumn("make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake)
            Me.columnModel = New DataColumn("Model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModel)
            Me.columnMileage = New DataColumn("Mileage", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMileage)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.column_Date = New DataColumn("Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnIgnore_Flag = New DataColumn("Ignore_Flag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIgnore_Flag)
            Me.columnService_Type_codes = New DataColumn("Service_Type_codes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Type_codes)
            Me.columnLname.ReadOnly = true
            Me.columnZip.AllowDBNull = false
            Me.columnPhone.ReadOnly = true
            Me.columnIgnore_Flag.ReadOnly = true
            Me.columnService_Type_codes.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property First As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.FirstColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.FirstColumn) = value
            End Set
        End Property
        
        Public Property Lname As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.LnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.LnameColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.CityColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.StateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.StateColumn) = value
            End Set
        End Property
        
        Public Property Zip As String
            Get
                Return CType(Me(Me.tableservice_center_head.ZipColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.ZipColumn) = value
            End Set
        End Property
        
        Public Property Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.PhoneColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.emailColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.LicenseColumn) = value
            End Set
        End Property
        
        Public Property year As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.yearColumn) = value
            End Set
        End Property
        
        Public Property make As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.makeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.makeColumn) = value
            End Set
        End Property
        
        Public Property Model As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ModelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ModelColumn) = value
            End Set
        End Property
        
        Public Property Mileage As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.MileageColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.MileageColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.AmountColumn) = value
            End Set
        End Property
        
        Public Property _Date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head._DateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head._DateColumn) = value
            End Set
        End Property
        
        Public Property Ignore_Flag As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.Ignore_FlagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.Ignore_FlagColumn) = value
            End Set
        End Property
        
        Public Property Service_Type_codes As String
            Get
                Return CType(Me(Me.tableservice_center_head.Service_Type_codesColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.Service_Type_codesColumn) = value
            End Set
        End Property
        
        Public Function IsFirstNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.FirstColumn)
        End Function
        
        Public Sub SetFirstNull()
            Me(Me.tableservice_center_head.FirstColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLnameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.LnameColumn)
        End Function
        
        Public Sub SetLnameNull()
            Me(Me.tableservice_center_head.LnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableservice_center_head.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableservice_center_head.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tableservice_center_head.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableservice_center_head.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableservice_center_head.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableservice_center_head.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsyearNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.yearColumn)
        End Function
        
        Public Sub SetyearNull()
            Me(Me.tableservice_center_head.yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmakeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.makeColumn)
        End Function
        
        Public Sub SetmakeNull()
            Me(Me.tableservice_center_head.makeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModelNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ModelColumn)
        End Function
        
        Public Sub SetModelNull()
            Me(Me.tableservice_center_head.ModelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMileageNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.MileageColumn)
        End Function
        
        Public Sub SetMileageNull()
            Me(Me.tableservice_center_head.MileageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableservice_center_head.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head._DateColumn)
        End Function
        
        Public Sub Set_DateNull()
            Me(Me.tableservice_center_head._DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIgnore_FlagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.Ignore_FlagColumn)
        End Function
        
        Public Sub SetIgnore_FlagNull()
            Me(Me.tableservice_center_head.Ignore_FlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
