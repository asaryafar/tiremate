'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrintInvItem
    Inherits DataSet
    
    Private tableSoldReport As SoldReportDataTable
    
    Private tableDetail As DetailDataTable
    
    Private tablesummery As summeryDataTable
    
    Private tableBiginQty As BiginQtyDataTable
    
    Private tableLedger As LedgerDataTable
    
    Private tablesales_transfer As sales_transferDataTable
    
    Private tableSTORE_SETUP As STORE_SETUPDataTable
    
    Private relationBiginQtybank_check As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SoldReport")) Is Nothing) Then
                Me.Tables.Add(New SoldReportDataTable(ds.Tables("SoldReport")))
            End If
            If (Not (ds.Tables("Detail")) Is Nothing) Then
                Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
            End If
            If (Not (ds.Tables("summery")) Is Nothing) Then
                Me.Tables.Add(New summeryDataTable(ds.Tables("summery")))
            End If
            If (Not (ds.Tables("BiginQty")) Is Nothing) Then
                Me.Tables.Add(New BiginQtyDataTable(ds.Tables("BiginQty")))
            End If
            If (Not (ds.Tables("Ledger")) Is Nothing) Then
                Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
            End If
            If (Not (ds.Tables("sales_transfer")) Is Nothing) Then
                Me.Tables.Add(New sales_transferDataTable(ds.Tables("sales_transfer")))
            End If
            If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
                Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SoldReport As SoldReportDataTable
        Get
            Return Me.tableSoldReport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Detail As DetailDataTable
        Get
            Return Me.tableDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property summery As summeryDataTable
        Get
            Return Me.tablesummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BiginQty As BiginQtyDataTable
        Get
            Return Me.tableBiginQty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ledger As LedgerDataTable
        Get
            Return Me.tableLedger
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sales_transfer As sales_transferDataTable
        Get
            Return Me.tablesales_transfer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STORE_SETUP As STORE_SETUPDataTable
        Get
            Return Me.tableSTORE_SETUP
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrintInvItem = CType(MyBase.Clone,DSFrmPrintInvItem)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SoldReport")) Is Nothing) Then
            Me.Tables.Add(New SoldReportDataTable(ds.Tables("SoldReport")))
        End If
        If (Not (ds.Tables("Detail")) Is Nothing) Then
            Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
        End If
        If (Not (ds.Tables("summery")) Is Nothing) Then
            Me.Tables.Add(New summeryDataTable(ds.Tables("summery")))
        End If
        If (Not (ds.Tables("BiginQty")) Is Nothing) Then
            Me.Tables.Add(New BiginQtyDataTable(ds.Tables("BiginQty")))
        End If
        If (Not (ds.Tables("Ledger")) Is Nothing) Then
            Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
        End If
        If (Not (ds.Tables("sales_transfer")) Is Nothing) Then
            Me.Tables.Add(New sales_transferDataTable(ds.Tables("sales_transfer")))
        End If
        If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
            Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSoldReport = CType(Me.Tables("SoldReport"),SoldReportDataTable)
        If (Not (Me.tableSoldReport) Is Nothing) Then
            Me.tableSoldReport.InitVars
        End If
        Me.tableDetail = CType(Me.Tables("Detail"),DetailDataTable)
        If (Not (Me.tableDetail) Is Nothing) Then
            Me.tableDetail.InitVars
        End If
        Me.tablesummery = CType(Me.Tables("summery"),summeryDataTable)
        If (Not (Me.tablesummery) Is Nothing) Then
            Me.tablesummery.InitVars
        End If
        Me.tableBiginQty = CType(Me.Tables("BiginQty"),BiginQtyDataTable)
        If (Not (Me.tableBiginQty) Is Nothing) Then
            Me.tableBiginQty.InitVars
        End If
        Me.tableLedger = CType(Me.Tables("Ledger"),LedgerDataTable)
        If (Not (Me.tableLedger) Is Nothing) Then
            Me.tableLedger.InitVars
        End If
        Me.tablesales_transfer = CType(Me.Tables("sales_transfer"),sales_transferDataTable)
        If (Not (Me.tablesales_transfer) Is Nothing) Then
            Me.tablesales_transfer.InitVars
        End If
        Me.tableSTORE_SETUP = CType(Me.Tables("STORE_SETUP"),STORE_SETUPDataTable)
        If (Not (Me.tableSTORE_SETUP) Is Nothing) Then
            Me.tableSTORE_SETUP.InitVars
        End If
        Me.relationBiginQtybank_check = Me.Relations("BiginQtybank_check")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrintInvItem"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrintInvItem.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSoldReport = New SoldReportDataTable
        Me.Tables.Add(Me.tableSoldReport)
        Me.tableDetail = New DetailDataTable
        Me.Tables.Add(Me.tableDetail)
        Me.tablesummery = New summeryDataTable
        Me.Tables.Add(Me.tablesummery)
        Me.tableBiginQty = New BiginQtyDataTable
        Me.Tables.Add(Me.tableBiginQty)
        Me.tableLedger = New LedgerDataTable
        Me.Tables.Add(Me.tableLedger)
        Me.tablesales_transfer = New sales_transferDataTable
        Me.Tables.Add(Me.tablesales_transfer)
        Me.tableSTORE_SETUP = New STORE_SETUPDataTable
        Me.Tables.Add(Me.tableSTORE_SETUP)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BiginQtybank_check", New DataColumn() {Me.tableBiginQty.item_noColumn}, New DataColumn() {Me.tableLedger.item_noColumn})
        Me.tableLedger.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBiginQtybank_check = New DataRelation("BiginQtybank_check", New DataColumn() {Me.tableBiginQty.item_noColumn}, New DataColumn() {Me.tableLedger.item_noColumn}, false)
        Me.Relations.Add(Me.relationBiginQtybank_check)
    End Sub
    
    Private Function ShouldSerializeSoldReport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBiginQty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLedger() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesales_transfer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTORE_SETUP() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SoldReportRowChangeEventHandler(ByVal sender As Object, ByVal e As SoldReportRowChangeEvent)
    
    Public Delegate Sub DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailRowChangeEvent)
    
    Public Delegate Sub summeryRowChangeEventHandler(ByVal sender As Object, ByVal e As summeryRowChangeEvent)
    
    Public Delegate Sub BiginQtyRowChangeEventHandler(ByVal sender As Object, ByVal e As BiginQtyRowChangeEvent)
    
    Public Delegate Sub LedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerRowChangeEvent)
    
    Public Delegate Sub sales_transferRowChangeEventHandler(ByVal sender As Object, ByVal e As sales_transferRowChangeEvent)
    
    Public Delegate Sub STORE_SETUPRowChangeEventHandler(ByVal sender As Object, ByVal e As STORE_SETUPRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoldReportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnunit_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnext_price As DataColumn
        
        Private columnext_cost As DataColumn
        
        Private columnunit_cost As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnname As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Friend Sub New()
            MyBase.New("SoldReport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property unit_priceColumn As DataColumn
            Get
                Return Me.columnunit_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property ext_priceColumn As DataColumn
            Get
                Return Me.columnext_price
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Friend ReadOnly Property unit_costColumn As DataColumn
            Get
                Return Me.columnunit_cost
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SoldReportRow
            Get
                Return CType(Me.Rows(index),SoldReportRow)
            End Get
        End Property
        
        Public Event SoldReportRowChanged As SoldReportRowChangeEventHandler
        
        Public Event SoldReportRowChanging As SoldReportRowChangeEventHandler
        
        Public Event SoldReportRowDeleted As SoldReportRowChangeEventHandler
        
        Public Event SoldReportRowDeleting As SoldReportRowChangeEventHandler
        
        Public Overloads Sub AddSoldReportRow(ByVal row As SoldReportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSoldReportRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal qty As Decimal,  _
                    ByVal unit_price As Decimal,  _
                    ByVal fet As Decimal,  _
                    ByVal ext_price As Decimal,  _
                    ByVal ext_cost As Decimal,  _
                    ByVal unit_cost As Decimal,  _
                    ByVal id_service_center As String,  _
                    ByVal date_refer As Date,  _
                    ByVal desc_item_type As String,  _
                    ByVal line As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_style As String,  _
                    ByVal store_no As String,  _
                    ByVal flag As Boolean,  _
                    ByVal name As String,  _
                    ByVal cod_customer As String,  _
                    ByVal complete_name As String) As SoldReportRow
            Dim rowSoldReportRow As SoldReportRow = CType(Me.NewRow,SoldReportRow)
            rowSoldReportRow.ItemArray = New Object() {item_no, desc_item, qty, unit_price, fet, ext_price, ext_cost, unit_cost, id_service_center, date_refer, desc_item_type, line, complete_desc_brand, desc_style, store_no, flag, name, cod_customer, complete_name}
            Me.Rows.Add(rowSoldReportRow)
            Return rowSoldReportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SoldReportDataTable = CType(MyBase.Clone,SoldReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SoldReportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnqty = Me.Columns("qty")
            Me.columnunit_price = Me.Columns("unit_price")
            Me.columnfet = Me.Columns("fet")
            Me.columnext_price = Me.Columns("ext_price")
            Me.columnext_cost = Me.Columns("ext_cost")
            Me.columnunit_cost = Me.Columns("unit_cost")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflag = Me.Columns("flag")
            Me.columnname = Me.Columns("name")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncomplete_name = Me.Columns("complete_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnunit_price = New DataColumn("unit_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnext_price = New DataColumn("ext_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_price)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columnunit_cost = New DataColumn("unit_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_cost)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnitem_no.AllowDBNull = false
            Me.columnqty.AllowDBNull = false
            Me.columnunit_price.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
            Me.columnunit_cost.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewSoldReportRow() As SoldReportRow
            Return CType(Me.NewRow,SoldReportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SoldReportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SoldReportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SoldReportRowChangedEvent) Is Nothing) Then
                RaiseEvent SoldReportRowChanged(Me, New SoldReportRowChangeEvent(CType(e.Row,SoldReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SoldReportRowChangingEvent) Is Nothing) Then
                RaiseEvent SoldReportRowChanging(Me, New SoldReportRowChangeEvent(CType(e.Row,SoldReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SoldReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent SoldReportRowDeleted(Me, New SoldReportRowChangeEvent(CType(e.Row,SoldReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SoldReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent SoldReportRowDeleting(Me, New SoldReportRowChangeEvent(CType(e.Row,SoldReportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSoldReportRow(ByVal row As SoldReportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoldReportRow
        Inherits DataRow
        
        Private tableSoldReport As SoldReportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSoldReport = CType(Me.Table,SoldReportDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableSoldReport.item_noColumn),String)
            End Get
            Set
                Me(Me.tableSoldReport.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableSoldReport.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableSoldReport.qtyColumn) = value
            End Set
        End Property
        
        Public Property unit_price As Decimal
            Get
                Return CType(Me(Me.tableSoldReport.unit_priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSoldReport.unit_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Return CType(Me(Me.tableSoldReport.fetColumn),Decimal)
            End Get
            Set
                Me(Me.tableSoldReport.fetColumn) = value
            End Set
        End Property
        
        Public Property ext_price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.ext_priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.ext_priceColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.ext_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.ext_costColumn) = value
            End Set
        End Property
        
        Public Property unit_cost As Decimal
            Get
                Return CType(Me(Me.tableSoldReport.unit_costColumn),Decimal)
            End Get
            Set
                Me(Me.tableSoldReport.unit_costColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableSoldReport.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableSoldReport.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.date_referColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableSoldReport.lineColumn),String)
            End Get
            Set
                Me(Me.tableSoldReport.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.store_noColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.flagColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.nameColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableSoldReport.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoldReport.complete_nameColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableSoldReport.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_priceNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.ext_priceColumn)
        End Function
        
        Public Sub Setext_priceNull()
            Me(Me.tableSoldReport.ext_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tableSoldReport.ext_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableSoldReport.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableSoldReport.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableSoldReport.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableSoldReport.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableSoldReport.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableSoldReport.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableSoldReport.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableSoldReport.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableSoldReport.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableSoldReport.complete_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoldReportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SoldReportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SoldReportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SoldReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnext_cost As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnunit_cost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnvendor As DataColumn
        
        Private columnRefNo As DataColumn
        
        Private column_date As DataColumn
        
        Private columnbill_credit As DataColumn
        
        Private columnDeliveryReciept As DataColumn
        
        Private columnNationalAccount As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnexplanation As DataColumn
        
        Friend Sub New()
            MyBase.New("Detail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property unit_costColumn As DataColumn
            Get
                Return Me.columnunit_cost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property vendorColumn As DataColumn
            Get
                Return Me.columnvendor
            End Get
        End Property
        
        Friend ReadOnly Property RefNoColumn As DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property bill_creditColumn As DataColumn
            Get
                Return Me.columnbill_credit
            End Get
        End Property
        
        Friend ReadOnly Property DeliveryRecieptColumn As DataColumn
            Get
                Return Me.columnDeliveryReciept
            End Get
        End Property
        
        Friend ReadOnly Property NationalAccountColumn As DataColumn
            Get
                Return Me.columnNationalAccount
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property explanationColumn As DataColumn
            Get
                Return Me.columnexplanation
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetailRow
            Get
                Return CType(Me.Rows(index),DetailRow)
            End Get
        End Property
        
        Public Event DetailRowChanged As DetailRowChangeEventHandler
        
        Public Event DetailRowChanging As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleted As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleting As DetailRowChangeEventHandler
        
        Public Overloads Sub AddDetailRow(ByVal row As DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetailRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal ext_cost As Decimal,  _
                    ByVal desc_item_type As String,  _
                    ByVal line As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_style As String,  _
                    ByVal store_no As String,  _
                    ByVal flag As Boolean,  _
                    ByVal qty As Single,  _
                    ByVal unit_cost As Decimal,  _
                    ByVal fet As Decimal,  _
                    ByVal vendor As String,  _
                    ByVal RefNo As String,  _
                    ByVal _date As Date,  _
                    ByVal bill_credit As String,  _
                    ByVal DeliveryReciept As String,  _
                    ByVal NationalAccount As String,  _
                    ByVal cod_vendor As String,  _
                    ByVal explanation As String) As DetailRow
            Dim rowDetailRow As DetailRow = CType(Me.NewRow,DetailRow)
            rowDetailRow.ItemArray = New Object() {item_no, desc_item, ext_cost, desc_item_type, line, complete_desc_brand, desc_style, store_no, flag, qty, unit_cost, fet, vendor, RefNo, _date, bill_credit, DeliveryReciept, NationalAccount, cod_vendor, explanation}
            Me.Rows.Add(rowDetailRow)
            Return rowDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetailDataTable = CType(MyBase.Clone,DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnext_cost = Me.Columns("ext_cost")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflag = Me.Columns("flag")
            Me.columnqty = Me.Columns("qty")
            Me.columnunit_cost = Me.Columns("unit_cost")
            Me.columnfet = Me.Columns("fet")
            Me.columnvendor = Me.Columns("vendor")
            Me.columnRefNo = Me.Columns("RefNo")
            Me.column_date = Me.Columns("date")
            Me.columnbill_credit = Me.Columns("bill_credit")
            Me.columnDeliveryReciept = Me.Columns("DeliveryReciept")
            Me.columnNationalAccount = Me.Columns("NationalAccount")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnexplanation = Me.Columns("explanation")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnunit_cost = New DataColumn("unit_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_cost)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnvendor = New DataColumn("vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor)
            Me.columnRefNo = New DataColumn("RefNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefNo)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnbill_credit = New DataColumn("bill_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_credit)
            Me.columnDeliveryReciept = New DataColumn("DeliveryReciept", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeliveryReciept)
            Me.columnNationalAccount = New DataColumn("NationalAccount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalAccount)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnexplanation = New DataColumn("explanation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexplanation)
            Me.columnitem_no.AllowDBNull = false
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewDetailRow() As DetailRow
            Return CType(Me.NewRow,DetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent DetailRowChanged(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent DetailRowChanging(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleted(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleting(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetailRow(ByVal row As DetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRow
        Inherits DataRow
        
        Private tableDetail As DetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetail = CType(Me.Table,DetailDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableDetail.item_noColumn),String)
            End Get
            Set
                Me(Me.tableDetail.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.ext_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.ext_costColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableDetail.lineColumn),String)
            End Get
            Set
                Me(Me.tableDetail.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.store_noColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableDetail.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.qtyColumn) = value
            End Set
        End Property
        
        Public Property unit_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.unit_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.unit_costColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.fetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.fetColumn) = value
            End Set
        End Property
        
        Public Property vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.vendorColumn) = value
            End Set
        End Property
        
        Public Property RefNo As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.RefNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.RefNoColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tableDetail._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail._dateColumn) = value
            End Set
        End Property
        
        Public Property bill_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.bill_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.bill_creditColumn) = value
            End Set
        End Property
        
        Public Property DeliveryReciept As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.DeliveryRecieptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.DeliveryRecieptColumn) = value
            End Set
        End Property
        
        Public Property NationalAccount As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.NationalAccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.NationalAccountColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property explanation As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.explanationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.explanationColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableDetail.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tableDetail.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tableDetail.ext_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableDetail.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableDetail.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableDetail.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableDetail.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableDetail.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableDetail.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableDetail.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableDetail.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_costNull() As Boolean
            Return Me.IsNull(Me.tableDetail.unit_costColumn)
        End Function
        
        Public Sub Setunit_costNull()
            Me(Me.tableDetail.unit_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableDetail.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableDetail.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorNull() As Boolean
            Return Me.IsNull(Me.tableDetail.vendorColumn)
        End Function
        
        Public Sub SetvendorNull()
            Me(Me.tableDetail.vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableDetail.RefNoColumn)
        End Function
        
        Public Sub SetRefNoNull()
            Me(Me.tableDetail.RefNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableDetail._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableDetail._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_creditNull() As Boolean
            Return Me.IsNull(Me.tableDetail.bill_creditColumn)
        End Function
        
        Public Sub Setbill_creditNull()
            Me(Me.tableDetail.bill_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeliveryRecieptNull() As Boolean
            Return Me.IsNull(Me.tableDetail.DeliveryRecieptColumn)
        End Function
        
        Public Sub SetDeliveryRecieptNull()
            Me(Me.tableDetail.DeliveryRecieptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalAccountNull() As Boolean
            Return Me.IsNull(Me.tableDetail.NationalAccountColumn)
        End Function
        
        Public Sub SetNationalAccountNull()
            Me(Me.tableDetail.NationalAccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableDetail.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsexplanationNull() As Boolean
            Return Me.IsNull(Me.tableDetail.explanationColumn)
        End Function
        
        Public Sub SetexplanationNull()
            Me(Me.tableDetail.explanationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class summeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstore_no As DataColumn
        
        Private column_date As DataColumn
        
        Private columntype As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnunit_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnext_price As DataColumn
        
        Private columnext_cost As DataColumn
        
        Private columnunit_cost As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("summery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property unit_priceColumn As DataColumn
            Get
                Return Me.columnunit_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property ext_priceColumn As DataColumn
            Get
                Return Me.columnext_price
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Friend ReadOnly Property unit_costColumn As DataColumn
            Get
                Return Me.columnunit_cost
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As summeryRow
            Get
                Return CType(Me.Rows(index),summeryRow)
            End Get
        End Property
        
        Public Event summeryRowChanged As summeryRowChangeEventHandler
        
        Public Event summeryRowChanging As summeryRowChangeEventHandler
        
        Public Event summeryRowDeleted As summeryRowChangeEventHandler
        
        Public Event summeryRowDeleting As summeryRowChangeEventHandler
        
        Public Overloads Sub AddsummeryRow(ByVal row As summeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsummeryRow(ByVal store_no As String, ByVal _date As Date, ByVal type As String, ByVal qty As Single, ByVal unit_price As Decimal, ByVal fet As Decimal, ByVal ext_price As Decimal, ByVal ext_cost As Decimal, ByVal unit_cost As Decimal, ByVal flag As Boolean) As summeryRow
            Dim rowsummeryRow As summeryRow = CType(Me.NewRow,summeryRow)
            rowsummeryRow.ItemArray = New Object() {store_no, _date, type, qty, unit_price, fet, ext_price, ext_cost, unit_cost, flag}
            Me.Rows.Add(rowsummeryRow)
            Return rowsummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As summeryDataTable = CType(MyBase.Clone,summeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New summeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstore_no = Me.Columns("store_no")
            Me.column_date = Me.Columns("date")
            Me.columntype = Me.Columns("type")
            Me.columnqty = Me.Columns("qty")
            Me.columnunit_price = Me.Columns("unit_price")
            Me.columnfet = Me.Columns("fet")
            Me.columnext_price = Me.Columns("ext_price")
            Me.columnext_cost = Me.Columns("ext_cost")
            Me.columnunit_cost = Me.Columns("unit_cost")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnunit_price = New DataColumn("unit_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnext_price = New DataColumn("ext_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_price)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columnunit_cost = New DataColumn("unit_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_cost)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
        End Sub
        
        Public Function NewsummeryRow() As summeryRow
            Return CType(Me.NewRow,summeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New summeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(summeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.summeryRowChangedEvent) Is Nothing) Then
                RaiseEvent summeryRowChanged(Me, New summeryRowChangeEvent(CType(e.Row,summeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.summeryRowChangingEvent) Is Nothing) Then
                RaiseEvent summeryRowChanging(Me, New summeryRowChangeEvent(CType(e.Row,summeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.summeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent summeryRowDeleted(Me, New summeryRowChangeEvent(CType(e.Row,summeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.summeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent summeryRowDeleting(Me, New summeryRowChangeEvent(CType(e.Row,summeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesummeryRow(ByVal row As summeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class summeryRow
        Inherits DataRow
        
        Private tablesummery As summeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesummery = CType(Me.Table,summeryDataTable)
        End Sub
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tablesummery.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.store_noColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tablesummery._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery._dateColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tablesummery.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.typeColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tablesummery.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.qtyColumn) = value
            End Set
        End Property
        
        Public Property unit_price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesummery.unit_priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.unit_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesummery.fetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.fetColumn) = value
            End Set
        End Property
        
        Public Property ext_price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesummery.ext_priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.ext_priceColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesummery.ext_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.ext_costColumn) = value
            End Set
        End Property
        
        Public Property unit_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesummery.unit_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.unit_costColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummery.flagColumn) = value
            End Set
        End Property
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tablesummery.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tablesummery.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tablesummery._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tablesummery._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tablesummery.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tablesummery.typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tablesummery.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tablesummery.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_priceNull() As Boolean
            Return Me.IsNull(Me.tablesummery.unit_priceColumn)
        End Function
        
        Public Sub Setunit_priceNull()
            Me(Me.tablesummery.unit_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tablesummery.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tablesummery.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_priceNull() As Boolean
            Return Me.IsNull(Me.tablesummery.ext_priceColumn)
        End Function
        
        Public Sub Setext_priceNull()
            Me(Me.tablesummery.ext_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tablesummery.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tablesummery.ext_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_costNull() As Boolean
            Return Me.IsNull(Me.tablesummery.unit_costColumn)
        End Function
        
        Public Sub Setunit_costNull()
            Me(Me.tablesummery.unit_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablesummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablesummery.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class summeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As summeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As summeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As summeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnBeginingQty As DataColumn
        
        Private columnQtyOut As DataColumn
        
        Private columnQtyIn As DataColumn
        
        Private columnflag As DataColumn
        
        Private columndesc_item_ As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflagshow As DataColumn
        
        Private columnOnHand As DataColumn
        
        Friend Sub New()
            MyBase.New("BiginQty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property BeginingQtyColumn As DataColumn
            Get
                Return Me.columnBeginingQty
            End Get
        End Property
        
        Friend ReadOnly Property QtyOutColumn As DataColumn
            Get
                Return Me.columnQtyOut
            End Get
        End Property
        
        Friend ReadOnly Property QtyInColumn As DataColumn
            Get
                Return Me.columnQtyIn
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_Column As DataColumn
            Get
                Return Me.columndesc_item_
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagshowColumn As DataColumn
            Get
                Return Me.columnflagshow
            End Get
        End Property
        
        Friend ReadOnly Property OnHandColumn As DataColumn
            Get
                Return Me.columnOnHand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BiginQtyRow
            Get
                Return CType(Me.Rows(index),BiginQtyRow)
            End Get
        End Property
        
        Public Event BiginQtyRowChanged As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowChanging As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowDeleted As BiginQtyRowChangeEventHandler
        
        Public Event BiginQtyRowDeleting As BiginQtyRowChangeEventHandler
        
        Public Overloads Sub AddBiginQtyRow(ByVal row As BiginQtyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBiginQtyRow(ByVal item_no As String, ByVal BeginingQty As Decimal, ByVal QtyOut As Decimal, ByVal QtyIn As Decimal, ByVal flag As Boolean, ByVal desc_item_ As String, ByVal desc_item_type As String, ByVal line As String, ByVal complete_desc_brand As String, ByVal desc_style As String, ByVal store_no As Integer, ByVal flagshow As Boolean, ByVal OnHand As Decimal) As BiginQtyRow
            Dim rowBiginQtyRow As BiginQtyRow = CType(Me.NewRow,BiginQtyRow)
            rowBiginQtyRow.ItemArray = New Object() {item_no, BeginingQty, QtyOut, QtyIn, flag, desc_item_, desc_item_type, line, complete_desc_brand, desc_style, store_no, flagshow, OnHand}
            Me.Rows.Add(rowBiginQtyRow)
            Return rowBiginQtyRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As BiginQtyRow
            Return CType(Me.Rows.Find(New Object() {item_no}),BiginQtyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BiginQtyDataTable = CType(MyBase.Clone,BiginQtyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BiginQtyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnBeginingQty = Me.Columns("BeginingQty")
            Me.columnQtyOut = Me.Columns("QtyOut")
            Me.columnQtyIn = Me.Columns("QtyIn")
            Me.columnflag = Me.Columns("flag")
            Me.columndesc_item_ = Me.Columns("desc_item ")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflagshow = Me.Columns("flagshow")
            Me.columnOnHand = Me.Columns("OnHand")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnBeginingQty = New DataColumn("BeginingQty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeginingQty)
            Me.columnQtyOut = New DataColumn("QtyOut", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQtyOut)
            Me.columnQtyIn = New DataColumn("QtyIn", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQtyIn)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columndesc_item_ = New DataColumn("desc_item ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflagshow = New DataColumn("flagshow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagshow)
            Me.columnOnHand = New DataColumn("OnHand", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOnHand)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintInvItemKey1", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewBiginQtyRow() As BiginQtyRow
            Return CType(Me.NewRow,BiginQtyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BiginQtyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BiginQtyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BiginQtyRowChangedEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowChanged(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BiginQtyRowChangingEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowChanging(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BiginQtyRowDeletedEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowDeleted(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BiginQtyRowDeletingEvent) Is Nothing) Then
                RaiseEvent BiginQtyRowDeleting(Me, New BiginQtyRowChangeEvent(CType(e.Row,BiginQtyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBiginQtyRow(ByVal row As BiginQtyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyRow
        Inherits DataRow
        
        Private tableBiginQty As BiginQtyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBiginQty = CType(Me.Table,BiginQtyDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableBiginQty.item_noColumn),String)
            End Get
            Set
                Me(Me.tableBiginQty.item_noColumn) = value
            End Set
        End Property
        
        Public Property BeginingQty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.BeginingQtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.BeginingQtyColumn) = value
            End Set
        End Property
        
        Public Property QtyOut As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.QtyOutColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.QtyOutColumn) = value
            End Set
        End Property
        
        Public Property QtyIn As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.QtyInColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.QtyInColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.flagColumn) = value
            End Set
        End Property
        
        Public Property desc_item_ As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_item_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_item_Column) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableBiginQty.lineColumn),String)
            End Get
            Set
                Me(Me.tableBiginQty.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.store_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.store_noColumn) = value
            End Set
        End Property
        
        Public Property flagshow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.flagshowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.flagshowColumn) = value
            End Set
        End Property
        
        Public Property OnHand As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBiginQty.OnHandColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiginQty.OnHandColumn) = value
            End Set
        End Property
        
        Public Function IsBeginingQtyNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.BeginingQtyColumn)
        End Function
        
        Public Sub SetBeginingQtyNull()
            Me(Me.tableBiginQty.BeginingQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyOutNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.QtyOutColumn)
        End Function
        
        Public Sub SetQtyOutNull()
            Me(Me.tableBiginQty.QtyOutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyInNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.QtyInColumn)
        End Function
        
        Public Sub SetQtyInNull()
            Me(Me.tableBiginQty.QtyInColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableBiginQty.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_Null() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_item_Column)
        End Function
        
        Public Sub Setdesc_item_Null()
            Me(Me.tableBiginQty.desc_item_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableBiginQty.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableBiginQty.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableBiginQty.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableBiginQty.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagshowNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.flagshowColumn)
        End Function
        
        Public Sub SetflagshowNull()
            Me(Me.tableBiginQty.flagshowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOnHandNull() As Boolean
            Return Me.IsNull(Me.tableBiginQty.OnHandColumn)
        End Function
        
        Public Sub SetOnHandNull()
            Me(Me.tableBiginQty.OnHandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetLedgerRows() As LedgerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BiginQtybank_check")),LedgerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiginQtyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BiginQtyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BiginQtyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BiginQtyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnrefno As DataColumn
        
        Private column_date As DataColumn
        
        Private columnqtyin As DataColumn
        
        Private columnqtyout As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columncustomer As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnvendor As DataColumn
        
        Private columnbill_credit As DataColumn
        
        Private columnBegining As DataColumn
        
        Friend Sub New()
            MyBase.New("Ledger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property refnoColumn As DataColumn
            Get
                Return Me.columnrefno
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property qtyinColumn As DataColumn
            Get
                Return Me.columnqtyin
            End Get
        End Property
        
        Friend ReadOnly Property qtyoutColumn As DataColumn
            Get
                Return Me.columnqtyout
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property customerColumn As DataColumn
            Get
                Return Me.columncustomer
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property vendorColumn As DataColumn
            Get
                Return Me.columnvendor
            End Get
        End Property
        
        Friend ReadOnly Property bill_creditColumn As DataColumn
            Get
                Return Me.columnbill_credit
            End Get
        End Property
        
        Friend ReadOnly Property BeginingColumn As DataColumn
            Get
                Return Me.columnBegining
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerRow
            Get
                Return CType(Me.Rows(index),LedgerRow)
            End Get
        End Property
        
        Public Event LedgerRowChanged As LedgerRowChangeEventHandler
        
        Public Event LedgerRowChanging As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleted As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleting As LedgerRowChangeEventHandler
        
        Public Overloads Sub AddLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLedgerRow( _
                    ByVal parentBiginQtyRowByBiginQtybank_check As BiginQtyRow,  _
                    ByVal desc_item As String,  _
                    ByVal refno As String,  _
                    ByVal _date As Date,  _
                    ByVal qtyin As Decimal,  _
                    ByVal qtyout As Decimal,  _
                    ByVal desc_item_type As String,  _
                    ByVal customer As String,  _
                    ByVal line As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_style As String,  _
                    ByVal store_no As Integer,  _
                    ByVal flag As Boolean,  _
                    ByVal vendor As String,  _
                    ByVal bill_credit As String,  _
                    ByVal Begining As Decimal) As LedgerRow
            Dim rowLedgerRow As LedgerRow = CType(Me.NewRow,LedgerRow)
            rowLedgerRow.ItemArray = New Object() {parentBiginQtyRowByBiginQtybank_check(0), desc_item, refno, _date, qtyin, qtyout, desc_item_type, customer, line, complete_desc_brand, desc_style, store_no, flag, vendor, bill_credit, Begining}
            Me.Rows.Add(rowLedgerRow)
            Return rowLedgerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LedgerDataTable = CType(MyBase.Clone,LedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LedgerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnrefno = Me.Columns("refno")
            Me.column_date = Me.Columns("date")
            Me.columnqtyin = Me.Columns("qtyin")
            Me.columnqtyout = Me.Columns("qtyout")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columncustomer = Me.Columns("customer")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnflag = Me.Columns("flag")
            Me.columnvendor = Me.Columns("vendor")
            Me.columnbill_credit = Me.Columns("bill_credit")
            Me.columnBegining = Me.Columns("Begining")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnrefno = New DataColumn("refno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefno)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnqtyin = New DataColumn("qtyin", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyin)
            Me.columnqtyout = New DataColumn("qtyout", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyout)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columncustomer = New DataColumn("customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnvendor = New DataColumn("vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor)
            Me.columnbill_credit = New DataColumn("bill_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_credit)
            Me.columnBegining = New DataColumn("Begining", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBegining)
            Me.columnitem_no.AllowDBNull = false
            Me.columnrefno.AllowDBNull = false
        End Sub
        
        Public Function NewLedgerRow() As LedgerRow
            Return CType(Me.NewRow,LedgerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LedgerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LedgerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanged(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanging(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleted(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleting(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRow
        Inherits DataRow
        
        Private tableLedger As LedgerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedger = CType(Me.Table,LedgerDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableLedger.item_noColumn),String)
            End Get
            Set
                Me(Me.tableLedger.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property refno As String
            Get
                Return CType(Me(Me.tableLedger.refnoColumn),String)
            End Get
            Set
                Me(Me.tableLedger.refnoColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tableLedger._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger._dateColumn) = value
            End Set
        End Property
        
        Public Property qtyin As Decimal
            Get
                If Me.IsqtyinNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.qtyinColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableLedger.qtyinColumn) = value
            End Set
        End Property
        
        Public Property qtyout As Decimal
            Get
                If Me.IsqtyoutNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.qtyoutColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableLedger.qtyoutColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property customer As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.customerColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property store_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLedger.store_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.store_noColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableLedger.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.flagColumn) = value
            End Set
        End Property
        
        Public Property vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.vendorColumn) = value
            End Set
        End Property
        
        Public Property bill_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableLedger.bill_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.bill_creditColumn) = value
            End Set
        End Property
        
        Public Property Begining As Decimal
            Get
                If Me.IsBeginingNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableLedger.BeginingColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableLedger.BeginingColumn) = value
            End Set
        End Property
        
        Public Property BiginQtyRow As BiginQtyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BiginQtybank_check")),BiginQtyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BiginQtybank_check"))
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableLedger.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableLedger._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableLedger._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyinNull() As Boolean
            Return Me.IsNull(Me.tableLedger.qtyinColumn)
        End Function
        
        Public Sub SetqtyinNull()
            Me(Me.tableLedger.qtyinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyoutNull() As Boolean
            Return Me.IsNull(Me.tableLedger.qtyoutColumn)
        End Function
        
        Public Sub SetqtyoutNull()
            Me(Me.tableLedger.qtyoutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableLedger.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscustomerNull() As Boolean
            Return Me.IsNull(Me.tableLedger.customerColumn)
        End Function
        
        Public Sub SetcustomerNull()
            Me(Me.tableLedger.customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableLedger.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableLedger.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableLedger.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableLedger.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableLedger.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableLedger.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableLedger.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableLedger.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableLedger.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableLedger.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorNull() As Boolean
            Return Me.IsNull(Me.tableLedger.vendorColumn)
        End Function
        
        Public Sub SetvendorNull()
            Me(Me.tableLedger.vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_creditNull() As Boolean
            Return Me.IsNull(Me.tableLedger.bill_creditColumn)
        End Function
        
        Public Sub Setbill_creditNull()
            Me(Me.tableLedger.bill_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeginingNull() As Boolean
            Return Me.IsNull(Me.tableLedger.BeginingColumn)
        End Function
        
        Public Sub SetBeginingNull()
            Me(Me.tableLedger.BeginingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LedgerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LedgerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sales_transferDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnunit_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnext_cost As DataColumn
        
        Private columnunit_cost As DataColumn
        
        Private columnID_sales_transfer As DataColumn
        
        Private columndate_action As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnline As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnstore_to As DataColumn
        
        Private columnstore_from As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnto_name As DataColumn
        
        Private columnfrom_name As DataColumn
        
        Friend Sub New()
            MyBase.New("sales_transfer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property unit_priceColumn As DataColumn
            Get
                Return Me.columnunit_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Friend ReadOnly Property unit_costColumn As DataColumn
            Get
                Return Me.columnunit_cost
            End Get
        End Property
        
        Friend ReadOnly Property ID_sales_transferColumn As DataColumn
            Get
                Return Me.columnID_sales_transfer
            End Get
        End Property
        
        Friend ReadOnly Property date_actionColumn As DataColumn
            Get
                Return Me.columndate_action
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property store_toColumn As DataColumn
            Get
                Return Me.columnstore_to
            End Get
        End Property
        
        Friend ReadOnly Property store_fromColumn As DataColumn
            Get
                Return Me.columnstore_from
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property to_nameColumn As DataColumn
            Get
                Return Me.columnto_name
            End Get
        End Property
        
        Friend ReadOnly Property from_nameColumn As DataColumn
            Get
                Return Me.columnfrom_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sales_transferRow
            Get
                Return CType(Me.Rows(index),sales_transferRow)
            End Get
        End Property
        
        Public Event sales_transferRowChanged As sales_transferRowChangeEventHandler
        
        Public Event sales_transferRowChanging As sales_transferRowChangeEventHandler
        
        Public Event sales_transferRowDeleted As sales_transferRowChangeEventHandler
        
        Public Event sales_transferRowDeleting As sales_transferRowChangeEventHandler
        
        Public Overloads Sub Addsales_transferRow(ByVal row As sales_transferRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addsales_transferRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal qty As Decimal,  _
                    ByVal unit_price As Decimal,  _
                    ByVal fet As Decimal,  _
                    ByVal ext_cost As Decimal,  _
                    ByVal unit_cost As Single,  _
                    ByVal ID_sales_transfer As String,  _
                    ByVal date_action As Date,  _
                    ByVal desc_item_type As String,  _
                    ByVal line As String,  _
                    ByVal complete_desc_brand As String,  _
                    ByVal desc_style As String,  _
                    ByVal flag As Boolean,  _
                    ByVal store_to As String,  _
                    ByVal store_from As String,  _
                    ByVal note As String,  _
                    ByVal to_name As String,  _
                    ByVal from_name As String) As sales_transferRow
            Dim rowsales_transferRow As sales_transferRow = CType(Me.NewRow,sales_transferRow)
            rowsales_transferRow.ItemArray = New Object() {item_no, desc_item, qty, unit_price, fet, ext_cost, unit_cost, ID_sales_transfer, date_action, desc_item_type, line, complete_desc_brand, desc_style, flag, store_to, store_from, note, to_name, from_name}
            Me.Rows.Add(rowsales_transferRow)
            Return rowsales_transferRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sales_transferDataTable = CType(MyBase.Clone,sales_transferDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sales_transferDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnqty = Me.Columns("qty")
            Me.columnunit_price = Me.Columns("unit_price")
            Me.columnfet = Me.Columns("fet")
            Me.columnext_cost = Me.Columns("ext_cost")
            Me.columnunit_cost = Me.Columns("unit_cost")
            Me.columnID_sales_transfer = Me.Columns("ID_sales_transfer")
            Me.columndate_action = Me.Columns("date_action")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnline = Me.Columns("line")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnflag = Me.Columns("flag")
            Me.columnstore_to = Me.Columns("store_to")
            Me.columnstore_from = Me.Columns("store_from")
            Me.columnnote = Me.Columns("note")
            Me.columnto_name = Me.Columns("to_name")
            Me.columnfrom_name = Me.Columns("from_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnunit_price = New DataColumn("unit_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columnunit_cost = New DataColumn("unit_cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_cost)
            Me.columnID_sales_transfer = New DataColumn("ID_sales_transfer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_sales_transfer)
            Me.columndate_action = New DataColumn("date_action", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_action)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnstore_to = New DataColumn("store_to", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_to)
            Me.columnstore_from = New DataColumn("store_from", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_from)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnto_name = New DataColumn("to_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnto_name)
            Me.columnfrom_name = New DataColumn("from_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrom_name)
            Me.columnitem_no.AllowDBNull = false
            Me.columnqty.ReadOnly = true
            Me.columnunit_price.ReadOnly = true
            Me.columnfet.ReadOnly = true
            Me.columnext_cost.ReadOnly = true
            Me.columnunit_cost.ReadOnly = true
            Me.columnID_sales_transfer.AllowDBNull = false
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function Newsales_transferRow() As sales_transferRow
            Return CType(Me.NewRow,sales_transferRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sales_transferRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sales_transferRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sales_transferRowChangedEvent) Is Nothing) Then
                RaiseEvent sales_transferRowChanged(Me, New sales_transferRowChangeEvent(CType(e.Row,sales_transferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sales_transferRowChangingEvent) Is Nothing) Then
                RaiseEvent sales_transferRowChanging(Me, New sales_transferRowChangeEvent(CType(e.Row,sales_transferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sales_transferRowDeletedEvent) Is Nothing) Then
                RaiseEvent sales_transferRowDeleted(Me, New sales_transferRowChangeEvent(CType(e.Row,sales_transferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sales_transferRowDeletingEvent) Is Nothing) Then
                RaiseEvent sales_transferRowDeleting(Me, New sales_transferRowChangeEvent(CType(e.Row,sales_transferRow), e.Action))
            End If
        End Sub
        
        Public Sub Removesales_transferRow(ByVal row As sales_transferRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sales_transferRow
        Inherits DataRow
        
        Private tablesales_transfer As sales_transferDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesales_transfer = CType(Me.Table,sales_transferDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tablesales_transfer.item_noColumn),String)
            End Get
            Set
                Me(Me.tablesales_transfer.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.qtyColumn) = value
            End Set
        End Property
        
        Public Property unit_price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.unit_priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.unit_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.fetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.fetColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.ext_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.ext_costColumn) = value
            End Set
        End Property
        
        Public Property unit_cost As Single
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.unit_costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.unit_costColumn) = value
            End Set
        End Property
        
        Public Property ID_sales_transfer As String
            Get
                Return CType(Me(Me.tablesales_transfer.ID_sales_transferColumn),String)
            End Get
            Set
                Me(Me.tablesales_transfer.ID_sales_transferColumn) = value
            End Set
        End Property
        
        Public Property date_action As Date
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.date_actionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.date_actionColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tablesales_transfer.lineColumn),String)
            End Get
            Set
                Me(Me.tablesales_transfer.lineColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.flagColumn) = value
            End Set
        End Property
        
        Public Property store_to As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.store_toColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.store_toColumn) = value
            End Set
        End Property
        
        Public Property store_from As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.store_fromColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.store_fromColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.noteColumn) = value
            End Set
        End Property
        
        Public Property to_name As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.to_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.to_nameColumn) = value
            End Set
        End Property
        
        Public Property from_name As String
            Get
                Try 
                    Return CType(Me(Me.tablesales_transfer.from_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesales_transfer.from_nameColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tablesales_transfer.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tablesales_transfer.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_priceNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.unit_priceColumn)
        End Function
        
        Public Sub Setunit_priceNull()
            Me(Me.tablesales_transfer.unit_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tablesales_transfer.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tablesales_transfer.ext_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_costNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.unit_costColumn)
        End Function
        
        Public Sub Setunit_costNull()
            Me(Me.tablesales_transfer.unit_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_actionNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.date_actionColumn)
        End Function
        
        Public Sub Setdate_actionNull()
            Me(Me.tablesales_transfer.date_actionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tablesales_transfer.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tablesales_transfer.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tablesales_transfer.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablesales_transfer.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_toNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.store_toColumn)
        End Function
        
        Public Sub Setstore_toNull()
            Me(Me.tablesales_transfer.store_toColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_fromNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.store_fromColumn)
        End Function
        
        Public Sub Setstore_fromNull()
            Me(Me.tablesales_transfer.store_fromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tablesales_transfer.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isto_nameNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.to_nameColumn)
        End Function
        
        Public Sub Setto_nameNull()
            Me(Me.tablesales_transfer.to_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfrom_nameNull() As Boolean
            Return Me.IsNull(Me.tablesales_transfer.from_nameColumn)
        End Function
        
        Public Sub Setfrom_nameNull()
            Me(Me.tablesales_transfer.from_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sales_transferRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sales_transferRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sales_transferRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sales_transferRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("STORE_SETUP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STORE_SETUPRow
            Get
                Return CType(Me.Rows(index),STORE_SETUPRow)
            End Get
        End Property
        
        Public Event STORE_SETUPRowChanged As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowChanging As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleted As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleting As STORE_SETUPRowChangeEventHandler
        
        Public Overloads Sub AddSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTORE_SETUPRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As STORE_SETUPRow
            Dim rowSTORE_SETUPRow As STORE_SETUPRow = CType(Me.NewRow,STORE_SETUPRow)
            rowSTORE_SETUPRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowSTORE_SETUPRow)
            Return rowSTORE_SETUPRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As STORE_SETUPRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),STORE_SETUPRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STORE_SETUPDataTable = CType(MyBase.Clone,STORE_SETUPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STORE_SETUPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintInvItemKey2", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewSTORE_SETUPRow() As STORE_SETUPRow
            Return CType(Me.NewRow,STORE_SETUPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STORE_SETUPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STORE_SETUPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STORE_SETUPRowChangedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanged(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STORE_SETUPRowChangingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanging(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STORE_SETUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleted(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STORE_SETUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleting(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRow
        Inherits DataRow
        
        Private tableSTORE_SETUP As STORE_SETUPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTORE_SETUP = CType(Me.Table,STORE_SETUPDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableSTORE_SETUP.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableSTORE_SETUP.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STORE_SETUPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STORE_SETUPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STORE_SETUPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
