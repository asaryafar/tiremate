'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrintLaborAndFees
    Inherits DataSet
    
    Private tableSummary As SummaryDataTable
    
    Private tableDetail As DetailDataTable
    
    Private tableList As ListDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Summary")) Is Nothing) Then
                Me.Tables.Add(New SummaryDataTable(ds.Tables("Summary")))
            End If
            If (Not (ds.Tables("Detail")) Is Nothing) Then
                Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
            End If
            If (Not (ds.Tables("List")) Is Nothing) Then
                Me.Tables.Add(New ListDataTable(ds.Tables("List")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Summary As SummaryDataTable
        Get
            Return Me.tableSummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Detail As DetailDataTable
        Get
            Return Me.tableDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property List As ListDataTable
        Get
            Return Me.tableList
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrintLaborAndFees = CType(MyBase.Clone,DSFrmPrintLaborAndFees)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Summary")) Is Nothing) Then
            Me.Tables.Add(New SummaryDataTable(ds.Tables("Summary")))
        End If
        If (Not (ds.Tables("Detail")) Is Nothing) Then
            Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
        End If
        If (Not (ds.Tables("List")) Is Nothing) Then
            Me.Tables.Add(New ListDataTable(ds.Tables("List")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSummary = CType(Me.Tables("Summary"),SummaryDataTable)
        If (Not (Me.tableSummary) Is Nothing) Then
            Me.tableSummary.InitVars
        End If
        Me.tableDetail = CType(Me.Tables("Detail"),DetailDataTable)
        If (Not (Me.tableDetail) Is Nothing) Then
            Me.tableDetail.InitVars
        End If
        Me.tableList = CType(Me.Tables("List"),ListDataTable)
        If (Not (Me.tableList) Is Nothing) Then
            Me.tableList.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrintLaborAndFees"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrintLaborAndFees.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSummary = New SummaryDataTable
        Me.Tables.Add(Me.tableSummary)
        Me.tableDetail = New DetailDataTable
        Me.Tables.Add(Me.tableDetail)
        Me.tableList = New ListDataTable
        Me.Tables.Add(Me.tableList)
    End Sub
    
    Private Function ShouldSerializeSummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeList() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As SummaryRowChangeEvent)
    
    Public Delegate Sub DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailRowChangeEvent)
    
    Public Delegate Sub ListRowChangeEventHandler(ByVal sender As Object, ByVal e As ListRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnqty As DataColumn
        
        Private columnExtPrice As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columnFlag As DataColumn
        
        Friend Sub New()
            MyBase.New("Summary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property ExtPriceColumn As DataColumn
            Get
                Return Me.columnExtPrice
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property FlagColumn As DataColumn
            Get
                Return Me.columnFlag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SummaryRow
            Get
                Return CType(Me.Rows(index),SummaryRow)
            End Get
        End Property
        
        Public Event SummaryRowChanged As SummaryRowChangeEventHandler
        
        Public Event SummaryRowChanging As SummaryRowChangeEventHandler
        
        Public Event SummaryRowDeleted As SummaryRowChangeEventHandler
        
        Public Event SummaryRowDeleting As SummaryRowChangeEventHandler
        
        Public Overloads Sub AddSummaryRow(ByVal row As SummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSummaryRow(ByVal qty As Decimal, ByVal ExtPrice As Decimal, ByVal cod_select As String, ByVal desc_service As String, ByVal Flag As Boolean) As SummaryRow
            Dim rowSummaryRow As SummaryRow = CType(Me.NewRow,SummaryRow)
            rowSummaryRow.ItemArray = New Object() {qty, ExtPrice, cod_select, desc_service, Flag}
            Me.Rows.Add(rowSummaryRow)
            Return rowSummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SummaryDataTable = CType(MyBase.Clone,SummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnqty = Me.Columns("qty")
            Me.columnExtPrice = Me.Columns("ExtPrice")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columnFlag = Me.Columns("Flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnExtPrice = New DataColumn("ExtPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtPrice)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columnFlag = New DataColumn("Flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag)
            Me.columnqty.ReadOnly = true
            Me.columnExtPrice.ReadOnly = true
        End Sub
        
        Public Function NewSummaryRow() As SummaryRow
            Return CType(Me.NewRow,SummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent SummaryRowChanged(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent SummaryRowChanging(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent SummaryRowDeleted(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent SummaryRowDeleting(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSummaryRow(ByVal row As SummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryRow
        Inherits DataRow
        
        Private tableSummary As SummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSummary = CType(Me.Table,SummaryDataTable)
        End Sub
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSummary.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.qtyColumn) = value
            End Set
        End Property
        
        Public Property ExtPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSummary.ExtPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.ExtPriceColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableSummary.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableSummary.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property Flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummary.FlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.FlagColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableSummary.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableSummary.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtPriceNull() As Boolean
            Return Me.IsNull(Me.tableSummary.ExtPriceColumn)
        End Function
        
        Public Sub SetExtPriceNull()
            Me(Me.tableSummary.ExtPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableSummary.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableSummary.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableSummary.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableSummary.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagNull() As Boolean
            Return Me.IsNull(Me.tableSummary.FlagColumn)
        End Function
        
        Public Sub SetFlagNull()
            Me(Me.tableSummary.FlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnExt_Price As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columnCost As DataColumn
        
        Private columnType As DataColumn
        
        Private columnGrProfAmount As DataColumn
        
        Private columnGrProfPercent As DataColumn
        
        Private columnFlag As DataColumn
        
        Private columndesc_srvice_category As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Friend Sub New()
            MyBase.New("Detail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property Ext_PriceColumn As DataColumn
            Get
                Return Me.columnExt_Price
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property GrProfAmountColumn As DataColumn
            Get
                Return Me.columnGrProfAmount
            End Get
        End Property
        
        Friend ReadOnly Property GrProfPercentColumn As DataColumn
            Get
                Return Me.columnGrProfPercent
            End Get
        End Property
        
        Friend ReadOnly Property FlagColumn As DataColumn
            Get
                Return Me.columnFlag
            End Get
        End Property
        
        Friend ReadOnly Property desc_srvice_categoryColumn As DataColumn
            Get
                Return Me.columndesc_srvice_category
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetailRow
            Get
                Return CType(Me.Rows(index),DetailRow)
            End Get
        End Property
        
        Public Event DetailRowChanged As DetailRowChangeEventHandler
        
        Public Event DetailRowChanging As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleted As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleting As DetailRowChangeEventHandler
        
        Public Overloads Sub AddDetailRow(ByVal row As DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetailRow(ByVal id_service_center As String, ByVal qty As Decimal, ByVal Ext_Price As Decimal, ByVal cod_select As String, ByVal desc_service As String, ByVal Cost As Decimal, ByVal Type As String, ByVal GrProfAmount As Decimal, ByVal GrProfPercent As Single, ByVal Flag As Boolean, ByVal desc_srvice_category As String, ByVal UnitPrice As Decimal) As DetailRow
            Dim rowDetailRow As DetailRow = CType(Me.NewRow,DetailRow)
            rowDetailRow.ItemArray = New Object() {id_service_center, qty, Ext_Price, cod_select, desc_service, Cost, Type, GrProfAmount, GrProfPercent, Flag, desc_srvice_category, UnitPrice}
            Me.Rows.Add(rowDetailRow)
            Return rowDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetailDataTable = CType(MyBase.Clone,DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnqty = Me.Columns("qty")
            Me.columnExt_Price = Me.Columns("Ext_Price")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columnCost = Me.Columns("Cost")
            Me.columnType = Me.Columns("Type")
            Me.columnGrProfAmount = Me.Columns("GrProfAmount")
            Me.columnGrProfPercent = Me.Columns("GrProfPercent")
            Me.columnFlag = Me.Columns("Flag")
            Me.columndesc_srvice_category = Me.Columns("desc_srvice_category")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnExt_Price = New DataColumn("Ext_Price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt_Price)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columnCost = New DataColumn("Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnGrProfAmount = New DataColumn("GrProfAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrProfAmount)
            Me.columnGrProfPercent = New DataColumn("GrProfPercent", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrProfPercent)
            Me.columnFlag = New DataColumn("Flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag)
            Me.columndesc_srvice_category = New DataColumn("desc_srvice_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_srvice_category)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnid_service_center.AllowDBNull = false
            Me.columnqty.ReadOnly = true
            Me.columnExt_Price.ReadOnly = true
            Me.columnCost.ReadOnly = true
            Me.columnGrProfAmount.ReadOnly = true
            Me.columnGrProfPercent.ReadOnly = true
            Me.columnUnitPrice.ReadOnly = true
        End Sub
        
        Public Function NewDetailRow() As DetailRow
            Return CType(Me.NewRow,DetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent DetailRowChanged(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent DetailRowChanging(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleted(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleting(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetailRow(ByVal row As DetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRow
        Inherits DataRow
        
        Private tableDetail As DetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetail = CType(Me.Table,DetailDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.qtyColumn) = value
            End Set
        End Property
        
        Public Property Ext_Price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.Ext_PriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.Ext_PriceColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property Cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.CostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.CostColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.TypeColumn) = value
            End Set
        End Property
        
        Public Property GrProfAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.GrProfAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.GrProfAmountColumn) = value
            End Set
        End Property
        
        Public Property GrProfPercent As Single
            Get
                Try 
                    Return CType(Me(Me.tableDetail.GrProfPercentColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.GrProfPercentColumn) = value
            End Set
        End Property
        
        Public Property Flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.FlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.FlagColumn) = value
            End Set
        End Property
        
        Public Property desc_srvice_category As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.desc_srvice_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.desc_srvice_categoryColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.UnitPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableDetail.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableDetail.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExt_PriceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.Ext_PriceColumn)
        End Function
        
        Public Sub SetExt_PriceNull()
            Me(Me.tableDetail.Ext_PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableDetail.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableDetail.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableDetail.CostColumn)
        End Function
        
        Public Sub SetCostNull()
            Me(Me.tableDetail.CostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableDetail.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableDetail.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGrProfAmountNull() As Boolean
            Return Me.IsNull(Me.tableDetail.GrProfAmountColumn)
        End Function
        
        Public Sub SetGrProfAmountNull()
            Me(Me.tableDetail.GrProfAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGrProfPercentNull() As Boolean
            Return Me.IsNull(Me.tableDetail.GrProfPercentColumn)
        End Function
        
        Public Sub SetGrProfPercentNull()
            Me(Me.tableDetail.GrProfPercentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagNull() As Boolean
            Return Me.IsNull(Me.tableDetail.FlagColumn)
        End Function
        
        Public Sub SetFlagNull()
            Me(Me.tableDetail.FlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_srvice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_srvice_categoryColumn)
        End Function
        
        Public Sub Setdesc_srvice_categoryNull()
            Me(Me.tableDetail.desc_srvice_categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableDetail.UnitPriceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_service As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columnprice_level1 As DataColumn
        
        Private columnprice_level2 As DataColumn
        
        Private columnprice_level3 As DataColumn
        
        Private columnprice_level4 As DataColumn
        
        Private columnprice_level5 As DataColumn
        
        Private columnprice_level6 As DataColumn
        
        Private columnservice_type_desc As DataColumn
        
        Private columndesc_srvice_category As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("List")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_serviceColumn As DataColumn
            Get
                Return Me.columncod_service
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property price_level1Column As DataColumn
            Get
                Return Me.columnprice_level1
            End Get
        End Property
        
        Friend ReadOnly Property price_level2Column As DataColumn
            Get
                Return Me.columnprice_level2
            End Get
        End Property
        
        Friend ReadOnly Property price_level3Column As DataColumn
            Get
                Return Me.columnprice_level3
            End Get
        End Property
        
        Friend ReadOnly Property price_level4Column As DataColumn
            Get
                Return Me.columnprice_level4
            End Get
        End Property
        
        Friend ReadOnly Property price_level5Column As DataColumn
            Get
                Return Me.columnprice_level5
            End Get
        End Property
        
        Friend ReadOnly Property price_level6Column As DataColumn
            Get
                Return Me.columnprice_level6
            End Get
        End Property
        
        Friend ReadOnly Property service_type_descColumn As DataColumn
            Get
                Return Me.columnservice_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property desc_srvice_categoryColumn As DataColumn
            Get
                Return Me.columndesc_srvice_category
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListRow
            Get
                Return CType(Me.Rows(index),ListRow)
            End Get
        End Property
        
        Public Event ListRowChanged As ListRowChangeEventHandler
        
        Public Event ListRowChanging As ListRowChangeEventHandler
        
        Public Event ListRowDeleted As ListRowChangeEventHandler
        
        Public Event ListRowDeleting As ListRowChangeEventHandler
        
        Public Overloads Sub AddListRow(ByVal row As ListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddListRow(ByVal cod_service As String, ByVal desc_service As String, ByVal price_level1 As Decimal, ByVal price_level2 As Decimal, ByVal price_level3 As Decimal, ByVal price_level4 As Decimal, ByVal price_level5 As Decimal, ByVal price_level6 As Decimal, ByVal service_type_desc As String, ByVal desc_srvice_category As String, ByVal flag As Boolean) As ListRow
            Dim rowListRow As ListRow = CType(Me.NewRow,ListRow)
            rowListRow.ItemArray = New Object() {cod_service, desc_service, price_level1, price_level2, price_level3, price_level4, price_level5, price_level6, service_type_desc, desc_srvice_category, flag}
            Me.Rows.Add(rowListRow)
            Return rowListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ListDataTable = CType(MyBase.Clone,ListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_service = Me.Columns("cod_service")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columnprice_level1 = Me.Columns("price_level1")
            Me.columnprice_level2 = Me.Columns("price_level2")
            Me.columnprice_level3 = Me.Columns("price_level3")
            Me.columnprice_level4 = Me.Columns("price_level4")
            Me.columnprice_level5 = Me.Columns("price_level5")
            Me.columnprice_level6 = Me.Columns("price_level6")
            Me.columnservice_type_desc = Me.Columns("service_type_desc")
            Me.columndesc_srvice_category = Me.Columns("desc_srvice_category")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_service = New DataColumn("cod_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_service)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columnprice_level1 = New DataColumn("price_level1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level1)
            Me.columnprice_level2 = New DataColumn("price_level2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level2)
            Me.columnprice_level3 = New DataColumn("price_level3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level3)
            Me.columnprice_level4 = New DataColumn("price_level4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level4)
            Me.columnprice_level5 = New DataColumn("price_level5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level5)
            Me.columnprice_level6 = New DataColumn("price_level6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level6)
            Me.columnservice_type_desc = New DataColumn("service_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type_desc)
            Me.columndesc_srvice_category = New DataColumn("desc_srvice_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_srvice_category)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_service.AllowDBNull = false
        End Sub
        
        Public Function NewListRow() As ListRow
            Return CType(Me.NewRow,ListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListRowChangedEvent) Is Nothing) Then
                RaiseEvent ListRowChanged(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListRowChangingEvent) Is Nothing) Then
                RaiseEvent ListRowChanging(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListRowDeleted(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListRowDeleting(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveListRow(ByVal row As ListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRow
        Inherits DataRow
        
        Private tableList As ListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableList = CType(Me.Table,ListDataTable)
        End Sub
        
        Public Property cod_service As String
            Get
                Return CType(Me(Me.tableList.cod_serviceColumn),String)
            End Get
            Set
                Me(Me.tableList.cod_serviceColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property price_level1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level1Column) = value
            End Set
        End Property
        
        Public Property price_level2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level2Column) = value
            End Set
        End Property
        
        Public Property price_level3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level3Column) = value
            End Set
        End Property
        
        Public Property price_level4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level4Column) = value
            End Set
        End Property
        
        Public Property price_level5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level5Column) = value
            End Set
        End Property
        
        Public Property price_level6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableList.price_level6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.price_level6Column) = value
            End Set
        End Property
        
        Public Property service_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableList.service_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.service_type_descColumn) = value
            End Set
        End Property
        
        Public Property desc_srvice_category As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_srvice_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_srvice_categoryColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableList.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableList.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level1Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level1Column)
        End Function
        
        Public Sub Setprice_level1Null()
            Me(Me.tableList.price_level1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level2Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level2Column)
        End Function
        
        Public Sub Setprice_level2Null()
            Me(Me.tableList.price_level2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level3Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level3Column)
        End Function
        
        Public Sub Setprice_level3Null()
            Me(Me.tableList.price_level3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level4Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level4Column)
        End Function
        
        Public Sub Setprice_level4Null()
            Me(Me.tableList.price_level4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level5Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level5Column)
        End Function
        
        Public Sub Setprice_level5Null()
            Me(Me.tableList.price_level5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level6Null() As Boolean
            Return Me.IsNull(Me.tableList.price_level6Column)
        End Function
        
        Public Sub Setprice_level6Null()
            Me(Me.tableList.price_level6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_type_descNull() As Boolean
            Return Me.IsNull(Me.tableList.service_type_descColumn)
        End Function
        
        Public Sub Setservice_type_descNull()
            Me(Me.tableList.service_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_srvice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_srvice_categoryColumn)
        End Function
        
        Public Sub Setdesc_srvice_categoryNull()
            Me(Me.tableList.desc_srvice_categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableList.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableList.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
