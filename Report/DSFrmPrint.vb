'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrint
    Inherits DataSet
    
    Private tableinv_item1 As inv_item1DataTable
    
    Private tableProductPriceList As ProductPriceListDataTable
    
    Private tableinv_item As inv_itemDataTable
    
    Private tableInventoryCountSheet As InventoryCountSheetDataTable
    
    Private tableinv_value As inv_valueDataTable
    
    Private tableSlowMoving As SlowMovingDataTable
    
    Private tableIVRSummery As IVRSummeryDataTable
    
    Private tableInventoryStatusReport As InventoryStatusReportDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_item1")) Is Nothing) Then
                Me.Tables.Add(New inv_item1DataTable(ds.Tables("inv_item1")))
            End If
            If (Not (ds.Tables("ProductPriceList")) Is Nothing) Then
                Me.Tables.Add(New ProductPriceListDataTable(ds.Tables("ProductPriceList")))
            End If
            If (Not (ds.Tables("inv_item")) Is Nothing) Then
                Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
            End If
            If (Not (ds.Tables("InventoryCountSheet")) Is Nothing) Then
                Me.Tables.Add(New InventoryCountSheetDataTable(ds.Tables("InventoryCountSheet")))
            End If
            If (Not (ds.Tables("inv_value")) Is Nothing) Then
                Me.Tables.Add(New inv_valueDataTable(ds.Tables("inv_value")))
            End If
            If (Not (ds.Tables("SlowMoving")) Is Nothing) Then
                Me.Tables.Add(New SlowMovingDataTable(ds.Tables("SlowMoving")))
            End If
            If (Not (ds.Tables("IVRSummery")) Is Nothing) Then
                Me.Tables.Add(New IVRSummeryDataTable(ds.Tables("IVRSummery")))
            End If
            If (Not (ds.Tables("InventoryStatusReport")) Is Nothing) Then
                Me.Tables.Add(New InventoryStatusReportDataTable(ds.Tables("InventoryStatusReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item1 As inv_item1DataTable
        Get
            Return Me.tableinv_item1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductPriceList As ProductPriceListDataTable
        Get
            Return Me.tableProductPriceList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item As inv_itemDataTable
        Get
            Return Me.tableinv_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InventoryCountSheet As InventoryCountSheetDataTable
        Get
            Return Me.tableInventoryCountSheet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_value As inv_valueDataTable
        Get
            Return Me.tableinv_value
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SlowMoving As SlowMovingDataTable
        Get
            Return Me.tableSlowMoving
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IVRSummery As IVRSummeryDataTable
        Get
            Return Me.tableIVRSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InventoryStatusReport As InventoryStatusReportDataTable
        Get
            Return Me.tableInventoryStatusReport
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrint = CType(MyBase.Clone,DSFrmPrint)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_item1")) Is Nothing) Then
            Me.Tables.Add(New inv_item1DataTable(ds.Tables("inv_item1")))
        End If
        If (Not (ds.Tables("ProductPriceList")) Is Nothing) Then
            Me.Tables.Add(New ProductPriceListDataTable(ds.Tables("ProductPriceList")))
        End If
        If (Not (ds.Tables("inv_item")) Is Nothing) Then
            Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
        End If
        If (Not (ds.Tables("InventoryCountSheet")) Is Nothing) Then
            Me.Tables.Add(New InventoryCountSheetDataTable(ds.Tables("InventoryCountSheet")))
        End If
        If (Not (ds.Tables("inv_value")) Is Nothing) Then
            Me.Tables.Add(New inv_valueDataTable(ds.Tables("inv_value")))
        End If
        If (Not (ds.Tables("SlowMoving")) Is Nothing) Then
            Me.Tables.Add(New SlowMovingDataTable(ds.Tables("SlowMoving")))
        End If
        If (Not (ds.Tables("IVRSummery")) Is Nothing) Then
            Me.Tables.Add(New IVRSummeryDataTable(ds.Tables("IVRSummery")))
        End If
        If (Not (ds.Tables("InventoryStatusReport")) Is Nothing) Then
            Me.Tables.Add(New InventoryStatusReportDataTable(ds.Tables("InventoryStatusReport")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_item1 = CType(Me.Tables("inv_item1"),inv_item1DataTable)
        If (Not (Me.tableinv_item1) Is Nothing) Then
            Me.tableinv_item1.InitVars
        End If
        Me.tableProductPriceList = CType(Me.Tables("ProductPriceList"),ProductPriceListDataTable)
        If (Not (Me.tableProductPriceList) Is Nothing) Then
            Me.tableProductPriceList.InitVars
        End If
        Me.tableinv_item = CType(Me.Tables("inv_item"),inv_itemDataTable)
        If (Not (Me.tableinv_item) Is Nothing) Then
            Me.tableinv_item.InitVars
        End If
        Me.tableInventoryCountSheet = CType(Me.Tables("InventoryCountSheet"),InventoryCountSheetDataTable)
        If (Not (Me.tableInventoryCountSheet) Is Nothing) Then
            Me.tableInventoryCountSheet.InitVars
        End If
        Me.tableinv_value = CType(Me.Tables("inv_value"),inv_valueDataTable)
        If (Not (Me.tableinv_value) Is Nothing) Then
            Me.tableinv_value.InitVars
        End If
        Me.tableSlowMoving = CType(Me.Tables("SlowMoving"),SlowMovingDataTable)
        If (Not (Me.tableSlowMoving) Is Nothing) Then
            Me.tableSlowMoving.InitVars
        End If
        Me.tableIVRSummery = CType(Me.Tables("IVRSummery"),IVRSummeryDataTable)
        If (Not (Me.tableIVRSummery) Is Nothing) Then
            Me.tableIVRSummery.InitVars
        End If
        Me.tableInventoryStatusReport = CType(Me.Tables("InventoryStatusReport"),InventoryStatusReportDataTable)
        If (Not (Me.tableInventoryStatusReport) Is Nothing) Then
            Me.tableInventoryStatusReport.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrint"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrint.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_item1 = New inv_item1DataTable
        Me.Tables.Add(Me.tableinv_item1)
        Me.tableProductPriceList = New ProductPriceListDataTable
        Me.Tables.Add(Me.tableProductPriceList)
        Me.tableinv_item = New inv_itemDataTable
        Me.Tables.Add(Me.tableinv_item)
        Me.tableInventoryCountSheet = New InventoryCountSheetDataTable
        Me.Tables.Add(Me.tableInventoryCountSheet)
        Me.tableinv_value = New inv_valueDataTable
        Me.Tables.Add(Me.tableinv_value)
        Me.tableSlowMoving = New SlowMovingDataTable
        Me.Tables.Add(Me.tableSlowMoving)
        Me.tableIVRSummery = New IVRSummeryDataTable
        Me.Tables.Add(Me.tableIVRSummery)
        Me.tableInventoryStatusReport = New InventoryStatusReportDataTable
        Me.Tables.Add(Me.tableInventoryStatusReport)
    End Sub
    
    Private Function ShouldSerializeinv_item1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProductPriceList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventoryCountSheet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_value() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSlowMoving() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIVRSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventoryStatusReport() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_item1RowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item1RowChangeEvent)
    
    Public Delegate Sub ProductPriceListRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductPriceListRowChangeEvent)
    
    Public Delegate Sub inv_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemRowChangeEvent)
    
    Public Delegate Sub InventoryCountSheetRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryCountSheetRowChangeEvent)
    
    Public Delegate Sub inv_valueRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_valueRowChangeEvent)
    
    Public Delegate Sub SlowMovingRowChangeEventHandler(ByVal sender As Object, ByVal e As SlowMovingRowChangeEvent)
    
    Public Delegate Sub IVRSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As IVRSummeryRowChangeEvent)
    
    Public Delegate Sub InventoryStatusReportRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryStatusReportRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnline As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Private columnlocation As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property locationColumn As DataColumn
            Get
                Return Me.columnlocation
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item1Row
            Get
                Return CType(Me.Rows(index),inv_item1Row)
            End Get
        End Property
        
        Public Event inv_item1RowChanged As inv_item1RowChangeEventHandler
        
        Public Event inv_item1RowChanging As inv_item1RowChangeEventHandler
        
        Public Event inv_item1RowDeleted As inv_item1RowChangeEventHandler
        
        Public Event inv_item1RowDeleting As inv_item1RowChangeEventHandler
        
        Public Overloads Sub Addinv_item1Row(ByVal row As inv_item1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item1Row(ByVal flag As Boolean, ByVal item_no As String, ByVal desc_item As String, ByVal size As String, ByVal complete_desc_brand As String, ByVal line As String, ByVal desc_style As String, ByVal desc_quick_refrence As String, ByVal location As String) As inv_item1Row
            Dim rowinv_item1Row As inv_item1Row = CType(Me.NewRow,inv_item1Row)
            rowinv_item1Row.ItemArray = New Object() {flag, item_no, desc_item, size, complete_desc_brand, line, desc_style, desc_quick_refrence, location}
            Me.Rows.Add(rowinv_item1Row)
            Return rowinv_item1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item1DataTable = CType(MyBase.Clone,inv_item1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnline = Me.Columns("line")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
            Me.columnlocation = Me.Columns("location")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columnlocation = New DataColumn("location", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlocation)
        End Sub
        
        Public Function Newinv_item1Row() As inv_item1Row
            Return CType(Me.NewRow,inv_item1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item1RowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item1RowChanged(Me, New inv_item1RowChangeEvent(CType(e.Row,inv_item1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item1RowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item1RowChanging(Me, New inv_item1RowChangeEvent(CType(e.Row,inv_item1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item1RowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item1RowDeleted(Me, New inv_item1RowChangeEvent(CType(e.Row,inv_item1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item1RowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item1RowDeleting(Me, New inv_item1RowChangeEvent(CType(e.Row,inv_item1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item1Row(ByVal row As inv_item1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item1Row
        Inherits DataRow
        
        Private tableinv_item1 As inv_item1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item1 = CType(Me.Table,inv_item1DataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.flagColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.sizeColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.lineColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property location As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item1.locationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item1.locationColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableinv_item1.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_item1.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item1.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableinv_item1.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_item1.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableinv_item1.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_item1.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item1.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslocationNull() As Boolean
            Return Me.IsNull(Me.tableinv_item1.locationColumn)
        End Function
        
        Public Sub SetlocationNull()
            Me(Me.tableinv_item1.locationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductPriceListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columnline As DataColumn
        
        Private columnservice_description As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columncost As DataColumn
        
        Private columnprice_code As DataColumn
        
        Private columnamount_price1 As DataColumn
        
        Private columnamount_price2 As DataColumn
        
        Private columnamount_price3 As DataColumn
        
        Private columnamount_price4 As DataColumn
        
        Private columnamount_price5 As DataColumn
        
        Private columnamount_price6 As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Friend Sub New()
            MyBase.New("ProductPriceList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property service_descriptionColumn As DataColumn
            Get
                Return Me.columnservice_description
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property amount_price1Column As DataColumn
            Get
                Return Me.columnamount_price1
            End Get
        End Property
        
        Friend ReadOnly Property amount_price2Column As DataColumn
            Get
                Return Me.columnamount_price2
            End Get
        End Property
        
        Friend ReadOnly Property amount_price3Column As DataColumn
            Get
                Return Me.columnamount_price3
            End Get
        End Property
        
        Friend ReadOnly Property amount_price4Column As DataColumn
            Get
                Return Me.columnamount_price4
            End Get
        End Property
        
        Friend ReadOnly Property amount_price5Column As DataColumn
            Get
                Return Me.columnamount_price5
            End Get
        End Property
        
        Friend ReadOnly Property amount_price6Column As DataColumn
            Get
                Return Me.columnamount_price6
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductPriceListRow
            Get
                Return CType(Me.Rows(index),ProductPriceListRow)
            End Get
        End Property
        
        Public Event ProductPriceListRowChanged As ProductPriceListRowChangeEventHandler
        
        Public Event ProductPriceListRowChanging As ProductPriceListRowChangeEventHandler
        
        Public Event ProductPriceListRowDeleted As ProductPriceListRowChangeEventHandler
        
        Public Event ProductPriceListRowDeleting As ProductPriceListRowChangeEventHandler
        
        Public Overloads Sub AddProductPriceListRow(ByVal row As ProductPriceListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProductPriceListRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal size As String,  _
                    ByVal line As String,  _
                    ByVal service_description As String,  _
                    ByVal list_price As Single,  _
                    ByVal fet As Single,  _
                    ByVal picture() As Byte,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal cost As Decimal,  _
                    ByVal price_code As String,  _
                    ByVal amount_price1 As Decimal,  _
                    ByVal amount_price2 As Decimal,  _
                    ByVal amount_price3 As Decimal,  _
                    ByVal amount_price4 As Decimal,  _
                    ByVal amount_price5 As Decimal,  _
                    ByVal amount_price6 As Decimal,  _
                    ByVal complete_desc_brand As String) As ProductPriceListRow
            Dim rowProductPriceListRow As ProductPriceListRow = CType(Me.NewRow,ProductPriceListRow)
            rowProductPriceListRow.ItemArray = New Object() {item_no, desc_item, size, line, service_description, list_price, fet, picture, flag, cod_brand, style, cost, price_code, amount_price1, amount_price2, amount_price3, amount_price4, amount_price5, amount_price6, complete_desc_brand}
            Me.Rows.Add(rowProductPriceListRow)
            Return rowProductPriceListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProductPriceListDataTable = CType(MyBase.Clone,ProductPriceListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProductPriceListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columnline = Me.Columns("line")
            Me.columnservice_description = Me.Columns("service_description")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columnfet = Me.Columns("fet")
            Me.columnpicture = Me.Columns("picture")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columncost = Me.Columns("cost")
            Me.columnprice_code = Me.Columns("price_code")
            Me.columnamount_price1 = Me.Columns("amount_price1")
            Me.columnamount_price2 = Me.Columns("amount_price2")
            Me.columnamount_price3 = Me.Columns("amount_price3")
            Me.columnamount_price4 = Me.Columns("amount_price4")
            Me.columnamount_price5 = Me.Columns("amount_price5")
            Me.columnamount_price6 = Me.Columns("amount_price6")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnservice_description = New DataColumn("service_description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_description)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columnamount_price1 = New DataColumn("amount_price1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price1)
            Me.columnamount_price2 = New DataColumn("amount_price2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price2)
            Me.columnamount_price3 = New DataColumn("amount_price3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price3)
            Me.columnamount_price4 = New DataColumn("amount_price4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price4)
            Me.columnamount_price5 = New DataColumn("amount_price5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price5)
            Me.columnamount_price6 = New DataColumn("amount_price6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_price6)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnitem_no.AllowDBNull = false
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewProductPriceListRow() As ProductPriceListRow
            Return CType(Me.NewRow,ProductPriceListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProductPriceListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductPriceListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductPriceListRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductPriceListRowChanged(Me, New ProductPriceListRowChangeEvent(CType(e.Row,ProductPriceListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductPriceListRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductPriceListRowChanging(Me, New ProductPriceListRowChangeEvent(CType(e.Row,ProductPriceListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductPriceListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductPriceListRowDeleted(Me, New ProductPriceListRowChangeEvent(CType(e.Row,ProductPriceListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductPriceListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductPriceListRowDeleting(Me, New ProductPriceListRowChangeEvent(CType(e.Row,ProductPriceListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProductPriceListRow(ByVal row As ProductPriceListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductPriceListRow
        Inherits DataRow
        
        Private tableProductPriceList As ProductPriceListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductPriceList = CType(Me.Table,ProductPriceListDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableProductPriceList.item_noColumn),String)
            End Get
            Set
                Me(Me.tableProductPriceList.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.sizeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableProductPriceList.lineColumn),String)
            End Get
            Set
                Me(Me.tableProductPriceList.lineColumn) = value
            End Set
        End Property
        
        Public Property service_description As String
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.service_descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.service_descriptionColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.list_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.fetColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.pictureColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProductPriceList.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableProductPriceList.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProductPriceList.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableProductPriceList.styleColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.costColumn) = value
            End Set
        End Property
        
        Public Property price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.price_codeColumn) = value
            End Set
        End Property
        
        Public Property amount_price1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price1Column) = value
            End Set
        End Property
        
        Public Property amount_price2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price2Column) = value
            End Set
        End Property
        
        Public Property amount_price3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price3Column) = value
            End Set
        End Property
        
        Public Property amount_price4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price4Column) = value
            End Set
        End Property
        
        Public Property amount_price5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price5Column) = value
            End Set
        End Property
        
        Public Property amount_price6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.amount_price6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.amount_price6Column) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableProductPriceList.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductPriceList.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableProductPriceList.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableProductPriceList.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.service_descriptionColumn)
        End Function
        
        Public Sub Setservice_descriptionNull()
            Me(Me.tableProductPriceList.service_descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableProductPriceList.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableProductPriceList.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableProductPriceList.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableProductPriceList.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableProductPriceList.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableProductPriceList.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableProductPriceList.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_codeNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.price_codeColumn)
        End Function
        
        Public Sub Setprice_codeNull()
            Me(Me.tableProductPriceList.price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price1Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price1Column)
        End Function
        
        Public Sub Setamount_price1Null()
            Me(Me.tableProductPriceList.amount_price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price2Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price2Column)
        End Function
        
        Public Sub Setamount_price2Null()
            Me(Me.tableProductPriceList.amount_price2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price3Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price3Column)
        End Function
        
        Public Sub Setamount_price3Null()
            Me(Me.tableProductPriceList.amount_price3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price4Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price4Column)
        End Function
        
        Public Sub Setamount_price4Null()
            Me(Me.tableProductPriceList.amount_price4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price5Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price5Column)
        End Function
        
        Public Sub Setamount_price5Null()
            Me(Me.tableProductPriceList.amount_price5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_price6Null() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.amount_price6Column)
        End Function
        
        Public Sub Setamount_price6Null()
            Me(Me.tableProductPriceList.amount_price6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableProductPriceList.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableProductPriceList.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductPriceListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProductPriceListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProductPriceListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProductPriceListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columnline As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Private columnRepNo As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnflagitem As DataColumn
        
        Private columnflagline As DataColumn
        
        Private columnflagbrand As DataColumn
        
        Private columnflagstyle As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Friend ReadOnly Property RepNoColumn As DataColumn
            Get
                Return Me.columnRepNo
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property flagitemColumn As DataColumn
            Get
                Return Me.columnflagitem
            End Get
        End Property
        
        Friend ReadOnly Property flaglineColumn As DataColumn
            Get
                Return Me.columnflagline
            End Get
        End Property
        
        Friend ReadOnly Property flagbrandColumn As DataColumn
            Get
                Return Me.columnflagbrand
            End Get
        End Property
        
        Friend ReadOnly Property flagstyleColumn As DataColumn
            Get
                Return Me.columnflagstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemRow
            Get
                Return CType(Me.Rows(index),inv_itemRow)
            End Get
        End Property
        
        Public Event inv_itemRowChanged As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowChanging As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleted As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleting As inv_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal size As String,  _
                    ByVal line As String,  _
                    ByVal one As String,  _
                    ByVal two As String,  _
                    ByVal three As String,  _
                    ByVal four As String,  _
                    ByVal five As String,  _
                    ByVal RepNo As String,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal flagitem As Boolean,  _
                    ByVal flagline As Boolean,  _
                    ByVal flagbrand As Boolean,  _
                    ByVal flagstyle As Boolean,  _
                    ByVal desc_price_code As String) As inv_itemRow
            Dim rowinv_itemRow As inv_itemRow = CType(Me.NewRow,inv_itemRow)
            rowinv_itemRow.ItemArray = New Object() {item_no, desc_item, size, line, one, two, three, four, five, RepNo, flag, cod_brand, style, flagitem, flagline, flagbrand, flagstyle, desc_price_code}
            Me.Rows.Add(rowinv_itemRow)
            Return rowinv_itemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemDataTable = CType(MyBase.Clone,inv_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columnline = Me.Columns("line")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
            Me.columnRepNo = Me.Columns("RepNo")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnflagitem = Me.Columns("flagitem")
            Me.columnflagline = Me.Columns("flagline")
            Me.columnflagbrand = Me.Columns("flagbrand")
            Me.columnflagstyle = Me.Columns("flagstyle")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnone = New DataColumn("one", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
            Me.columnRepNo = New DataColumn("RepNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRepNo)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnflagitem = New DataColumn("flagitem", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagitem)
            Me.columnflagline = New DataColumn("flagline", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagline)
            Me.columnflagbrand = New DataColumn("flagbrand", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagbrand)
            Me.columnflagstyle = New DataColumn("flagstyle", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagstyle)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
        End Sub
        
        Public Function Newinv_itemRow() As inv_itemRow
            Return CType(Me.NewRow,inv_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanged(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanging(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleted(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleting(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRow
        Inherits DataRow
        
        Private tableinv_item As inv_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item = CType(Me.Table,inv_itemDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.sizeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                If Me.IslineNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_item.lineColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_item.lineColumn) = value
            End Set
        End Property
        
        Public Property one As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.oneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.oneColumn) = value
            End Set
        End Property
        
        Public Property two As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.twoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.twoColumn) = value
            End Set
        End Property
        
        Public Property three As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.threeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.threeColumn) = value
            End Set
        End Property
        
        Public Property four As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.fourColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.fourColumn) = value
            End Set
        End Property
        
        Public Property five As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.fiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.fiveColumn) = value
            End Set
        End Property
        
        Public Property RepNo As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.RepNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.RepNoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_item.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_item.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_item.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_item.styleColumn) = value
            End Set
        End Property
        
        Public Property flagitem As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.flagitemColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.flagitemColumn) = value
            End Set
        End Property
        
        Public Property flagline As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.flaglineColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.flaglineColumn) = value
            End Set
        End Property
        
        Public Property flagbrand As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.flagbrandColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.flagbrandColumn) = value
            End Set
        End Property
        
        Public Property flagstyle As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.flagstyleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.flagstyleColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_item.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableinv_item.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableinv_item.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tableinv_item.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tableinv_item.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tableinv_item.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tableinv_item.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tableinv_item.fiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRepNoNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.RepNoColumn)
        End Function
        
        Public Sub SetRepNoNull()
            Me(Me.tableinv_item.RepNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableinv_item.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableinv_item.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableinv_item.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagitemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.flagitemColumn)
        End Function
        
        Public Sub SetflagitemNull()
            Me(Me.tableinv_item.flagitemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflaglineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.flaglineColumn)
        End Function
        
        Public Sub SetflaglineNull()
            Me(Me.tableinv_item.flaglineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagbrandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.flagbrandColumn)
        End Function
        
        Public Sub SetflagbrandNull()
            Me(Me.tableinv_item.flagbrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.flagstyleColumn)
        End Function
        
        Public Sub SetflagstyleNull()
            Me(Me.tableinv_item.flagstyleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_item.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryCountSheetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnBin As DataColumn
        
        Private columnLcount As DataColumn
        
        Private columnQOH As DataColumn
        
        Private columnQCounted As DataColumn
        
        Private columnRemarks As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnline As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("InventoryCountSheet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property BinColumn As DataColumn
            Get
                Return Me.columnBin
            End Get
        End Property
        
        Friend ReadOnly Property LcountColumn As DataColumn
            Get
                Return Me.columnLcount
            End Get
        End Property
        
        Friend ReadOnly Property QOHColumn As DataColumn
            Get
                Return Me.columnQOH
            End Get
        End Property
        
        Friend ReadOnly Property QCountedColumn As DataColumn
            Get
                Return Me.columnQCounted
            End Get
        End Property
        
        Friend ReadOnly Property RemarksColumn As DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryCountSheetRow
            Get
                Return CType(Me.Rows(index),InventoryCountSheetRow)
            End Get
        End Property
        
        Public Event InventoryCountSheetRowChanged As InventoryCountSheetRowChangeEventHandler
        
        Public Event InventoryCountSheetRowChanging As InventoryCountSheetRowChangeEventHandler
        
        Public Event InventoryCountSheetRowDeleted As InventoryCountSheetRowChangeEventHandler
        
        Public Event InventoryCountSheetRowDeleting As InventoryCountSheetRowChangeEventHandler
        
        Public Overloads Sub AddInventoryCountSheetRow(ByVal row As InventoryCountSheetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryCountSheetRow(ByVal item_no As String, ByVal desc_item As String, ByVal Bin As String, ByVal Lcount As Single, ByVal QOH As Single, ByVal QCounted As Single, ByVal Remarks As String, ByVal flag As Boolean, ByVal line As String, ByVal cod_brand As String, ByVal style As String, ByVal desc_quick_refrence As String) As InventoryCountSheetRow
            Dim rowInventoryCountSheetRow As InventoryCountSheetRow = CType(Me.NewRow,InventoryCountSheetRow)
            rowInventoryCountSheetRow.ItemArray = New Object() {item_no, desc_item, Bin, Lcount, QOH, QCounted, Remarks, flag, line, cod_brand, style, desc_quick_refrence}
            Me.Rows.Add(rowInventoryCountSheetRow)
            Return rowInventoryCountSheetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryCountSheetDataTable = CType(MyBase.Clone,InventoryCountSheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryCountSheetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnBin = Me.Columns("Bin")
            Me.columnLcount = Me.Columns("Lcount")
            Me.columnQOH = Me.Columns("QOH")
            Me.columnQCounted = Me.Columns("QCounted")
            Me.columnRemarks = Me.Columns("Remarks")
            Me.columnflag = Me.Columns("flag")
            Me.columnline = Me.Columns("line")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnBin = New DataColumn("Bin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBin)
            Me.columnLcount = New DataColumn("Lcount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLcount)
            Me.columnQOH = New DataColumn("QOH", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQOH)
            Me.columnQCounted = New DataColumn("QCounted", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQCounted)
            Me.columnRemarks = New DataColumn("Remarks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemarks)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.columnitem_no.AllowDBNull = false
            Me.columnLcount.ReadOnly = true
            Me.columnline.AllowDBNull = false
        End Sub
        
        Public Function NewInventoryCountSheetRow() As InventoryCountSheetRow
            Return CType(Me.NewRow,InventoryCountSheetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryCountSheetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryCountSheetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryCountSheetRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryCountSheetRowChanged(Me, New InventoryCountSheetRowChangeEvent(CType(e.Row,InventoryCountSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryCountSheetRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryCountSheetRowChanging(Me, New InventoryCountSheetRowChangeEvent(CType(e.Row,InventoryCountSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryCountSheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryCountSheetRowDeleted(Me, New InventoryCountSheetRowChangeEvent(CType(e.Row,InventoryCountSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryCountSheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryCountSheetRowDeleting(Me, New InventoryCountSheetRowChangeEvent(CType(e.Row,InventoryCountSheetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryCountSheetRow(ByVal row As InventoryCountSheetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryCountSheetRow
        Inherits DataRow
        
        Private tableInventoryCountSheet As InventoryCountSheetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventoryCountSheet = CType(Me.Table,InventoryCountSheetDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableInventoryCountSheet.item_noColumn),String)
            End Get
            Set
                Me(Me.tableInventoryCountSheet.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property Bin As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.BinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.BinColumn) = value
            End Set
        End Property
        
        Public Property Lcount As Single
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.LcountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.LcountColumn) = value
            End Set
        End Property
        
        Public Property QOH As Single
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.QOHColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.QOHColumn) = value
            End Set
        End Property
        
        Public Property QCounted As Single
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.QCountedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.QCountedColumn) = value
            End Set
        End Property
        
        Public Property Remarks As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.RemarksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.RemarksColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.flagColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableInventoryCountSheet.lineColumn),String)
            End Get
            Set
                Me(Me.tableInventoryCountSheet.lineColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInventoryCountSheet.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInventoryCountSheet.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInventoryCountSheet.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInventoryCountSheet.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryCountSheet.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryCountSheet.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInventoryCountSheet.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBinNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.BinColumn)
        End Function
        
        Public Sub SetBinNull()
            Me(Me.tableInventoryCountSheet.BinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLcountNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.LcountColumn)
        End Function
        
        Public Sub SetLcountNull()
            Me(Me.tableInventoryCountSheet.LcountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQOHNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.QOHColumn)
        End Function
        
        Public Sub SetQOHNull()
            Me(Me.tableInventoryCountSheet.QOHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQCountedNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.QCountedColumn)
        End Function
        
        Public Sub SetQCountedNull()
            Me(Me.tableInventoryCountSheet.QCountedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.RemarksColumn)
        End Function
        
        Public Sub SetRemarksNull()
            Me(Me.tableInventoryCountSheet.RemarksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableInventoryCountSheet.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableInventoryCountSheet.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableInventoryCountSheet.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableInventoryCountSheet.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableInventoryCountSheet.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryCountSheetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryCountSheetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryCountSheetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryCountSheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_valueDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columnline As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Private columnRepNo As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnflagitem As DataColumn
        
        Private columnflagline As DataColumn
        
        Private columnflagbrand As DataColumn
        
        Private columnflagstyle As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_value")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Friend ReadOnly Property RepNoColumn As DataColumn
            Get
                Return Me.columnRepNo
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property flagitemColumn As DataColumn
            Get
                Return Me.columnflagitem
            End Get
        End Property
        
        Friend ReadOnly Property flaglineColumn As DataColumn
            Get
                Return Me.columnflagline
            End Get
        End Property
        
        Friend ReadOnly Property flagbrandColumn As DataColumn
            Get
                Return Me.columnflagbrand
            End Get
        End Property
        
        Friend ReadOnly Property flagstyleColumn As DataColumn
            Get
                Return Me.columnflagstyle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_valueRow
            Get
                Return CType(Me.Rows(index),inv_valueRow)
            End Get
        End Property
        
        Public Event inv_valueRowChanged As inv_valueRowChangeEventHandler
        
        Public Event inv_valueRowChanging As inv_valueRowChangeEventHandler
        
        Public Event inv_valueRowDeleted As inv_valueRowChangeEventHandler
        
        Public Event inv_valueRowDeleting As inv_valueRowChangeEventHandler
        
        Public Overloads Sub Addinv_valueRow(ByVal row As inv_valueRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_valueRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal size As String,  _
                    ByVal line As String,  _
                    ByVal one As Decimal,  _
                    ByVal two As Decimal,  _
                    ByVal three As Decimal,  _
                    ByVal four As Decimal,  _
                    ByVal five As String,  _
                    ByVal RepNo As String,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal flagitem As Boolean,  _
                    ByVal flagline As Boolean,  _
                    ByVal flagbrand As Boolean,  _
                    ByVal flagstyle As Boolean) As inv_valueRow
            Dim rowinv_valueRow As inv_valueRow = CType(Me.NewRow,inv_valueRow)
            rowinv_valueRow.ItemArray = New Object() {item_no, desc_item, size, line, one, two, three, four, five, RepNo, flag, cod_brand, style, flagitem, flagline, flagbrand, flagstyle}
            Me.Rows.Add(rowinv_valueRow)
            Return rowinv_valueRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_valueDataTable = CType(MyBase.Clone,inv_valueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_valueDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columnline = Me.Columns("line")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
            Me.columnRepNo = Me.Columns("RepNo")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnflagitem = Me.Columns("flagitem")
            Me.columnflagline = Me.Columns("flagline")
            Me.columnflagbrand = Me.Columns("flagbrand")
            Me.columnflagstyle = Me.Columns("flagstyle")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnone = New DataColumn("one", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
            Me.columnRepNo = New DataColumn("RepNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRepNo)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnflagitem = New DataColumn("flagitem", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagitem)
            Me.columnflagline = New DataColumn("flagline", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagline)
            Me.columnflagbrand = New DataColumn("flagbrand", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagbrand)
            Me.columnflagstyle = New DataColumn("flagstyle", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagstyle)
        End Sub
        
        Public Function Newinv_valueRow() As inv_valueRow
            Return CType(Me.NewRow,inv_valueRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_valueRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_valueRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_valueRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_valueRowChanged(Me, New inv_valueRowChangeEvent(CType(e.Row,inv_valueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_valueRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_valueRowChanging(Me, New inv_valueRowChangeEvent(CType(e.Row,inv_valueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_valueRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_valueRowDeleted(Me, New inv_valueRowChangeEvent(CType(e.Row,inv_valueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_valueRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_valueRowDeleting(Me, New inv_valueRowChangeEvent(CType(e.Row,inv_valueRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_valueRow(ByVal row As inv_valueRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_valueRow
        Inherits DataRow
        
        Private tableinv_value As inv_valueDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_value = CType(Me.Table,inv_valueDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.sizeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                If Me.IslineNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_value.lineColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_value.lineColumn) = value
            End Set
        End Property
        
        Public Property one As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.oneColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.oneColumn) = value
            End Set
        End Property
        
        Public Property two As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.twoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.twoColumn) = value
            End Set
        End Property
        
        Public Property three As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.threeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.threeColumn) = value
            End Set
        End Property
        
        Public Property four As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.fourColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.fourColumn) = value
            End Set
        End Property
        
        Public Property five As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.fiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.fiveColumn) = value
            End Set
        End Property
        
        Public Property RepNo As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.RepNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.RepNoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_value.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_value.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinv_value.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinv_value.styleColumn) = value
            End Set
        End Property
        
        Public Property flagitem As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.flagitemColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.flagitemColumn) = value
            End Set
        End Property
        
        Public Property flagline As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.flaglineColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.flaglineColumn) = value
            End Set
        End Property
        
        Public Property flagbrand As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.flagbrandColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.flagbrandColumn) = value
            End Set
        End Property
        
        Public Property flagstyle As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_value.flagstyleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_value.flagstyleColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_value.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_value.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableinv_value.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableinv_value.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tableinv_value.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tableinv_value.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tableinv_value.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tableinv_value.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tableinv_value.fiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRepNoNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.RepNoColumn)
        End Function
        
        Public Sub SetRepNoNull()
            Me(Me.tableinv_value.RepNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableinv_value.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableinv_value.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableinv_value.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagitemNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.flagitemColumn)
        End Function
        
        Public Sub SetflagitemNull()
            Me(Me.tableinv_value.flagitemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflaglineNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.flaglineColumn)
        End Function
        
        Public Sub SetflaglineNull()
            Me(Me.tableinv_value.flaglineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagbrandNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.flagbrandColumn)
        End Function
        
        Public Sub SetflagbrandNull()
            Me(Me.tableinv_value.flagbrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_value.flagstyleColumn)
        End Function
        
        Public Sub SetflagstyleNull()
            Me(Me.tableinv_value.flagstyleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_valueRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_valueRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_valueRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_valueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SlowMovingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columnline As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Private columnRepNo As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnflagitem As DataColumn
        
        Private columnflagline As DataColumn
        
        Private columnflagbrand As DataColumn
        
        Private columnflagstyle As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("SlowMoving")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Friend ReadOnly Property RepNoColumn As DataColumn
            Get
                Return Me.columnRepNo
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property flagitemColumn As DataColumn
            Get
                Return Me.columnflagitem
            End Get
        End Property
        
        Friend ReadOnly Property flaglineColumn As DataColumn
            Get
                Return Me.columnflagline
            End Get
        End Property
        
        Friend ReadOnly Property flagbrandColumn As DataColumn
            Get
                Return Me.columnflagbrand
            End Get
        End Property
        
        Friend ReadOnly Property flagstyleColumn As DataColumn
            Get
                Return Me.columnflagstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SlowMovingRow
            Get
                Return CType(Me.Rows(index),SlowMovingRow)
            End Get
        End Property
        
        Public Event SlowMovingRowChanged As SlowMovingRowChangeEventHandler
        
        Public Event SlowMovingRowChanging As SlowMovingRowChangeEventHandler
        
        Public Event SlowMovingRowDeleted As SlowMovingRowChangeEventHandler
        
        Public Event SlowMovingRowDeleting As SlowMovingRowChangeEventHandler
        
        Public Overloads Sub AddSlowMovingRow(ByVal row As SlowMovingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSlowMovingRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal size As String,  _
                    ByVal line As String,  _
                    ByVal one As Integer,  _
                    ByVal two As Date,  _
                    ByVal three As Integer,  _
                    ByVal four As Date,  _
                    ByVal five As String,  _
                    ByVal RepNo As String,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal flagitem As Boolean,  _
                    ByVal flagline As Boolean,  _
                    ByVal flagbrand As Boolean,  _
                    ByVal flagstyle As Boolean,  _
                    ByVal desc_price_code As String) As SlowMovingRow
            Dim rowSlowMovingRow As SlowMovingRow = CType(Me.NewRow,SlowMovingRow)
            rowSlowMovingRow.ItemArray = New Object() {item_no, desc_item, size, line, one, two, three, four, five, RepNo, flag, cod_brand, style, flagitem, flagline, flagbrand, flagstyle, desc_price_code}
            Me.Rows.Add(rowSlowMovingRow)
            Return rowSlowMovingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SlowMovingDataTable = CType(MyBase.Clone,SlowMovingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SlowMovingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columnline = Me.Columns("line")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
            Me.columnRepNo = Me.Columns("RepNo")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnflagitem = Me.Columns("flagitem")
            Me.columnflagline = Me.Columns("flagline")
            Me.columnflagbrand = Me.Columns("flagbrand")
            Me.columnflagstyle = Me.Columns("flagstyle")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnone = New DataColumn("one", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
            Me.columnRepNo = New DataColumn("RepNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRepNo)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnflagitem = New DataColumn("flagitem", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagitem)
            Me.columnflagline = New DataColumn("flagline", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagline)
            Me.columnflagbrand = New DataColumn("flagbrand", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagbrand)
            Me.columnflagstyle = New DataColumn("flagstyle", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagstyle)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
        End Sub
        
        Public Function NewSlowMovingRow() As SlowMovingRow
            Return CType(Me.NewRow,SlowMovingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SlowMovingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SlowMovingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SlowMovingRowChangedEvent) Is Nothing) Then
                RaiseEvent SlowMovingRowChanged(Me, New SlowMovingRowChangeEvent(CType(e.Row,SlowMovingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SlowMovingRowChangingEvent) Is Nothing) Then
                RaiseEvent SlowMovingRowChanging(Me, New SlowMovingRowChangeEvent(CType(e.Row,SlowMovingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SlowMovingRowDeletedEvent) Is Nothing) Then
                RaiseEvent SlowMovingRowDeleted(Me, New SlowMovingRowChangeEvent(CType(e.Row,SlowMovingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SlowMovingRowDeletingEvent) Is Nothing) Then
                RaiseEvent SlowMovingRowDeleting(Me, New SlowMovingRowChangeEvent(CType(e.Row,SlowMovingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSlowMovingRow(ByVal row As SlowMovingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SlowMovingRow
        Inherits DataRow
        
        Private tableSlowMoving As SlowMovingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSlowMoving = CType(Me.Table,SlowMovingDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.sizeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                If Me.IslineNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSlowMoving.lineColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSlowMoving.lineColumn) = value
            End Set
        End Property
        
        Public Property one As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.oneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.oneColumn) = value
            End Set
        End Property
        
        Public Property two As Date
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.twoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.twoColumn) = value
            End Set
        End Property
        
        Public Property three As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.threeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.threeColumn) = value
            End Set
        End Property
        
        Public Property four As Date
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.fourColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.fourColumn) = value
            End Set
        End Property
        
        Public Property five As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.fiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.fiveColumn) = value
            End Set
        End Property
        
        Public Property RepNo As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.RepNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.RepNoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSlowMoving.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSlowMoving.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSlowMoving.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSlowMoving.styleColumn) = value
            End Set
        End Property
        
        Public Property flagitem As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.flagitemColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.flagitemColumn) = value
            End Set
        End Property
        
        Public Property flagline As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.flaglineColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.flaglineColumn) = value
            End Set
        End Property
        
        Public Property flagbrand As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.flagbrandColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.flagbrandColumn) = value
            End Set
        End Property
        
        Public Property flagstyle As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.flagstyleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.flagstyleColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableSlowMoving.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSlowMoving.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableSlowMoving.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableSlowMoving.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableSlowMoving.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableSlowMoving.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tableSlowMoving.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tableSlowMoving.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tableSlowMoving.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tableSlowMoving.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tableSlowMoving.fiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRepNoNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.RepNoColumn)
        End Function
        
        Public Sub SetRepNoNull()
            Me(Me.tableSlowMoving.RepNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableSlowMoving.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableSlowMoving.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableSlowMoving.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagitemNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.flagitemColumn)
        End Function
        
        Public Sub SetflagitemNull()
            Me(Me.tableSlowMoving.flagitemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflaglineNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.flaglineColumn)
        End Function
        
        Public Sub SetflaglineNull()
            Me(Me.tableSlowMoving.flaglineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagbrandNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.flagbrandColumn)
        End Function
        
        Public Sub SetflagbrandNull()
            Me(Me.tableSlowMoving.flagbrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagstyleNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.flagstyleColumn)
        End Function
        
        Public Sub SetflagstyleNull()
            Me(Me.tableSlowMoving.flagstyleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableSlowMoving.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableSlowMoving.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SlowMovingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SlowMovingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SlowMovingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SlowMovingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IVRSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columncost As DataColumn
        
        Private columnFet As DataColumn
        
        Private columnCostFet As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("IVRSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property FetColumn As DataColumn
            Get
                Return Me.columnFet
            End Get
        End Property
        
        Friend ReadOnly Property CostFetColumn As DataColumn
            Get
                Return Me.columnCostFet
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IVRSummeryRow
            Get
                Return CType(Me.Rows(index),IVRSummeryRow)
            End Get
        End Property
        
        Public Event IVRSummeryRowChanged As IVRSummeryRowChangeEventHandler
        
        Public Event IVRSummeryRowChanging As IVRSummeryRowChangeEventHandler
        
        Public Event IVRSummeryRowDeleted As IVRSummeryRowChangeEventHandler
        
        Public Event IVRSummeryRowDeleting As IVRSummeryRowChangeEventHandler
        
        Public Overloads Sub AddIVRSummeryRow(ByVal row As IVRSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIVRSummeryRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal cost As Decimal, ByVal Fet As Decimal, ByVal CostFet As Decimal, ByVal flag As Boolean) As IVRSummeryRow
            Dim rowIVRSummeryRow As IVRSummeryRow = CType(Me.NewRow,IVRSummeryRow)
            rowIVRSummeryRow.ItemArray = New Object() {cod_item_type, desc_item_type, cost, Fet, CostFet, flag}
            Me.Rows.Add(rowIVRSummeryRow)
            Return rowIVRSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IVRSummeryDataTable = CType(MyBase.Clone,IVRSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IVRSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columncost = Me.Columns("cost")
            Me.columnFet = Me.Columns("Fet")
            Me.columnCostFet = Me.Columns("CostFet")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnFet = New DataColumn("Fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFet)
            Me.columnCostFet = New DataColumn("CostFet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCostFet)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
        End Sub
        
        Public Function NewIVRSummeryRow() As IVRSummeryRow
            Return CType(Me.NewRow,IVRSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IVRSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IVRSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IVRSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent IVRSummeryRowChanged(Me, New IVRSummeryRowChangeEvent(CType(e.Row,IVRSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IVRSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent IVRSummeryRowChanging(Me, New IVRSummeryRowChangeEvent(CType(e.Row,IVRSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IVRSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent IVRSummeryRowDeleted(Me, New IVRSummeryRowChangeEvent(CType(e.Row,IVRSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IVRSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent IVRSummeryRowDeleting(Me, New IVRSummeryRowChangeEvent(CType(e.Row,IVRSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIVRSummeryRow(ByVal row As IVRSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IVRSummeryRow
        Inherits DataRow
        
        Private tableIVRSummery As IVRSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIVRSummery = CType(Me.Table,IVRSummeryDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.costColumn) = value
            End Set
        End Property
        
        Public Property Fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.FetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.FetColumn) = value
            End Set
        End Property
        
        Public Property CostFet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.CostFetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.CostFetColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIVRSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIVRSummery.flagColumn) = value
            End Set
        End Property
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableIVRSummery.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableIVRSummery.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableIVRSummery.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFetNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.FetColumn)
        End Function
        
        Public Sub SetFetNull()
            Me(Me.tableIVRSummery.FetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCostFetNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.CostFetColumn)
        End Function
        
        Public Sub SetCostFetNull()
            Me(Me.tableIVRSummery.CostFetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableIVRSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableIVRSummery.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IVRSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IVRSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IVRSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IVRSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryStatusReportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnsize As DataColumn
        
        Private columnline As DataColumn
        
        Private columnone As DataColumn
        
        Private columntwo As DataColumn
        
        Private columnthree As DataColumn
        
        Private columnfour As DataColumn
        
        Private columnfive As DataColumn
        
        Private columnRepNo As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnflagitem As DataColumn
        
        Private columnflagline As DataColumn
        
        Private columnflagbrand As DataColumn
        
        Private columnflagstyle As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Friend Sub New()
            MyBase.New("InventoryStatusReport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property sizeColumn As DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property oneColumn As DataColumn
            Get
                Return Me.columnone
            End Get
        End Property
        
        Friend ReadOnly Property twoColumn As DataColumn
            Get
                Return Me.columntwo
            End Get
        End Property
        
        Friend ReadOnly Property threeColumn As DataColumn
            Get
                Return Me.columnthree
            End Get
        End Property
        
        Friend ReadOnly Property fourColumn As DataColumn
            Get
                Return Me.columnfour
            End Get
        End Property
        
        Friend ReadOnly Property fiveColumn As DataColumn
            Get
                Return Me.columnfive
            End Get
        End Property
        
        Friend ReadOnly Property RepNoColumn As DataColumn
            Get
                Return Me.columnRepNo
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property flagitemColumn As DataColumn
            Get
                Return Me.columnflagitem
            End Get
        End Property
        
        Friend ReadOnly Property flaglineColumn As DataColumn
            Get
                Return Me.columnflagline
            End Get
        End Property
        
        Friend ReadOnly Property flagbrandColumn As DataColumn
            Get
                Return Me.columnflagbrand
            End Get
        End Property
        
        Friend ReadOnly Property flagstyleColumn As DataColumn
            Get
                Return Me.columnflagstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryStatusReportRow
            Get
                Return CType(Me.Rows(index),InventoryStatusReportRow)
            End Get
        End Property
        
        Public Event InventoryStatusReportRowChanged As InventoryStatusReportRowChangeEventHandler
        
        Public Event InventoryStatusReportRowChanging As InventoryStatusReportRowChangeEventHandler
        
        Public Event InventoryStatusReportRowDeleted As InventoryStatusReportRowChangeEventHandler
        
        Public Event InventoryStatusReportRowDeleting As InventoryStatusReportRowChangeEventHandler
        
        Public Overloads Sub AddInventoryStatusReportRow(ByVal row As InventoryStatusReportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryStatusReportRow( _
                    ByVal item_no As String,  _
                    ByVal desc_item As String,  _
                    ByVal size As String,  _
                    ByVal line As String,  _
                    ByVal one As String,  _
                    ByVal two As Date,  _
                    ByVal three As Date,  _
                    ByVal four As Date,  _
                    ByVal five As String,  _
                    ByVal RepNo As String,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal flagitem As Boolean,  _
                    ByVal flagline As Boolean,  _
                    ByVal flagbrand As Boolean,  _
                    ByVal flagstyle As Boolean,  _
                    ByVal desc_price_code As String) As InventoryStatusReportRow
            Dim rowInventoryStatusReportRow As InventoryStatusReportRow = CType(Me.NewRow,InventoryStatusReportRow)
            rowInventoryStatusReportRow.ItemArray = New Object() {item_no, desc_item, size, line, one, two, three, four, five, RepNo, flag, cod_brand, style, flagitem, flagline, flagbrand, flagstyle, desc_price_code}
            Me.Rows.Add(rowInventoryStatusReportRow)
            Return rowInventoryStatusReportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryStatusReportDataTable = CType(MyBase.Clone,InventoryStatusReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryStatusReportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnsize = Me.Columns("size")
            Me.columnline = Me.Columns("line")
            Me.columnone = Me.Columns("one")
            Me.columntwo = Me.Columns("two")
            Me.columnthree = Me.Columns("three")
            Me.columnfour = Me.Columns("four")
            Me.columnfive = Me.Columns("five")
            Me.columnRepNo = Me.Columns("RepNo")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnflagitem = Me.Columns("flagitem")
            Me.columnflagline = Me.Columns("flagline")
            Me.columnflagbrand = Me.Columns("flagbrand")
            Me.columnflagstyle = Me.Columns("flagstyle")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnsize = New DataColumn("size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsize)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnone = New DataColumn("one", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnone)
            Me.columntwo = New DataColumn("two", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwo)
            Me.columnthree = New DataColumn("three", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthree)
            Me.columnfour = New DataColumn("four", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfour)
            Me.columnfive = New DataColumn("five", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfive)
            Me.columnRepNo = New DataColumn("RepNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRepNo)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnflagitem = New DataColumn("flagitem", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagitem)
            Me.columnflagline = New DataColumn("flagline", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagline)
            Me.columnflagbrand = New DataColumn("flagbrand", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagbrand)
            Me.columnflagstyle = New DataColumn("flagstyle", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagstyle)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
        End Sub
        
        Public Function NewInventoryStatusReportRow() As InventoryStatusReportRow
            Return CType(Me.NewRow,InventoryStatusReportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryStatusReportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryStatusReportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryStatusReportRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryStatusReportRowChanged(Me, New InventoryStatusReportRowChangeEvent(CType(e.Row,InventoryStatusReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryStatusReportRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryStatusReportRowChanging(Me, New InventoryStatusReportRowChangeEvent(CType(e.Row,InventoryStatusReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryStatusReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryStatusReportRowDeleted(Me, New InventoryStatusReportRowChangeEvent(CType(e.Row,InventoryStatusReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryStatusReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryStatusReportRowDeleting(Me, New InventoryStatusReportRowChangeEvent(CType(e.Row,InventoryStatusReportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryStatusReportRow(ByVal row As InventoryStatusReportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryStatusReportRow
        Inherits DataRow
        
        Private tableInventoryStatusReport As InventoryStatusReportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventoryStatusReport = CType(Me.Table,InventoryStatusReportDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property size As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.sizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.sizeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                If Me.IslineNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInventoryStatusReport.lineColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInventoryStatusReport.lineColumn) = value
            End Set
        End Property
        
        Public Property one As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.oneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.oneColumn) = value
            End Set
        End Property
        
        Public Property two As Date
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.twoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.twoColumn) = value
            End Set
        End Property
        
        Public Property three As Date
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.threeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.threeColumn) = value
            End Set
        End Property
        
        Public Property four As Date
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.fourColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.fourColumn) = value
            End Set
        End Property
        
        Public Property five As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.fiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.fiveColumn) = value
            End Set
        End Property
        
        Public Property RepNo As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.RepNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.RepNoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                If Me.Iscod_brandNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInventoryStatusReport.cod_brandColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInventoryStatusReport.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                If Me.IsstyleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInventoryStatusReport.styleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInventoryStatusReport.styleColumn) = value
            End Set
        End Property
        
        Public Property flagitem As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.flagitemColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.flagitemColumn) = value
            End Set
        End Property
        
        Public Property flagline As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.flaglineColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.flaglineColumn) = value
            End Set
        End Property
        
        Public Property flagbrand As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.flagbrandColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.flagbrandColumn) = value
            End Set
        End Property
        
        Public Property flagstyle As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.flagstyleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.flagstyleColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryStatusReport.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryStatusReport.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableInventoryStatusReport.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInventoryStatusReport.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizeNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.sizeColumn)
        End Function
        
        Public Sub SetsizeNull()
            Me(Me.tableInventoryStatusReport.sizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableInventoryStatusReport.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoneNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.oneColumn)
        End Function
        
        Public Sub SetoneNull()
            Me(Me.tableInventoryStatusReport.oneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwoNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.twoColumn)
        End Function
        
        Public Sub SettwoNull()
            Me(Me.tableInventoryStatusReport.twoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthreeNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.threeColumn)
        End Function
        
        Public Sub SetthreeNull()
            Me(Me.tableInventoryStatusReport.threeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfourNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.fourColumn)
        End Function
        
        Public Sub SetfourNull()
            Me(Me.tableInventoryStatusReport.fourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfiveNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.fiveColumn)
        End Function
        
        Public Sub SetfiveNull()
            Me(Me.tableInventoryStatusReport.fiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRepNoNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.RepNoColumn)
        End Function
        
        Public Sub SetRepNoNull()
            Me(Me.tableInventoryStatusReport.RepNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableInventoryStatusReport.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_brandNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.cod_brandColumn)
        End Function
        
        Public Sub Setcod_brandNull()
            Me(Me.tableInventoryStatusReport.cod_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableInventoryStatusReport.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagitemNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.flagitemColumn)
        End Function
        
        Public Sub SetflagitemNull()
            Me(Me.tableInventoryStatusReport.flagitemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflaglineNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.flaglineColumn)
        End Function
        
        Public Sub SetflaglineNull()
            Me(Me.tableInventoryStatusReport.flaglineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagbrandNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.flagbrandColumn)
        End Function
        
        Public Sub SetflagbrandNull()
            Me(Me.tableInventoryStatusReport.flagbrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagstyleNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.flagstyleColumn)
        End Function
        
        Public Sub SetflagstyleNull()
            Me(Me.tableInventoryStatusReport.flagstyleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableInventoryStatusReport.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableInventoryStatusReport.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryStatusReportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryStatusReportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryStatusReportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryStatusReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
