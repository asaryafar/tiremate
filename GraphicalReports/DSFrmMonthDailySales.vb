'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmMonthDailySales
    Inherits DataSet
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableMonthTable As MonthTableDataTable
    
    Private tableservice_center_headSummery As service_center_headSummeryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("MonthTable")) Is Nothing) Then
                Me.Tables.Add(New MonthTableDataTable(ds.Tables("MonthTable")))
            End If
            If (Not (ds.Tables("service_center_headSummery")) Is Nothing) Then
                Me.Tables.Add(New service_center_headSummeryDataTable(ds.Tables("service_center_headSummery")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MonthTable As MonthTableDataTable
        Get
            Return Me.tableMonthTable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_headSummery As service_center_headSummeryDataTable
        Get
            Return Me.tableservice_center_headSummery
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmMonthDailySales = CType(MyBase.Clone,DSFrmMonthDailySales)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("MonthTable")) Is Nothing) Then
            Me.Tables.Add(New MonthTableDataTable(ds.Tables("MonthTable")))
        End If
        If (Not (ds.Tables("service_center_headSummery")) Is Nothing) Then
            Me.Tables.Add(New service_center_headSummeryDataTable(ds.Tables("service_center_headSummery")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableMonthTable = CType(Me.Tables("MonthTable"),MonthTableDataTable)
        If (Not (Me.tableMonthTable) Is Nothing) Then
            Me.tableMonthTable.InitVars
        End If
        Me.tableservice_center_headSummery = CType(Me.Tables("service_center_headSummery"),service_center_headSummeryDataTable)
        If (Not (Me.tableservice_center_headSummery) Is Nothing) Then
            Me.tableservice_center_headSummery.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmMonthDailySales"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmMonthDailySales.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableMonthTable = New MonthTableDataTable
        Me.Tables.Add(Me.tableMonthTable)
        Me.tableservice_center_headSummery = New service_center_headSummeryDataTable
        Me.Tables.Add(Me.tableservice_center_headSummery)
    End Sub
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMonthTable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_headSummery() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub MonthTableRowChangeEventHandler(ByVal sender As Object, ByVal e As MonthTableRowChangeEvent)
    
    Public Delegate Sub service_center_headSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headSummeryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_refer As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal date_refer As String, ByVal Total As Decimal) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {date_refer, Total}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function FindBydate_refer(ByVal date_refer As String) As service_center_headRow
            Return CType(Me.Rows.Find(New Object() {date_refer}),service_center_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New UniqueConstraint("DSFrmMonthDailySalesKey2", New DataColumn() {Me.columndate_refer}, true))
            Me.columndate_refer.AllowDBNull = false
            Me.columndate_refer.Unique = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property date_refer As String
            Get
                Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.TotalColumn) = value
            End Set
        End Property
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_head.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonthTableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMonthName As DataColumn
        
        Private columnMonthCode As DataColumn
        
        Friend Sub New()
            MyBase.New("MonthTable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MonthNameColumn As DataColumn
            Get
                Return Me.columnMonthName
            End Get
        End Property
        
        Friend ReadOnly Property MonthCodeColumn As DataColumn
            Get
                Return Me.columnMonthCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonthTableRow
            Get
                Return CType(Me.Rows(index),MonthTableRow)
            End Get
        End Property
        
        Public Event MonthTableRowChanged As MonthTableRowChangeEventHandler
        
        Public Event MonthTableRowChanging As MonthTableRowChangeEventHandler
        
        Public Event MonthTableRowDeleted As MonthTableRowChangeEventHandler
        
        Public Event MonthTableRowDeleting As MonthTableRowChangeEventHandler
        
        Public Overloads Sub AddMonthTableRow(ByVal row As MonthTableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonthTableRow(ByVal MonthName As String, ByVal MonthCode As String) As MonthTableRow
            Dim rowMonthTableRow As MonthTableRow = CType(Me.NewRow,MonthTableRow)
            rowMonthTableRow.ItemArray = New Object() {MonthName, MonthCode}
            Me.Rows.Add(rowMonthTableRow)
            Return rowMonthTableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonthTableDataTable = CType(MyBase.Clone,MonthTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonthTableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMonthName = Me.Columns("MonthName")
            Me.columnMonthCode = Me.Columns("MonthCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnMonthName = New DataColumn("MonthName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonthName)
            Me.columnMonthCode = New DataColumn("MonthCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonthCode)
        End Sub
        
        Public Function NewMonthTableRow() As MonthTableRow
            Return CType(Me.NewRow,MonthTableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonthTableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonthTableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonthTableRowChangedEvent) Is Nothing) Then
                RaiseEvent MonthTableRowChanged(Me, New MonthTableRowChangeEvent(CType(e.Row,MonthTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonthTableRowChangingEvent) Is Nothing) Then
                RaiseEvent MonthTableRowChanging(Me, New MonthTableRowChangeEvent(CType(e.Row,MonthTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonthTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonthTableRowDeleted(Me, New MonthTableRowChangeEvent(CType(e.Row,MonthTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonthTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonthTableRowDeleting(Me, New MonthTableRowChangeEvent(CType(e.Row,MonthTableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonthTableRow(ByVal row As MonthTableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonthTableRow
        Inherits DataRow
        
        Private tableMonthTable As MonthTableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMonthTable = CType(Me.Table,MonthTableDataTable)
        End Sub
        
        Public Property MonthName As String
            Get
                Try 
                    Return CType(Me(Me.tableMonthTable.MonthNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMonthTable.MonthNameColumn) = value
            End Set
        End Property
        
        Public Property MonthCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMonthTable.MonthCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMonthTable.MonthCodeColumn) = value
            End Set
        End Property
        
        Public Function IsMonthNameNull() As Boolean
            Return Me.IsNull(Me.tableMonthTable.MonthNameColumn)
        End Function
        
        Public Sub SetMonthNameNull()
            Me(Me.tableMonthTable.MonthNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonthCodeNull() As Boolean
            Return Me.IsNull(Me.tableMonthTable.MonthCodeColumn)
        End Function
        
        Public Sub SetMonthCodeNull()
            Me(Me.tableMonthTable.MonthCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonthTableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonthTableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonthTableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonthTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_refer As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_headSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headSummeryRow
            Get
                Return CType(Me.Rows(index),service_center_headSummeryRow)
            End Get
        End Property
        
        Public Event service_center_headSummeryRowChanged As service_center_headSummeryRowChangeEventHandler
        
        Public Event service_center_headSummeryRowChanging As service_center_headSummeryRowChangeEventHandler
        
        Public Event service_center_headSummeryRowDeleted As service_center_headSummeryRowChangeEventHandler
        
        Public Event service_center_headSummeryRowDeleting As service_center_headSummeryRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headSummeryRow(ByVal row As service_center_headSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headSummeryRow(ByVal date_refer As String, ByVal Total As Decimal) As service_center_headSummeryRow
            Dim rowservice_center_headSummeryRow As service_center_headSummeryRow = CType(Me.NewRow,service_center_headSummeryRow)
            rowservice_center_headSummeryRow.ItemArray = New Object() {date_refer, Total}
            Me.Rows.Add(rowservice_center_headSummeryRow)
            Return rowservice_center_headSummeryRow
        End Function
        
        Public Function FindBydate_refer(ByVal date_refer As String) As service_center_headSummeryRow
            Return CType(Me.Rows.Find(New Object() {date_refer}),service_center_headSummeryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headSummeryDataTable = CType(MyBase.Clone,service_center_headSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New UniqueConstraint("DSFrmMonthDailySalesKey1", New DataColumn() {Me.columndate_refer}, true))
            Me.columndate_refer.AllowDBNull = false
            Me.columndate_refer.Unique = true
        End Sub
        
        Public Function Newservice_center_headSummeryRow() As service_center_headSummeryRow
            Return CType(Me.NewRow,service_center_headSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headSummeryRowChanged(Me, New service_center_headSummeryRowChangeEvent(CType(e.Row,service_center_headSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headSummeryRowChanging(Me, New service_center_headSummeryRowChangeEvent(CType(e.Row,service_center_headSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headSummeryRowDeleted(Me, New service_center_headSummeryRowChangeEvent(CType(e.Row,service_center_headSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headSummeryRowDeleting(Me, New service_center_headSummeryRowChangeEvent(CType(e.Row,service_center_headSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headSummeryRow(ByVal row As service_center_headSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headSummeryRow
        Inherits DataRow
        
        Private tableservice_center_headSummery As service_center_headSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_headSummery = CType(Me.Table,service_center_headSummeryDataTable)
        End Sub
        
        Public Property date_refer As String
            Get
                Return CType(Me(Me.tableservice_center_headSummery.date_referColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_headSummery.date_referColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_headSummery.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_headSummery.TotalColumn) = value
            End Set
        End Property
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_headSummery.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_headSummery.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
