'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmService
    Inherits DataSet
    
    Private tableinv_tab_service_category As inv_tab_service_categoryDataTable
    
    Private tableinv_tab_service_type As inv_tab_service_typeDataTable
    
    Private tableLabarFixKind As LabarFixKindDataTable
    
    Private tableinv_tab_style As inv_tab_styleDataTable
    
    Private tableinv_tab_styleForShow As inv_tab_styleForShowDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_service_category")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_service_categoryDataTable(ds.Tables("inv_tab_service_category")))
            End If
            If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
            End If
            If (Not (ds.Tables("LabarFixKind")) Is Nothing) Then
                Me.Tables.Add(New LabarFixKindDataTable(ds.Tables("LabarFixKind")))
            End If
            If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
            End If
            If (Not (ds.Tables("inv_tab_styleForShow")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleForShowDataTable(ds.Tables("inv_tab_styleForShow")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_service_category As inv_tab_service_categoryDataTable
        Get
            Return Me.tableinv_tab_service_category
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_service_type As inv_tab_service_typeDataTable
        Get
            Return Me.tableinv_tab_service_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LabarFixKind As LabarFixKindDataTable
        Get
            Return Me.tableLabarFixKind
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_style As inv_tab_styleDataTable
        Get
            Return Me.tableinv_tab_style
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_styleForShow As inv_tab_styleForShowDataTable
        Get
            Return Me.tableinv_tab_styleForShow
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmService = CType(MyBase.Clone,DSFrmService)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_service_category")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_service_categoryDataTable(ds.Tables("inv_tab_service_category")))
        End If
        If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
        End If
        If (Not (ds.Tables("LabarFixKind")) Is Nothing) Then
            Me.Tables.Add(New LabarFixKindDataTable(ds.Tables("LabarFixKind")))
        End If
        If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
        End If
        If (Not (ds.Tables("inv_tab_styleForShow")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleForShowDataTable(ds.Tables("inv_tab_styleForShow")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_service_category = CType(Me.Tables("inv_tab_service_category"),inv_tab_service_categoryDataTable)
        If (Not (Me.tableinv_tab_service_category) Is Nothing) Then
            Me.tableinv_tab_service_category.InitVars
        End If
        Me.tableinv_tab_service_type = CType(Me.Tables("inv_tab_service_type"),inv_tab_service_typeDataTable)
        If (Not (Me.tableinv_tab_service_type) Is Nothing) Then
            Me.tableinv_tab_service_type.InitVars
        End If
        Me.tableLabarFixKind = CType(Me.Tables("LabarFixKind"),LabarFixKindDataTable)
        If (Not (Me.tableLabarFixKind) Is Nothing) Then
            Me.tableLabarFixKind.InitVars
        End If
        Me.tableinv_tab_style = CType(Me.Tables("inv_tab_style"),inv_tab_styleDataTable)
        If (Not (Me.tableinv_tab_style) Is Nothing) Then
            Me.tableinv_tab_style.InitVars
        End If
        Me.tableinv_tab_styleForShow = CType(Me.Tables("inv_tab_styleForShow"),inv_tab_styleForShowDataTable)
        If (Not (Me.tableinv_tab_styleForShow) Is Nothing) Then
            Me.tableinv_tab_styleForShow.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmService"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmService.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_service_category = New inv_tab_service_categoryDataTable
        Me.Tables.Add(Me.tableinv_tab_service_category)
        Me.tableinv_tab_service_type = New inv_tab_service_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_service_type)
        Me.tableLabarFixKind = New LabarFixKindDataTable
        Me.Tables.Add(Me.tableLabarFixKind)
        Me.tableinv_tab_style = New inv_tab_styleDataTable
        Me.Tables.Add(Me.tableinv_tab_style)
        Me.tableinv_tab_styleForShow = New inv_tab_styleForShowDataTable
        Me.Tables.Add(Me.tableinv_tab_styleForShow)
    End Sub
    
    Private Function ShouldSerializeinv_tab_service_category() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_service_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLabarFixKind() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_style() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_styleForShow() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_service_categoryRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_service_categoryRowChangeEvent)
    
    Public Delegate Sub inv_tab_service_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_service_typeRowChangeEvent)
    
    Public Delegate Sub LabarFixKindRowChangeEventHandler(ByVal sender As Object, ByVal e As LabarFixKindRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleForShowRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleForShowRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnservice_category As DataColumn
        
        Private columndesc_srvice_category As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_service_category")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property service_categoryColumn As DataColumn
            Get
                Return Me.columnservice_category
            End Get
        End Property
        
        Friend ReadOnly Property desc_srvice_categoryColumn As DataColumn
            Get
                Return Me.columndesc_srvice_category
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_service_categoryRow
            Get
                Return CType(Me.Rows(index),inv_tab_service_categoryRow)
            End Get
        End Property
        
        Public Event inv_tab_service_categoryRowChanged As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowChanging As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowDeleted As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowDeleting As inv_tab_service_categoryRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_service_categoryRow(ByVal row As inv_tab_service_categoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_service_categoryRow(ByVal service_category As String, ByVal desc_srvice_category As String) As inv_tab_service_categoryRow
            Dim rowinv_tab_service_categoryRow As inv_tab_service_categoryRow = CType(Me.NewRow,inv_tab_service_categoryRow)
            rowinv_tab_service_categoryRow.ItemArray = New Object() {service_category, desc_srvice_category}
            Me.Rows.Add(rowinv_tab_service_categoryRow)
            Return rowinv_tab_service_categoryRow
        End Function
        
        Public Function FindByservice_category(ByVal service_category As String) As inv_tab_service_categoryRow
            Return CType(Me.Rows.Find(New Object() {service_category}),inv_tab_service_categoryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_service_categoryDataTable = CType(MyBase.Clone,inv_tab_service_categoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_service_categoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnservice_category = Me.Columns("service_category")
            Me.columndesc_srvice_category = Me.Columns("desc_srvice_category")
        End Sub
        
        Private Sub InitClass()
            Me.columnservice_category = New DataColumn("service_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_category)
            Me.columndesc_srvice_category = New DataColumn("desc_srvice_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_srvice_category)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnservice_category}, true))
            Me.columnservice_category.AllowDBNull = false
            Me.columnservice_category.Unique = true
        End Sub
        
        Public Function Newinv_tab_service_categoryRow() As inv_tab_service_categoryRow
            Return CType(Me.NewRow,inv_tab_service_categoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_service_categoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_service_categoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_service_categoryRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowChanged(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_service_categoryRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowChanging(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_service_categoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowDeleted(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_service_categoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowDeleting(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_service_categoryRow(ByVal row As inv_tab_service_categoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryRow
        Inherits DataRow
        
        Private tableinv_tab_service_category As inv_tab_service_categoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_service_category = CType(Me.Table,inv_tab_service_categoryDataTable)
        End Sub
        
        Public Property service_category As String
            Get
                Return CType(Me(Me.tableinv_tab_service_category.service_categoryColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_service_category.service_categoryColumn) = value
            End Set
        End Property
        
        Public Property desc_srvice_category As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_srvice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_category.desc_srvice_categoryColumn)
        End Function
        
        Public Sub Setdesc_srvice_categoryNull()
            Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_service_categoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_service_categoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_service_categoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnservice_type As DataColumn
        
        Private columnservice_type_desc As DataColumn
        
        Private columnasset_GL_account As DataColumn
        
        Private columncost_goods_GL_account As DataColumn
        
        Private columnincome_GL_account As DataColumn
        
        Private columnreturn_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_service_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property service_typeColumn As DataColumn
            Get
                Return Me.columnservice_type
            End Get
        End Property
        
        Friend ReadOnly Property service_type_descColumn As DataColumn
            Get
                Return Me.columnservice_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property asset_GL_accountColumn As DataColumn
            Get
                Return Me.columnasset_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property cost_goods_GL_accountColumn As DataColumn
            Get
                Return Me.columncost_goods_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property income_GL_accountColumn As DataColumn
            Get
                Return Me.columnincome_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property return_GL_accountColumn As DataColumn
            Get
                Return Me.columnreturn_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_service_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_service_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_service_typeRowChanged As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowChanging As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleted As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleting As inv_tab_service_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_service_typeRow(ByVal service_type As String, ByVal service_type_desc As String, ByVal asset_GL_account As String, ByVal cost_goods_GL_account As String, ByVal income_GL_account As String, ByVal return_GL_account As String) As inv_tab_service_typeRow
            Dim rowinv_tab_service_typeRow As inv_tab_service_typeRow = CType(Me.NewRow,inv_tab_service_typeRow)
            rowinv_tab_service_typeRow.ItemArray = New Object() {service_type, service_type_desc, asset_GL_account, cost_goods_GL_account, income_GL_account, return_GL_account}
            Me.Rows.Add(rowinv_tab_service_typeRow)
            Return rowinv_tab_service_typeRow
        End Function
        
        Public Function FindByservice_type(ByVal service_type As String) As inv_tab_service_typeRow
            Return CType(Me.Rows.Find(New Object() {service_type}),inv_tab_service_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_service_typeDataTable = CType(MyBase.Clone,inv_tab_service_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_service_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnservice_type = Me.Columns("service_type")
            Me.columnservice_type_desc = Me.Columns("service_type_desc")
            Me.columnasset_GL_account = Me.Columns("asset_GL_account")
            Me.columncost_goods_GL_account = Me.Columns("cost_goods_GL_account")
            Me.columnincome_GL_account = Me.Columns("income_GL_account")
            Me.columnreturn_GL_account = Me.Columns("return_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnservice_type = New DataColumn("service_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type)
            Me.columnservice_type_desc = New DataColumn("service_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type_desc)
            Me.columnasset_GL_account = New DataColumn("asset_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnasset_GL_account)
            Me.columncost_goods_GL_account = New DataColumn("cost_goods_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost_goods_GL_account)
            Me.columnincome_GL_account = New DataColumn("income_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnincome_GL_account)
            Me.columnreturn_GL_account = New DataColumn("return_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreturn_GL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnservice_type}, true))
            Me.columnservice_type.AllowDBNull = false
            Me.columnservice_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_service_typeRow() As inv_tab_service_typeRow
            Return CType(Me.NewRow,inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_service_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_service_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanged(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_service_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanging(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_service_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleted(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_service_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleting(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRow
        Inherits DataRow
        
        Private tableinv_tab_service_type As inv_tab_service_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_service_type = CType(Me.Table,inv_tab_service_typeDataTable)
        End Sub
        
        Public Property service_type As String
            Get
                Return CType(Me(Me.tableinv_tab_service_type.service_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_typeColumn) = value
            End Set
        End Property
        
        Public Property service_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.service_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_type_descColumn) = value
            End Set
        End Property
        
        Public Property asset_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.asset_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.asset_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property cost_goods_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property income_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.income_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.income_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property return_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.return_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.return_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isservice_type_descNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.service_type_descColumn)
        End Function
        
        Public Sub Setservice_type_descNull()
            Me(Me.tableinv_tab_service_type.service_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isasset_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.asset_GL_accountColumn)
        End Function
        
        Public Sub Setasset_GL_accountNull()
            Me(Me.tableinv_tab_service_type.asset_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscost_goods_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn)
        End Function
        
        Public Sub Setcost_goods_GL_accountNull()
            Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isincome_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.income_GL_accountColumn)
        End Function
        
        Public Sub Setincome_GL_accountNull()
            Me(Me.tableinv_tab_service_type.income_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreturn_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.return_GL_accountColumn)
        End Function
        
        Public Sub Setreturn_GL_accountNull()
            Me(Me.tableinv_tab_service_type.return_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_service_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_service_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_service_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LabarFixKindDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod As DataColumn
        
        Private columnName As DataColumn
        
        Friend Sub New()
            MyBase.New("LabarFixKind")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodColumn As DataColumn
            Get
                Return Me.columnCod
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LabarFixKindRow
            Get
                Return CType(Me.Rows(index),LabarFixKindRow)
            End Get
        End Property
        
        Public Event LabarFixKindRowChanged As LabarFixKindRowChangeEventHandler
        
        Public Event LabarFixKindRowChanging As LabarFixKindRowChangeEventHandler
        
        Public Event LabarFixKindRowDeleted As LabarFixKindRowChangeEventHandler
        
        Public Event LabarFixKindRowDeleting As LabarFixKindRowChangeEventHandler
        
        Public Overloads Sub AddLabarFixKindRow(ByVal row As LabarFixKindRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLabarFixKindRow(ByVal Cod As String, ByVal Name As String) As LabarFixKindRow
            Dim rowLabarFixKindRow As LabarFixKindRow = CType(Me.NewRow,LabarFixKindRow)
            rowLabarFixKindRow.ItemArray = New Object() {Cod, Name}
            Me.Rows.Add(rowLabarFixKindRow)
            Return rowLabarFixKindRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LabarFixKindDataTable = CType(MyBase.Clone,LabarFixKindDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LabarFixKindDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod = Me.Columns("Cod")
            Me.columnName = Me.Columns("Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod = New DataColumn("Cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
        End Sub
        
        Public Function NewLabarFixKindRow() As LabarFixKindRow
            Return CType(Me.NewRow,LabarFixKindRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LabarFixKindRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LabarFixKindRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LabarFixKindRowChangedEvent) Is Nothing) Then
                RaiseEvent LabarFixKindRowChanged(Me, New LabarFixKindRowChangeEvent(CType(e.Row,LabarFixKindRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LabarFixKindRowChangingEvent) Is Nothing) Then
                RaiseEvent LabarFixKindRowChanging(Me, New LabarFixKindRowChangeEvent(CType(e.Row,LabarFixKindRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LabarFixKindRowDeletedEvent) Is Nothing) Then
                RaiseEvent LabarFixKindRowDeleted(Me, New LabarFixKindRowChangeEvent(CType(e.Row,LabarFixKindRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LabarFixKindRowDeletingEvent) Is Nothing) Then
                RaiseEvent LabarFixKindRowDeleting(Me, New LabarFixKindRowChangeEvent(CType(e.Row,LabarFixKindRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLabarFixKindRow(ByVal row As LabarFixKindRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LabarFixKindRow
        Inherits DataRow
        
        Private tableLabarFixKind As LabarFixKindDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLabarFixKind = CType(Me.Table,LabarFixKindDataTable)
        End Sub
        
        Public Property Cod As String
            Get
                Try 
                    Return CType(Me(Me.tableLabarFixKind.CodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLabarFixKind.CodColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableLabarFixKind.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLabarFixKind.NameColumn) = value
            End Set
        End Property
        
        Public Function IsCodNull() As Boolean
            Return Me.IsNull(Me.tableLabarFixKind.CodColumn)
        End Function
        
        Public Sub SetCodNull()
            Me(Me.tableLabarFixKind.CodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableLabarFixKind.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableLabarFixKind.NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LabarFixKindRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LabarFixKindRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LabarFixKindRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LabarFixKindRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleRow)
            End Get
        End Property
        
        Public Event inv_tab_styleRowChanged As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowChanging As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleted As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleting As inv_tab_styleRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleRow(ByVal style As String, ByVal desc_style As String, ByVal remark As String, ByVal image_remark() As Byte) As inv_tab_styleRow
            Dim rowinv_tab_styleRow As inv_tab_styleRow = CType(Me.NewRow,inv_tab_styleRow)
            rowinv_tab_styleRow.ItemArray = New Object() {style, desc_style, remark, image_remark}
            Me.Rows.Add(rowinv_tab_styleRow)
            Return rowinv_tab_styleRow
        End Function
        
        Public Function FindBystyle(ByVal style As String) As inv_tab_styleRow
            Return CType(Me.Rows.Find(New Object() {style}),inv_tab_styleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleDataTable = CType(MyBase.Clone,inv_tab_styleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstyle}, true))
            Me.columnstyle.AllowDBNull = false
            Me.columnstyle.Unique = true
        End Sub
        
        Public Function Newinv_tab_styleRow() As inv_tab_styleRow
            Return CType(Me.NewRow,inv_tab_styleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanged(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanging(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleted(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleting(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRow
        Inherits DataRow
        
        Private tableinv_tab_style As inv_tab_styleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_style = CType(Me.Table,inv_tab_styleDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_style.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_style.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.image_remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_style.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_style.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_style.image_remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleForShowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_styleForShow")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleForShowRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleForShowRow)
            End Get
        End Property
        
        Public Event inv_tab_styleForShowRowChanged As inv_tab_styleForShowRowChangeEventHandler
        
        Public Event inv_tab_styleForShowRowChanging As inv_tab_styleForShowRowChangeEventHandler
        
        Public Event inv_tab_styleForShowRowDeleted As inv_tab_styleForShowRowChangeEventHandler
        
        Public Event inv_tab_styleForShowRowDeleting As inv_tab_styleForShowRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleForShowRow(ByVal row As inv_tab_styleForShowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleForShowRow(ByVal style As String, ByVal desc_style As String) As inv_tab_styleForShowRow
            Dim rowinv_tab_styleForShowRow As inv_tab_styleForShowRow = CType(Me.NewRow,inv_tab_styleForShowRow)
            rowinv_tab_styleForShowRow.ItemArray = New Object() {style, desc_style}
            Me.Rows.Add(rowinv_tab_styleForShowRow)
            Return rowinv_tab_styleForShowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleForShowDataTable = CType(MyBase.Clone,inv_tab_styleForShowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleForShowDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnstyle.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_styleForShowRow() As inv_tab_styleForShowRow
            Return CType(Me.NewRow,inv_tab_styleForShowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleForShowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleForShowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleForShowRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleForShowRowChanged(Me, New inv_tab_styleForShowRowChangeEvent(CType(e.Row,inv_tab_styleForShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleForShowRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleForShowRowChanging(Me, New inv_tab_styleForShowRowChangeEvent(CType(e.Row,inv_tab_styleForShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleForShowRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleForShowRowDeleted(Me, New inv_tab_styleForShowRowChangeEvent(CType(e.Row,inv_tab_styleForShowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleForShowRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleForShowRowDeleting(Me, New inv_tab_styleForShowRowChangeEvent(CType(e.Row,inv_tab_styleForShowRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleForShowRow(ByVal row As inv_tab_styleForShowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleForShowRow
        Inherits DataRow
        
        Private tableinv_tab_styleForShow As inv_tab_styleForShowDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_styleForShow = CType(Me.Table,inv_tab_styleForShowDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_styleForShow.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_styleForShow.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_styleForShow.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_styleForShow.desc_styleColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_styleForShow.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_styleForShow.desc_styleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleForShowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleForShowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleForShowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleForShowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
