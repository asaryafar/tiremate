'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSInv_tab_labor_service
    Inherits DataSet
    
    Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_labor_service As inv_tab_labor_serviceDataTable
        Get
            Return Me.tableinv_tab_labor_service
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSInv_tab_labor_service = CType(MyBase.Clone,DSInv_tab_labor_service)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_labor_service = CType(Me.Tables("inv_tab_labor_service"),inv_tab_labor_serviceDataTable)
        If (Not (Me.tableinv_tab_labor_service) Is Nothing) Then
            Me.tableinv_tab_labor_service.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSInv_tab_labor_service"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSInv_tab_labor_service.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_labor_service = New inv_tab_labor_serviceDataTable
        Me.Tables.Add(Me.tableinv_tab_labor_service)
    End Sub
    
    Private Function ShouldSerializeinv_tab_labor_service() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_labor_serviceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_labor_serviceRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_service As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnext_desc As DataColumn
        
        Private columnservice_type As DataColumn
        
        Private columnservice_category As DataColumn
        
        Private columncost As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnrequire_technician As DataColumn
        
        Private columncharge_shop_supply As DataColumn
        
        Private columnschedule As DataColumn
        
        Private columnavg_time As DataColumn
        
        Private columnbay_no As DataColumn
        
        Private columnreminder As DataColumn
        
        Private columnmiles As DataColumn
        
        Private columndays As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_labor_service")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_serviceColumn As DataColumn
            Get
                Return Me.columncod_service
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property ext_descColumn As DataColumn
            Get
                Return Me.columnext_desc
            End Get
        End Property
        
        Friend ReadOnly Property service_typeColumn As DataColumn
            Get
                Return Me.columnservice_type
            End Get
        End Property
        
        Friend ReadOnly Property service_categoryColumn As DataColumn
            Get
                Return Me.columnservice_category
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property require_technicianColumn As DataColumn
            Get
                Return Me.columnrequire_technician
            End Get
        End Property
        
        Friend ReadOnly Property charge_shop_supplyColumn As DataColumn
            Get
                Return Me.columncharge_shop_supply
            End Get
        End Property
        
        Friend ReadOnly Property scheduleColumn As DataColumn
            Get
                Return Me.columnschedule
            End Get
        End Property
        
        Friend ReadOnly Property avg_timeColumn As DataColumn
            Get
                Return Me.columnavg_time
            End Get
        End Property
        
        Friend ReadOnly Property bay_noColumn As DataColumn
            Get
                Return Me.columnbay_no
            End Get
        End Property
        
        Friend ReadOnly Property reminderColumn As DataColumn
            Get
                Return Me.columnreminder
            End Get
        End Property
        
        Friend ReadOnly Property milesColumn As DataColumn
            Get
                Return Me.columnmiles
            End Get
        End Property
        
        Friend ReadOnly Property daysColumn As DataColumn
            Get
                Return Me.columndays
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_labor_serviceRow
            Get
                Return CType(Me.Rows(index),inv_tab_labor_serviceRow)
            End Get
        End Property
        
        Public Event inv_tab_labor_serviceRowChanged As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowChanging As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleted As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleting As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_labor_serviceRow( _
                    ByVal cod_service As String,  _
                    ByVal desc_service As String,  _
                    ByVal store_no As String,  _
                    ByVal ext_desc As String,  _
                    ByVal service_type As String,  _
                    ByVal service_category As String,  _
                    ByVal cost As Single,  _
                    ByVal taxable As Boolean,  _
                    ByVal require_technician As Boolean,  _
                    ByVal charge_shop_supply As Boolean,  _
                    ByVal schedule As Boolean,  _
                    ByVal avg_time As Single,  _
                    ByVal bay_no As Short,  _
                    ByVal reminder As Boolean,  _
                    ByVal miles As Single,  _
                    ByVal days As Single) As inv_tab_labor_serviceRow
            Dim rowinv_tab_labor_serviceRow As inv_tab_labor_serviceRow = CType(Me.NewRow,inv_tab_labor_serviceRow)
            rowinv_tab_labor_serviceRow.ItemArray = New Object() {cod_service, desc_service, store_no, ext_desc, service_type, service_category, cost, taxable, require_technician, charge_shop_supply, schedule, avg_time, bay_no, reminder, miles, days}
            Me.Rows.Add(rowinv_tab_labor_serviceRow)
            Return rowinv_tab_labor_serviceRow
        End Function
        
        Public Function FindBycod_service(ByVal cod_service As String) As inv_tab_labor_serviceRow
            Return CType(Me.Rows.Find(New Object() {cod_service}),inv_tab_labor_serviceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_labor_serviceDataTable = CType(MyBase.Clone,inv_tab_labor_serviceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_labor_serviceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_service = Me.Columns("cod_service")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnext_desc = Me.Columns("ext_desc")
            Me.columnservice_type = Me.Columns("service_type")
            Me.columnservice_category = Me.Columns("service_category")
            Me.columncost = Me.Columns("cost")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnrequire_technician = Me.Columns("require_technician")
            Me.columncharge_shop_supply = Me.Columns("charge_shop_supply")
            Me.columnschedule = Me.Columns("schedule")
            Me.columnavg_time = Me.Columns("avg_time")
            Me.columnbay_no = Me.Columns("bay_no")
            Me.columnreminder = Me.Columns("reminder")
            Me.columnmiles = Me.Columns("miles")
            Me.columndays = Me.Columns("days")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_service = New DataColumn("cod_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_service)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnext_desc = New DataColumn("ext_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_desc)
            Me.columnservice_type = New DataColumn("service_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type)
            Me.columnservice_category = New DataColumn("service_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_category)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnrequire_technician = New DataColumn("require_technician", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrequire_technician)
            Me.columncharge_shop_supply = New DataColumn("charge_shop_supply", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge_shop_supply)
            Me.columnschedule = New DataColumn("schedule", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnschedule)
            Me.columnavg_time = New DataColumn("avg_time", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnavg_time)
            Me.columnbay_no = New DataColumn("bay_no", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbay_no)
            Me.columnreminder = New DataColumn("reminder", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreminder)
            Me.columnmiles = New DataColumn("miles", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmiles)
            Me.columndays = New DataColumn("days", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_service}, true))
            Me.columncod_service.AllowDBNull = false
            Me.columncod_service.Unique = true
        End Sub
        
        Public Function Newinv_tab_labor_serviceRow() As inv_tab_labor_serviceRow
            Return CType(Me.NewRow,inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_labor_serviceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_labor_serviceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanged(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_labor_serviceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanging(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleted(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleting(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRow
        Inherits DataRow
        
        Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_labor_service = CType(Me.Table,inv_tab_labor_serviceDataTable)
        End Sub
        
        Public Property cod_service As String
            Get
                Return CType(Me(Me.tableinv_tab_labor_service.cod_serviceColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.cod_serviceColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.store_noColumn) = value
            End Set
        End Property
        
        Public Property ext_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.ext_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.ext_descColumn) = value
            End Set
        End Property
        
        Public Property service_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.service_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.service_typeColumn) = value
            End Set
        End Property
        
        Public Property service_category As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.service_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.service_categoryColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.costColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.taxableColumn) = value
            End Set
        End Property
        
        Public Property require_technician As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.require_technicianColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.require_technicianColumn) = value
            End Set
        End Property
        
        Public Property charge_shop_supply As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn) = value
            End Set
        End Property
        
        Public Property schedule As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.scheduleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.scheduleColumn) = value
            End Set
        End Property
        
        Public Property avg_time As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.avg_timeColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.avg_timeColumn) = value
            End Set
        End Property
        
        Public Property bay_no As Short
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.bay_noColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.bay_noColumn) = value
            End Set
        End Property
        
        Public Property reminder As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.reminderColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.reminderColumn) = value
            End Set
        End Property
        
        Public Property miles As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.milesColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.milesColumn) = value
            End Set
        End Property
        
        Public Property days As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.daysColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.daysColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableinv_tab_labor_service.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tableinv_tab_labor_service.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_descNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.ext_descColumn)
        End Function
        
        Public Sub Setext_descNull()
            Me(Me.tableinv_tab_labor_service.ext_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.service_typeColumn)
        End Function
        
        Public Sub Setservice_typeNull()
            Me(Me.tableinv_tab_labor_service.service_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.service_categoryColumn)
        End Function
        
        Public Sub Setservice_categoryNull()
            Me(Me.tableinv_tab_labor_service.service_categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableinv_tab_labor_service.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_tab_labor_service.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrequire_technicianNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.require_technicianColumn)
        End Function
        
        Public Sub Setrequire_technicianNull()
            Me(Me.tableinv_tab_labor_service.require_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischarge_shop_supplyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.charge_shop_supplyColumn)
        End Function
        
        Public Sub Setcharge_shop_supplyNull()
            Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscheduleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.scheduleColumn)
        End Function
        
        Public Sub SetscheduleNull()
            Me(Me.tableinv_tab_labor_service.scheduleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isavg_timeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.avg_timeColumn)
        End Function
        
        Public Sub Setavg_timeNull()
            Me(Me.tableinv_tab_labor_service.avg_timeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbay_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.bay_noColumn)
        End Function
        
        Public Sub Setbay_noNull()
            Me(Me.tableinv_tab_labor_service.bay_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreminderNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.reminderColumn)
        End Function
        
        Public Sub SetreminderNull()
            Me(Me.tableinv_tab_labor_service.reminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmilesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.milesColumn)
        End Function
        
        Public Sub SetmilesNull()
            Me(Me.tableinv_tab_labor_service.milesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdaysNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.daysColumn)
        End Function
        
        Public Sub SetdaysNull()
            Me(Me.tableinv_tab_labor_service.daysColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_labor_serviceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_labor_serviceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_labor_serviceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
