'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsAccess
    Inherits DataSet
    
    Private tableBaseTable As BaseTableDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BaseTable")) Is Nothing) Then
                Me.Tables.Add(New BaseTableDataTable(ds.Tables("BaseTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BaseTable As BaseTableDataTable
        Get
            Return Me.tableBaseTable
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsAccess = CType(MyBase.Clone,DsAccess)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BaseTable")) Is Nothing) Then
            Me.Tables.Add(New BaseTableDataTable(ds.Tables("BaseTable")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBaseTable = CType(Me.Tables("BaseTable"),BaseTableDataTable)
        If (Not (Me.tableBaseTable) Is Nothing) Then
            Me.tableBaseTable.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsAccess"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsAccess.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBaseTable = New BaseTableDataTable
        Me.Tables.Add(Me.tableBaseTable)
    End Sub
    
    Private Function ShouldSerializeBaseTable() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BaseTableRowChangeEventHandler(ByVal sender As Object, ByVal e As BaseTableRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BaseTableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFrmName As DataColumn
        
        Private columnFrmHeight As DataColumn
        
        Private columnFrmFilter As DataColumn
        
        Private columnFrmDesc As DataColumn
        
        Private columnFrmCaption As DataColumn
        
        Private columnFrmPicture As DataColumn
        
        Private columnFrmTable As DataColumn
        
        Private columnFrmWidth As DataColumn
        
        Private columnCMBCondition As DataColumn
        
        Private columnCMBDisplayName As DataColumn
        
        Private columnCMBStatic As DataColumn
        
        Private columnCMBTableName As DataColumn
        
        Private columnCMBValueName As DataColumn
        
        Private columnDefaultValue As DataColumn
        
        Private columnEnable As DataColumn
        
        Private columnFieldcaption As DataColumn
        
        Private columnFieldheight As DataColumn
        
        Private columnFieldLocationX As DataColumn
        
        Private columnFieldLocationY As DataColumn
        
        Private columnFieldname As DataColumn
        
        Private columnFieldObjectType As DataColumn
        
        Private columnFieldType As DataColumn
        
        Private columnFieldwidth As DataColumn
        
        Private columnFillZero As DataColumn
        
        Private columnIsMandatory As DataColumn
        
        Private columnIsprimary As DataColumn
        
        Private columnMaxLength As DataColumn
        
        Private columnNoDecimal As DataColumn
        
        Private columnprime As DataColumn
        
        Private columnTabIndex As DataColumn
        
        Private columnUpdateDisabled As DataColumn
        
        Private columnFlgNew As DataColumn
        
        Private columnFlgDel As DataColumn
        
        Friend Sub New()
            MyBase.New("BaseTable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FrmNameColumn As DataColumn
            Get
                Return Me.columnFrmName
            End Get
        End Property
        
        Friend ReadOnly Property FrmHeightColumn As DataColumn
            Get
                Return Me.columnFrmHeight
            End Get
        End Property
        
        Friend ReadOnly Property FrmFilterColumn As DataColumn
            Get
                Return Me.columnFrmFilter
            End Get
        End Property
        
        Friend ReadOnly Property FrmDescColumn As DataColumn
            Get
                Return Me.columnFrmDesc
            End Get
        End Property
        
        Friend ReadOnly Property FrmCaptionColumn As DataColumn
            Get
                Return Me.columnFrmCaption
            End Get
        End Property
        
        Friend ReadOnly Property FrmPictureColumn As DataColumn
            Get
                Return Me.columnFrmPicture
            End Get
        End Property
        
        Friend ReadOnly Property FrmTableColumn As DataColumn
            Get
                Return Me.columnFrmTable
            End Get
        End Property
        
        Friend ReadOnly Property FrmWidthColumn As DataColumn
            Get
                Return Me.columnFrmWidth
            End Get
        End Property
        
        Friend ReadOnly Property CMBConditionColumn As DataColumn
            Get
                Return Me.columnCMBCondition
            End Get
        End Property
        
        Friend ReadOnly Property CMBDisplayNameColumn As DataColumn
            Get
                Return Me.columnCMBDisplayName
            End Get
        End Property
        
        Friend ReadOnly Property CMBStaticColumn As DataColumn
            Get
                Return Me.columnCMBStatic
            End Get
        End Property
        
        Friend ReadOnly Property CMBTableNameColumn As DataColumn
            Get
                Return Me.columnCMBTableName
            End Get
        End Property
        
        Friend ReadOnly Property CMBValueNameColumn As DataColumn
            Get
                Return Me.columnCMBValueName
            End Get
        End Property
        
        Friend ReadOnly Property DefaultValueColumn As DataColumn
            Get
                Return Me.columnDefaultValue
            End Get
        End Property
        
        Friend ReadOnly Property EnableColumn As DataColumn
            Get
                Return Me.columnEnable
            End Get
        End Property
        
        Friend ReadOnly Property FieldcaptionColumn As DataColumn
            Get
                Return Me.columnFieldcaption
            End Get
        End Property
        
        Friend ReadOnly Property FieldheightColumn As DataColumn
            Get
                Return Me.columnFieldheight
            End Get
        End Property
        
        Friend ReadOnly Property FieldLocationXColumn As DataColumn
            Get
                Return Me.columnFieldLocationX
            End Get
        End Property
        
        Friend ReadOnly Property FieldLocationYColumn As DataColumn
            Get
                Return Me.columnFieldLocationY
            End Get
        End Property
        
        Friend ReadOnly Property FieldnameColumn As DataColumn
            Get
                Return Me.columnFieldname
            End Get
        End Property
        
        Friend ReadOnly Property FieldObjectTypeColumn As DataColumn
            Get
                Return Me.columnFieldObjectType
            End Get
        End Property
        
        Friend ReadOnly Property FieldTypeColumn As DataColumn
            Get
                Return Me.columnFieldType
            End Get
        End Property
        
        Friend ReadOnly Property FieldwidthColumn As DataColumn
            Get
                Return Me.columnFieldwidth
            End Get
        End Property
        
        Friend ReadOnly Property FillZeroColumn As DataColumn
            Get
                Return Me.columnFillZero
            End Get
        End Property
        
        Friend ReadOnly Property IsMandatoryColumn As DataColumn
            Get
                Return Me.columnIsMandatory
            End Get
        End Property
        
        Friend ReadOnly Property IsprimaryColumn As DataColumn
            Get
                Return Me.columnIsprimary
            End Get
        End Property
        
        Friend ReadOnly Property MaxLengthColumn As DataColumn
            Get
                Return Me.columnMaxLength
            End Get
        End Property
        
        Friend ReadOnly Property NoDecimalColumn As DataColumn
            Get
                Return Me.columnNoDecimal
            End Get
        End Property
        
        Friend ReadOnly Property primeColumn As DataColumn
            Get
                Return Me.columnprime
            End Get
        End Property
        
        Friend ReadOnly Property TabIndexColumn As DataColumn
            Get
                Return Me.columnTabIndex
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDisabledColumn As DataColumn
            Get
                Return Me.columnUpdateDisabled
            End Get
        End Property
        
        Friend ReadOnly Property FlgNewColumn As DataColumn
            Get
                Return Me.columnFlgNew
            End Get
        End Property
        
        Friend ReadOnly Property FlgDelColumn As DataColumn
            Get
                Return Me.columnFlgDel
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BaseTableRow
            Get
                Return CType(Me.Rows(index),BaseTableRow)
            End Get
        End Property
        
        Public Event BaseTableRowChanged As BaseTableRowChangeEventHandler
        
        Public Event BaseTableRowChanging As BaseTableRowChangeEventHandler
        
        Public Event BaseTableRowDeleted As BaseTableRowChangeEventHandler
        
        Public Event BaseTableRowDeleting As BaseTableRowChangeEventHandler
        
        Public Overloads Sub AddBaseTableRow(ByVal row As BaseTableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBaseTableRow( _
                    ByVal FrmName As String,  _
                    ByVal FrmHeight As Integer,  _
                    ByVal FrmFilter As String,  _
                    ByVal FrmDesc As String,  _
                    ByVal FrmCaption As String,  _
                    ByVal FrmPicture() As Byte,  _
                    ByVal FrmTable As String,  _
                    ByVal FrmWidth As Integer,  _
                    ByVal CMBCondition() As Byte,  _
                    ByVal CMBDisplayName As String,  _
                    ByVal CMBStatic As String,  _
                    ByVal CMBTableName As String,  _
                    ByVal CMBValueName As String,  _
                    ByVal DefaultValue As String,  _
                    ByVal Enable As Boolean,  _
                    ByVal Fieldcaption As String,  _
                    ByVal Fieldheight As Integer,  _
                    ByVal FieldLocationX As Integer,  _
                    ByVal FieldLocationY As Integer,  _
                    ByVal Fieldname As String,  _
                    ByVal FieldObjectType As String,  _
                    ByVal FieldType() As Byte,  _
                    ByVal Fieldwidth As Short,  _
                    ByVal FillZero As Boolean,  _
                    ByVal IsMandatory As Boolean,  _
                    ByVal Isprimary As Boolean,  _
                    ByVal MaxLength As Integer,  _
                    ByVal NoDecimal As Integer,  _
                    ByVal TabIndex As Integer,  _
                    ByVal UpdateDisabled As Boolean,  _
                    ByVal FlgNew As Boolean,  _
                    ByVal FlgDel As Boolean) As BaseTableRow
            Dim rowBaseTableRow As BaseTableRow = CType(Me.NewRow,BaseTableRow)
            rowBaseTableRow.ItemArray = New Object() {FrmName, FrmHeight, FrmFilter, FrmDesc, FrmCaption, FrmPicture, FrmTable, FrmWidth, CMBCondition, CMBDisplayName, CMBStatic, CMBTableName, CMBValueName, DefaultValue, Enable, Fieldcaption, Fieldheight, FieldLocationX, FieldLocationY, Fieldname, FieldObjectType, FieldType, Fieldwidth, FillZero, IsMandatory, Isprimary, MaxLength, NoDecimal, Nothing, TabIndex, UpdateDisabled, FlgNew, FlgDel}
            Me.Rows.Add(rowBaseTableRow)
            Return rowBaseTableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BaseTableDataTable = CType(MyBase.Clone,BaseTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BaseTableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFrmName = Me.Columns("FrmName")
            Me.columnFrmHeight = Me.Columns("FrmHeight")
            Me.columnFrmFilter = Me.Columns("FrmFilter")
            Me.columnFrmDesc = Me.Columns("FrmDesc")
            Me.columnFrmCaption = Me.Columns("FrmCaption")
            Me.columnFrmPicture = Me.Columns("FrmPicture")
            Me.columnFrmTable = Me.Columns("FrmTable")
            Me.columnFrmWidth = Me.Columns("FrmWidth")
            Me.columnCMBCondition = Me.Columns("CMBCondition")
            Me.columnCMBDisplayName = Me.Columns("CMBDisplayName")
            Me.columnCMBStatic = Me.Columns("CMBStatic")
            Me.columnCMBTableName = Me.Columns("CMBTableName")
            Me.columnCMBValueName = Me.Columns("CMBValueName")
            Me.columnDefaultValue = Me.Columns("DefaultValue")
            Me.columnEnable = Me.Columns("Enable")
            Me.columnFieldcaption = Me.Columns("Fieldcaption")
            Me.columnFieldheight = Me.Columns("Fieldheight")
            Me.columnFieldLocationX = Me.Columns("FieldLocationX")
            Me.columnFieldLocationY = Me.Columns("FieldLocationY")
            Me.columnFieldname = Me.Columns("Fieldname")
            Me.columnFieldObjectType = Me.Columns("FieldObjectType")
            Me.columnFieldType = Me.Columns("FieldType")
            Me.columnFieldwidth = Me.Columns("Fieldwidth")
            Me.columnFillZero = Me.Columns("FillZero")
            Me.columnIsMandatory = Me.Columns("IsMandatory")
            Me.columnIsprimary = Me.Columns("Isprimary")
            Me.columnMaxLength = Me.Columns("MaxLength")
            Me.columnNoDecimal = Me.Columns("NoDecimal")
            Me.columnprime = Me.Columns("prime")
            Me.columnTabIndex = Me.Columns("TabIndex")
            Me.columnUpdateDisabled = Me.Columns("UpdateDisabled")
            Me.columnFlgNew = Me.Columns("FlgNew")
            Me.columnFlgDel = Me.Columns("FlgDel")
        End Sub
        
        Private Sub InitClass()
            Me.columnFrmName = New DataColumn("FrmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmName)
            Me.columnFrmHeight = New DataColumn("FrmHeight", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmHeight)
            Me.columnFrmFilter = New DataColumn("FrmFilter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmFilter)
            Me.columnFrmDesc = New DataColumn("FrmDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmDesc)
            Me.columnFrmCaption = New DataColumn("FrmCaption", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmCaption)
            Me.columnFrmPicture = New DataColumn("FrmPicture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmPicture)
            Me.columnFrmTable = New DataColumn("FrmTable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmTable)
            Me.columnFrmWidth = New DataColumn("FrmWidth", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmWidth)
            Me.columnCMBCondition = New DataColumn("CMBCondition", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBCondition)
            Me.columnCMBDisplayName = New DataColumn("CMBDisplayName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBDisplayName)
            Me.columnCMBStatic = New DataColumn("CMBStatic", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBStatic)
            Me.columnCMBTableName = New DataColumn("CMBTableName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBTableName)
            Me.columnCMBValueName = New DataColumn("CMBValueName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBValueName)
            Me.columnDefaultValue = New DataColumn("DefaultValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultValue)
            Me.columnEnable = New DataColumn("Enable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnable)
            Me.columnFieldcaption = New DataColumn("Fieldcaption", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldcaption)
            Me.columnFieldheight = New DataColumn("Fieldheight", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldheight)
            Me.columnFieldLocationX = New DataColumn("FieldLocationX", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldLocationX)
            Me.columnFieldLocationY = New DataColumn("FieldLocationY", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldLocationY)
            Me.columnFieldname = New DataColumn("Fieldname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldname)
            Me.columnFieldObjectType = New DataColumn("FieldObjectType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldObjectType)
            Me.columnFieldType = New DataColumn("FieldType", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldType)
            Me.columnFieldwidth = New DataColumn("Fieldwidth", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFieldwidth)
            Me.columnFillZero = New DataColumn("FillZero", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFillZero)
            Me.columnIsMandatory = New DataColumn("IsMandatory", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsMandatory)
            Me.columnIsprimary = New DataColumn("Isprimary", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsprimary)
            Me.columnMaxLength = New DataColumn("MaxLength", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxLength)
            Me.columnNoDecimal = New DataColumn("NoDecimal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoDecimal)
            Me.columnprime = New DataColumn("prime", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprime)
            Me.columnTabIndex = New DataColumn("TabIndex", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTabIndex)
            Me.columnUpdateDisabled = New DataColumn("UpdateDisabled", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDisabled)
            Me.columnFlgNew = New DataColumn("FlgNew", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlgNew)
            Me.columnFlgDel = New DataColumn("FlgDel", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlgDel)
            Me.columnCMBCondition.ReadOnly = true
            Me.columnFieldType.ReadOnly = true
            Me.columnprime.AutoIncrement = true
        End Sub
        
        Public Function NewBaseTableRow() As BaseTableRow
            Return CType(Me.NewRow,BaseTableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BaseTableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BaseTableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BaseTableRowChangedEvent) Is Nothing) Then
                RaiseEvent BaseTableRowChanged(Me, New BaseTableRowChangeEvent(CType(e.Row,BaseTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BaseTableRowChangingEvent) Is Nothing) Then
                RaiseEvent BaseTableRowChanging(Me, New BaseTableRowChangeEvent(CType(e.Row,BaseTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BaseTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent BaseTableRowDeleted(Me, New BaseTableRowChangeEvent(CType(e.Row,BaseTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BaseTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent BaseTableRowDeleting(Me, New BaseTableRowChangeEvent(CType(e.Row,BaseTableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBaseTableRow(ByVal row As BaseTableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BaseTableRow
        Inherits DataRow
        
        Private tableBaseTable As BaseTableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBaseTable = CType(Me.Table,BaseTableDataTable)
        End Sub
        
        Public Property FrmName As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmNameColumn) = value
            End Set
        End Property
        
        Public Property FrmHeight As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmHeightColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmHeightColumn) = value
            End Set
        End Property
        
        Public Property FrmFilter As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmFilterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmFilterColumn) = value
            End Set
        End Property
        
        Public Property FrmDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmDescColumn) = value
            End Set
        End Property
        
        Public Property FrmCaption As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmCaptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmCaptionColumn) = value
            End Set
        End Property
        
        Public Property FrmPicture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmPictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmPictureColumn) = value
            End Set
        End Property
        
        Public Property FrmTable As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmTableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmTableColumn) = value
            End Set
        End Property
        
        Public Property FrmWidth As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FrmWidthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FrmWidthColumn) = value
            End Set
        End Property
        
        Public Property CMBCondition As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.CMBConditionColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.CMBConditionColumn) = value
            End Set
        End Property
        
        Public Property CMBDisplayName As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.CMBDisplayNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.CMBDisplayNameColumn) = value
            End Set
        End Property
        
        Public Property CMBStatic As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.CMBStaticColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.CMBStaticColumn) = value
            End Set
        End Property
        
        Public Property CMBTableName As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.CMBTableNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.CMBTableNameColumn) = value
            End Set
        End Property
        
        Public Property CMBValueName As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.CMBValueNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.CMBValueNameColumn) = value
            End Set
        End Property
        
        Public Property DefaultValue As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.DefaultValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.DefaultValueColumn) = value
            End Set
        End Property
        
        Public Property Enable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.EnableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.EnableColumn) = value
            End Set
        End Property
        
        Public Property Fieldcaption As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldcaptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldcaptionColumn) = value
            End Set
        End Property
        
        Public Property Fieldheight As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldheightColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldheightColumn) = value
            End Set
        End Property
        
        Public Property FieldLocationX As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldLocationXColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldLocationXColumn) = value
            End Set
        End Property
        
        Public Property FieldLocationY As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldLocationYColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldLocationYColumn) = value
            End Set
        End Property
        
        Public Property Fieldname As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldnameColumn) = value
            End Set
        End Property
        
        Public Property FieldObjectType As String
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldObjectTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldObjectTypeColumn) = value
            End Set
        End Property
        
        Public Property FieldType As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldTypeColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldTypeColumn) = value
            End Set
        End Property
        
        Public Property Fieldwidth As Short
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FieldwidthColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FieldwidthColumn) = value
            End Set
        End Property
        
        Public Property FillZero As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FillZeroColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FillZeroColumn) = value
            End Set
        End Property
        
        Public Property IsMandatory As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.IsMandatoryColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.IsMandatoryColumn) = value
            End Set
        End Property
        
        Public Property Isprimary As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.IsprimaryColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.IsprimaryColumn) = value
            End Set
        End Property
        
        Public Property MaxLength As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.MaxLengthColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.MaxLengthColumn) = value
            End Set
        End Property
        
        Public Property NoDecimal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.NoDecimalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.NoDecimalColumn) = value
            End Set
        End Property
        
        Public Property prime As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.primeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.primeColumn) = value
            End Set
        End Property
        
        Public Property TabIndex As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.TabIndexColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.TabIndexColumn) = value
            End Set
        End Property
        
        Public Property UpdateDisabled As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.UpdateDisabledColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.UpdateDisabledColumn) = value
            End Set
        End Property
        
        Public Property FlgNew As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FlgNewColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FlgNewColumn) = value
            End Set
        End Property
        
        Public Property FlgDel As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBaseTable.FlgDelColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBaseTable.FlgDelColumn) = value
            End Set
        End Property
        
        Public Function IsFrmNameNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmNameColumn)
        End Function
        
        Public Sub SetFrmNameNull()
            Me(Me.tableBaseTable.FrmNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmHeightNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmHeightColumn)
        End Function
        
        Public Sub SetFrmHeightNull()
            Me(Me.tableBaseTable.FrmHeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmFilterNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmFilterColumn)
        End Function
        
        Public Sub SetFrmFilterNull()
            Me(Me.tableBaseTable.FrmFilterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmDescNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmDescColumn)
        End Function
        
        Public Sub SetFrmDescNull()
            Me(Me.tableBaseTable.FrmDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmCaptionNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmCaptionColumn)
        End Function
        
        Public Sub SetFrmCaptionNull()
            Me(Me.tableBaseTable.FrmCaptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmPictureNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmPictureColumn)
        End Function
        
        Public Sub SetFrmPictureNull()
            Me(Me.tableBaseTable.FrmPictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmTableNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmTableColumn)
        End Function
        
        Public Sub SetFrmTableNull()
            Me(Me.tableBaseTable.FrmTableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmWidthNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FrmWidthColumn)
        End Function
        
        Public Sub SetFrmWidthNull()
            Me(Me.tableBaseTable.FrmWidthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMBConditionNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.CMBConditionColumn)
        End Function
        
        Public Sub SetCMBConditionNull()
            Me(Me.tableBaseTable.CMBConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMBDisplayNameNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.CMBDisplayNameColumn)
        End Function
        
        Public Sub SetCMBDisplayNameNull()
            Me(Me.tableBaseTable.CMBDisplayNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMBStaticNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.CMBStaticColumn)
        End Function
        
        Public Sub SetCMBStaticNull()
            Me(Me.tableBaseTable.CMBStaticColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMBTableNameNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.CMBTableNameColumn)
        End Function
        
        Public Sub SetCMBTableNameNull()
            Me(Me.tableBaseTable.CMBTableNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMBValueNameNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.CMBValueNameColumn)
        End Function
        
        Public Sub SetCMBValueNameNull()
            Me(Me.tableBaseTable.CMBValueNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultValueNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.DefaultValueColumn)
        End Function
        
        Public Sub SetDefaultValueNull()
            Me(Me.tableBaseTable.DefaultValueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnableNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.EnableColumn)
        End Function
        
        Public Sub SetEnableNull()
            Me(Me.tableBaseTable.EnableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldcaptionNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldcaptionColumn)
        End Function
        
        Public Sub SetFieldcaptionNull()
            Me(Me.tableBaseTable.FieldcaptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldheightNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldheightColumn)
        End Function
        
        Public Sub SetFieldheightNull()
            Me(Me.tableBaseTable.FieldheightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldLocationXNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldLocationXColumn)
        End Function
        
        Public Sub SetFieldLocationXNull()
            Me(Me.tableBaseTable.FieldLocationXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldLocationYNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldLocationYColumn)
        End Function
        
        Public Sub SetFieldLocationYNull()
            Me(Me.tableBaseTable.FieldLocationYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldnameNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldnameColumn)
        End Function
        
        Public Sub SetFieldnameNull()
            Me(Me.tableBaseTable.FieldnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldObjectTypeNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldObjectTypeColumn)
        End Function
        
        Public Sub SetFieldObjectTypeNull()
            Me(Me.tableBaseTable.FieldObjectTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldTypeNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldTypeColumn)
        End Function
        
        Public Sub SetFieldTypeNull()
            Me(Me.tableBaseTable.FieldTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFieldwidthNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FieldwidthColumn)
        End Function
        
        Public Sub SetFieldwidthNull()
            Me(Me.tableBaseTable.FieldwidthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFillZeroNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FillZeroColumn)
        End Function
        
        Public Sub SetFillZeroNull()
            Me(Me.tableBaseTable.FillZeroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsMandatoryNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.IsMandatoryColumn)
        End Function
        
        Public Sub SetIsMandatoryNull()
            Me(Me.tableBaseTable.IsMandatoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsprimaryNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.IsprimaryColumn)
        End Function
        
        Public Sub SetIsprimaryNull()
            Me(Me.tableBaseTable.IsprimaryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxLengthNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.MaxLengthColumn)
        End Function
        
        Public Sub SetMaxLengthNull()
            Me(Me.tableBaseTable.MaxLengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoDecimalNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.NoDecimalColumn)
        End Function
        
        Public Sub SetNoDecimalNull()
            Me(Me.tableBaseTable.NoDecimalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprimeNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.primeColumn)
        End Function
        
        Public Sub SetprimeNull()
            Me(Me.tableBaseTable.primeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTabIndexNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.TabIndexColumn)
        End Function
        
        Public Sub SetTabIndexNull()
            Me(Me.tableBaseTable.TabIndexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDisabledNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.UpdateDisabledColumn)
        End Function
        
        Public Sub SetUpdateDisabledNull()
            Me(Me.tableBaseTable.UpdateDisabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlgNewNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FlgNewColumn)
        End Function
        
        Public Sub SetFlgNewNull()
            Me(Me.tableBaseTable.FlgNewColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlgDelNull() As Boolean
            Return Me.IsNull(Me.tableBaseTable.FlgDelColumn)
        End Function
        
        Public Sub SetFlgDelNull()
            Me(Me.tableBaseTable.FlgDelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BaseTableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BaseTableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BaseTableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BaseTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
