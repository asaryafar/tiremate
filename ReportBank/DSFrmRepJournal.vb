'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepJournal
    Inherits DataSet
    
    Private tableaccount As accountDataTable
    
    Private tablesub1 As sub1DataTable
    
    Private tablesub2 As sub2DataTable
    
    Private tablejournal As journalDataTable
    
    Private tablegroup As groupDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("account")) Is Nothing) Then
                Me.Tables.Add(New accountDataTable(ds.Tables("account")))
            End If
            If (Not (ds.Tables("sub1")) Is Nothing) Then
                Me.Tables.Add(New sub1DataTable(ds.Tables("sub1")))
            End If
            If (Not (ds.Tables("sub2")) Is Nothing) Then
                Me.Tables.Add(New sub2DataTable(ds.Tables("sub2")))
            End If
            If (Not (ds.Tables("journal")) Is Nothing) Then
                Me.Tables.Add(New journalDataTable(ds.Tables("journal")))
            End If
            If (Not (ds.Tables("group")) Is Nothing) Then
                Me.Tables.Add(New groupDataTable(ds.Tables("group")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property account As accountDataTable
        Get
            Return Me.tableaccount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sub1 As sub1DataTable
        Get
            Return Me.tablesub1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sub2 As sub2DataTable
        Get
            Return Me.tablesub2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property journal As journalDataTable
        Get
            Return Me.tablejournal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property group As groupDataTable
        Get
            Return Me.tablegroup
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepJournal = CType(MyBase.Clone,DSFrmRepJournal)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("account")) Is Nothing) Then
            Me.Tables.Add(New accountDataTable(ds.Tables("account")))
        End If
        If (Not (ds.Tables("sub1")) Is Nothing) Then
            Me.Tables.Add(New sub1DataTable(ds.Tables("sub1")))
        End If
        If (Not (ds.Tables("sub2")) Is Nothing) Then
            Me.Tables.Add(New sub2DataTable(ds.Tables("sub2")))
        End If
        If (Not (ds.Tables("journal")) Is Nothing) Then
            Me.Tables.Add(New journalDataTable(ds.Tables("journal")))
        End If
        If (Not (ds.Tables("group")) Is Nothing) Then
            Me.Tables.Add(New groupDataTable(ds.Tables("group")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableaccount = CType(Me.Tables("account"),accountDataTable)
        If (Not (Me.tableaccount) Is Nothing) Then
            Me.tableaccount.InitVars
        End If
        Me.tablesub1 = CType(Me.Tables("sub1"),sub1DataTable)
        If (Not (Me.tablesub1) Is Nothing) Then
            Me.tablesub1.InitVars
        End If
        Me.tablesub2 = CType(Me.Tables("sub2"),sub2DataTable)
        If (Not (Me.tablesub2) Is Nothing) Then
            Me.tablesub2.InitVars
        End If
        Me.tablejournal = CType(Me.Tables("journal"),journalDataTable)
        If (Not (Me.tablejournal) Is Nothing) Then
            Me.tablejournal.InitVars
        End If
        Me.tablegroup = CType(Me.Tables("group"),groupDataTable)
        If (Not (Me.tablegroup) Is Nothing) Then
            Me.tablegroup.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepJournal"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepJournal.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableaccount = New accountDataTable
        Me.Tables.Add(Me.tableaccount)
        Me.tablesub1 = New sub1DataTable
        Me.Tables.Add(Me.tablesub1)
        Me.tablesub2 = New sub2DataTable
        Me.Tables.Add(Me.tablesub2)
        Me.tablejournal = New journalDataTable
        Me.Tables.Add(Me.tablejournal)
        Me.tablegroup = New groupDataTable
        Me.Tables.Add(Me.tablegroup)
    End Sub
    
    Private Function ShouldSerializeaccount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesub1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesub2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializejournal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializegroup() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub accountRowChangeEventHandler(ByVal sender As Object, ByVal e As accountRowChangeEvent)
    
    Public Delegate Sub sub1RowChangeEventHandler(ByVal sender As Object, ByVal e As sub1RowChangeEvent)
    
    Public Delegate Sub sub2RowChangeEventHandler(ByVal sender As Object, ByVal e As sub2RowChangeEvent)
    
    Public Delegate Sub journalRowChangeEventHandler(ByVal sender As Object, ByVal e As journalRowChangeEvent)
    
    Public Delegate Sub groupRowChangeEventHandler(ByVal sender As Object, ByVal e As groupRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As accountRow
            Get
                Return CType(Me.Rows(index),accountRow)
            End Get
        End Property
        
        Public Event accountRowChanged As accountRowChangeEventHandler
        
        Public Event accountRowChanging As accountRowChangeEventHandler
        
        Public Event accountRowDeleted As accountRowChangeEventHandler
        
        Public Event accountRowDeleting As accountRowChangeEventHandler
        
        Public Overloads Sub AddaccountRow(ByVal row As accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddaccountRow(ByVal code As String, ByVal name As String, ByVal flag As Boolean) As accountRow
            Dim rowaccountRow As accountRow = CType(Me.NewRow,accountRow)
            rowaccountRow.ItemArray = New Object() {code, name, flag}
            Me.Rows.Add(rowaccountRow)
            Return rowaccountRow
        End Function
        
        Public Function FindBycode(ByVal code As String) As accountRow
            Return CType(Me.Rows.Find(New Object() {code}),accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As accountDataTable = CType(MyBase.Clone,accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function NewaccountRow() As accountRow
            Return CType(Me.NewRow,accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.accountRowChangedEvent) Is Nothing) Then
                RaiseEvent accountRowChanged(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.accountRowChangingEvent) Is Nothing) Then
                RaiseEvent accountRowChanging(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent accountRowDeleted(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent accountRowDeleting(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveaccountRow(ByVal row As accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class accountRow
        Inherits DataRow
        
        Private tableaccount As accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableaccount = CType(Me.Table,accountDataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tableaccount.codeColumn),String)
            End Get
            Set
                Me(Me.tableaccount.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableaccount.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccount.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableaccount.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccount.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableaccount.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableaccount.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableaccount.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableaccount.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("sub1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sub1Row
            Get
                Return CType(Me.Rows(index),sub1Row)
            End Get
        End Property
        
        Public Event sub1RowChanged As sub1RowChangeEventHandler
        
        Public Event sub1RowChanging As sub1RowChangeEventHandler
        
        Public Event sub1RowDeleted As sub1RowChangeEventHandler
        
        Public Event sub1RowDeleting As sub1RowChangeEventHandler
        
        Public Overloads Sub Addsub1Row(ByVal row As sub1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addsub1Row(ByVal code As String, ByVal name As String, ByVal flag As Boolean) As sub1Row
            Dim rowsub1Row As sub1Row = CType(Me.NewRow,sub1Row)
            rowsub1Row.ItemArray = New Object() {code, name, flag}
            Me.Rows.Add(rowsub1Row)
            Return rowsub1Row
        End Function
        
        Public Function FindBycode(ByVal code As String) As sub1Row
            Return CType(Me.Rows.Find(New Object() {code}),sub1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sub1DataTable = CType(MyBase.Clone,sub1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sub1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function Newsub1Row() As sub1Row
            Return CType(Me.NewRow,sub1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sub1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sub1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sub1RowChangedEvent) Is Nothing) Then
                RaiseEvent sub1RowChanged(Me, New sub1RowChangeEvent(CType(e.Row,sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sub1RowChangingEvent) Is Nothing) Then
                RaiseEvent sub1RowChanging(Me, New sub1RowChangeEvent(CType(e.Row,sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sub1RowDeletedEvent) Is Nothing) Then
                RaiseEvent sub1RowDeleted(Me, New sub1RowChangeEvent(CType(e.Row,sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sub1RowDeletingEvent) Is Nothing) Then
                RaiseEvent sub1RowDeleting(Me, New sub1RowChangeEvent(CType(e.Row,sub1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removesub1Row(ByVal row As sub1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub1Row
        Inherits DataRow
        
        Private tablesub1 As sub1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesub1 = CType(Me.Table,sub1DataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tablesub1.codeColumn),String)
            End Get
            Set
                Me(Me.tablesub1.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablesub1.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesub1.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesub1.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesub1.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesub1.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablesub1.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablesub1.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablesub1.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sub1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sub1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sub1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("sub2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sub2Row
            Get
                Return CType(Me.Rows(index),sub2Row)
            End Get
        End Property
        
        Public Event sub2RowChanged As sub2RowChangeEventHandler
        
        Public Event sub2RowChanging As sub2RowChangeEventHandler
        
        Public Event sub2RowDeleted As sub2RowChangeEventHandler
        
        Public Event sub2RowDeleting As sub2RowChangeEventHandler
        
        Public Overloads Sub Addsub2Row(ByVal row As sub2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addsub2Row(ByVal code As String, ByVal name As String, ByVal flag As Boolean) As sub2Row
            Dim rowsub2Row As sub2Row = CType(Me.NewRow,sub2Row)
            rowsub2Row.ItemArray = New Object() {code, name, flag}
            Me.Rows.Add(rowsub2Row)
            Return rowsub2Row
        End Function
        
        Public Function FindBycode(ByVal code As String) As sub2Row
            Return CType(Me.Rows.Find(New Object() {code}),sub2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sub2DataTable = CType(MyBase.Clone,sub2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sub2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function Newsub2Row() As sub2Row
            Return CType(Me.NewRow,sub2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sub2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sub2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sub2RowChangedEvent) Is Nothing) Then
                RaiseEvent sub2RowChanged(Me, New sub2RowChangeEvent(CType(e.Row,sub2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sub2RowChangingEvent) Is Nothing) Then
                RaiseEvent sub2RowChanging(Me, New sub2RowChangeEvent(CType(e.Row,sub2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sub2RowDeletedEvent) Is Nothing) Then
                RaiseEvent sub2RowDeleted(Me, New sub2RowChangeEvent(CType(e.Row,sub2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sub2RowDeletingEvent) Is Nothing) Then
                RaiseEvent sub2RowDeleting(Me, New sub2RowChangeEvent(CType(e.Row,sub2Row), e.Action))
            End If
        End Sub
        
        Public Sub Removesub2Row(ByVal row As sub2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub2Row
        Inherits DataRow
        
        Private tablesub2 As sub2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesub2 = CType(Me.Table,sub2DataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tablesub2.codeColumn),String)
            End Get
            Set
                Me(Me.tablesub2.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablesub2.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesub2.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesub2.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesub2.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesub2.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablesub2.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablesub2.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablesub2.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sub2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sub2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sub2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sub2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class journalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("journal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As journalRow
            Get
                Return CType(Me.Rows(index),journalRow)
            End Get
        End Property
        
        Public Event journalRowChanged As journalRowChangeEventHandler
        
        Public Event journalRowChanging As journalRowChangeEventHandler
        
        Public Event journalRowDeleted As journalRowChangeEventHandler
        
        Public Event journalRowDeleting As journalRowChangeEventHandler
        
        Public Overloads Sub AddjournalRow(ByVal row As journalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddjournalRow(ByVal code As String, ByVal name As String, ByVal flag As Boolean) As journalRow
            Dim rowjournalRow As journalRow = CType(Me.NewRow,journalRow)
            rowjournalRow.ItemArray = New Object() {code, name, flag}
            Me.Rows.Add(rowjournalRow)
            Return rowjournalRow
        End Function
        
        Public Function FindBycode(ByVal code As String) As journalRow
            Return CType(Me.Rows.Find(New Object() {code}),journalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As journalDataTable = CType(MyBase.Clone,journalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New journalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function NewjournalRow() As journalRow
            Return CType(Me.NewRow,journalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New journalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(journalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.journalRowChangedEvent) Is Nothing) Then
                RaiseEvent journalRowChanged(Me, New journalRowChangeEvent(CType(e.Row,journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.journalRowChangingEvent) Is Nothing) Then
                RaiseEvent journalRowChanging(Me, New journalRowChangeEvent(CType(e.Row,journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.journalRowDeletedEvent) Is Nothing) Then
                RaiseEvent journalRowDeleted(Me, New journalRowChangeEvent(CType(e.Row,journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.journalRowDeletingEvent) Is Nothing) Then
                RaiseEvent journalRowDeleting(Me, New journalRowChangeEvent(CType(e.Row,journalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovejournalRow(ByVal row As journalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class journalRow
        Inherits DataRow
        
        Private tablejournal As journalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablejournal = CType(Me.Table,journalDataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tablejournal.codeColumn),String)
            End Get
            Set
                Me(Me.tablejournal.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablejournal.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejournal.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablejournal.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejournal.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablejournal.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablejournal.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablejournal.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablejournal.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class journalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As journalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As journalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As journalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("group")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As groupRow
            Get
                Return CType(Me.Rows(index),groupRow)
            End Get
        End Property
        
        Public Event groupRowChanged As groupRowChangeEventHandler
        
        Public Event groupRowChanging As groupRowChangeEventHandler
        
        Public Event groupRowDeleted As groupRowChangeEventHandler
        
        Public Event groupRowDeleting As groupRowChangeEventHandler
        
        Public Overloads Sub AddgroupRow(ByVal row As groupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddgroupRow(ByVal code As String, ByVal name As String, ByVal flag As Boolean) As groupRow
            Dim rowgroupRow As groupRow = CType(Me.NewRow,groupRow)
            rowgroupRow.ItemArray = New Object() {code, name, flag}
            Me.Rows.Add(rowgroupRow)
            Return rowgroupRow
        End Function
        
        Public Function FindBycode(ByVal code As String) As groupRow
            Return CType(Me.Rows.Find(New Object() {code}),groupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As groupDataTable = CType(MyBase.Clone,groupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New groupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function NewgroupRow() As groupRow
            Return CType(Me.NewRow,groupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New groupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(groupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.groupRowChangedEvent) Is Nothing) Then
                RaiseEvent groupRowChanged(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.groupRowChangingEvent) Is Nothing) Then
                RaiseEvent groupRowChanging(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.groupRowDeletedEvent) Is Nothing) Then
                RaiseEvent groupRowDeleted(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.groupRowDeletingEvent) Is Nothing) Then
                RaiseEvent groupRowDeleting(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovegroupRow(ByVal row As groupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupRow
        Inherits DataRow
        
        Private tablegroup As groupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablegroup = CType(Me.Table,groupDataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tablegroup.codeColumn),String)
            End Get
            Set
                Me(Me.tablegroup.codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablegroup.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablegroup.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablegroup.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablegroup.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablegroup.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablegroup.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As groupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As groupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As groupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
