'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmReminder
    Inherits DataSet
    
    Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
    
    Private tableTextReport As TextReportDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
            End If
            If (Not (ds.Tables("TextReport")) Is Nothing) Then
                Me.Tables.Add(New TextReportDataTable(ds.Tables("TextReport")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_labor_service As inv_tab_labor_serviceDataTable
        Get
            Return Me.tableinv_tab_labor_service
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TextReport As TextReportDataTable
        Get
            Return Me.tableTextReport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmReminder = CType(MyBase.Clone,DSFrmReminder)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
        End If
        If (Not (ds.Tables("TextReport")) Is Nothing) Then
            Me.Tables.Add(New TextReportDataTable(ds.Tables("TextReport")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_labor_service = CType(Me.Tables("inv_tab_labor_service"),inv_tab_labor_serviceDataTable)
        If (Not (Me.tableinv_tab_labor_service) Is Nothing) Then
            Me.tableinv_tab_labor_service.InitVars
        End If
        Me.tableTextReport = CType(Me.Tables("TextReport"),TextReportDataTable)
        If (Not (Me.tableTextReport) Is Nothing) Then
            Me.tableTextReport.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmReminder"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmReminder.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_labor_service = New inv_tab_labor_serviceDataTable
        Me.Tables.Add(Me.tableinv_tab_labor_service)
        Me.tableTextReport = New TextReportDataTable
        Me.Tables.Add(Me.tableTextReport)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
    End Sub
    
    Private Function ShouldSerializeinv_tab_labor_service() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTextReport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_tab_labor_serviceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_labor_serviceRowChangeEvent)
    
    Public Delegate Sub TextReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TextReportRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columndays As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_labor_service")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property daysColumn As DataColumn
            Get
                Return Me.columndays
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_labor_serviceRow
            Get
                Return CType(Me.Rows(index),inv_tab_labor_serviceRow)
            End Get
        End Property
        
        Public Event inv_tab_labor_serviceRowChanged As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowChanging As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleted As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleting As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_labor_serviceRow(ByVal cod As String, ByVal name As String, ByVal days As Integer, ByVal flag As Boolean) As inv_tab_labor_serviceRow
            Dim rowinv_tab_labor_serviceRow As inv_tab_labor_serviceRow = CType(Me.NewRow,inv_tab_labor_serviceRow)
            rowinv_tab_labor_serviceRow.ItemArray = New Object() {cod, name, days, flag}
            Me.Rows.Add(rowinv_tab_labor_serviceRow)
            Return rowinv_tab_labor_serviceRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As inv_tab_labor_serviceRow
            Return CType(Me.Rows.Find(New Object() {cod}),inv_tab_labor_serviceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_labor_serviceDataTable = CType(MyBase.Clone,inv_tab_labor_serviceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_labor_serviceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columndays = Me.Columns("days")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columndays = New DataColumn("days", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function Newinv_tab_labor_serviceRow() As inv_tab_labor_serviceRow
            Return CType(Me.NewRow,inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_labor_serviceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_labor_serviceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanged(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_labor_serviceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanging(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleted(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleting(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRow
        Inherits DataRow
        
        Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_labor_service = CType(Me.Table,inv_tab_labor_serviceDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableinv_tab_labor_service.codColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.nameColumn) = value
            End Set
        End Property
        
        Public Property days As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.daysColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.daysColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableinv_tab_labor_service.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdaysNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.daysColumn)
        End Function
        
        Public Sub SetdaysNull()
            Me(Me.tableinv_tab_labor_service.daysColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableinv_tab_labor_service.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_labor_serviceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_labor_serviceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_labor_serviceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextReportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCode As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnWritingText As DataColumn
        
        Friend Sub New()
            MyBase.New("TextReport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property WritingTextColumn As DataColumn
            Get
                Return Me.columnWritingText
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TextReportRow
            Get
                Return CType(Me.Rows(index),TextReportRow)
            End Get
        End Property
        
        Public Event TextReportRowChanged As TextReportRowChangeEventHandler
        
        Public Event TextReportRowChanging As TextReportRowChangeEventHandler
        
        Public Event TextReportRowDeleted As TextReportRowChangeEventHandler
        
        Public Event TextReportRowDeleting As TextReportRowChangeEventHandler
        
        Public Overloads Sub AddTextReportRow(ByVal row As TextReportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTextReportRow(ByVal Description As String, ByVal WritingText As String) As TextReportRow
            Dim rowTextReportRow As TextReportRow = CType(Me.NewRow,TextReportRow)
            rowTextReportRow.ItemArray = New Object() {Nothing, Description, WritingText}
            Me.Rows.Add(rowTextReportRow)
            Return rowTextReportRow
        End Function
        
        Public Function FindByCode(ByVal Code As Short) As TextReportRow
            Return CType(Me.Rows.Find(New Object() {Code}),TextReportRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TextReportDataTable = CType(MyBase.Clone,TextReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TextReportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCode = Me.Columns("Code")
            Me.columnDescription = Me.Columns("Description")
            Me.columnWritingText = Me.Columns("WritingText")
        End Sub
        
        Private Sub InitClass()
            Me.columnCode = New DataColumn("Code", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnWritingText = New DataColumn("WritingText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWritingText)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCode}, true))
            Me.columnCode.AutoIncrement = true
            Me.columnCode.AllowDBNull = false
            Me.columnCode.ReadOnly = true
            Me.columnCode.Unique = true
        End Sub
        
        Public Function NewTextReportRow() As TextReportRow
            Return CType(Me.NewRow,TextReportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TextReportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TextReportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TextReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TextReportRowChanged(Me, New TextReportRowChangeEvent(CType(e.Row,TextReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TextReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TextReportRowChanging(Me, New TextReportRowChangeEvent(CType(e.Row,TextReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TextReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TextReportRowDeleted(Me, New TextReportRowChangeEvent(CType(e.Row,TextReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TextReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TextReportRowDeleting(Me, New TextReportRowChangeEvent(CType(e.Row,TextReportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTextReportRow(ByVal row As TextReportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextReportRow
        Inherits DataRow
        
        Private tableTextReport As TextReportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTextReport = CType(Me.Table,TextReportDataTable)
        End Sub
        
        Public Property Code As Short
            Get
                Return CType(Me(Me.tableTextReport.CodeColumn),Short)
            End Get
            Set
                Me(Me.tableTextReport.CodeColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableTextReport.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTextReport.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property WritingText As String
            Get
                Try 
                    Return CType(Me(Me.tableTextReport.WritingTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTextReport.WritingTextColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTextReport.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableTextReport.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWritingTextNull() As Boolean
            Return Me.IsNull(Me.tableTextReport.WritingTextColumn)
        End Function
        
        Public Sub SetWritingTextNull()
            Me(Me.tableTextReport.WritingTextColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TextReportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TextReportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TextReportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TextReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnNameCus As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnZipCus As DataColumn
        
        Private columnphone As DataColumn
        
        Private columnVehicle As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnmake_year As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property NameCusColumn As DataColumn
            Get
                Return Me.columnNameCus
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property ZipCusColumn As DataColumn
            Get
                Return Me.columnZipCus
            End Get
        End Property
        
        Friend ReadOnly Property phoneColumn As DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        Friend ReadOnly Property VehicleColumn As DataColumn
            Get
                Return Me.columnVehicle
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property make_yearColumn As DataColumn
            Get
                Return Me.columnmake_year
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal cod_customer As String, ByVal NameCus As String, ByVal address As String, ByVal ZipCus As String, ByVal phone As String, ByVal Vehicle As String, ByVal desc_service As String, ByVal date_refer As String, ByVal make_year As String) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {cod_customer, NameCus, address, ZipCus, phone, Vehicle, desc_service, date_refer, make_year}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnNameCus = Me.Columns("NameCus")
            Me.columnaddress = Me.Columns("address")
            Me.columnZipCus = Me.Columns("ZipCus")
            Me.columnphone = Me.Columns("phone")
            Me.columnVehicle = Me.Columns("Vehicle")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnmake_year = Me.Columns("make_year")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnNameCus = New DataColumn("NameCus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameCus)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnZipCus = New DataColumn("ZipCus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZipCus)
            Me.columnphone = New DataColumn("phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone)
            Me.columnVehicle = New DataColumn("Vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVehicle)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnmake_year = New DataColumn("make_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake_year)
            Me.columnNameCus.ReadOnly = true
            Me.columnZipCus.ReadOnly = true
            Me.columnphone.ReadOnly = true
            Me.columnVehicle.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property NameCus As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.NameCusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.NameCusColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.addressColumn) = value
            End Set
        End Property
        
        Public Property ZipCus As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ZipCusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ZipCusColumn) = value
            End Set
        End Property
        
        Public Property phone As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.phoneColumn) = value
            End Set
        End Property
        
        Public Property Vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.VehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.VehicleColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property make_year As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.make_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.make_yearColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableservice_center_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameCusNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.NameCusColumn)
        End Function
        
        Public Sub SetNameCusNull()
            Me(Me.tableservice_center_head.NameCusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableservice_center_head.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipCusNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ZipCusColumn)
        End Function
        
        Public Sub SetZipCusNull()
            Me(Me.tableservice_center_head.ZipCusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.phoneColumn)
        End Function
        
        Public Sub SetphoneNull()
            Me(Me.tableservice_center_head.phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.VehicleColumn)
        End Function
        
        Public Sub SetVehicleNull()
            Me(Me.tableservice_center_head.VehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableservice_center_head.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_head.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismake_yearNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.make_yearColumn)
        End Function
        
        Public Sub Setmake_yearNull()
            Me(Me.tableservice_center_head.make_yearColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
