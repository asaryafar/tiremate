'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrintJournal
    Inherits DataSet
    
    Private tableIncome As IncomeDataTable
    
    Private tableHistory As HistoryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Income")) Is Nothing) Then
                Me.Tables.Add(New IncomeDataTable(ds.Tables("Income")))
            End If
            If (Not (ds.Tables("History")) Is Nothing) Then
                Me.Tables.Add(New HistoryDataTable(ds.Tables("History")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Income As IncomeDataTable
        Get
            Return Me.tableIncome
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property History As HistoryDataTable
        Get
            Return Me.tableHistory
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrintJournal = CType(MyBase.Clone,DSFrmPrintJournal)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Income")) Is Nothing) Then
            Me.Tables.Add(New IncomeDataTable(ds.Tables("Income")))
        End If
        If (Not (ds.Tables("History")) Is Nothing) Then
            Me.Tables.Add(New HistoryDataTable(ds.Tables("History")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableIncome = CType(Me.Tables("Income"),IncomeDataTable)
        If (Not (Me.tableIncome) Is Nothing) Then
            Me.tableIncome.InitVars
        End If
        Me.tableHistory = CType(Me.Tables("History"),HistoryDataTable)
        If (Not (Me.tableHistory) Is Nothing) Then
            Me.tableHistory.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrintJournal"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrintJournal.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableIncome = New IncomeDataTable
        Me.Tables.Add(Me.tableIncome)
        Me.tableHistory = New HistoryDataTable
        Me.Tables.Add(Me.tableHistory)
    End Sub
    
    Private Function ShouldSerializeIncome() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHistory() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub IncomeRowChangeEventHandler(ByVal sender As Object, ByVal e As IncomeRowChangeEvent)
    
    Public Delegate Sub HistoryRowChangeEventHandler(ByVal sender As Object, ByVal e As HistoryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IncomeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndesc_group_account As DataColumn
        
        Private columnGl_account_group_subgroup1_desc As DataColumn
        
        Private columnGL_journal_date As DataColumn
        
        Private columnGL_journal_reference As DataColumn
        
        Private columnGL_journal_type_desc As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnflag As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnNetIncome As DataColumn
        
        Friend Sub New()
            MyBase.New("Income")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property desc_group_accountColumn As DataColumn
            Get
                Return Me.columndesc_group_account
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup1_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup1_desc
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_dateColumn As DataColumn
            Get
                Return Me.columnGL_journal_date
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_referenceColumn As DataColumn
            Get
                Return Me.columnGL_journal_reference
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_descColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property NetIncomeColumn As DataColumn
            Get
                Return Me.columnNetIncome
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IncomeRow
            Get
                Return CType(Me.Rows(index),IncomeRow)
            End Get
        End Property
        
        Public Event IncomeRowChanged As IncomeRowChangeEventHandler
        
        Public Event IncomeRowChanging As IncomeRowChangeEventHandler
        
        Public Event IncomeRowDeleted As IncomeRowChangeEventHandler
        
        Public Event IncomeRowDeleting As IncomeRowChangeEventHandler
        
        Public Overloads Sub AddIncomeRow(ByVal row As IncomeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIncomeRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal amount As Decimal, ByVal desc_group_account As String, ByVal Gl_account_group_subgroup1_desc As String, ByVal GL_journal_date As String, ByVal GL_journal_reference As String, ByVal GL_journal_type_desc As String, ByVal flag As Boolean, ByVal group_GL_account As String, ByVal NetIncome As Decimal) As IncomeRow
            Dim rowIncomeRow As IncomeRow = CType(Me.NewRow,IncomeRow)
            rowIncomeRow.ItemArray = New Object() {GL_account, desc_GL_account, amount, desc_group_account, Gl_account_group_subgroup1_desc, GL_journal_date, GL_journal_reference, GL_journal_type_desc, Nothing, flag, group_GL_account, NetIncome}
            Me.Rows.Add(rowIncomeRow)
            Return rowIncomeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IncomeDataTable = CType(MyBase.Clone,IncomeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IncomeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnamount = Me.Columns("amount")
            Me.columndesc_group_account = Me.Columns("desc_group_account")
            Me.columnGl_account_group_subgroup1_desc = Me.Columns("Gl_account_group_subgroup1_desc")
            Me.columnGL_journal_date = Me.Columns("GL_journal_date")
            Me.columnGL_journal_reference = Me.Columns("GL_journal_reference")
            Me.columnGL_journal_type_desc = Me.Columns("GL_journal_type_desc")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnflag = Me.Columns("flag")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnNetIncome = Me.Columns("NetIncome")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndesc_group_account = New DataColumn("desc_group_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_group_account)
            Me.columnGl_account_group_subgroup1_desc = New DataColumn("Gl_account_group_subgroup1_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup1_desc)
            Me.columnGL_journal_date = New DataColumn("GL_journal_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_date)
            Me.columnGL_journal_reference = New DataColumn("GL_journal_reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_reference)
            Me.columnGL_journal_type_desc = New DataColumn("GL_journal_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_desc)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnNetIncome = New DataColumn("NetIncome", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNetIncome)
            Me.columnGL_account.AllowDBNull = false
            Me.columnamount.ReadOnly = true
            Me.columnid_GL_journal.AutoIncrement = true
            Me.columnid_GL_journal.AllowDBNull = false
            Me.columnid_GL_journal.ReadOnly = true
        End Sub
        
        Public Function NewIncomeRow() As IncomeRow
            Return CType(Me.NewRow,IncomeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IncomeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IncomeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IncomeRowChangedEvent) Is Nothing) Then
                RaiseEvent IncomeRowChanged(Me, New IncomeRowChangeEvent(CType(e.Row,IncomeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IncomeRowChangingEvent) Is Nothing) Then
                RaiseEvent IncomeRowChanging(Me, New IncomeRowChangeEvent(CType(e.Row,IncomeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IncomeRowDeletedEvent) Is Nothing) Then
                RaiseEvent IncomeRowDeleted(Me, New IncomeRowChangeEvent(CType(e.Row,IncomeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IncomeRowDeletingEvent) Is Nothing) Then
                RaiseEvent IncomeRowDeleting(Me, New IncomeRowChangeEvent(CType(e.Row,IncomeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIncomeRow(ByVal row As IncomeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IncomeRow
        Inherits DataRow
        
        Private tableIncome As IncomeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIncome = CType(Me.Table,IncomeDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableIncome.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableIncome.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIncome.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.amountColumn) = value
            End Set
        End Property
        
        Public Property desc_group_account As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.desc_group_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.desc_group_accountColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup1_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.Gl_account_group_subgroup1_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.Gl_account_group_subgroup1_descColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_date As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.GL_journal_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.GL_journal_dateColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_reference As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.GL_journal_referenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.GL_journal_referenceColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.GL_journal_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.GL_journal_type_descColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Return CType(Me(Me.tableIncome.id_GL_journalColumn),Integer)
            End Get
            Set
                Me(Me.tableIncome.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIncome.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.flagColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableIncome.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property NetIncome As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIncome.NetIncomeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncome.NetIncomeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableIncome.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableIncome.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableIncome.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableIncome.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_group_accountNull() As Boolean
            Return Me.IsNull(Me.tableIncome.desc_group_accountColumn)
        End Function
        
        Public Sub Setdesc_group_accountNull()
            Me(Me.tableIncome.desc_group_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_account_group_subgroup1_descNull() As Boolean
            Return Me.IsNull(Me.tableIncome.Gl_account_group_subgroup1_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup1_descNull()
            Me(Me.tableIncome.Gl_account_group_subgroup1_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_dateNull() As Boolean
            Return Me.IsNull(Me.tableIncome.GL_journal_dateColumn)
        End Function
        
        Public Sub SetGL_journal_dateNull()
            Me(Me.tableIncome.GL_journal_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_referenceNull() As Boolean
            Return Me.IsNull(Me.tableIncome.GL_journal_referenceColumn)
        End Function
        
        Public Sub SetGL_journal_referenceNull()
            Me(Me.tableIncome.GL_journal_referenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_type_descNull() As Boolean
            Return Me.IsNull(Me.tableIncome.GL_journal_type_descColumn)
        End Function
        
        Public Sub SetGL_journal_type_descNull()
            Me(Me.tableIncome.GL_journal_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableIncome.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableIncome.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableIncome.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableIncome.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetIncomeNull() As Boolean
            Return Me.IsNull(Me.tableIncome.NetIncomeColumn)
        End Function
        
        Public Sub SetNetIncomeNull()
            Me(Me.tableIncome.NetIncomeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IncomeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IncomeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IncomeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IncomeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_journal_date As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_journal_amount_debit As DataColumn
        
        Private columnGL_journal_amount_credit As DataColumn
        
        Private columnGL_journal_reference As DataColumn
        
        Private columnGL_journal_type_desc As DataColumn
        
        Private columnGL_journal_type_code As DataColumn
        
        Private columndesc_group_account As DataColumn
        
        Private columnGl_account_group_subgroup1_desc As DataColumn
        
        Private columnGl_account_group_subgroup2_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("History")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_dateColumn As DataColumn
            Get
                Return Me.columnGL_journal_date
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_debitColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_debit
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_creditColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_credit
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_referenceColumn As DataColumn
            Get
                Return Me.columnGL_journal_reference
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_descColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_codeColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_group_accountColumn As DataColumn
            Get
                Return Me.columndesc_group_account
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup1_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup1_desc
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup2_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup2_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HistoryRow
            Get
                Return CType(Me.Rows(index),HistoryRow)
            End Get
        End Property
        
        Public Event HistoryRowChanged As HistoryRowChangeEventHandler
        
        Public Event HistoryRowChanging As HistoryRowChangeEventHandler
        
        Public Event HistoryRowDeleted As HistoryRowChangeEventHandler
        
        Public Event HistoryRowDeleting As HistoryRowChangeEventHandler
        
        Public Overloads Sub AddHistoryRow(ByVal row As HistoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHistoryRow(ByVal GL_journal_date As String, ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_journal_amount_debit As Decimal, ByVal GL_journal_amount_credit As Decimal, ByVal GL_journal_reference As String, ByVal GL_journal_type_desc As String, ByVal GL_journal_type_code As String, ByVal desc_group_account As String, ByVal Gl_account_group_subgroup1_desc As String, ByVal Gl_account_group_subgroup2_desc As String) As HistoryRow
            Dim rowHistoryRow As HistoryRow = CType(Me.NewRow,HistoryRow)
            rowHistoryRow.ItemArray = New Object() {GL_journal_date, GL_account, desc_GL_account, GL_journal_amount_debit, GL_journal_amount_credit, GL_journal_reference, GL_journal_type_desc, GL_journal_type_code, desc_group_account, Gl_account_group_subgroup1_desc, Gl_account_group_subgroup2_desc}
            Me.Rows.Add(rowHistoryRow)
            Return rowHistoryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HistoryDataTable = CType(MyBase.Clone,HistoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HistoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_journal_date = Me.Columns("GL_journal_date")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_journal_amount_debit = Me.Columns("GL_journal_amount_debit")
            Me.columnGL_journal_amount_credit = Me.Columns("GL_journal_amount_credit")
            Me.columnGL_journal_reference = Me.Columns("GL_journal_reference")
            Me.columnGL_journal_type_desc = Me.Columns("GL_journal_type_desc")
            Me.columnGL_journal_type_code = Me.Columns("GL_journal_type_code")
            Me.columndesc_group_account = Me.Columns("desc_group_account")
            Me.columnGl_account_group_subgroup1_desc = Me.Columns("Gl_account_group_subgroup1_desc")
            Me.columnGl_account_group_subgroup2_desc = Me.Columns("Gl_account_group_subgroup2_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_journal_date = New DataColumn("GL_journal_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_date)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_journal_amount_debit = New DataColumn("GL_journal_amount_debit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_debit)
            Me.columnGL_journal_amount_credit = New DataColumn("GL_journal_amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_credit)
            Me.columnGL_journal_reference = New DataColumn("GL_journal_reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_reference)
            Me.columnGL_journal_type_desc = New DataColumn("GL_journal_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_desc)
            Me.columnGL_journal_type_code = New DataColumn("GL_journal_type_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_code)
            Me.columndesc_group_account = New DataColumn("desc_group_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_group_account)
            Me.columnGl_account_group_subgroup1_desc = New DataColumn("Gl_account_group_subgroup1_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup1_desc)
            Me.columnGl_account_group_subgroup2_desc = New DataColumn("Gl_account_group_subgroup2_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup2_desc)
            Me.columnGL_journal_type_code.AllowDBNull = false
        End Sub
        
        Public Function NewHistoryRow() As HistoryRow
            Return CType(Me.NewRow,HistoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HistoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HistoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HistoryRowChangedEvent) Is Nothing) Then
                RaiseEvent HistoryRowChanged(Me, New HistoryRowChangeEvent(CType(e.Row,HistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HistoryRowChangingEvent) Is Nothing) Then
                RaiseEvent HistoryRowChanging(Me, New HistoryRowChangeEvent(CType(e.Row,HistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HistoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent HistoryRowDeleted(Me, New HistoryRowChangeEvent(CType(e.Row,HistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HistoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent HistoryRowDeleting(Me, New HistoryRowChangeEvent(CType(e.Row,HistoryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHistoryRow(ByVal row As HistoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoryRow
        Inherits DataRow
        
        Private tableHistory As HistoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHistory = CType(Me.Table,HistoryDataTable)
        End Sub
        
        Public Property GL_journal_date As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_journal_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_journal_dateColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_debit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_journal_amount_debitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_journal_amount_debitColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_journal_amount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_journal_amount_creditColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_reference As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_journal_referenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_journal_referenceColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.GL_journal_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.GL_journal_type_descColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_code As String
            Get
                Return CType(Me(Me.tableHistory.GL_journal_type_codeColumn),String)
            End Get
            Set
                Me(Me.tableHistory.GL_journal_type_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_group_account As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.desc_group_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.desc_group_accountColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup1_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.Gl_account_group_subgroup1_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.Gl_account_group_subgroup1_descColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup2_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableHistory.Gl_account_group_subgroup2_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistory.Gl_account_group_subgroup2_descColumn) = value
            End Set
        End Property
        
        Public Function IsGL_journal_dateNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_journal_dateColumn)
        End Function
        
        Public Sub SetGL_journal_dateNull()
            Me(Me.tableHistory.GL_journal_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableHistory.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableHistory.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableHistory.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_debitNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_journal_amount_debitColumn)
        End Function
        
        Public Sub SetGL_journal_amount_debitNull()
            Me(Me.tableHistory.GL_journal_amount_debitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_creditNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_journal_amount_creditColumn)
        End Function
        
        Public Sub SetGL_journal_amount_creditNull()
            Me(Me.tableHistory.GL_journal_amount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_referenceNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_journal_referenceColumn)
        End Function
        
        Public Sub SetGL_journal_referenceNull()
            Me(Me.tableHistory.GL_journal_referenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_type_descNull() As Boolean
            Return Me.IsNull(Me.tableHistory.GL_journal_type_descColumn)
        End Function
        
        Public Sub SetGL_journal_type_descNull()
            Me(Me.tableHistory.GL_journal_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_group_accountNull() As Boolean
            Return Me.IsNull(Me.tableHistory.desc_group_accountColumn)
        End Function
        
        Public Sub Setdesc_group_accountNull()
            Me(Me.tableHistory.desc_group_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_account_group_subgroup1_descNull() As Boolean
            Return Me.IsNull(Me.tableHistory.Gl_account_group_subgroup1_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup1_descNull()
            Me(Me.tableHistory.Gl_account_group_subgroup1_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_account_group_subgroup2_descNull() As Boolean
            Return Me.IsNull(Me.tableHistory.Gl_account_group_subgroup2_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup2_descNull()
            Me(Me.tableHistory.Gl_account_group_subgroup2_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HistoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HistoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HistoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
