'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrint
    Inherits DataSet
    
    Private tableCheckDetail As CheckDetailDataTable
    
    Private tableCheckSummery As CheckSummeryDataTable
    
    Private tableATMDetail As ATMDetailDataTable
    
    Private tableTransfer As TransferDataTable
    
    Private tableAdjustment As AdjustmentDataTable
    
    Private tableCheckByAcountDetail As CheckByAcountDetailDataTable
    
    Private tableDepositListDetail As DepositListDetailDataTable
    
    Private tableDepositListSummery As DepositListSummeryDataTable
    
    Private tablebas_cc_type As bas_cc_typeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CheckDetail")) Is Nothing) Then
                Me.Tables.Add(New CheckDetailDataTable(ds.Tables("CheckDetail")))
            End If
            If (Not (ds.Tables("CheckSummery")) Is Nothing) Then
                Me.Tables.Add(New CheckSummeryDataTable(ds.Tables("CheckSummery")))
            End If
            If (Not (ds.Tables("ATMDetail")) Is Nothing) Then
                Me.Tables.Add(New ATMDetailDataTable(ds.Tables("ATMDetail")))
            End If
            If (Not (ds.Tables("Transfer")) Is Nothing) Then
                Me.Tables.Add(New TransferDataTable(ds.Tables("Transfer")))
            End If
            If (Not (ds.Tables("Adjustment")) Is Nothing) Then
                Me.Tables.Add(New AdjustmentDataTable(ds.Tables("Adjustment")))
            End If
            If (Not (ds.Tables("CheckByAcountDetail")) Is Nothing) Then
                Me.Tables.Add(New CheckByAcountDetailDataTable(ds.Tables("CheckByAcountDetail")))
            End If
            If (Not (ds.Tables("DepositListDetail")) Is Nothing) Then
                Me.Tables.Add(New DepositListDetailDataTable(ds.Tables("DepositListDetail")))
            End If
            If (Not (ds.Tables("DepositListSummery")) Is Nothing) Then
                Me.Tables.Add(New DepositListSummeryDataTable(ds.Tables("DepositListSummery")))
            End If
            If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
                Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CheckDetail As CheckDetailDataTable
        Get
            Return Me.tableCheckDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CheckSummery As CheckSummeryDataTable
        Get
            Return Me.tableCheckSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATMDetail As ATMDetailDataTable
        Get
            Return Me.tableATMDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Transfer As TransferDataTable
        Get
            Return Me.tableTransfer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adjustment As AdjustmentDataTable
        Get
            Return Me.tableAdjustment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CheckByAcountDetail As CheckByAcountDetailDataTable
        Get
            Return Me.tableCheckByAcountDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DepositListDetail As DepositListDetailDataTable
        Get
            Return Me.tableDepositListDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DepositListSummery As DepositListSummeryDataTable
        Get
            Return Me.tableDepositListSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_cc_type As bas_cc_typeDataTable
        Get
            Return Me.tablebas_cc_type
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrint = CType(MyBase.Clone,DSFrmPrint)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CheckDetail")) Is Nothing) Then
            Me.Tables.Add(New CheckDetailDataTable(ds.Tables("CheckDetail")))
        End If
        If (Not (ds.Tables("CheckSummery")) Is Nothing) Then
            Me.Tables.Add(New CheckSummeryDataTable(ds.Tables("CheckSummery")))
        End If
        If (Not (ds.Tables("ATMDetail")) Is Nothing) Then
            Me.Tables.Add(New ATMDetailDataTable(ds.Tables("ATMDetail")))
        End If
        If (Not (ds.Tables("Transfer")) Is Nothing) Then
            Me.Tables.Add(New TransferDataTable(ds.Tables("Transfer")))
        End If
        If (Not (ds.Tables("Adjustment")) Is Nothing) Then
            Me.Tables.Add(New AdjustmentDataTable(ds.Tables("Adjustment")))
        End If
        If (Not (ds.Tables("CheckByAcountDetail")) Is Nothing) Then
            Me.Tables.Add(New CheckByAcountDetailDataTable(ds.Tables("CheckByAcountDetail")))
        End If
        If (Not (ds.Tables("DepositListDetail")) Is Nothing) Then
            Me.Tables.Add(New DepositListDetailDataTable(ds.Tables("DepositListDetail")))
        End If
        If (Not (ds.Tables("DepositListSummery")) Is Nothing) Then
            Me.Tables.Add(New DepositListSummeryDataTable(ds.Tables("DepositListSummery")))
        End If
        If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
            Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCheckDetail = CType(Me.Tables("CheckDetail"),CheckDetailDataTable)
        If (Not (Me.tableCheckDetail) Is Nothing) Then
            Me.tableCheckDetail.InitVars
        End If
        Me.tableCheckSummery = CType(Me.Tables("CheckSummery"),CheckSummeryDataTable)
        If (Not (Me.tableCheckSummery) Is Nothing) Then
            Me.tableCheckSummery.InitVars
        End If
        Me.tableATMDetail = CType(Me.Tables("ATMDetail"),ATMDetailDataTable)
        If (Not (Me.tableATMDetail) Is Nothing) Then
            Me.tableATMDetail.InitVars
        End If
        Me.tableTransfer = CType(Me.Tables("Transfer"),TransferDataTable)
        If (Not (Me.tableTransfer) Is Nothing) Then
            Me.tableTransfer.InitVars
        End If
        Me.tableAdjustment = CType(Me.Tables("Adjustment"),AdjustmentDataTable)
        If (Not (Me.tableAdjustment) Is Nothing) Then
            Me.tableAdjustment.InitVars
        End If
        Me.tableCheckByAcountDetail = CType(Me.Tables("CheckByAcountDetail"),CheckByAcountDetailDataTable)
        If (Not (Me.tableCheckByAcountDetail) Is Nothing) Then
            Me.tableCheckByAcountDetail.InitVars
        End If
        Me.tableDepositListDetail = CType(Me.Tables("DepositListDetail"),DepositListDetailDataTable)
        If (Not (Me.tableDepositListDetail) Is Nothing) Then
            Me.tableDepositListDetail.InitVars
        End If
        Me.tableDepositListSummery = CType(Me.Tables("DepositListSummery"),DepositListSummeryDataTable)
        If (Not (Me.tableDepositListSummery) Is Nothing) Then
            Me.tableDepositListSummery.InitVars
        End If
        Me.tablebas_cc_type = CType(Me.Tables("bas_cc_type"),bas_cc_typeDataTable)
        If (Not (Me.tablebas_cc_type) Is Nothing) Then
            Me.tablebas_cc_type.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrint"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrint.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCheckDetail = New CheckDetailDataTable
        Me.Tables.Add(Me.tableCheckDetail)
        Me.tableCheckSummery = New CheckSummeryDataTable
        Me.Tables.Add(Me.tableCheckSummery)
        Me.tableATMDetail = New ATMDetailDataTable
        Me.Tables.Add(Me.tableATMDetail)
        Me.tableTransfer = New TransferDataTable
        Me.Tables.Add(Me.tableTransfer)
        Me.tableAdjustment = New AdjustmentDataTable
        Me.Tables.Add(Me.tableAdjustment)
        Me.tableCheckByAcountDetail = New CheckByAcountDetailDataTable
        Me.Tables.Add(Me.tableCheckByAcountDetail)
        Me.tableDepositListDetail = New DepositListDetailDataTable
        Me.Tables.Add(Me.tableDepositListDetail)
        Me.tableDepositListSummery = New DepositListSummeryDataTable
        Me.Tables.Add(Me.tableDepositListSummery)
        Me.tablebas_cc_type = New bas_cc_typeDataTable
        Me.Tables.Add(Me.tablebas_cc_type)
    End Sub
    
    Private Function ShouldSerializeCheckDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheckSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeATMDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTransfer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdjustment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheckByAcountDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDepositListDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDepositListSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_cc_type() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CheckDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CheckDetailRowChangeEvent)
    
    Public Delegate Sub CheckSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CheckSummeryRowChangeEvent)
    
    Public Delegate Sub ATMDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As ATMDetailRowChangeEvent)
    
    Public Delegate Sub TransferRowChangeEventHandler(ByVal sender As Object, ByVal e As TransferRowChangeEvent)
    
    Public Delegate Sub AdjustmentRowChangeEventHandler(ByVal sender As Object, ByVal e As AdjustmentRowChangeEvent)
    
    Public Delegate Sub CheckByAcountDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CheckByAcountDetailRowChangeEvent)
    
    Public Delegate Sub DepositListDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DepositListDetailRowChangeEvent)
    
    Public Delegate Sub DepositListSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As DepositListSummeryRowChangeEvent)
    
    Public Delegate Sub bas_cc_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_cc_typeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnno_of_check As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Private columnaddress_payee As DataColumn
        
        Private columnamount_check As DataColumn
        
        Private columnmemo_check As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Private columnflagVendor As DataColumn
        
        Friend Sub New()
            MyBase.New("CheckDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Friend ReadOnly Property address_payeeColumn As DataColumn
            Get
                Return Me.columnaddress_payee
            End Get
        End Property
        
        Friend ReadOnly Property amount_checkColumn As DataColumn
            Get
                Return Me.columnamount_check
            End Get
        End Property
        
        Friend ReadOnly Property memo_checkColumn As DataColumn
            Get
                Return Me.columnmemo_check
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Friend ReadOnly Property flagVendorColumn As DataColumn
            Get
                Return Me.columnflagVendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CheckDetailRow
            Get
                Return CType(Me.Rows(index),CheckDetailRow)
            End Get
        End Property
        
        Public Event CheckDetailRowChanged As CheckDetailRowChangeEventHandler
        
        Public Event CheckDetailRowChanging As CheckDetailRowChangeEventHandler
        
        Public Event CheckDetailRowDeleted As CheckDetailRowChangeEventHandler
        
        Public Event CheckDetailRowDeleting As CheckDetailRowChangeEventHandler
        
        Public Overloads Sub AddCheckDetailRow(ByVal row As CheckDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCheckDetailRow(ByVal no_of_check As String, ByVal date_of_check As Date, ByVal address_payee As String, ByVal amount_check As Decimal, ByVal memo_check As String, ByVal name_bank As String, ByVal flag As Boolean, ByVal id_bank As String, ByVal cod_vendor As String, ByVal FlagBank As Boolean, ByVal flagVendor As Boolean) As CheckDetailRow
            Dim rowCheckDetailRow As CheckDetailRow = CType(Me.NewRow,CheckDetailRow)
            rowCheckDetailRow.ItemArray = New Object() {no_of_check, date_of_check, address_payee, amount_check, memo_check, name_bank, flag, id_bank, cod_vendor, FlagBank, flagVendor}
            Me.Rows.Add(rowCheckDetailRow)
            Return rowCheckDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CheckDetailDataTable = CType(MyBase.Clone,CheckDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CheckDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columndate_of_check = Me.Columns("date_of_check")
            Me.columnaddress_payee = Me.Columns("address_payee")
            Me.columnamount_check = Me.Columns("amount_check")
            Me.columnmemo_check = Me.Columns("memo_check")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnFlagBank = Me.Columns("FlagBank")
            Me.columnflagVendor = Me.Columns("flagVendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnaddress_payee = New DataColumn("address_payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress_payee)
            Me.columnamount_check = New DataColumn("amount_check", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_check)
            Me.columnmemo_check = New DataColumn("memo_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_check)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
            Me.columnflagVendor = New DataColumn("flagVendor", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagVendor)
        End Sub
        
        Public Function NewCheckDetailRow() As CheckDetailRow
            Return CType(Me.NewRow,CheckDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CheckDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CheckDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CheckDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CheckDetailRowChanged(Me, New CheckDetailRowChangeEvent(CType(e.Row,CheckDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CheckDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CheckDetailRowChanging(Me, New CheckDetailRowChangeEvent(CType(e.Row,CheckDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CheckDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CheckDetailRowDeleted(Me, New CheckDetailRowChangeEvent(CType(e.Row,CheckDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CheckDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CheckDetailRowDeleting(Me, New CheckDetailRowChangeEvent(CType(e.Row,CheckDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCheckDetailRow(ByVal row As CheckDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckDetailRow
        Inherits DataRow
        
        Private tableCheckDetail As CheckDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheckDetail = CType(Me.Table,CheckDetailDataTable)
        End Sub
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As Date
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.date_of_checkColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Property address_payee As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.address_payeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.address_payeeColumn) = value
            End Set
        End Property
        
        Public Property amount_check As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.amount_checkColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.amount_checkColumn) = value
            End Set
        End Property
        
        Public Property memo_check As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.memo_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.memo_checkColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.name_bankColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableCheckDetail.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableCheckDetail.id_bankColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                If Me.Iscod_vendorNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableCheckDetail.cod_vendorColumn),String)
                End If
            End Get
            Set
                Me(Me.tableCheckDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.FlagBankColumn) = value
            End Set
        End Property
        
        Public Property flagVendor As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckDetail.flagVendorColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckDetail.flagVendorColumn) = value
            End Set
        End Property
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tableCheckDetail.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tableCheckDetail.date_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress_payeeNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.address_payeeColumn)
        End Function
        
        Public Sub Setaddress_payeeNull()
            Me(Me.tableCheckDetail.address_payeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.amount_checkColumn)
        End Function
        
        Public Sub Setamount_checkNull()
            Me(Me.tableCheckDetail.amount_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.memo_checkColumn)
        End Function
        
        Public Sub Setmemo_checkNull()
            Me(Me.tableCheckDetail.memo_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableCheckDetail.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCheckDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableCheckDetail.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableCheckDetail.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableCheckDetail.FlagBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagVendorNull() As Boolean
            Return Me.IsNull(Me.tableCheckDetail.flagVendorColumn)
        End Function
        
        Public Sub SetflagVendorNull()
            Me(Me.tableCheckDetail.flagVendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CheckDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CheckDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CheckDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnname_bank As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnGL_Account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Private columnGl_account_group_subgroup1_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("CheckSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property GL_AccountColumn As DataColumn
            Get
                Return Me.columnGL_Account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup1_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup1_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CheckSummeryRow
            Get
                Return CType(Me.Rows(index),CheckSummeryRow)
            End Get
        End Property
        
        Public Event CheckSummeryRowChanged As CheckSummeryRowChangeEventHandler
        
        Public Event CheckSummeryRowChanging As CheckSummeryRowChangeEventHandler
        
        Public Event CheckSummeryRowDeleted As CheckSummeryRowChangeEventHandler
        
        Public Event CheckSummeryRowDeleting As CheckSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCheckSummeryRow(ByVal row As CheckSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCheckSummeryRow(ByVal name_bank As String, ByVal amount As Decimal, ByVal flag As Boolean, ByVal GL_Account As String, ByVal desc_GL_account As String, ByVal id_bank As String, ByVal FlagBank As Boolean, ByVal Gl_account_group_subgroup1_desc As String) As CheckSummeryRow
            Dim rowCheckSummeryRow As CheckSummeryRow = CType(Me.NewRow,CheckSummeryRow)
            rowCheckSummeryRow.ItemArray = New Object() {name_bank, amount, flag, GL_Account, desc_GL_account, id_bank, FlagBank, Gl_account_group_subgroup1_desc}
            Me.Rows.Add(rowCheckSummeryRow)
            Return rowCheckSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CheckSummeryDataTable = CType(MyBase.Clone,CheckSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CheckSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnamount = Me.Columns("amount")
            Me.columnflag = Me.Columns("flag")
            Me.columnGL_Account = Me.Columns("GL_Account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnFlagBank = Me.Columns("FlagBank")
            Me.columnGl_account_group_subgroup1_desc = Me.Columns("Gl_account_group_subgroup1_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnGL_Account = New DataColumn("GL_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_Account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
            Me.columnGl_account_group_subgroup1_desc = New DataColumn("Gl_account_group_subgroup1_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup1_desc)
            Me.columnamount.ReadOnly = true
        End Sub
        
        Public Function NewCheckSummeryRow() As CheckSummeryRow
            Return CType(Me.NewRow,CheckSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CheckSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CheckSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CheckSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CheckSummeryRowChanged(Me, New CheckSummeryRowChangeEvent(CType(e.Row,CheckSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CheckSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CheckSummeryRowChanging(Me, New CheckSummeryRowChangeEvent(CType(e.Row,CheckSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CheckSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CheckSummeryRowDeleted(Me, New CheckSummeryRowChangeEvent(CType(e.Row,CheckSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CheckSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CheckSummeryRowDeleting(Me, New CheckSummeryRowChangeEvent(CType(e.Row,CheckSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCheckSummeryRow(ByVal row As CheckSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckSummeryRow
        Inherits DataRow
        
        Private tableCheckSummery As CheckSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheckSummery = CType(Me.Table,CheckSummeryDataTable)
        End Sub
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.name_bankColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property GL_Account As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.GL_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.GL_AccountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableCheckSummery.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableCheckSummery.id_bankColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.FlagBankColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup1_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckSummery.Gl_account_group_subgroup1_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckSummery.Gl_account_group_subgroup1_descColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableCheckSummery.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableCheckSummery.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCheckSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_AccountNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.GL_AccountColumn)
        End Function
        
        Public Sub SetGL_AccountNull()
            Me(Me.tableCheckSummery.GL_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableCheckSummery.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableCheckSummery.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableCheckSummery.FlagBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_account_group_subgroup1_descNull() As Boolean
            Return Me.IsNull(Me.tableCheckSummery.Gl_account_group_subgroup1_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup1_descNull()
            Me(Me.tableCheckSummery.Gl_account_group_subgroup1_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CheckSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CheckSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CheckSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATMDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_ATM As DataColumn
        
        Private columndate_transaction As DataColumn
        
        Private columnpayee As DataColumn
        
        Private columnamount_ATM As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Private columnflagVendor As DataColumn
        
        Friend Sub New()
            MyBase.New("ATMDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property date_transactionColumn As DataColumn
            Get
                Return Me.columndate_transaction
            End Get
        End Property
        
        Friend ReadOnly Property payeeColumn As DataColumn
            Get
                Return Me.columnpayee
            End Get
        End Property
        
        Friend ReadOnly Property amount_ATMColumn As DataColumn
            Get
                Return Me.columnamount_ATM
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Friend ReadOnly Property flagVendorColumn As DataColumn
            Get
                Return Me.columnflagVendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATMDetailRow
            Get
                Return CType(Me.Rows(index),ATMDetailRow)
            End Get
        End Property
        
        Public Event ATMDetailRowChanged As ATMDetailRowChangeEventHandler
        
        Public Event ATMDetailRowChanging As ATMDetailRowChangeEventHandler
        
        Public Event ATMDetailRowDeleted As ATMDetailRowChangeEventHandler
        
        Public Event ATMDetailRowDeleting As ATMDetailRowChangeEventHandler
        
        Public Overloads Sub AddATMDetailRow(ByVal row As ATMDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddATMDetailRow(ByVal date_transaction As Date, ByVal payee As String, ByVal amount_ATM As Decimal, ByVal name_bank As String, ByVal flag As Boolean, ByVal id_bank As String, ByVal FlagBank As Boolean, ByVal flagVendor As Boolean) As ATMDetailRow
            Dim rowATMDetailRow As ATMDetailRow = CType(Me.NewRow,ATMDetailRow)
            rowATMDetailRow.ItemArray = New Object() {Nothing, date_transaction, payee, amount_ATM, name_bank, flag, id_bank, FlagBank, flagVendor}
            Me.Rows.Add(rowATMDetailRow)
            Return rowATMDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ATMDetailDataTable = CType(MyBase.Clone,ATMDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ATMDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columndate_transaction = Me.Columns("date_transaction")
            Me.columnpayee = Me.Columns("payee")
            Me.columnamount_ATM = Me.Columns("amount_ATM")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnFlagBank = Me.Columns("FlagBank")
            Me.columnflagVendor = Me.Columns("flagVendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columndate_transaction = New DataColumn("date_transaction", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_transaction)
            Me.columnpayee = New DataColumn("payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayee)
            Me.columnamount_ATM = New DataColumn("amount_ATM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_ATM)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
            Me.columnflagVendor = New DataColumn("flagVendor", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagVendor)
            Me.columnid_ATM.AutoIncrement = true
            Me.columnid_ATM.AllowDBNull = false
            Me.columnid_ATM.ReadOnly = true
        End Sub
        
        Public Function NewATMDetailRow() As ATMDetailRow
            Return CType(Me.NewRow,ATMDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ATMDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATMDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATMDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent ATMDetailRowChanged(Me, New ATMDetailRowChangeEvent(CType(e.Row,ATMDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATMDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent ATMDetailRowChanging(Me, New ATMDetailRowChangeEvent(CType(e.Row,ATMDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATMDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATMDetailRowDeleted(Me, New ATMDetailRowChangeEvent(CType(e.Row,ATMDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATMDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATMDetailRowDeleting(Me, New ATMDetailRowChangeEvent(CType(e.Row,ATMDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveATMDetailRow(ByVal row As ATMDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATMDetailRow
        Inherits DataRow
        
        Private tableATMDetail As ATMDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableATMDetail = CType(Me.Table,ATMDetailDataTable)
        End Sub
        
        Public Property id_ATM As Integer
            Get
                Return CType(Me(Me.tableATMDetail.id_ATMColumn),Integer)
            End Get
            Set
                Me(Me.tableATMDetail.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property date_transaction As Date
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.date_transactionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.date_transactionColumn) = value
            End Set
        End Property
        
        Public Property payee As String
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.payeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.payeeColumn) = value
            End Set
        End Property
        
        Public Property amount_ATM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.amount_ATMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.amount_ATMColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.name_bankColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableATMDetail.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableATMDetail.id_bankColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.FlagBankColumn) = value
            End Set
        End Property
        
        Public Property flagVendor As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATMDetail.flagVendorColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATMDetail.flagVendorColumn) = value
            End Set
        End Property
        
        Public Function Isdate_transactionNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.date_transactionColumn)
        End Function
        
        Public Sub Setdate_transactionNull()
            Me(Me.tableATMDetail.date_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayeeNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.payeeColumn)
        End Function
        
        Public Sub SetpayeeNull()
            Me(Me.tableATMDetail.payeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_ATMNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.amount_ATMColumn)
        End Function
        
        Public Sub Setamount_ATMNull()
            Me(Me.tableATMDetail.amount_ATMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableATMDetail.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableATMDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableATMDetail.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableATMDetail.FlagBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagVendorNull() As Boolean
            Return Me.IsNull(Me.tableATMDetail.flagVendorColumn)
        End Function
        
        Public Sub SetflagVendorNull()
            Me(Me.tableATMDetail.flagVendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATMDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ATMDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ATMDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ATMDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransferDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_transfer As DataColumn
        
        Private columnamount_transfer As DataColumn
        
        Private columnFrmBank As DataColumn
        
        Private columnToBank As DataColumn
        
        Private columnmemo As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Friend Sub New()
            MyBase.New("Transfer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_transferColumn As DataColumn
            Get
                Return Me.columndate_transfer
            End Get
        End Property
        
        Friend ReadOnly Property amount_transferColumn As DataColumn
            Get
                Return Me.columnamount_transfer
            End Get
        End Property
        
        Friend ReadOnly Property FrmBankColumn As DataColumn
            Get
                Return Me.columnFrmBank
            End Get
        End Property
        
        Friend ReadOnly Property ToBankColumn As DataColumn
            Get
                Return Me.columnToBank
            End Get
        End Property
        
        Friend ReadOnly Property memoColumn As DataColumn
            Get
                Return Me.columnmemo
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransferRow
            Get
                Return CType(Me.Rows(index),TransferRow)
            End Get
        End Property
        
        Public Event TransferRowChanged As TransferRowChangeEventHandler
        
        Public Event TransferRowChanging As TransferRowChangeEventHandler
        
        Public Event TransferRowDeleted As TransferRowChangeEventHandler
        
        Public Event TransferRowDeleting As TransferRowChangeEventHandler
        
        Public Overloads Sub AddTransferRow(ByVal row As TransferRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTransferRow(ByVal date_transfer As Date, ByVal amount_transfer As Decimal, ByVal FrmBank As String, ByVal ToBank As String, ByVal memo As String, ByVal flag As Boolean, ByVal id_bank As String, ByVal FlagBank As Boolean) As TransferRow
            Dim rowTransferRow As TransferRow = CType(Me.NewRow,TransferRow)
            rowTransferRow.ItemArray = New Object() {date_transfer, amount_transfer, FrmBank, ToBank, memo, flag, id_bank, FlagBank}
            Me.Rows.Add(rowTransferRow)
            Return rowTransferRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TransferDataTable = CType(MyBase.Clone,TransferDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TransferDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_transfer = Me.Columns("date_transfer")
            Me.columnamount_transfer = Me.Columns("amount_transfer")
            Me.columnFrmBank = Me.Columns("FrmBank")
            Me.columnToBank = Me.Columns("ToBank")
            Me.columnmemo = Me.Columns("memo")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnFlagBank = Me.Columns("FlagBank")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_transfer = New DataColumn("date_transfer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_transfer)
            Me.columnamount_transfer = New DataColumn("amount_transfer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_transfer)
            Me.columnFrmBank = New DataColumn("FrmBank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrmBank)
            Me.columnToBank = New DataColumn("ToBank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToBank)
            Me.columnmemo = New DataColumn("memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
        End Sub
        
        Public Function NewTransferRow() As TransferRow
            Return CType(Me.NewRow,TransferRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TransferRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TransferRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransferRowChangedEvent) Is Nothing) Then
                RaiseEvent TransferRowChanged(Me, New TransferRowChangeEvent(CType(e.Row,TransferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransferRowChangingEvent) Is Nothing) Then
                RaiseEvent TransferRowChanging(Me, New TransferRowChangeEvent(CType(e.Row,TransferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransferRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransferRowDeleted(Me, New TransferRowChangeEvent(CType(e.Row,TransferRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransferRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransferRowDeleting(Me, New TransferRowChangeEvent(CType(e.Row,TransferRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTransferRow(ByVal row As TransferRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransferRow
        Inherits DataRow
        
        Private tableTransfer As TransferDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransfer = CType(Me.Table,TransferDataTable)
        End Sub
        
        Public Property date_transfer As Date
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.date_transferColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.date_transferColumn) = value
            End Set
        End Property
        
        Public Property amount_transfer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.amount_transferColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.amount_transferColumn) = value
            End Set
        End Property
        
        Public Property FrmBank As String
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.FrmBankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.FrmBankColumn) = value
            End Set
        End Property
        
        Public Property ToBank As String
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.ToBankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.ToBankColumn) = value
            End Set
        End Property
        
        Public Property memo As String
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.memoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.memoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTransfer.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTransfer.id_bankColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTransfer.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransfer.FlagBankColumn) = value
            End Set
        End Property
        
        Public Function Isdate_transferNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.date_transferColumn)
        End Function
        
        Public Sub Setdate_transferNull()
            Me(Me.tableTransfer.date_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_transferNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.amount_transferColumn)
        End Function
        
        Public Sub Setamount_transferNull()
            Me(Me.tableTransfer.amount_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrmBankNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.FrmBankColumn)
        End Function
        
        Public Sub SetFrmBankNull()
            Me(Me.tableTransfer.FrmBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToBankNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.ToBankColumn)
        End Function
        
        Public Sub SetToBankNull()
            Me(Me.tableTransfer.ToBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemoNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.memoColumn)
        End Function
        
        Public Sub SetmemoNull()
            Me(Me.tableTransfer.memoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableTransfer.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableTransfer.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableTransfer.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableTransfer.FlagBankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransferRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TransferRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TransferRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TransferRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnadjustment_date As DataColumn
        
        Private columnId_Adjustment_no As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Friend Sub New()
            MyBase.New("Adjustment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property adjustment_dateColumn As DataColumn
            Get
                Return Me.columnadjustment_date
            End Get
        End Property
        
        Friend ReadOnly Property Id_Adjustment_noColumn As DataColumn
            Get
                Return Me.columnId_Adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdjustmentRow
            Get
                Return CType(Me.Rows(index),AdjustmentRow)
            End Get
        End Property
        
        Public Event AdjustmentRowChanged As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowChanging As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowDeleted As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowDeleting As AdjustmentRowChangeEventHandler
        
        Public Overloads Sub AddAdjustmentRow(ByVal row As AdjustmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdjustmentRow(ByVal adjustment_date As Date, ByVal deposit_amount As Decimal, ByVal debit_amount As Decimal, ByVal name_bank As String, ByVal desc_GL_account As String, ByVal flag As Boolean, ByVal id_bank As String, ByVal FlagBank As Boolean) As AdjustmentRow
            Dim rowAdjustmentRow As AdjustmentRow = CType(Me.NewRow,AdjustmentRow)
            rowAdjustmentRow.ItemArray = New Object() {adjustment_date, Nothing, deposit_amount, debit_amount, name_bank, desc_GL_account, flag, id_bank, FlagBank}
            Me.Rows.Add(rowAdjustmentRow)
            Return rowAdjustmentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdjustmentDataTable = CType(MyBase.Clone,AdjustmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdjustmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnadjustment_date = Me.Columns("adjustment_date")
            Me.columnId_Adjustment_no = Me.Columns("Id_Adjustment_no")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnFlagBank = Me.Columns("FlagBank")
        End Sub
        
        Private Sub InitClass()
            Me.columnadjustment_date = New DataColumn("adjustment_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment_date)
            Me.columnId_Adjustment_no = New DataColumn("Id_Adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Adjustment_no)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
            Me.columnadjustment_date.AllowDBNull = false
            Me.columnId_Adjustment_no.AutoIncrement = true
            Me.columnId_Adjustment_no.AllowDBNull = false
            Me.columnId_Adjustment_no.ReadOnly = true
            Me.columndeposit_amount.AllowDBNull = false
            Me.columndebit_amount.AllowDBNull = false
        End Sub
        
        Public Function NewAdjustmentRow() As AdjustmentRow
            Return CType(Me.NewRow,AdjustmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdjustmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdjustmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdjustmentRowChangedEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowChanged(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdjustmentRowChangingEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowChanging(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdjustmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowDeleted(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdjustmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowDeleting(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdjustmentRow(ByVal row As AdjustmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentRow
        Inherits DataRow
        
        Private tableAdjustment As AdjustmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdjustment = CType(Me.Table,AdjustmentDataTable)
        End Sub
        
        Public Property adjustment_date As Date
            Get
                Return CType(Me(Me.tableAdjustment.adjustment_dateColumn),Date)
            End Get
            Set
                Me(Me.tableAdjustment.adjustment_dateColumn) = value
            End Set
        End Property
        
        Public Property Id_Adjustment_no As Integer
            Get
                Return CType(Me(Me.tableAdjustment.Id_Adjustment_noColumn),Integer)
            End Get
            Set
                Me(Me.tableAdjustment.Id_Adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Return CType(Me(Me.tableAdjustment.deposit_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableAdjustment.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Return CType(Me(Me.tableAdjustment.debit_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableAdjustment.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustment.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustment.name_bankColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustment.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustment.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAdjustment.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustment.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAdjustment.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAdjustment.id_bankColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAdjustment.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustment.FlagBankColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableAdjustment.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableAdjustment.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableAdjustment.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableAdjustment.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableAdjustment.FlagBankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdjustmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdjustmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdjustmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckByAcountDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnno_of_check As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Private columnaddress_payee As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnGL_Account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnFlagBank As DataColumn
        
        Friend Sub New()
            MyBase.New("CheckByAcountDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Friend ReadOnly Property address_payeeColumn As DataColumn
            Get
                Return Me.columnaddress_payee
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property GL_AccountColumn As DataColumn
            Get
                Return Me.columnGL_Account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property FlagBankColumn As DataColumn
            Get
                Return Me.columnFlagBank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CheckByAcountDetailRow
            Get
                Return CType(Me.Rows(index),CheckByAcountDetailRow)
            End Get
        End Property
        
        Public Event CheckByAcountDetailRowChanged As CheckByAcountDetailRowChangeEventHandler
        
        Public Event CheckByAcountDetailRowChanging As CheckByAcountDetailRowChangeEventHandler
        
        Public Event CheckByAcountDetailRowDeleted As CheckByAcountDetailRowChangeEventHandler
        
        Public Event CheckByAcountDetailRowDeleting As CheckByAcountDetailRowChangeEventHandler
        
        Public Overloads Sub AddCheckByAcountDetailRow(ByVal row As CheckByAcountDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCheckByAcountDetailRow(ByVal no_of_check As String, ByVal date_of_check As Date, ByVal address_payee As String, ByVal amount As Decimal, ByVal GL_Account As String, ByVal desc_GL_account As String, ByVal name_bank As String, ByVal flag As Boolean, ByVal id_bank As String, ByVal FlagBank As Boolean) As CheckByAcountDetailRow
            Dim rowCheckByAcountDetailRow As CheckByAcountDetailRow = CType(Me.NewRow,CheckByAcountDetailRow)
            rowCheckByAcountDetailRow.ItemArray = New Object() {no_of_check, date_of_check, address_payee, amount, GL_Account, desc_GL_account, name_bank, flag, id_bank, FlagBank}
            Me.Rows.Add(rowCheckByAcountDetailRow)
            Return rowCheckByAcountDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CheckByAcountDetailDataTable = CType(MyBase.Clone,CheckByAcountDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CheckByAcountDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columndate_of_check = Me.Columns("date_of_check")
            Me.columnaddress_payee = Me.Columns("address_payee")
            Me.columnamount = Me.Columns("amount")
            Me.columnGL_Account = Me.Columns("GL_Account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnFlagBank = Me.Columns("FlagBank")
        End Sub
        
        Private Sub InitClass()
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnaddress_payee = New DataColumn("address_payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress_payee)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnGL_Account = New DataColumn("GL_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_Account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnFlagBank = New DataColumn("FlagBank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagBank)
        End Sub
        
        Public Function NewCheckByAcountDetailRow() As CheckByAcountDetailRow
            Return CType(Me.NewRow,CheckByAcountDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CheckByAcountDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CheckByAcountDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CheckByAcountDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CheckByAcountDetailRowChanged(Me, New CheckByAcountDetailRowChangeEvent(CType(e.Row,CheckByAcountDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CheckByAcountDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CheckByAcountDetailRowChanging(Me, New CheckByAcountDetailRowChangeEvent(CType(e.Row,CheckByAcountDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CheckByAcountDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CheckByAcountDetailRowDeleted(Me, New CheckByAcountDetailRowChangeEvent(CType(e.Row,CheckByAcountDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CheckByAcountDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CheckByAcountDetailRowDeleting(Me, New CheckByAcountDetailRowChangeEvent(CType(e.Row,CheckByAcountDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCheckByAcountDetailRow(ByVal row As CheckByAcountDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckByAcountDetailRow
        Inherits DataRow
        
        Private tableCheckByAcountDetail As CheckByAcountDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheckByAcountDetail = CType(Me.Table,CheckByAcountDetailDataTable)
        End Sub
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As Date
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.date_of_checkColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Property address_payee As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.address_payeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.address_payeeColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.amountColumn) = value
            End Set
        End Property
        
        Public Property GL_Account As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.GL_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.GL_AccountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.name_bankColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As String
            Get
                If Me.Isid_bankNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableCheckByAcountDetail.id_bankColumn),String)
                End If
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.id_bankColumn) = value
            End Set
        End Property
        
        Public Property FlagBank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheckByAcountDetail.FlagBankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheckByAcountDetail.FlagBankColumn) = value
            End Set
        End Property
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tableCheckByAcountDetail.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tableCheckByAcountDetail.date_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress_payeeNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.address_payeeColumn)
        End Function
        
        Public Sub Setaddress_payeeNull()
            Me(Me.tableCheckByAcountDetail.address_payeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableCheckByAcountDetail.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_AccountNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.GL_AccountColumn)
        End Function
        
        Public Sub SetGL_AccountNull()
            Me(Me.tableCheckByAcountDetail.GL_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableCheckByAcountDetail.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableCheckByAcountDetail.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCheckByAcountDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableCheckByAcountDetail.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagBankNull() As Boolean
            Return Me.IsNull(Me.tableCheckByAcountDetail.FlagBankColumn)
        End Function
        
        Public Sub SetFlagBankNull()
            Me(Me.tableCheckByAcountDetail.FlagBankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CheckByAcountDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CheckByAcountDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CheckByAcountDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CheckByAcountDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnflag As DataColumn
        
        Private columndate_doc As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnpayment As DataColumn
        
        Private columncheck_no As DataColumn
        
        Private columncc_type As DataColumn
        
        Friend Sub New()
            MyBase.New("DepositListDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property date_docColumn As DataColumn
            Get
                Return Me.columndate_doc
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property paymentColumn As DataColumn
            Get
                Return Me.columnpayment
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepositListDetailRow
            Get
                Return CType(Me.Rows(index),DepositListDetailRow)
            End Get
        End Property
        
        Public Event DepositListDetailRowChanged As DepositListDetailRowChangeEventHandler
        
        Public Event DepositListDetailRowChanging As DepositListDetailRowChangeEventHandler
        
        Public Event DepositListDetailRowDeleted As DepositListDetailRowChangeEventHandler
        
        Public Event DepositListDetailRowDeleting As DepositListDetailRowChangeEventHandler
        
        Public Overloads Sub AddDepositListDetailRow(ByVal row As DepositListDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepositListDetailRow(ByVal flag As Boolean, ByVal date_doc As Date, ByVal desc_GL_account As String, ByVal name_bank As String, ByVal deposit_amount As Decimal, ByVal id_debit_deposit_head As Integer, ByVal payment As String, ByVal check_no As String, ByVal cc_type As String) As DepositListDetailRow
            Dim rowDepositListDetailRow As DepositListDetailRow = CType(Me.NewRow,DepositListDetailRow)
            rowDepositListDetailRow.ItemArray = New Object() {flag, date_doc, desc_GL_account, name_bank, deposit_amount, Nothing, id_debit_deposit_head, payment, check_no, cc_type}
            Me.Rows.Add(rowDepositListDetailRow)
            Return rowDepositListDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DepositListDetailDataTable = CType(MyBase.Clone,DepositListDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DepositListDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnflag = Me.Columns("flag")
            Me.columndate_doc = Me.Columns("date_doc")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnpayment = Me.Columns("payment")
            Me.columncheck_no = Me.Columns("check_no")
            Me.columncc_type = Me.Columns("cc_type")
        End Sub
        
        Private Sub InitClass()
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columndate_doc = New DataColumn("date_doc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_doc)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnpayment = New DataColumn("payment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnpayment.ReadOnly = true
            Me.columncheck_no.ReadOnly = true
            Me.columncc_type.ReadOnly = true
        End Sub
        
        Public Function NewDepositListDetailRow() As DepositListDetailRow
            Return CType(Me.NewRow,DepositListDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DepositListDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepositListDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepositListDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent DepositListDetailRowChanged(Me, New DepositListDetailRowChangeEvent(CType(e.Row,DepositListDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepositListDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent DepositListDetailRowChanging(Me, New DepositListDetailRowChangeEvent(CType(e.Row,DepositListDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepositListDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepositListDetailRowDeleted(Me, New DepositListDetailRowChangeEvent(CType(e.Row,DepositListDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepositListDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepositListDetailRowDeleting(Me, New DepositListDetailRowChangeEvent(CType(e.Row,DepositListDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepositListDetailRow(ByVal row As DepositListDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListDetailRow
        Inherits DataRow
        
        Private tableDepositListDetail As DepositListDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepositListDetail = CType(Me.Table,DepositListDetailDataTable)
        End Sub
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property date_doc As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.date_docColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.date_docColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.name_bankColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tableDepositListDetail.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tableDepositListDetail.id_bankColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property payment As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.paymentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.paymentColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.check_noColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListDetail.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListDetail.cc_typeColumn) = value
            End Set
        End Property
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableDepositListDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_docNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.date_docColumn)
        End Function
        
        Public Sub Setdate_docNull()
            Me(Me.tableDepositListDetail.date_docColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableDepositListDetail.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableDepositListDetail.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableDepositListDetail.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tableDepositListDetail.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspaymentNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.paymentColumn)
        End Function
        
        Public Sub SetpaymentNull()
            Me(Me.tableDepositListDetail.paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableDepositListDetail.check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableDepositListDetail.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableDepositListDetail.cc_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DepositListDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DepositListDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DepositListDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columndate_doc As DataColumn
        
        Private columnCashBank As DataColumn
        
        Private columnNet As DataColumn
        
        Friend Sub New()
            MyBase.New("DepositListSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property date_docColumn As DataColumn
            Get
                Return Me.columndate_doc
            End Get
        End Property
        
        Friend ReadOnly Property CashBankColumn As DataColumn
            Get
                Return Me.columnCashBank
            End Get
        End Property
        
        Friend ReadOnly Property NetColumn As DataColumn
            Get
                Return Me.columnNet
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepositListSummeryRow
            Get
                Return CType(Me.Rows(index),DepositListSummeryRow)
            End Get
        End Property
        
        Public Event DepositListSummeryRowChanged As DepositListSummeryRowChangeEventHandler
        
        Public Event DepositListSummeryRowChanging As DepositListSummeryRowChangeEventHandler
        
        Public Event DepositListSummeryRowDeleted As DepositListSummeryRowChangeEventHandler
        
        Public Event DepositListSummeryRowDeleting As DepositListSummeryRowChangeEventHandler
        
        Public Overloads Sub AddDepositListSummeryRow(ByVal row As DepositListSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepositListSummeryRow(ByVal id_debit_deposit_head As Integer, ByVal name_bank As String, ByVal amount As Decimal, ByVal flag As Boolean, ByVal date_doc As Date, ByVal CashBank As Decimal, ByVal Net As Decimal) As DepositListSummeryRow
            Dim rowDepositListSummeryRow As DepositListSummeryRow = CType(Me.NewRow,DepositListSummeryRow)
            rowDepositListSummeryRow.ItemArray = New Object() {id_debit_deposit_head, name_bank, amount, flag, Nothing, date_doc, CashBank, Net}
            Me.Rows.Add(rowDepositListSummeryRow)
            Return rowDepositListSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DepositListSummeryDataTable = CType(MyBase.Clone,DepositListSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DepositListSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnamount = Me.Columns("amount")
            Me.columnflag = Me.Columns("flag")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columndate_doc = Me.Columns("date_doc")
            Me.columnCashBank = Me.Columns("CashBank")
            Me.columnNet = Me.Columns("Net")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columndate_doc = New DataColumn("date_doc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_doc)
            Me.columnCashBank = New DataColumn("CashBank", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCashBank)
            Me.columnNet = New DataColumn("Net", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNet)
            Me.columnamount.ReadOnly = true
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnCashBank.ReadOnly = true
            Me.columnNet.ReadOnly = true
        End Sub
        
        Public Function NewDepositListSummeryRow() As DepositListSummeryRow
            Return CType(Me.NewRow,DepositListSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DepositListSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepositListSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepositListSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent DepositListSummeryRowChanged(Me, New DepositListSummeryRowChangeEvent(CType(e.Row,DepositListSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepositListSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent DepositListSummeryRowChanging(Me, New DepositListSummeryRowChangeEvent(CType(e.Row,DepositListSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepositListSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepositListSummeryRowDeleted(Me, New DepositListSummeryRowChangeEvent(CType(e.Row,DepositListSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepositListSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepositListSummeryRowDeleting(Me, New DepositListSummeryRowChangeEvent(CType(e.Row,DepositListSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepositListSummeryRow(ByVal row As DepositListSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListSummeryRow
        Inherits DataRow
        
        Private tableDepositListSummery As DepositListSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepositListSummery = CType(Me.Table,DepositListSummeryDataTable)
        End Sub
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.name_bankColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tableDepositListSummery.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tableDepositListSummery.id_bankColumn) = value
            End Set
        End Property
        
        Public Property date_doc As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.date_docColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.date_docColumn) = value
            End Set
        End Property
        
        Public Property CashBank As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.CashBankColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.CashBankColumn) = value
            End Set
        End Property
        
        Public Property Net As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDepositListSummery.NetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositListSummery.NetColumn) = value
            End Set
        End Property
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tableDepositListSummery.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableDepositListSummery.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableDepositListSummery.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableDepositListSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_docNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.date_docColumn)
        End Function
        
        Public Sub Setdate_docNull()
            Me(Me.tableDepositListSummery.date_docColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCashBankNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.CashBankColumn)
        End Function
        
        Public Sub SetCashBankNull()
            Me(Me.tableDepositListSummery.CashBankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetNull() As Boolean
            Return Me.IsNull(Me.tableDepositListSummery.NetColumn)
        End Function
        
        Public Sub SetNetNull()
            Me(Me.tableDepositListSummery.NetColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositListSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DepositListSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DepositListSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DepositListSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncc_type As DataColumn
        
        Private columncc_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_cc_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_type_descColumn As DataColumn
            Get
                Return Me.columncc_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_cc_typeRow
            Get
                Return CType(Me.Rows(index),bas_cc_typeRow)
            End Get
        End Property
        
        Public Event bas_cc_typeRowChanged As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowChanging As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleted As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleting As bas_cc_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_cc_typeRow(ByVal cc_type As String, ByVal cc_type_desc As String) As bas_cc_typeRow
            Dim rowbas_cc_typeRow As bas_cc_typeRow = CType(Me.NewRow,bas_cc_typeRow)
            rowbas_cc_typeRow.ItemArray = New Object() {cc_type, cc_type_desc}
            Me.Rows.Add(rowbas_cc_typeRow)
            Return rowbas_cc_typeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_cc_typeDataTable = CType(MyBase.Clone,bas_cc_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_cc_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_type_desc = Me.Columns("cc_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_type_desc = New DataColumn("cc_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type_desc)
            Me.columncc_type.AllowDBNull = false
        End Sub
        
        Public Function Newbas_cc_typeRow() As bas_cc_typeRow
            Return CType(Me.NewRow,bas_cc_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_cc_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_cc_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_cc_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanged(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_cc_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanging(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_cc_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleted(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_cc_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleting(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRow
        Inherits DataRow
        
        Private tablebas_cc_type As bas_cc_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_cc_type = CType(Me.Table,bas_cc_typeDataTable)
        End Sub
        
        Public Property cc_type As String
            Get
                Return CType(Me(Me.tablebas_cc_type.cc_typeColumn),String)
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_cc_type.cc_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_type_descColumn) = value
            End Set
        End Property
        
        Public Function Iscc_type_descNull() As Boolean
            Return Me.IsNull(Me.tablebas_cc_type.cc_type_descColumn)
        End Function
        
        Public Sub Setcc_type_descNull()
            Me(Me.tablebas_cc_type.cc_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_cc_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_cc_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_cc_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
