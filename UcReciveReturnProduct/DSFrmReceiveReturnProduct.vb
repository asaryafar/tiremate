'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmReceiveReturnProduct
    Inherits DataSet
    
    Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
    
    Private tableLOGO As LOGODataTable
    
    Private tableInv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
    
    Private tableInv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
    
    Private tableInv_purchase_order_dtl2 As Inv_purchase_order_dtl2DataTable
    
    Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
    
    Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
    
    Private tableAp_dtl As Ap_dtlDataTable
    
    Private tableGL_vendor_credit As GL_vendor_creditDataTable
    
    Private relationInv_Receive_Products_headInv_Receive_product_Ap_Dtl As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            If (Not (ds.Tables("Inv_Receive_product_dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_product_dtlDataTable(ds.Tables("Inv_Receive_product_dtl")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_dtlDataTable(ds.Tables("Inv_purchase_order_dtl")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_dtl2")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_dtl2DataTable(ds.Tables("Inv_purchase_order_dtl2")))
            End If
            If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
                Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
            End If
            If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
            End If
            If (Not (ds.Tables("Ap_dtl")) Is Nothing) Then
                Me.Tables.Add(New Ap_dtlDataTable(ds.Tables("Ap_dtl")))
            End If
            If (Not (ds.Tables("GL_vendor_credit")) Is Nothing) Then
                Me.Tables.Add(New GL_vendor_creditDataTable(ds.Tables("GL_vendor_credit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_Products_head As Inv_Receive_Products_headDataTable
        Get
            Return Me.tableInv_Receive_Products_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
        Get
            Return Me.tableInv_Receive_product_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
        Get
            Return Me.tableInv_purchase_order_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_dtl2 As Inv_purchase_order_dtl2DataTable
        Get
            Return Me.tableInv_purchase_order_dtl2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        Get
            Return Me.tableGL_TAB_AR_TERM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        Get
            Return Me.tableInv_Receive_product_Ap_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ap_dtl As Ap_dtlDataTable
        Get
            Return Me.tableAp_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_vendor_credit As GL_vendor_creditDataTable
        Get
            Return Me.tableGL_vendor_credit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmReceiveReturnProduct = CType(MyBase.Clone,DSFrmReceiveReturnProduct)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        If (Not (ds.Tables("Inv_Receive_product_dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_product_dtlDataTable(ds.Tables("Inv_Receive_product_dtl")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_dtlDataTable(ds.Tables("Inv_purchase_order_dtl")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_dtl2")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_dtl2DataTable(ds.Tables("Inv_purchase_order_dtl2")))
        End If
        If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
            Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
        End If
        If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
        End If
        If (Not (ds.Tables("Ap_dtl")) Is Nothing) Then
            Me.Tables.Add(New Ap_dtlDataTable(ds.Tables("Ap_dtl")))
        End If
        If (Not (ds.Tables("GL_vendor_credit")) Is Nothing) Then
            Me.Tables.Add(New GL_vendor_creditDataTable(ds.Tables("GL_vendor_credit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInv_Receive_Products_head = CType(Me.Tables("Inv_Receive_Products_head"),Inv_Receive_Products_headDataTable)
        If (Not (Me.tableInv_Receive_Products_head) Is Nothing) Then
            Me.tableInv_Receive_Products_head.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
        Me.tableInv_Receive_product_dtl = CType(Me.Tables("Inv_Receive_product_dtl"),Inv_Receive_product_dtlDataTable)
        If (Not (Me.tableInv_Receive_product_dtl) Is Nothing) Then
            Me.tableInv_Receive_product_dtl.InitVars
        End If
        Me.tableInv_purchase_order_dtl = CType(Me.Tables("Inv_purchase_order_dtl"),Inv_purchase_order_dtlDataTable)
        If (Not (Me.tableInv_purchase_order_dtl) Is Nothing) Then
            Me.tableInv_purchase_order_dtl.InitVars
        End If
        Me.tableInv_purchase_order_dtl2 = CType(Me.Tables("Inv_purchase_order_dtl2"),Inv_purchase_order_dtl2DataTable)
        If (Not (Me.tableInv_purchase_order_dtl2) Is Nothing) Then
            Me.tableInv_purchase_order_dtl2.InitVars
        End If
        Me.tableGL_TAB_AR_TERM = CType(Me.Tables("GL_TAB_AR_TERM"),GL_TAB_AR_TERMDataTable)
        If (Not (Me.tableGL_TAB_AR_TERM) Is Nothing) Then
            Me.tableGL_TAB_AR_TERM.InitVars
        End If
        Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Tables("Inv_Receive_product_Ap_Dtl"),Inv_Receive_product_Ap_DtlDataTable)
        If (Not (Me.tableInv_Receive_product_Ap_Dtl) Is Nothing) Then
            Me.tableInv_Receive_product_Ap_Dtl.InitVars
        End If
        Me.tableAp_dtl = CType(Me.Tables("Ap_dtl"),Ap_dtlDataTable)
        If (Not (Me.tableAp_dtl) Is Nothing) Then
            Me.tableAp_dtl.InitVars
        End If
        Me.tableGL_vendor_credit = CType(Me.Tables("GL_vendor_credit"),GL_vendor_creditDataTable)
        If (Not (Me.tableGL_vendor_credit) Is Nothing) Then
            Me.tableGL_vendor_credit.InitVars
        End If
        Me.relationInv_Receive_Products_headInv_Receive_product_Ap_Dtl = Me.Relations("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmReceiveReturnProduct"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmReceiveReturnProduct.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInv_Receive_Products_head = New Inv_Receive_Products_headDataTable
        Me.Tables.Add(Me.tableInv_Receive_Products_head)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
        Me.tableInv_Receive_product_dtl = New Inv_Receive_product_dtlDataTable
        Me.Tables.Add(Me.tableInv_Receive_product_dtl)
        Me.tableInv_purchase_order_dtl = New Inv_purchase_order_dtlDataTable
        Me.Tables.Add(Me.tableInv_purchase_order_dtl)
        Me.tableInv_purchase_order_dtl2 = New Inv_purchase_order_dtl2DataTable
        Me.Tables.Add(Me.tableInv_purchase_order_dtl2)
        Me.tableGL_TAB_AR_TERM = New GL_TAB_AR_TERMDataTable
        Me.Tables.Add(Me.tableGL_TAB_AR_TERM)
        Me.tableInv_Receive_product_Ap_Dtl = New Inv_Receive_product_Ap_DtlDataTable
        Me.Tables.Add(Me.tableInv_Receive_product_Ap_Dtl)
        Me.tableAp_dtl = New Ap_dtlDataTable
        Me.Tables.Add(Me.tableAp_dtl)
        Me.tableGL_vendor_credit = New GL_vendor_creditDataTable
        Me.Tables.Add(Me.tableGL_vendor_credit)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl", New DataColumn() {Me.tableInv_Receive_Products_head.id_receive_refColumn}, New DataColumn() {Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn})
        Me.tableInv_Receive_product_Ap_Dtl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationInv_Receive_Products_headInv_Receive_product_Ap_Dtl = New DataRelation("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl", New DataColumn() {Me.tableInv_Receive_Products_head.id_receive_refColumn}, New DataColumn() {Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn}, false)
        Me.Relations.Add(Me.relationInv_Receive_Products_headInv_Receive_product_Ap_Dtl)
    End Sub
    
    Private Function ShouldSerializeInv_Receive_Products_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Receive_product_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_dtl2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_TAB_AR_TERM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Receive_product_Ap_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAp_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_vendor_credit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Inv_Receive_Products_headRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_Products_headRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    Public Delegate Sub Inv_Receive_product_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_product_dtlRowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_dtlRowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_dtl2RowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_dtl2RowChangeEvent)
    
    Public Delegate Sub GL_TAB_AR_TERMRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_TAB_AR_TERMRowChangeEvent)
    
    Public Delegate Sub Inv_Receive_product_Ap_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_product_Ap_DtlRowChangeEvent)
    
    Public Delegate Sub Ap_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Ap_dtlRowChangeEvent)
    
    Public Delegate Sub GL_vendor_creditRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_vendor_creditRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_receive_ref As DataColumn
        
        Private columndate_receive As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnbill_credit As DataColumn
        
        Private columnbill_receive As DataColumn
        
        Private columnap_term As DataColumn
        
        Private columnreceipt_bill_date As DataColumn
        
        Private columnvendor_ref_no As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnprepaid As DataColumn
        
        Private columntax As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_Products_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property date_receiveColumn As DataColumn
            Get
                Return Me.columndate_receive
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property bill_creditColumn As DataColumn
            Get
                Return Me.columnbill_credit
            End Get
        End Property
        
        Friend ReadOnly Property bill_receiveColumn As DataColumn
            Get
                Return Me.columnbill_receive
            End Get
        End Property
        
        Friend ReadOnly Property ap_termColumn As DataColumn
            Get
                Return Me.columnap_term
            End Get
        End Property
        
        Friend ReadOnly Property receipt_bill_dateColumn As DataColumn
            Get
                Return Me.columnreceipt_bill_date
            End Get
        End Property
        
        Friend ReadOnly Property vendor_ref_noColumn As DataColumn
            Get
                Return Me.columnvendor_ref_no
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property prepaidColumn As DataColumn
            Get
                Return Me.columnprepaid
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_Products_headRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_Products_headRow)
            End Get
        End Property
        
        Public Event Inv_Receive_Products_headRowChanged As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowChanging As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleted As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleting As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_Products_headRow( _
                    ByVal id_receive_ref As String,  _
                    ByVal date_receive As String,  _
                    ByVal cod_vendor As String,  _
                    ByVal bill_credit As String,  _
                    ByVal bill_receive As Boolean,  _
                    ByVal ap_term As String,  _
                    ByVal receipt_bill_date As String,  _
                    ByVal vendor_ref_no As String,  _
                    ByVal due_date As String,  _
                    ByVal po_no As String,  _
                    ByVal house_comments As String,  _
                    ByVal vend_comments As String,  _
                    ByVal Discount As Decimal,  _
                    ByVal amount As Decimal,  _
                    ByVal prepaid As Boolean,  _
                    ByVal tax As Decimal) As Inv_Receive_Products_headRow
            Dim rowInv_Receive_Products_headRow As Inv_Receive_Products_headRow = CType(Me.NewRow,Inv_Receive_Products_headRow)
            rowInv_Receive_Products_headRow.ItemArray = New Object() {id_receive_ref, date_receive, cod_vendor, bill_credit, bill_receive, ap_term, receipt_bill_date, vendor_ref_no, due_date, po_no, house_comments, vend_comments, Discount, amount, prepaid, tax}
            Me.Rows.Add(rowInv_Receive_Products_headRow)
            Return rowInv_Receive_Products_headRow
        End Function
        
        Public Function FindByid_receive_ref(ByVal id_receive_ref As String) As Inv_Receive_Products_headRow
            Return CType(Me.Rows.Find(New Object() {id_receive_ref}),Inv_Receive_Products_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_Products_headDataTable = CType(MyBase.Clone,Inv_Receive_Products_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_Products_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columndate_receive = Me.Columns("date_receive")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnbill_credit = Me.Columns("bill_credit")
            Me.columnbill_receive = Me.Columns("bill_receive")
            Me.columnap_term = Me.Columns("ap_term")
            Me.columnreceipt_bill_date = Me.Columns("receipt_bill_date")
            Me.columnvendor_ref_no = Me.Columns("vendor_ref_no")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnamount = Me.Columns("amount")
            Me.columnprepaid = Me.Columns("prepaid")
            Me.columntax = Me.Columns("tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columndate_receive = New DataColumn("date_receive", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnbill_credit = New DataColumn("bill_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_credit)
            Me.columnbill_receive = New DataColumn("bill_receive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_receive)
            Me.columnap_term = New DataColumn("ap_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnap_term)
            Me.columnreceipt_bill_date = New DataColumn("receipt_bill_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceipt_bill_date)
            Me.columnvendor_ref_no = New DataColumn("vendor_ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_ref_no)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnprepaid = New DataColumn("prepaid", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprepaid)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_receive_ref}, true))
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnid_receive_ref.Unique = true
            Me.columnprepaid.DefaultValue = false
        End Sub
        
        Public Function NewInv_Receive_Products_headRow() As Inv_Receive_Products_headRow
            Return CType(Me.NewRow,Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_Products_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_Products_headRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanged(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_Products_headRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanging(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleted(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleting(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRow
        Inherits DataRow
        
        Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_Products_head = CType(Me.Table,Inv_Receive_Products_headDataTable)
        End Sub
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_Products_head.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property date_receive As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.date_receiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property bill_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.bill_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.bill_creditColumn) = value
            End Set
        End Property
        
        Public Property bill_receive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.bill_receiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.bill_receiveColumn) = value
            End Set
        End Property
        
        Public Property ap_term As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.ap_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.ap_termColumn) = value
            End Set
        End Property
        
        Public Property receipt_bill_date As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn) = value
            End Set
        End Property
        
        Public Property vendor_ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.due_dateColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.DiscountColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.amountColumn) = value
            End Set
        End Property
        
        Public Property prepaid As Boolean
            Get
                If Me.IsprepaidNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableInv_Receive_Products_head.prepaidColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.prepaidColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.taxColumn) = value
            End Set
        End Property
        
        Public Function Isdate_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.date_receiveColumn)
        End Function
        
        Public Sub Setdate_receiveNull()
            Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_Receive_Products_head.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_creditNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.bill_creditColumn)
        End Function
        
        Public Sub Setbill_creditNull()
            Me(Me.tableInv_Receive_Products_head.bill_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.bill_receiveColumn)
        End Function
        
        Public Sub Setbill_receiveNull()
            Me(Me.tableInv_Receive_Products_head.bill_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isap_termNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.ap_termColumn)
        End Function
        
        Public Sub Setap_termNull()
            Me(Me.tableInv_Receive_Products_head.ap_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceipt_bill_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn)
        End Function
        
        Public Sub Setreceipt_bill_dateNull()
            Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_ref_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.vendor_ref_noColumn)
        End Function
        
        Public Sub Setvendor_ref_noNull()
            Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableInv_Receive_Products_head.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableInv_Receive_Products_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_Receive_Products_head.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_Receive_Products_head.vend_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableInv_Receive_Products_head.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableInv_Receive_Products_head.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprepaidNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.prepaidColumn)
        End Function
        
        Public Sub SetprepaidNull()
            Me(Me.tableInv_Receive_Products_head.prepaidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableInv_Receive_Products_head.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetInv_Receive_product_Ap_DtlRows() As Inv_Receive_product_Ap_DtlRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl")),Inv_Receive_product_Ap_DtlRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_Products_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_Products_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_Products_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_receive_ref As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columncost As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnInvItemCost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnExCost As DataColumn
        
        Private columnwieght_lbs As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_product_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property InvItemCostColumn As DataColumn
            Get
                Return Me.columnInvItemCost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property ExCostColumn As DataColumn
            Get
                Return Me.columnExCost
            End Get
        End Property
        
        Friend ReadOnly Property wieght_lbsColumn As DataColumn
            Get
                Return Me.columnwieght_lbs
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_product_dtlRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_product_dtlRow)
            End Get
        End Property
        
        Public Event Inv_Receive_product_dtlRowChanged As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowChanging As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowDeleted As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowDeleting As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_product_dtlRow(ByVal row As Inv_Receive_product_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_product_dtlRow(ByVal id_receive_ref As String, ByVal item_no As String, ByVal qty As Single, ByVal cost As Single, ByVal taxable As Boolean, ByVal desc_item As String, ByVal InvItemCost As Single, ByVal fet As Single, ByVal ExCost As Single, ByVal wieght_lbs As String) As Inv_Receive_product_dtlRow
            Dim rowInv_Receive_product_dtlRow As Inv_Receive_product_dtlRow = CType(Me.NewRow,Inv_Receive_product_dtlRow)
            rowInv_Receive_product_dtlRow.ItemArray = New Object() {id_receive_ref, item_no, qty, cost, taxable, desc_item, InvItemCost, fet, ExCost, wieght_lbs}
            Me.Rows.Add(rowInv_Receive_product_dtlRow)
            Return rowInv_Receive_product_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_product_dtlDataTable = CType(MyBase.Clone,Inv_Receive_product_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_product_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columncost = Me.Columns("cost")
            Me.columntaxable = Me.Columns("taxable")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnInvItemCost = Me.Columns("InvItemCost")
            Me.columnfet = Me.Columns("fet")
            Me.columnExCost = Me.Columns("ExCost")
            Me.columnwieght_lbs = Me.Columns("wieght_lbs")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnInvItemCost = New DataColumn("InvItemCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvItemCost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnExCost = New DataColumn("ExCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExCost)
            Me.columnwieght_lbs = New DataColumn("wieght_lbs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwieght_lbs)
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function NewInv_Receive_product_dtlRow() As Inv_Receive_product_dtlRow
            Return CType(Me.NewRow,Inv_Receive_product_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_product_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_product_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_product_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowChanged(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_product_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowChanging(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_product_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowDeleted(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_product_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowDeleting(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_product_dtlRow(ByVal row As Inv_Receive_product_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlRow
        Inherits DataRow
        
        Private tableInv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_product_dtl = CType(Me.Table,Inv_Receive_product_dtlDataTable)
        End Sub
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_dtl.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.costColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property InvItemCost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property ExCost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.ExCostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.ExCostColumn) = value
            End Set
        End Property
        
        Public Property wieght_lbs As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.wieght_lbsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.wieght_lbsColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_Receive_product_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_Receive_product_dtl.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_Receive_product_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInv_Receive_product_dtl.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvItemCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.InvItemCostColumn)
        End Function
        
        Public Sub SetInvItemCostNull()
            Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableInv_Receive_product_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.ExCostColumn)
        End Function
        
        Public Sub SetExCostNull()
            Me(Me.tableInv_Receive_product_dtl.ExCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswieght_lbsNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.wieght_lbsColumn)
        End Function
        
        Public Sub Setwieght_lbsNull()
            Me(Me.tableInv_Receive_product_dtl.wieght_lbsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_product_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_product_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_product_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnfrieght As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnInvItemCost As DataColumn
        
        Private columncost As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property frieghtColumn As DataColumn
            Get
                Return Me.columnfrieght
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property InvItemCostColumn As DataColumn
            Get
                Return Me.columnInvItemCost
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_dtlRow
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_dtlRow)
            End Get
        End Property
        
        Public Event Inv_purchase_order_dtlRowChanged As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowChanging As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowDeleted As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowDeleting As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_dtlRow(ByVal row As Inv_purchase_order_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_dtlRow(ByVal po_no As String, ByVal item_no As String, ByVal qty As Single, ByVal taxable As Boolean, ByVal fet As Single, ByVal frieght As Single, ByVal desc_item As String, ByVal InvItemCost As Single, ByVal cost As Decimal, ByVal cod_vendor As String) As Inv_purchase_order_dtlRow
            Dim rowInv_purchase_order_dtlRow As Inv_purchase_order_dtlRow = CType(Me.NewRow,Inv_purchase_order_dtlRow)
            rowInv_purchase_order_dtlRow.ItemArray = New Object() {po_no, item_no, qty, taxable, fet, frieght, desc_item, InvItemCost, cost, cod_vendor}
            Me.Rows.Add(rowInv_purchase_order_dtlRow)
            Return rowInv_purchase_order_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_dtlDataTable = CType(MyBase.Clone,Inv_purchase_order_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnfet = Me.Columns("fet")
            Me.columnfrieght = Me.Columns("frieght")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnInvItemCost = Me.Columns("InvItemCost")
            Me.columncost = Me.Columns("cost")
            Me.columncod_vendor = Me.Columns("cod_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnfrieght = New DataColumn("frieght", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrieght)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnInvItemCost = New DataColumn("InvItemCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvItemCost)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnpo_no.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function NewInv_purchase_order_dtlRow() As Inv_purchase_order_dtlRow
            Return CType(Me.NewRow,Inv_purchase_order_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowChanged(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowChanging(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowDeleted(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowDeleting(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_dtlRow(ByVal row As Inv_purchase_order_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlRow
        Inherits DataRow
        
        Private tableInv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_dtl = CType(Me.Table,Inv_purchase_order_dtlDataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.po_noColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property frieght As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.frieghtColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.frieghtColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property InvItemCost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.InvItemCostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.InvItemCostColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.costColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_purchase_order_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_purchase_order_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableInv_purchase_order_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfrieghtNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.frieghtColumn)
        End Function
        
        Public Sub SetfrieghtNull()
            Me(Me.tableInv_purchase_order_dtl.frieghtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInv_purchase_order_dtl.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvItemCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.InvItemCostColumn)
        End Function
        
        Public Sub SetInvItemCostNull()
            Me(Me.tableInv_purchase_order_dtl.InvItemCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_purchase_order_dtl.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_purchase_order_dtl.cod_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtl2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_dtl2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_dtl2Row
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_dtl2Row)
            End Get
        End Property
        
        Public Event Inv_purchase_order_dtl2RowChanged As Inv_purchase_order_dtl2RowChangeEventHandler
        
        Public Event Inv_purchase_order_dtl2RowChanging As Inv_purchase_order_dtl2RowChangeEventHandler
        
        Public Event Inv_purchase_order_dtl2RowDeleted As Inv_purchase_order_dtl2RowChangeEventHandler
        
        Public Event Inv_purchase_order_dtl2RowDeleting As Inv_purchase_order_dtl2RowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_dtl2Row(ByVal row As Inv_purchase_order_dtl2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_dtl2Row(ByVal po_no As String, ByVal item_no As String, ByVal qty As Single, ByVal taxable As Boolean, ByVal cost As Decimal, ByVal fet As Decimal) As Inv_purchase_order_dtl2Row
            Dim rowInv_purchase_order_dtl2Row As Inv_purchase_order_dtl2Row = CType(Me.NewRow,Inv_purchase_order_dtl2Row)
            rowInv_purchase_order_dtl2Row.ItemArray = New Object() {po_no, item_no, qty, taxable, cost, fet}
            Me.Rows.Add(rowInv_purchase_order_dtl2Row)
            Return rowInv_purchase_order_dtl2Row
        End Function
        
        Public Function FindBypo_noitem_no(ByVal po_no As String, ByVal item_no As String) As Inv_purchase_order_dtl2Row
            Return CType(Me.Rows.Find(New Object() {po_no, item_no}),Inv_purchase_order_dtl2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_dtl2DataTable = CType(MyBase.Clone,Inv_purchase_order_dtl2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_dtl2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columntaxable = Me.Columns("taxable")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnpo_no, Me.columnitem_no}, true))
            Me.columnpo_no.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
        End Sub
        
        Public Function NewInv_purchase_order_dtl2Row() As Inv_purchase_order_dtl2Row
            Return CType(Me.NewRow,Inv_purchase_order_dtl2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_dtl2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_dtl2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_dtl2RowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtl2RowChanged(Me, New Inv_purchase_order_dtl2RowChangeEvent(CType(e.Row,Inv_purchase_order_dtl2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_dtl2RowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtl2RowChanging(Me, New Inv_purchase_order_dtl2RowChangeEvent(CType(e.Row,Inv_purchase_order_dtl2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_dtl2RowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtl2RowDeleted(Me, New Inv_purchase_order_dtl2RowChangeEvent(CType(e.Row,Inv_purchase_order_dtl2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_dtl2RowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtl2RowDeleting(Me, New Inv_purchase_order_dtl2RowChangeEvent(CType(e.Row,Inv_purchase_order_dtl2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_dtl2Row(ByVal row As Inv_purchase_order_dtl2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtl2Row
        Inherits DataRow
        
        Private tableInv_purchase_order_dtl2 As Inv_purchase_order_dtl2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_dtl2 = CType(Me.Table,Inv_purchase_order_dtl2DataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl2.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.po_noColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl2.item_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl2.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.qtyColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl2.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.taxableColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl2.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl2.fetColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl2.fetColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl2.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_purchase_order_dtl2.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl2.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_purchase_order_dtl2.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl2.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_purchase_order_dtl2.costColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtl2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_dtl2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_dtl2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_dtl2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAR_terms As DataColumn
        
        Private columnKIND_AR As DataColumn
        
        Private columnST_NET_DUE_IN As DataColumn
        
        Private columnST_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnST_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnDD_NET_DUE_BEFORE As DataColumn
        
        Private columnDD_IF_ISSUED_WITHIN_DAYS As DataColumn
        
        Private columnDD_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnDD_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnMP_NO_OF_PAYMENT As DataColumn
        
        Private columnMP_BEFORE_DAY As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_TAB_AR_TERM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property KIND_ARColumn As DataColumn
            Get
                Return Me.columnKIND_AR
            End Get
        End Property
        
        Friend ReadOnly Property ST_NET_DUE_INColumn As DataColumn
            Get
                Return Me.columnST_NET_DUE_IN
            End Get
        End Property
        
        Friend ReadOnly Property ST_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnST_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property ST_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnST_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_NET_DUE_BEFOREColumn As DataColumn
            Get
                Return Me.columnDD_NET_DUE_BEFORE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_ISSUED_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_ISSUED_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnDD_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property MP_NO_OF_PAYMENTColumn As DataColumn
            Get
                Return Me.columnMP_NO_OF_PAYMENT
            End Get
        End Property
        
        Friend ReadOnly Property MP_BEFORE_DAYColumn As DataColumn
            Get
                Return Me.columnMP_BEFORE_DAY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_TAB_AR_TERMRow
            Get
                Return CType(Me.Rows(index),GL_TAB_AR_TERMRow)
            End Get
        End Property
        
        Public Event GL_TAB_AR_TERMRowChanged As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowChanging As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleted As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleting As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Overloads Sub AddGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_TAB_AR_TERMRow(ByVal AR_terms As String, ByVal KIND_AR As Short, ByVal ST_NET_DUE_IN As Short, ByVal ST_DISCOUNT_PERCENTAGE As Decimal, ByVal ST_IF_PAY_WITHIN_DAYS As Short, ByVal DD_NET_DUE_BEFORE As Short, ByVal DD_IF_ISSUED_WITHIN_DAYS As Short, ByVal DD_DISCOUNT_PERCENTAGE As Decimal, ByVal DD_IF_PAY_WITHIN_DAYS As Short, ByVal MP_NO_OF_PAYMENT As Short, ByVal MP_BEFORE_DAY As Short) As GL_TAB_AR_TERMRow
            Dim rowGL_TAB_AR_TERMRow As GL_TAB_AR_TERMRow = CType(Me.NewRow,GL_TAB_AR_TERMRow)
            rowGL_TAB_AR_TERMRow.ItemArray = New Object() {AR_terms, KIND_AR, ST_NET_DUE_IN, ST_DISCOUNT_PERCENTAGE, ST_IF_PAY_WITHIN_DAYS, DD_NET_DUE_BEFORE, DD_IF_ISSUED_WITHIN_DAYS, DD_DISCOUNT_PERCENTAGE, DD_IF_PAY_WITHIN_DAYS, MP_NO_OF_PAYMENT, MP_BEFORE_DAY}
            Me.Rows.Add(rowGL_TAB_AR_TERMRow)
            Return rowGL_TAB_AR_TERMRow
        End Function
        
        Public Function FindByAR_terms(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Return CType(Me.Rows.Find(New Object() {AR_terms}),GL_TAB_AR_TERMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_TAB_AR_TERMDataTable = CType(MyBase.Clone,GL_TAB_AR_TERMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_TAB_AR_TERMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnKIND_AR = Me.Columns("KIND_AR")
            Me.columnST_NET_DUE_IN = Me.Columns("ST_NET_DUE_IN")
            Me.columnST_DISCOUNT_PERCENTAGE = Me.Columns("ST_DISCOUNT_PERCENTAGE")
            Me.columnST_IF_PAY_WITHIN_DAYS = Me.Columns("ST_IF_PAY_WITHIN_DAYS")
            Me.columnDD_NET_DUE_BEFORE = Me.Columns("DD_NET_DUE_BEFORE")
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = Me.Columns("DD_IF_ISSUED_WITHIN_DAYS")
            Me.columnDD_DISCOUNT_PERCENTAGE = Me.Columns("DD_DISCOUNT_PERCENTAGE")
            Me.columnDD_IF_PAY_WITHIN_DAYS = Me.Columns("DD_IF_PAY_WITHIN_DAYS")
            Me.columnMP_NO_OF_PAYMENT = Me.Columns("MP_NO_OF_PAYMENT")
            Me.columnMP_BEFORE_DAY = Me.Columns("MP_BEFORE_DAY")
        End Sub
        
        Private Sub InitClass()
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnKIND_AR = New DataColumn("KIND_AR", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKIND_AR)
            Me.columnST_NET_DUE_IN = New DataColumn("ST_NET_DUE_IN", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_NET_DUE_IN)
            Me.columnST_DISCOUNT_PERCENTAGE = New DataColumn("ST_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_DISCOUNT_PERCENTAGE)
            Me.columnST_IF_PAY_WITHIN_DAYS = New DataColumn("ST_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_IF_PAY_WITHIN_DAYS)
            Me.columnDD_NET_DUE_BEFORE = New DataColumn("DD_NET_DUE_BEFORE", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_NET_DUE_BEFORE)
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = New DataColumn("DD_IF_ISSUED_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_ISSUED_WITHIN_DAYS)
            Me.columnDD_DISCOUNT_PERCENTAGE = New DataColumn("DD_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_DISCOUNT_PERCENTAGE)
            Me.columnDD_IF_PAY_WITHIN_DAYS = New DataColumn("DD_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_PAY_WITHIN_DAYS)
            Me.columnMP_NO_OF_PAYMENT = New DataColumn("MP_NO_OF_PAYMENT", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_NO_OF_PAYMENT)
            Me.columnMP_BEFORE_DAY = New DataColumn("MP_BEFORE_DAY", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_BEFORE_DAY)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAR_terms}, true))
            Me.columnAR_terms.AllowDBNull = false
            Me.columnAR_terms.Unique = true
        End Sub
        
        Public Function NewGL_TAB_AR_TERMRow() As GL_TAB_AR_TERMRow
            Return CType(Me.NewRow,GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_TAB_AR_TERMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanged(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanging(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleted(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleting(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRow
        Inherits DataRow
        
        Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_TAB_AR_TERM = CType(Me.Table,GL_TAB_AR_TERMDataTable)
        End Sub
        
        Public Property AR_terms As String
            Get
                Return CType(Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn),String)
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property KIND_AR As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = value
            End Set
        End Property
        
        Public Property ST_NET_DUE_IN As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = value
            End Set
        End Property
        
        Public Property ST_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property ST_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_NET_DUE_BEFORE As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_ISSUED_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property MP_NO_OF_PAYMENT As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = value
            End Set
        End Property
        
        Public Property MP_BEFORE_DAY As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = value
            End Set
        End Property
        
        Public Function IsKIND_ARNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.KIND_ARColumn)
        End Function
        
        Public Sub SetKIND_ARNull()
            Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_NET_DUE_INNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn)
        End Function
        
        Public Sub SetST_NET_DUE_INNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetST_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetST_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_NET_DUE_BEFORENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn)
        End Function
        
        Public Sub SetDD_NET_DUE_BEFORENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_ISSUED_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_ISSUED_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetDD_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_NO_OF_PAYMENTNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn)
        End Function
        
        Public Sub SetMP_NO_OF_PAYMENTNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_BEFORE_DAYNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn)
        End Function
        
        Public Sub SetMP_BEFORE_DAYNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_TAB_AR_TERMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_TAB_AR_TERMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_TAB_AR_TERMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnid_receive_ref As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_product_Ap_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_product_Ap_DtlRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_product_Ap_DtlRow)
            End Get
        End Property
        
        Public Event Inv_Receive_product_Ap_DtlRowChanged As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowChanging As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleted As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleting As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_product_Ap_DtlRow(ByVal parentInv_Receive_Products_headRowByInv_Receive_Products_headInv_Receive_product_Ap_Dtl As Inv_Receive_Products_headRow, ByVal amount As Decimal, ByVal due_date As String) As Inv_Receive_product_Ap_DtlRow
            Dim rowInv_Receive_product_Ap_DtlRow As Inv_Receive_product_Ap_DtlRow = CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
            rowInv_Receive_product_Ap_DtlRow.ItemArray = New Object() {Nothing, parentInv_Receive_Products_headRowByInv_Receive_Products_headInv_Receive_product_Ap_Dtl(0), amount, due_date}
            Me.Rows.Add(rowInv_Receive_product_Ap_DtlRow)
            Return rowInv_Receive_product_Ap_DtlRow
        End Function
        
        Public Function FindByID_Inv_Receive_product_Ap_Dtl(ByVal ID_Inv_Receive_product_Ap_Dtl As Integer) As Inv_Receive_product_Ap_DtlRow
            Return CType(Me.Rows.Find(New Object() {ID_Inv_Receive_product_Ap_Dtl}),Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_product_Ap_DtlDataTable = CType(MyBase.Clone,Inv_Receive_product_Ap_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_product_Ap_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_Inv_Receive_product_Ap_Dtl}, true))
            Me.columnID_Inv_Receive_product_Ap_Dtl.AutoIncrement = true
            Me.columnID_Inv_Receive_product_Ap_Dtl.AutoIncrementSeed = 1
            Me.columnID_Inv_Receive_product_Ap_Dtl.AllowDBNull = false
            Me.columnID_Inv_Receive_product_Ap_Dtl.Unique = true
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columndue_date.AllowDBNull = false
        End Sub
        
        Public Function NewInv_Receive_product_Ap_DtlRow() As Inv_Receive_product_Ap_DtlRow
            Return CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_product_Ap_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanged(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanging(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleted(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleting(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRow
        Inherits DataRow
        
        Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Table,Inv_Receive_product_Ap_DtlDataTable)
        End Sub
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property Inv_Receive_Products_headRow As Inv_Receive_Products_headRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl")),Inv_Receive_Products_headRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Inv_Receive_Products_headInv_Receive_product_Ap_Dtl"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_product_Ap_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_product_Ap_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_product_Ap_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ap_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndue_date As DataColumn
        
        Private columnamount As DataColumn
        
        Friend Sub New()
            MyBase.New("Ap_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ap_dtlRow
            Get
                Return CType(Me.Rows(index),Ap_dtlRow)
            End Get
        End Property
        
        Public Event Ap_dtlRowChanged As Ap_dtlRowChangeEventHandler
        
        Public Event Ap_dtlRowChanging As Ap_dtlRowChangeEventHandler
        
        Public Event Ap_dtlRowDeleted As Ap_dtlRowChangeEventHandler
        
        Public Event Ap_dtlRowDeleting As Ap_dtlRowChangeEventHandler
        
        Public Overloads Sub AddAp_dtlRow(ByVal row As Ap_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAp_dtlRow(ByVal due_date As String, ByVal amount As Decimal) As Ap_dtlRow
            Dim rowAp_dtlRow As Ap_dtlRow = CType(Me.NewRow,Ap_dtlRow)
            rowAp_dtlRow.ItemArray = New Object() {due_date, amount}
            Me.Rows.Add(rowAp_dtlRow)
            Return rowAp_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ap_dtlDataTable = CType(MyBase.Clone,Ap_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ap_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndue_date = Me.Columns("due_date")
            Me.columnamount = Me.Columns("amount")
        End Sub
        
        Private Sub InitClass()
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
        End Sub
        
        Public Function NewAp_dtlRow() As Ap_dtlRow
            Return CType(Me.NewRow,Ap_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ap_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ap_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ap_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Ap_dtlRowChanged(Me, New Ap_dtlRowChangeEvent(CType(e.Row,Ap_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ap_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Ap_dtlRowChanging(Me, New Ap_dtlRowChangeEvent(CType(e.Row,Ap_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ap_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ap_dtlRowDeleted(Me, New Ap_dtlRowChangeEvent(CType(e.Row,Ap_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ap_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ap_dtlRowDeleting(Me, New Ap_dtlRowChangeEvent(CType(e.Row,Ap_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAp_dtlRow(ByVal row As Ap_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ap_dtlRow
        Inherits DataRow
        
        Private tableAp_dtl As Ap_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAp_dtl = CType(Me.Table,Ap_dtlDataTable)
        End Sub
        
        Public Property due_date As String
            Get
                Return CType(Me(Me.tableAp_dtl.due_dateColumn),String)
            End Get
            Set
                Me(Me.tableAp_dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableAp_dtl.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableAp_dtl.amountColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ap_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ap_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ap_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ap_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_vendor_credit As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndate_credit As DataColumn
        
        Private columnamount_credit As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnref_no As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Private columnid_receive_ref As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_vendor_credit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property date_creditColumn As DataColumn
            Get
                Return Me.columndate_credit
            End Get
        End Property
        
        Friend ReadOnly Property amount_creditColumn As DataColumn
            Get
                Return Me.columnamount_credit
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property ref_noColumn As DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_vendor_creditRow
            Get
                Return CType(Me.Rows(index),GL_vendor_creditRow)
            End Get
        End Property
        
        Public Event GL_vendor_creditRowChanged As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowChanging As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowDeleted As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowDeleting As GL_vendor_creditRowChangeEventHandler
        
        Public Overloads Sub AddGL_vendor_creditRow(ByVal row As GL_vendor_creditRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_vendor_creditRow(ByVal cod_vendor As String, ByVal date_credit As String, ByVal amount_credit As Decimal, ByVal Remark As String, ByVal ref_no As String, ByVal due_date As String, ByVal id_vendor_credit_head As Integer, ByVal id_receive_ref As String) As GL_vendor_creditRow
            Dim rowGL_vendor_creditRow As GL_vendor_creditRow = CType(Me.NewRow,GL_vendor_creditRow)
            rowGL_vendor_creditRow.ItemArray = New Object() {Nothing, cod_vendor, date_credit, amount_credit, Remark, ref_no, due_date, id_vendor_credit_head, id_receive_ref}
            Me.Rows.Add(rowGL_vendor_creditRow)
            Return rowGL_vendor_creditRow
        End Function
        
        Public Function FindByid_vendor_credit(ByVal id_vendor_credit As Integer) As GL_vendor_creditRow
            Return CType(Me.Rows.Find(New Object() {id_vendor_credit}),GL_vendor_creditRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_vendor_creditDataTable = CType(MyBase.Clone,GL_vendor_creditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_vendor_creditDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndate_credit = Me.Columns("date_credit")
            Me.columnamount_credit = Me.Columns("amount_credit")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnref_no = Me.Columns("ref_no")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndate_credit = New DataColumn("date_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_credit)
            Me.columnamount_credit = New DataColumn("amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_credit)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnref_no = New DataColumn("ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref_no)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_vendor_credit}, true))
            Me.columnid_vendor_credit.AutoIncrement = true
            Me.columnid_vendor_credit.AllowDBNull = false
            Me.columnid_vendor_credit.ReadOnly = true
            Me.columnid_vendor_credit.Unique = true
            Me.columncod_vendor.AllowDBNull = false
            Me.columnamount_credit.AllowDBNull = false
        End Sub
        
        Public Function NewGL_vendor_creditRow() As GL_vendor_creditRow
            Return CType(Me.NewRow,GL_vendor_creditRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_vendor_creditRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_vendor_creditRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_vendor_creditRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowChanged(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_vendor_creditRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowChanging(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_vendor_creditRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowDeleted(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_vendor_creditRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowDeleting(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_vendor_creditRow(ByVal row As GL_vendor_creditRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditRow
        Inherits DataRow
        
        Private tableGL_vendor_credit As GL_vendor_creditDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_vendor_credit = CType(Me.Table,GL_vendor_creditDataTable)
        End Sub
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tableGL_vendor_credit.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableGL_vendor_credit.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property date_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.date_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.date_creditColumn) = value
            End Set
        End Property
        
        Public Property amount_credit As Decimal
            Get
                Return CType(Me(Me.tableGL_vendor_credit.amount_creditColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.amount_creditColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.RemarkColumn) = value
            End Set
        End Property
        
        Public Property ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.ref_noColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.due_dateColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Property id_receive_ref As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.id_receive_refColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Function Isdate_creditNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.date_creditColumn)
        End Function
        
        Public Sub Setdate_creditNull()
            Me(Me.tableGL_vendor_credit.date_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGL_vendor_credit.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.ref_noColumn)
        End Function
        
        Public Sub Setref_noNull()
            Me(Me.tableGL_vendor_credit.ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableGL_vendor_credit.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_receive_refNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.id_receive_refColumn)
        End Function
        
        Public Sub Setid_receive_refNull()
            Me(Me.tableGL_vendor_credit.id_receive_refColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_vendor_creditRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_vendor_creditRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_vendor_creditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
