'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSearchReceiveReturn
    Inherits DataSet
    
    Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_Products_head As Inv_Receive_Products_headDataTable
        Get
            Return Me.tableInv_Receive_Products_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSearchReceiveReturn = CType(MyBase.Clone,DSFrmSearchReceiveReturn)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInv_Receive_Products_head = CType(Me.Tables("Inv_Receive_Products_head"),Inv_Receive_Products_headDataTable)
        If (Not (Me.tableInv_Receive_Products_head) Is Nothing) Then
            Me.tableInv_Receive_Products_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSearchReceiveReturn"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSearchReceiveReturn.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInv_Receive_Products_head = New Inv_Receive_Products_headDataTable
        Me.Tables.Add(Me.tableInv_Receive_Products_head)
    End Sub
    
    Private Function ShouldSerializeInv_Receive_Products_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Inv_Receive_Products_headRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_Products_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_receive_ref As DataColumn
        
        Private columndate_receive As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnvendor_ref_no As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_Products_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property date_receiveColumn As DataColumn
            Get
                Return Me.columndate_receive
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property vendor_ref_noColumn As DataColumn
            Get
                Return Me.columnvendor_ref_no
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_Products_headRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_Products_headRow)
            End Get
        End Property
        
        Public Event Inv_Receive_Products_headRowChanged As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowChanging As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleted As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleting As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_Products_headRow(ByVal id_receive_ref As String, ByVal date_receive As String, ByVal cod_vendor As String, ByVal vendor_ref_no As String, ByVal due_date As String, ByVal po_no As String, ByVal Discount As Single, ByVal Amount As Double, ByVal desc_vendor As String, ByVal qty As Double) As Inv_Receive_Products_headRow
            Dim rowInv_Receive_Products_headRow As Inv_Receive_Products_headRow = CType(Me.NewRow,Inv_Receive_Products_headRow)
            rowInv_Receive_Products_headRow.ItemArray = New Object() {id_receive_ref, date_receive, cod_vendor, vendor_ref_no, due_date, po_no, Discount, Amount, desc_vendor, qty}
            Me.Rows.Add(rowInv_Receive_Products_headRow)
            Return rowInv_Receive_Products_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_Products_headDataTable = CType(MyBase.Clone,Inv_Receive_Products_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_Products_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columndate_receive = Me.Columns("date_receive")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnvendor_ref_no = Me.Columns("vendor_ref_no")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnAmount = Me.Columns("Amount")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columndate_receive = New DataColumn("date_receive", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnvendor_ref_no = New DataColumn("vendor_ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_ref_no)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnqty = New DataColumn("qty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columncod_vendor.AllowDBNull = false
            Me.columnDiscount.AllowDBNull = false
            Me.columnAmount.ReadOnly = true
            Me.columnqty.ReadOnly = true
        End Sub
        
        Public Function NewInv_Receive_Products_headRow() As Inv_Receive_Products_headRow
            Return CType(Me.NewRow,Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_Products_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_Products_headRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanged(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_Products_headRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanging(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleted(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleting(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRow
        Inherits DataRow
        
        Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_Products_head = CType(Me.Table,Inv_Receive_Products_headDataTable)
        End Sub
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_Products_head.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property date_receive As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.date_receiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableInv_Receive_Products_head.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property vendor_ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.due_dateColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property Discount As Single
            Get
                Return CType(Me(Me.tableInv_Receive_Products_head.DiscountColumn),Single)
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.DiscountColumn) = value
            End Set
        End Property
        
        Public Property Amount As Double
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.AmountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.AmountColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property qty As Double
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.qtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.qtyColumn) = value
            End Set
        End Property
        
        Public Function Isdate_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.date_receiveColumn)
        End Function
        
        Public Sub Setdate_receiveNull()
            Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_ref_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.vendor_ref_noColumn)
        End Function
        
        Public Sub Setvendor_ref_noNull()
            Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableInv_Receive_Products_head.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableInv_Receive_Products_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableInv_Receive_Products_head.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableInv_Receive_Products_head.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_Receive_Products_head.qtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_Products_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_Products_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_Products_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
