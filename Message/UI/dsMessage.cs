//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Message.UI {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsMessage : DataSet {
        
        private message_sendDataTable tablemessage_send;
        
        private user_messageDataTable tableuser_message;
        
        private DataRelation relationuser_messagemessage_send;
        
        public dsMessage() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsMessage(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["message_send"] != null)) {
                    this.Tables.Add(new message_sendDataTable(ds.Tables["message_send"]));
                }
                if ((ds.Tables["user_message"] != null)) {
                    this.Tables.Add(new user_messageDataTable(ds.Tables["user_message"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public message_sendDataTable message_send {
            get {
                return this.tablemessage_send;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public user_messageDataTable user_message {
            get {
                return this.tableuser_message;
            }
        }
        
        public override DataSet Clone() {
            dsMessage cln = ((dsMessage)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["message_send"] != null)) {
                this.Tables.Add(new message_sendDataTable(ds.Tables["message_send"]));
            }
            if ((ds.Tables["user_message"] != null)) {
                this.Tables.Add(new user_messageDataTable(ds.Tables["user_message"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablemessage_send = ((message_sendDataTable)(this.Tables["message_send"]));
            if ((this.tablemessage_send != null)) {
                this.tablemessage_send.InitVars();
            }
            this.tableuser_message = ((user_messageDataTable)(this.Tables["user_message"]));
            if ((this.tableuser_message != null)) {
                this.tableuser_message.InitVars();
            }
            this.relationuser_messagemessage_send = this.Relations["user_messagemessage_send"];
        }
        
        private void InitClass() {
            this.DataSetName = "dsMessage";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsMessage.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablemessage_send = new message_sendDataTable();
            this.Tables.Add(this.tablemessage_send);
            this.tableuser_message = new user_messageDataTable();
            this.Tables.Add(this.tableuser_message);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("user_messagemessage_send", new DataColumn[] {
                        this.tableuser_message.message_codeColumn}, new DataColumn[] {
                        this.tablemessage_send.message_codeColumn});
            this.tablemessage_send.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationuser_messagemessage_send = new DataRelation("user_messagemessage_send", new DataColumn[] {
                        this.tableuser_message.message_codeColumn}, new DataColumn[] {
                        this.tablemessage_send.message_codeColumn}, false);
            this.Relations.Add(this.relationuser_messagemessage_send);
        }
        
        private bool ShouldSerializemessage_send() {
            return false;
        }
        
        private bool ShouldSerializeuser_message() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void message_sendRowChangeEventHandler(object sender, message_sendRowChangeEvent e);
        
        public delegate void user_messageRowChangeEventHandler(object sender, user_messageRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class message_sendDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncounter;
            
            private DataColumn columnmessage_code;
            
            private DataColumn columnuser_code;
            
            private DataColumn columncode_company;
            
            private DataColumn columnactivation_date;
            
            private DataColumn columnvisit_date;
            
            private DataColumn columndeleted;
            
            internal message_sendDataTable() : 
                    base("message_send") {
                this.InitClass();
            }
            
            internal message_sendDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn counterColumn {
                get {
                    return this.columncounter;
                }
            }
            
            internal DataColumn message_codeColumn {
                get {
                    return this.columnmessage_code;
                }
            }
            
            internal DataColumn user_codeColumn {
                get {
                    return this.columnuser_code;
                }
            }
            
            internal DataColumn code_companyColumn {
                get {
                    return this.columncode_company;
                }
            }
            
            internal DataColumn activation_dateColumn {
                get {
                    return this.columnactivation_date;
                }
            }
            
            internal DataColumn visit_dateColumn {
                get {
                    return this.columnvisit_date;
                }
            }
            
            internal DataColumn deletedColumn {
                get {
                    return this.columndeleted;
                }
            }
            
            public message_sendRow this[int index] {
                get {
                    return ((message_sendRow)(this.Rows[index]));
                }
            }
            
            public event message_sendRowChangeEventHandler message_sendRowChanged;
            
            public event message_sendRowChangeEventHandler message_sendRowChanging;
            
            public event message_sendRowChangeEventHandler message_sendRowDeleted;
            
            public event message_sendRowChangeEventHandler message_sendRowDeleting;
            
            public void Addmessage_sendRow(message_sendRow row) {
                this.Rows.Add(row);
            }
            
            public message_sendRow Addmessage_sendRow(user_messageRow parentuser_messageRowByuser_messagemessage_send, int user_code, string code_company, System.DateTime activation_date, System.DateTime visit_date, bool deleted) {
                message_sendRow rowmessage_sendRow = ((message_sendRow)(this.NewRow()));
                rowmessage_sendRow.ItemArray = new object[] {
                        null,
                        parentuser_messageRowByuser_messagemessage_send[0],
                        user_code,
                        code_company,
                        activation_date,
                        visit_date,
                        deleted};
                this.Rows.Add(rowmessage_sendRow);
                return rowmessage_sendRow;
            }
            
            public message_sendRow FindBycounter(int counter) {
                return ((message_sendRow)(this.Rows.Find(new object[] {
                            counter})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                message_sendDataTable cln = ((message_sendDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new message_sendDataTable();
            }
            
            internal void InitVars() {
                this.columncounter = this.Columns["counter"];
                this.columnmessage_code = this.Columns["message_code"];
                this.columnuser_code = this.Columns["user_code"];
                this.columncode_company = this.Columns["code_company"];
                this.columnactivation_date = this.Columns["activation_date"];
                this.columnvisit_date = this.Columns["visit_date"];
                this.columndeleted = this.Columns["deleted"];
            }
            
            private void InitClass() {
                this.columncounter = new DataColumn("counter", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncounter);
                this.columnmessage_code = new DataColumn("message_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmessage_code);
                this.columnuser_code = new DataColumn("user_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_code);
                this.columncode_company = new DataColumn("code_company", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncode_company);
                this.columnactivation_date = new DataColumn("activation_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnactivation_date);
                this.columnvisit_date = new DataColumn("visit_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvisit_date);
                this.columndeleted = new DataColumn("deleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeleted);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columncounter}, true));
                this.columncounter.AutoIncrement = true;
                this.columncounter.AllowDBNull = false;
                this.columncounter.ReadOnly = true;
                this.columncounter.Unique = true;
                this.columnmessage_code.AllowDBNull = false;
                this.columnuser_code.AllowDBNull = false;
            }
            
            public message_sendRow Newmessage_sendRow() {
                return ((message_sendRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new message_sendRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(message_sendRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.message_sendRowChanged != null)) {
                    this.message_sendRowChanged(this, new message_sendRowChangeEvent(((message_sendRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.message_sendRowChanging != null)) {
                    this.message_sendRowChanging(this, new message_sendRowChangeEvent(((message_sendRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.message_sendRowDeleted != null)) {
                    this.message_sendRowDeleted(this, new message_sendRowChangeEvent(((message_sendRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.message_sendRowDeleting != null)) {
                    this.message_sendRowDeleting(this, new message_sendRowChangeEvent(((message_sendRow)(e.Row)), e.Action));
                }
            }
            
            public void Removemessage_sendRow(message_sendRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class message_sendRow : DataRow {
            
            private message_sendDataTable tablemessage_send;
            
            internal message_sendRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemessage_send = ((message_sendDataTable)(this.Table));
            }
            
            public int counter {
                get {
                    return ((int)(this[this.tablemessage_send.counterColumn]));
                }
                set {
                    this[this.tablemessage_send.counterColumn] = value;
                }
            }
            
            public int message_code {
                get {
                    return ((int)(this[this.tablemessage_send.message_codeColumn]));
                }
                set {
                    this[this.tablemessage_send.message_codeColumn] = value;
                }
            }
            
            public int user_code {
                get {
                    return ((int)(this[this.tablemessage_send.user_codeColumn]));
                }
                set {
                    this[this.tablemessage_send.user_codeColumn] = value;
                }
            }
            
            public string code_company {
                get {
                    try {
                        return ((string)(this[this.tablemessage_send.code_companyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemessage_send.code_companyColumn] = value;
                }
            }
            
            public System.DateTime activation_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablemessage_send.activation_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemessage_send.activation_dateColumn] = value;
                }
            }
            
            public System.DateTime visit_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablemessage_send.visit_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemessage_send.visit_dateColumn] = value;
                }
            }
            
            public bool deleted {
                get {
                    try {
                        return ((bool)(this[this.tablemessage_send.deletedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemessage_send.deletedColumn] = value;
                }
            }
            
            public user_messageRow user_messageRow {
                get {
                    return ((user_messageRow)(this.GetParentRow(this.Table.ParentRelations["user_messagemessage_send"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["user_messagemessage_send"]);
                }
            }
            
            public bool Iscode_companyNull() {
                return this.IsNull(this.tablemessage_send.code_companyColumn);
            }
            
            public void Setcode_companyNull() {
                this[this.tablemessage_send.code_companyColumn] = System.Convert.DBNull;
            }
            
            public bool Isactivation_dateNull() {
                return this.IsNull(this.tablemessage_send.activation_dateColumn);
            }
            
            public void Setactivation_dateNull() {
                this[this.tablemessage_send.activation_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isvisit_dateNull() {
                return this.IsNull(this.tablemessage_send.visit_dateColumn);
            }
            
            public void Setvisit_dateNull() {
                this[this.tablemessage_send.visit_dateColumn] = System.Convert.DBNull;
            }
            
            public bool IsdeletedNull() {
                return this.IsNull(this.tablemessage_send.deletedColumn);
            }
            
            public void SetdeletedNull() {
                this[this.tablemessage_send.deletedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class message_sendRowChangeEvent : EventArgs {
            
            private message_sendRow eventRow;
            
            private DataRowAction eventAction;
            
            public message_sendRowChangeEvent(message_sendRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public message_sendRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class user_messageDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmessage_code;
            
            private DataColumn columnuser_code;
            
            private DataColumn columncompany_code;
            
            private DataColumn columnmessage_body;
            
            private DataColumn columncreate_date;
            
            private DataColumn columnreply_code;
            
            private DataColumn columnlast_flag;
            
            private DataColumn columndeleted;
            
            private DataColumn columnmessage_subject;
            
            internal user_messageDataTable() : 
                    base("user_message") {
                this.InitClass();
            }
            
            internal user_messageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn message_codeColumn {
                get {
                    return this.columnmessage_code;
                }
            }
            
            internal DataColumn user_codeColumn {
                get {
                    return this.columnuser_code;
                }
            }
            
            internal DataColumn company_codeColumn {
                get {
                    return this.columncompany_code;
                }
            }
            
            internal DataColumn message_bodyColumn {
                get {
                    return this.columnmessage_body;
                }
            }
            
            internal DataColumn create_dateColumn {
                get {
                    return this.columncreate_date;
                }
            }
            
            internal DataColumn reply_codeColumn {
                get {
                    return this.columnreply_code;
                }
            }
            
            internal DataColumn last_flagColumn {
                get {
                    return this.columnlast_flag;
                }
            }
            
            internal DataColumn deletedColumn {
                get {
                    return this.columndeleted;
                }
            }
            
            internal DataColumn message_subjectColumn {
                get {
                    return this.columnmessage_subject;
                }
            }
            
            public user_messageRow this[int index] {
                get {
                    return ((user_messageRow)(this.Rows[index]));
                }
            }
            
            public event user_messageRowChangeEventHandler user_messageRowChanged;
            
            public event user_messageRowChangeEventHandler user_messageRowChanging;
            
            public event user_messageRowChangeEventHandler user_messageRowDeleted;
            
            public event user_messageRowChangeEventHandler user_messageRowDeleting;
            
            public void Adduser_messageRow(user_messageRow row) {
                this.Rows.Add(row);
            }
            
            public user_messageRow Adduser_messageRow(int user_code, int company_code, string message_body, System.DateTime create_date, int reply_code, bool last_flag, bool deleted, string message_subject) {
                user_messageRow rowuser_messageRow = ((user_messageRow)(this.NewRow()));
                rowuser_messageRow.ItemArray = new object[] {
                        null,
                        user_code,
                        company_code,
                        message_body,
                        create_date,
                        reply_code,
                        last_flag,
                        deleted,
                        message_subject};
                this.Rows.Add(rowuser_messageRow);
                return rowuser_messageRow;
            }
            
            public user_messageRow FindBymessage_code(int message_code) {
                return ((user_messageRow)(this.Rows.Find(new object[] {
                            message_code})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                user_messageDataTable cln = ((user_messageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new user_messageDataTable();
            }
            
            internal void InitVars() {
                this.columnmessage_code = this.Columns["message_code"];
                this.columnuser_code = this.Columns["user_code"];
                this.columncompany_code = this.Columns["company_code"];
                this.columnmessage_body = this.Columns["message_body"];
                this.columncreate_date = this.Columns["create_date"];
                this.columnreply_code = this.Columns["reply_code"];
                this.columnlast_flag = this.Columns["last_flag"];
                this.columndeleted = this.Columns["deleted"];
                this.columnmessage_subject = this.Columns["message_subject"];
            }
            
            private void InitClass() {
                this.columnmessage_code = new DataColumn("message_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmessage_code);
                this.columnuser_code = new DataColumn("user_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_code);
                this.columncompany_code = new DataColumn("company_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncompany_code);
                this.columnmessage_body = new DataColumn("message_body", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmessage_body);
                this.columncreate_date = new DataColumn("create_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreate_date);
                this.columnreply_code = new DataColumn("reply_code", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreply_code);
                this.columnlast_flag = new DataColumn("last_flag", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlast_flag);
                this.columndeleted = new DataColumn("deleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeleted);
                this.columnmessage_subject = new DataColumn("message_subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmessage_subject);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnmessage_code}, true));
                this.columnmessage_code.AutoIncrement = true;
                this.columnmessage_code.AllowDBNull = false;
                this.columnmessage_code.ReadOnly = true;
                this.columnmessage_code.Unique = true;
                this.columnlast_flag.AllowDBNull = false;
            }
            
            public user_messageRow Newuser_messageRow() {
                return ((user_messageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new user_messageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(user_messageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.user_messageRowChanged != null)) {
                    this.user_messageRowChanged(this, new user_messageRowChangeEvent(((user_messageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.user_messageRowChanging != null)) {
                    this.user_messageRowChanging(this, new user_messageRowChangeEvent(((user_messageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.user_messageRowDeleted != null)) {
                    this.user_messageRowDeleted(this, new user_messageRowChangeEvent(((user_messageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.user_messageRowDeleting != null)) {
                    this.user_messageRowDeleting(this, new user_messageRowChangeEvent(((user_messageRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeuser_messageRow(user_messageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class user_messageRow : DataRow {
            
            private user_messageDataTable tableuser_message;
            
            internal user_messageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableuser_message = ((user_messageDataTable)(this.Table));
            }
            
            public int message_code {
                get {
                    return ((int)(this[this.tableuser_message.message_codeColumn]));
                }
                set {
                    this[this.tableuser_message.message_codeColumn] = value;
                }
            }
            
            public int user_code {
                get {
                    try {
                        return ((int)(this[this.tableuser_message.user_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.user_codeColumn] = value;
                }
            }
            
            public int company_code {
                get {
                    try {
                        return ((int)(this[this.tableuser_message.company_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.company_codeColumn] = value;
                }
            }
            
            public string message_body {
                get {
                    try {
                        return ((string)(this[this.tableuser_message.message_bodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.message_bodyColumn] = value;
                }
            }
            
            public System.DateTime create_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableuser_message.create_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.create_dateColumn] = value;
                }
            }
            
            public int reply_code {
                get {
                    try {
                        return ((int)(this[this.tableuser_message.reply_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.reply_codeColumn] = value;
                }
            }
            
            public bool last_flag {
                get {
                    return ((bool)(this[this.tableuser_message.last_flagColumn]));
                }
                set {
                    this[this.tableuser_message.last_flagColumn] = value;
                }
            }
            
            public bool deleted {
                get {
                    try {
                        return ((bool)(this[this.tableuser_message.deletedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.deletedColumn] = value;
                }
            }
            
            public string message_subject {
                get {
                    try {
                        return ((string)(this[this.tableuser_message.message_subjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableuser_message.message_subjectColumn] = value;
                }
            }
            
            public bool Isuser_codeNull() {
                return this.IsNull(this.tableuser_message.user_codeColumn);
            }
            
            public void Setuser_codeNull() {
                this[this.tableuser_message.user_codeColumn] = System.Convert.DBNull;
            }
            
            public bool Iscompany_codeNull() {
                return this.IsNull(this.tableuser_message.company_codeColumn);
            }
            
            public void Setcompany_codeNull() {
                this[this.tableuser_message.company_codeColumn] = System.Convert.DBNull;
            }
            
            public bool Ismessage_bodyNull() {
                return this.IsNull(this.tableuser_message.message_bodyColumn);
            }
            
            public void Setmessage_bodyNull() {
                this[this.tableuser_message.message_bodyColumn] = System.Convert.DBNull;
            }
            
            public bool Iscreate_dateNull() {
                return this.IsNull(this.tableuser_message.create_dateColumn);
            }
            
            public void Setcreate_dateNull() {
                this[this.tableuser_message.create_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isreply_codeNull() {
                return this.IsNull(this.tableuser_message.reply_codeColumn);
            }
            
            public void Setreply_codeNull() {
                this[this.tableuser_message.reply_codeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdeletedNull() {
                return this.IsNull(this.tableuser_message.deletedColumn);
            }
            
            public void SetdeletedNull() {
                this[this.tableuser_message.deletedColumn] = System.Convert.DBNull;
            }
            
            public bool Ismessage_subjectNull() {
                return this.IsNull(this.tableuser_message.message_subjectColumn);
            }
            
            public void Setmessage_subjectNull() {
                this[this.tableuser_message.message_subjectColumn] = System.Convert.DBNull;
            }
            
            public message_sendRow[] Getmessage_sendRows() {
                return ((message_sendRow[])(this.GetChildRows(this.Table.ChildRelations["user_messagemessage_send"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class user_messageRowChangeEvent : EventArgs {
            
            private user_messageRow eventRow;
            
            private DataRowAction eventAction;
            
            public user_messageRowChangeEvent(user_messageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public user_messageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
