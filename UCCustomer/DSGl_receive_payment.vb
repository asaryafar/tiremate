'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSGl_receive_payment
    Inherits DataSet
    
    Private tableGl_receive_payment As Gl_receive_paymentDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Gl_receive_payment")) Is Nothing) Then
                Me.Tables.Add(New Gl_receive_paymentDataTable(ds.Tables("Gl_receive_payment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Gl_receive_payment As Gl_receive_paymentDataTable
        Get
            Return Me.tableGl_receive_payment
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSGl_receive_payment = CType(MyBase.Clone,DSGl_receive_payment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Gl_receive_payment")) Is Nothing) Then
            Me.Tables.Add(New Gl_receive_paymentDataTable(ds.Tables("Gl_receive_payment")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGl_receive_payment = CType(Me.Tables("Gl_receive_payment"),Gl_receive_paymentDataTable)
        If (Not (Me.tableGl_receive_payment) Is Nothing) Then
            Me.tableGl_receive_payment.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSGl_receive_payment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSGl_receive_payment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGl_receive_payment = New Gl_receive_paymentDataTable
        Me.Tables.Add(Me.tableGl_receive_payment)
    End Sub
    
    Private Function ShouldSerializeGl_receive_payment() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Gl_receive_paymentRowChangeEventHandler(ByVal sender As Object, ByVal e As Gl_receive_paymentRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_receive_paymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnamount_receive As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnpmt_method As DataColumn
        
        Private columncc_type As DataColumn
        
        Private columncc_no As DataColumn
        
        Private columnGl_account As DataColumn
        
        Private columndate_receive_payment As DataColumn
        
        Private columncheck_no As DataColumn
        
        Private columnexpir_date_year As DataColumn
        
        Private columnexpir_date_month As DataColumn
        
        Friend Sub New()
            MyBase.New("Gl_receive_payment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property amount_receiveColumn As DataColumn
            Get
                Return Me.columnamount_receive
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property pmt_methodColumn As DataColumn
            Get
                Return Me.columnpmt_method
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_noColumn As DataColumn
            Get
                Return Me.columncc_no
            End Get
        End Property
        
        Friend ReadOnly Property Gl_accountColumn As DataColumn
            Get
                Return Me.columnGl_account
            End Get
        End Property
        
        Friend ReadOnly Property date_receive_paymentColumn As DataColumn
            Get
                Return Me.columndate_receive_payment
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Friend ReadOnly Property expir_date_yearColumn As DataColumn
            Get
                Return Me.columnexpir_date_year
            End Get
        End Property
        
        Friend ReadOnly Property expir_date_monthColumn As DataColumn
            Get
                Return Me.columnexpir_date_month
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Gl_receive_paymentRow
            Get
                Return CType(Me.Rows(index),Gl_receive_paymentRow)
            End Get
        End Property
        
        Public Event Gl_receive_paymentRowChanged As Gl_receive_paymentRowChangeEventHandler
        
        Public Event Gl_receive_paymentRowChanging As Gl_receive_paymentRowChangeEventHandler
        
        Public Event Gl_receive_paymentRowDeleted As Gl_receive_paymentRowChangeEventHandler
        
        Public Event Gl_receive_paymentRowDeleting As Gl_receive_paymentRowChangeEventHandler
        
        Public Overloads Sub AddGl_receive_paymentRow(ByVal row As Gl_receive_paymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGl_receive_paymentRow(ByVal refrence_no As String, ByVal cod_customer As String, ByVal amount_receive As Single, ByVal remark As String, ByVal pmt_method As String, ByVal cc_type As String, ByVal cc_no As String, ByVal Gl_account As String, ByVal date_receive_payment As String, ByVal check_no As String, ByVal expir_date_year As String, ByVal expir_date_month As String) As Gl_receive_paymentRow
            Dim rowGl_receive_paymentRow As Gl_receive_paymentRow = CType(Me.NewRow,Gl_receive_paymentRow)
            rowGl_receive_paymentRow.ItemArray = New Object() {refrence_no, cod_customer, amount_receive, remark, pmt_method, cc_type, cc_no, Gl_account, date_receive_payment, check_no, expir_date_year, expir_date_month}
            Me.Rows.Add(rowGl_receive_paymentRow)
            Return rowGl_receive_paymentRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As Gl_receive_paymentRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),Gl_receive_paymentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Gl_receive_paymentDataTable = CType(MyBase.Clone,Gl_receive_paymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Gl_receive_paymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnamount_receive = Me.Columns("amount_receive")
            Me.columnremark = Me.Columns("remark")
            Me.columnpmt_method = Me.Columns("pmt_method")
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_no = Me.Columns("cc_no")
            Me.columnGl_account = Me.Columns("Gl_account")
            Me.columndate_receive_payment = Me.Columns("date_receive_payment")
            Me.columncheck_no = Me.Columns("check_no")
            Me.columnexpir_date_year = Me.Columns("expir_date_year")
            Me.columnexpir_date_month = Me.Columns("expir_date_month")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnamount_receive = New DataColumn("amount_receive", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_receive)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnpmt_method = New DataColumn("pmt_method", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpmt_method)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_no = New DataColumn("cc_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_no)
            Me.columnGl_account = New DataColumn("Gl_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account)
            Me.columndate_receive_payment = New DataColumn("date_receive_payment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive_payment)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.columnexpir_date_year = New DataColumn("expir_date_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexpir_date_year)
            Me.columnexpir_date_month = New DataColumn("expir_date_month", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexpir_date_month)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
        End Sub
        
        Public Function NewGl_receive_paymentRow() As Gl_receive_paymentRow
            Return CType(Me.NewRow,Gl_receive_paymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Gl_receive_paymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Gl_receive_paymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Gl_receive_paymentRowChangedEvent) Is Nothing) Then
                RaiseEvent Gl_receive_paymentRowChanged(Me, New Gl_receive_paymentRowChangeEvent(CType(e.Row,Gl_receive_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Gl_receive_paymentRowChangingEvent) Is Nothing) Then
                RaiseEvent Gl_receive_paymentRowChanging(Me, New Gl_receive_paymentRowChangeEvent(CType(e.Row,Gl_receive_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Gl_receive_paymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent Gl_receive_paymentRowDeleted(Me, New Gl_receive_paymentRowChangeEvent(CType(e.Row,Gl_receive_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Gl_receive_paymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent Gl_receive_paymentRowDeleting(Me, New Gl_receive_paymentRowChangeEvent(CType(e.Row,Gl_receive_paymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGl_receive_paymentRow(ByVal row As Gl_receive_paymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_receive_paymentRow
        Inherits DataRow
        
        Private tableGl_receive_payment As Gl_receive_paymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGl_receive_payment = CType(Me.Table,Gl_receive_paymentDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGl_receive_payment.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGl_receive_payment.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property amount_receive As Single
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.amount_receiveColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.amount_receiveColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.remarkColumn) = value
            End Set
        End Property
        
        Public Property pmt_method As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.pmt_methodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.pmt_methodColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.cc_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.cc_noColumn) = value
            End Set
        End Property
        
        Public Property Gl_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.Gl_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.Gl_accountColumn) = value
            End Set
        End Property
        
        Public Property date_receive_payment As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.date_receive_paymentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.date_receive_paymentColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.check_noColumn) = value
            End Set
        End Property
        
        Public Property expir_date_year As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.expir_date_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.expir_date_yearColumn) = value
            End Set
        End Property
        
        Public Property expir_date_month As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_receive_payment.expir_date_monthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_receive_payment.expir_date_monthColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGl_receive_payment.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_receiveNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.amount_receiveColumn)
        End Function
        
        Public Sub Setamount_receiveNull()
            Me(Me.tableGl_receive_payment.amount_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGl_receive_payment.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispmt_methodNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.pmt_methodColumn)
        End Function
        
        Public Sub Setpmt_methodNull()
            Me(Me.tableGl_receive_payment.pmt_methodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableGl_receive_payment.cc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_noNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.cc_noColumn)
        End Function
        
        Public Sub Setcc_noNull()
            Me(Me.tableGl_receive_payment.cc_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_accountNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.Gl_accountColumn)
        End Function
        
        Public Sub SetGl_accountNull()
            Me(Me.tableGl_receive_payment.Gl_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_receive_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.date_receive_paymentColumn)
        End Function
        
        Public Sub Setdate_receive_paymentNull()
            Me(Me.tableGl_receive_payment.date_receive_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableGl_receive_payment.check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isexpir_date_yearNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.expir_date_yearColumn)
        End Function
        
        Public Sub Setexpir_date_yearNull()
            Me(Me.tableGl_receive_payment.expir_date_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isexpir_date_monthNull() As Boolean
            Return Me.IsNull(Me.tableGl_receive_payment.expir_date_monthColumn)
        End Function
        
        Public Sub Setexpir_date_monthNull()
            Me(Me.tableGl_receive_payment.expir_date_monthColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_receive_paymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Gl_receive_paymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Gl_receive_paymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Gl_receive_paymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
