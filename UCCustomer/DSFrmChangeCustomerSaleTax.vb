'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmChangeCustomerSaleTax
    Inherits DataSet
    
    Private tableOldcust_sales_tax As Oldcust_sales_taxDataTable
    
    Private tableNewcust_sales_tax As Newcust_sales_taxDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Oldcust_sales_tax")) Is Nothing) Then
                Me.Tables.Add(New Oldcust_sales_taxDataTable(ds.Tables("Oldcust_sales_tax")))
            End If
            If (Not (ds.Tables("Newcust_sales_tax")) Is Nothing) Then
                Me.Tables.Add(New Newcust_sales_taxDataTable(ds.Tables("Newcust_sales_tax")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Oldcust_sales_tax As Oldcust_sales_taxDataTable
        Get
            Return Me.tableOldcust_sales_tax
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Newcust_sales_tax As Newcust_sales_taxDataTable
        Get
            Return Me.tableNewcust_sales_tax
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmChangeCustomerSaleTax = CType(MyBase.Clone,DSFrmChangeCustomerSaleTax)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Oldcust_sales_tax")) Is Nothing) Then
            Me.Tables.Add(New Oldcust_sales_taxDataTable(ds.Tables("Oldcust_sales_tax")))
        End If
        If (Not (ds.Tables("Newcust_sales_tax")) Is Nothing) Then
            Me.Tables.Add(New Newcust_sales_taxDataTable(ds.Tables("Newcust_sales_tax")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOldcust_sales_tax = CType(Me.Tables("Oldcust_sales_tax"),Oldcust_sales_taxDataTable)
        If (Not (Me.tableOldcust_sales_tax) Is Nothing) Then
            Me.tableOldcust_sales_tax.InitVars
        End If
        Me.tableNewcust_sales_tax = CType(Me.Tables("Newcust_sales_tax"),Newcust_sales_taxDataTable)
        If (Not (Me.tableNewcust_sales_tax) Is Nothing) Then
            Me.tableNewcust_sales_tax.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmChangeCustomerSaleTax"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmChangeCustomerSaleTax.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOldcust_sales_tax = New Oldcust_sales_taxDataTable
        Me.Tables.Add(Me.tableOldcust_sales_tax)
        Me.tableNewcust_sales_tax = New Newcust_sales_taxDataTable
        Me.Tables.Add(Me.tableNewcust_sales_tax)
    End Sub
    
    Private Function ShouldSerializeOldcust_sales_tax() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNewcust_sales_tax() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Oldcust_sales_taxRowChangeEventHandler(ByVal sender As Object, ByVal e As Oldcust_sales_taxRowChangeEvent)
    
    Public Delegate Sub Newcust_sales_taxRowChangeEventHandler(ByVal sender As Object, ByVal e As Newcust_sales_taxRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Oldcust_sales_taxDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sales_tax As DataColumn
        
        Private columndesc_sales_tax As DataColumn
        
        Private columnAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("Oldcust_sales_tax")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_taxColumn As DataColumn
            Get
                Return Me.columndesc_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Oldcust_sales_taxRow
            Get
                Return CType(Me.Rows(index),Oldcust_sales_taxRow)
            End Get
        End Property
        
        Public Event Oldcust_sales_taxRowChanged As Oldcust_sales_taxRowChangeEventHandler
        
        Public Event Oldcust_sales_taxRowChanging As Oldcust_sales_taxRowChangeEventHandler
        
        Public Event Oldcust_sales_taxRowDeleted As Oldcust_sales_taxRowChangeEventHandler
        
        Public Event Oldcust_sales_taxRowDeleting As Oldcust_sales_taxRowChangeEventHandler
        
        Public Overloads Sub AddOldcust_sales_taxRow(ByVal row As Oldcust_sales_taxRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOldcust_sales_taxRow(ByVal cod_sales_tax As String, ByVal desc_sales_tax As String, ByVal Amount As Decimal) As Oldcust_sales_taxRow
            Dim rowOldcust_sales_taxRow As Oldcust_sales_taxRow = CType(Me.NewRow,Oldcust_sales_taxRow)
            rowOldcust_sales_taxRow.ItemArray = New Object() {cod_sales_tax, desc_sales_tax, Amount}
            Me.Rows.Add(rowOldcust_sales_taxRow)
            Return rowOldcust_sales_taxRow
        End Function
        
        Public Function FindBycod_sales_tax(ByVal cod_sales_tax As String) As Oldcust_sales_taxRow
            Return CType(Me.Rows.Find(New Object() {cod_sales_tax}),Oldcust_sales_taxRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Oldcust_sales_taxDataTable = CType(MyBase.Clone,Oldcust_sales_taxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Oldcust_sales_taxDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columndesc_sales_tax = Me.Columns("desc_sales_tax")
            Me.columnAmount = Me.Columns("Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columndesc_sales_tax = New DataColumn("desc_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_tax)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_sales_tax}, true))
            Me.columncod_sales_tax.AllowDBNull = false
            Me.columncod_sales_tax.Unique = true
            Me.columnAmount.AllowDBNull = false
        End Sub
        
        Public Function NewOldcust_sales_taxRow() As Oldcust_sales_taxRow
            Return CType(Me.NewRow,Oldcust_sales_taxRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Oldcust_sales_taxRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Oldcust_sales_taxRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Oldcust_sales_taxRowChangedEvent) Is Nothing) Then
                RaiseEvent Oldcust_sales_taxRowChanged(Me, New Oldcust_sales_taxRowChangeEvent(CType(e.Row,Oldcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Oldcust_sales_taxRowChangingEvent) Is Nothing) Then
                RaiseEvent Oldcust_sales_taxRowChanging(Me, New Oldcust_sales_taxRowChangeEvent(CType(e.Row,Oldcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Oldcust_sales_taxRowDeletedEvent) Is Nothing) Then
                RaiseEvent Oldcust_sales_taxRowDeleted(Me, New Oldcust_sales_taxRowChangeEvent(CType(e.Row,Oldcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Oldcust_sales_taxRowDeletingEvent) Is Nothing) Then
                RaiseEvent Oldcust_sales_taxRowDeleting(Me, New Oldcust_sales_taxRowChangeEvent(CType(e.Row,Oldcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOldcust_sales_taxRow(ByVal row As Oldcust_sales_taxRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Oldcust_sales_taxRow
        Inherits DataRow
        
        Private tableOldcust_sales_tax As Oldcust_sales_taxDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOldcust_sales_tax = CType(Me.Table,Oldcust_sales_taxDataTable)
        End Sub
        
        Public Property cod_sales_tax As String
            Get
                Return CType(Me(Me.tableOldcust_sales_tax.cod_sales_taxColumn),String)
            End Get
            Set
                Me(Me.tableOldcust_sales_tax.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tableOldcust_sales_tax.desc_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOldcust_sales_tax.desc_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Return CType(Me(Me.tableOldcust_sales_tax.AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableOldcust_sales_tax.AmountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tableOldcust_sales_tax.desc_sales_taxColumn)
        End Function
        
        Public Sub Setdesc_sales_taxNull()
            Me(Me.tableOldcust_sales_tax.desc_sales_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Oldcust_sales_taxRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Oldcust_sales_taxRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Oldcust_sales_taxRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Oldcust_sales_taxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Newcust_sales_taxDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sales_tax As DataColumn
        
        Private columndesc_sales_tax As DataColumn
        
        Private columnAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("Newcust_sales_tax")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_taxColumn As DataColumn
            Get
                Return Me.columndesc_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Newcust_sales_taxRow
            Get
                Return CType(Me.Rows(index),Newcust_sales_taxRow)
            End Get
        End Property
        
        Public Event Newcust_sales_taxRowChanged As Newcust_sales_taxRowChangeEventHandler
        
        Public Event Newcust_sales_taxRowChanging As Newcust_sales_taxRowChangeEventHandler
        
        Public Event Newcust_sales_taxRowDeleted As Newcust_sales_taxRowChangeEventHandler
        
        Public Event Newcust_sales_taxRowDeleting As Newcust_sales_taxRowChangeEventHandler
        
        Public Overloads Sub AddNewcust_sales_taxRow(ByVal row As Newcust_sales_taxRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNewcust_sales_taxRow(ByVal cod_sales_tax As String, ByVal desc_sales_tax As String, ByVal Amount As Decimal) As Newcust_sales_taxRow
            Dim rowNewcust_sales_taxRow As Newcust_sales_taxRow = CType(Me.NewRow,Newcust_sales_taxRow)
            rowNewcust_sales_taxRow.ItemArray = New Object() {cod_sales_tax, desc_sales_tax, Amount}
            Me.Rows.Add(rowNewcust_sales_taxRow)
            Return rowNewcust_sales_taxRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Newcust_sales_taxDataTable = CType(MyBase.Clone,Newcust_sales_taxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Newcust_sales_taxDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columndesc_sales_tax = Me.Columns("desc_sales_tax")
            Me.columnAmount = Me.Columns("Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columndesc_sales_tax = New DataColumn("desc_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_tax)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columncod_sales_tax.AllowDBNull = false
            Me.columnAmount.AllowDBNull = false
        End Sub
        
        Public Function NewNewcust_sales_taxRow() As Newcust_sales_taxRow
            Return CType(Me.NewRow,Newcust_sales_taxRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Newcust_sales_taxRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Newcust_sales_taxRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Newcust_sales_taxRowChangedEvent) Is Nothing) Then
                RaiseEvent Newcust_sales_taxRowChanged(Me, New Newcust_sales_taxRowChangeEvent(CType(e.Row,Newcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Newcust_sales_taxRowChangingEvent) Is Nothing) Then
                RaiseEvent Newcust_sales_taxRowChanging(Me, New Newcust_sales_taxRowChangeEvent(CType(e.Row,Newcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Newcust_sales_taxRowDeletedEvent) Is Nothing) Then
                RaiseEvent Newcust_sales_taxRowDeleted(Me, New Newcust_sales_taxRowChangeEvent(CType(e.Row,Newcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Newcust_sales_taxRowDeletingEvent) Is Nothing) Then
                RaiseEvent Newcust_sales_taxRowDeleting(Me, New Newcust_sales_taxRowChangeEvent(CType(e.Row,Newcust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNewcust_sales_taxRow(ByVal row As Newcust_sales_taxRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Newcust_sales_taxRow
        Inherits DataRow
        
        Private tableNewcust_sales_tax As Newcust_sales_taxDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNewcust_sales_tax = CType(Me.Table,Newcust_sales_taxDataTable)
        End Sub
        
        Public Property cod_sales_tax As String
            Get
                Return CType(Me(Me.tableNewcust_sales_tax.cod_sales_taxColumn),String)
            End Get
            Set
                Me(Me.tableNewcust_sales_tax.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tableNewcust_sales_tax.desc_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewcust_sales_tax.desc_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Return CType(Me(Me.tableNewcust_sales_tax.AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableNewcust_sales_tax.AmountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tableNewcust_sales_tax.desc_sales_taxColumn)
        End Function
        
        Public Sub Setdesc_sales_taxNull()
            Me(Me.tableNewcust_sales_tax.desc_sales_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Newcust_sales_taxRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Newcust_sales_taxRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Newcust_sales_taxRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Newcust_sales_taxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
