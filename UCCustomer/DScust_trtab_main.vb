'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DScust_trtab_main
    Inherits DataSet
    
    Private tablecust_trtab_main As cust_trtab_mainDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
                Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_trtab_main As cust_trtab_mainDataTable
        Get
            Return Me.tablecust_trtab_main
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DScust_trtab_main = CType(MyBase.Clone,DScust_trtab_main)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
            Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecust_trtab_main = CType(Me.Tables("cust_trtab_main"),cust_trtab_mainDataTable)
        If (Not (Me.tablecust_trtab_main) Is Nothing) Then
            Me.tablecust_trtab_main.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DScust_trtab_main"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DScust_trtab_main.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecust_trtab_main = New cust_trtab_mainDataTable
        Me.Tables.Add(Me.tablecust_trtab_main)
    End Sub
    
    Private Function ShouldSerializecust_trtab_main() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cust_trtab_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_trtab_mainRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnvip_code As DataColumn
        
        Private columncod_company As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columndriver_name As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnemail As DataColumn
        
        Private columncod_sales_rep As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columncust_exempt_tax As DataColumn
        
        Private columnscrap_check As DataColumn
        
        Private columnscrap_value As DataColumn
        
        Private columncredit_card_no As DataColumn
        
        Private columnexpiration_credit_date As DataColumn
        
        Private columncredit_limited As DataColumn
        
        Private columnAR_charge As DataColumn
        
        Private columnAR_term As DataColumn
        
        Private columncod_sales_tax As DataColumn
        
        Private columncod_price As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columncod_source As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_territory As DataColumn
        
        Private columndesc_sales_report As DataColumn
        
        Private columnuser_id As DataColumn
        
        Private columnuser_password As DataColumn
        
        Private columnAR_statement As DataColumn
        
        Private columnAR_send_copy As DataColumn
        
        Private columnAR_finance_charge As DataColumn
        
        Private columnAR_require_PO As DataColumn
        
        Private columnAR_credit_hold As DataColumn
        
        Private columnAR_accept_check As DataColumn
        
        Private columncust_notes As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columnInactive As DataColumn
        
        Private columnCustomer_No As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_trtab_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property vip_codeColumn As DataColumn
            Get
                Return Me.columnvip_code
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property driver_nameColumn As DataColumn
            Get
                Return Me.columndriver_name
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_repColumn As DataColumn
            Get
                Return Me.columncod_sales_rep
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property cust_exempt_taxColumn As DataColumn
            Get
                Return Me.columncust_exempt_tax
            End Get
        End Property
        
        Friend ReadOnly Property scrap_checkColumn As DataColumn
            Get
                Return Me.columnscrap_check
            End Get
        End Property
        
        Friend ReadOnly Property scrap_valueColumn As DataColumn
            Get
                Return Me.columnscrap_value
            End Get
        End Property
        
        Friend ReadOnly Property credit_card_noColumn As DataColumn
            Get
                Return Me.columncredit_card_no
            End Get
        End Property
        
        Friend ReadOnly Property expiration_credit_dateColumn As DataColumn
            Get
                Return Me.columnexpiration_credit_date
            End Get
        End Property
        
        Friend ReadOnly Property credit_limitedColumn As DataColumn
            Get
                Return Me.columncredit_limited
            End Get
        End Property
        
        Friend ReadOnly Property AR_chargeColumn As DataColumn
            Get
                Return Me.columnAR_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_termColumn As DataColumn
            Get
                Return Me.columnAR_term
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property cod_priceColumn As DataColumn
            Get
                Return Me.columncod_price
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_reportColumn As DataColumn
            Get
                Return Me.columndesc_sales_report
            End Get
        End Property
        
        Friend ReadOnly Property user_idColumn As DataColumn
            Get
                Return Me.columnuser_id
            End Get
        End Property
        
        Friend ReadOnly Property user_passwordColumn As DataColumn
            Get
                Return Me.columnuser_password
            End Get
        End Property
        
        Friend ReadOnly Property AR_statementColumn As DataColumn
            Get
                Return Me.columnAR_statement
            End Get
        End Property
        
        Friend ReadOnly Property AR_send_copyColumn As DataColumn
            Get
                Return Me.columnAR_send_copy
            End Get
        End Property
        
        Friend ReadOnly Property AR_finance_chargeColumn As DataColumn
            Get
                Return Me.columnAR_finance_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_require_POColumn As DataColumn
            Get
                Return Me.columnAR_require_PO
            End Get
        End Property
        
        Friend ReadOnly Property AR_credit_holdColumn As DataColumn
            Get
                Return Me.columnAR_credit_hold
            End Get
        End Property
        
        Friend ReadOnly Property AR_accept_checkColumn As DataColumn
            Get
                Return Me.columnAR_accept_check
            End Get
        End Property
        
        Friend ReadOnly Property cust_notesColumn As DataColumn
            Get
                Return Me.columncust_notes
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property InactiveColumn As DataColumn
            Get
                Return Me.columnInactive
            End Get
        End Property
        
        Friend ReadOnly Property Customer_NoColumn As DataColumn
            Get
                Return Me.columnCustomer_No
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_trtab_mainRow
            Get
                Return CType(Me.Rows(index),cust_trtab_mainRow)
            End Get
        End Property
        
        Public Event cust_trtab_mainRowChanged As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowChanging As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleted As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleting As cust_trtab_mainRowChangeEventHandler
        
        Public Overloads Sub Addcust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_trtab_mainRow( _
                    ByVal cod_customer As String,  _
                    ByVal vip_code As String,  _
                    ByVal cod_company As String,  _
                    ByVal f_name As String,  _
                    ByVal m_name As String,  _
                    ByVal l_name As String,  _
                    ByVal address As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal driver_name As String,  _
                    ByVal zip As String,  _
                    ByVal email As String,  _
                    ByVal cod_sales_rep As String,  _
                    ByVal social_security_no As String,  _
                    ByVal cust_exempt_tax As Single,  _
                    ByVal scrap_check As Boolean,  _
                    ByVal scrap_value As Single,  _
                    ByVal credit_card_no As String,  _
                    ByVal expiration_credit_date As String,  _
                    ByVal credit_limited As Single,  _
                    ByVal AR_charge As Boolean,  _
                    ByVal AR_term As String,  _
                    ByVal cod_sales_tax As String,  _
                    ByVal cod_price As String,  _
                    ByVal discount As Single,  _
                    ByVal cod_type As String,  _
                    ByVal cod_source As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_territory As String,  _
                    ByVal desc_sales_report As String,  _
                    ByVal user_id As String,  _
                    ByVal user_password As String,  _
                    ByVal AR_statement As Boolean,  _
                    ByVal AR_send_copy As Boolean,  _
                    ByVal AR_finance_charge As Boolean,  _
                    ByVal AR_require_PO As Boolean,  _
                    ByVal AR_credit_hold As Boolean,  _
                    ByVal AR_accept_check As Boolean,  _
                    ByVal cust_notes As String,  _
                    ByVal Taxable As Boolean,  _
                    ByVal Inactive As Boolean,  _
                    ByVal Customer_No As String) As cust_trtab_mainRow
            Dim rowcust_trtab_mainRow As cust_trtab_mainRow = CType(Me.NewRow,cust_trtab_mainRow)
            rowcust_trtab_mainRow.ItemArray = New Object() {cod_customer, vip_code, cod_company, f_name, m_name, l_name, address, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, driver_name, zip, email, cod_sales_rep, social_security_no, cust_exempt_tax, scrap_check, scrap_value, credit_card_no, expiration_credit_date, credit_limited, AR_charge, AR_term, cod_sales_tax, cod_price, discount, cod_type, cod_source, cod_class, cod_territory, desc_sales_report, user_id, user_password, AR_statement, AR_send_copy, AR_finance_charge, AR_require_PO, AR_credit_hold, AR_accept_check, cust_notes, Taxable, Inactive, Customer_No}
            Me.Rows.Add(rowcust_trtab_mainRow)
            Return rowcust_trtab_mainRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As cust_trtab_mainRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),cust_trtab_mainRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_trtab_mainDataTable = CType(MyBase.Clone,cust_trtab_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_trtab_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnvip_code = Me.Columns("vip_code")
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columndriver_name = Me.Columns("driver_name")
            Me.columnzip = Me.Columns("zip")
            Me.columnemail = Me.Columns("email")
            Me.columncod_sales_rep = Me.Columns("cod_sales_rep")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columncust_exempt_tax = Me.Columns("cust_exempt_tax")
            Me.columnscrap_check = Me.Columns("scrap_check")
            Me.columnscrap_value = Me.Columns("scrap_value")
            Me.columncredit_card_no = Me.Columns("credit_card_no")
            Me.columnexpiration_credit_date = Me.Columns("expiration_credit_date")
            Me.columncredit_limited = Me.Columns("credit_limited")
            Me.columnAR_charge = Me.Columns("AR_charge")
            Me.columnAR_term = Me.Columns("AR_term")
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columncod_price = Me.Columns("cod_price")
            Me.columndiscount = Me.Columns("discount")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columncod_source = Me.Columns("cod_source")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columndesc_sales_report = Me.Columns("desc_sales_report")
            Me.columnuser_id = Me.Columns("user_id")
            Me.columnuser_password = Me.Columns("user_password")
            Me.columnAR_statement = Me.Columns("AR_statement")
            Me.columnAR_send_copy = Me.Columns("AR_send_copy")
            Me.columnAR_finance_charge = Me.Columns("AR_finance_charge")
            Me.columnAR_require_PO = Me.Columns("AR_require_PO")
            Me.columnAR_credit_hold = Me.Columns("AR_credit_hold")
            Me.columnAR_accept_check = Me.Columns("AR_accept_check")
            Me.columncust_notes = Me.Columns("cust_notes")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columnInactive = Me.Columns("Inactive")
            Me.columnCustomer_No = Me.Columns("Customer_No")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnvip_code = New DataColumn("vip_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvip_code)
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columndriver_name = New DataColumn("driver_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncod_sales_rep = New DataColumn("cod_sales_rep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_rep)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columncust_exempt_tax = New DataColumn("cust_exempt_tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_exempt_tax)
            Me.columnscrap_check = New DataColumn("scrap_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_check)
            Me.columnscrap_value = New DataColumn("scrap_value", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_value)
            Me.columncredit_card_no = New DataColumn("credit_card_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_card_no)
            Me.columnexpiration_credit_date = New DataColumn("expiration_credit_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexpiration_credit_date)
            Me.columncredit_limited = New DataColumn("credit_limited", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_limited)
            Me.columnAR_charge = New DataColumn("AR_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_charge)
            Me.columnAR_term = New DataColumn("AR_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_term)
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columncod_price = New DataColumn("cod_price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_price)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columndesc_sales_report = New DataColumn("desc_sales_report", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_report)
            Me.columnuser_id = New DataColumn("user_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_id)
            Me.columnuser_password = New DataColumn("user_password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_password)
            Me.columnAR_statement = New DataColumn("AR_statement", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_statement)
            Me.columnAR_send_copy = New DataColumn("AR_send_copy", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_send_copy)
            Me.columnAR_finance_charge = New DataColumn("AR_finance_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_finance_charge)
            Me.columnAR_require_PO = New DataColumn("AR_require_PO", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_require_PO)
            Me.columnAR_credit_hold = New DataColumn("AR_credit_hold", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_credit_hold)
            Me.columnAR_accept_check = New DataColumn("AR_accept_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_accept_check)
            Me.columncust_notes = New DataColumn("cust_notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_notes)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columnInactive = New DataColumn("Inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInactive)
            Me.columnCustomer_No = New DataColumn("Customer_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomer_No)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function Newcust_trtab_mainRow() As cust_trtab_mainRow
            Return CType(Me.NewRow,cust_trtab_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_trtab_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_trtab_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_trtab_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanged(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_trtab_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanging(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_trtab_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleted(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_trtab_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleting(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRow
        Inherits DataRow
        
        Private tablecust_trtab_main As cust_trtab_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_trtab_main = CType(Me.Table,cust_trtab_mainDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecust_trtab_main.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property vip_code As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.vip_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.vip_codeColumn) = value
            End Set
        End Property
        
        Public Property cod_company As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.f_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.m_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.l_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.addressColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property driver_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_nameColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.zipColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.emailColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_rep As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_repColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_repColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property cust_exempt_tax As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_exempt_taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = value
            End Set
        End Property
        
        Public Property scrap_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_checkColumn) = value
            End Set
        End Property
        
        Public Property scrap_value As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_valueColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_valueColumn) = value
            End Set
        End Property
        
        Public Property credit_card_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_card_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_card_noColumn) = value
            End Set
        End Property
        
        Public Property expiration_credit_date As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.expiration_credit_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = value
            End Set
        End Property
        
        Public Property credit_limited As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_limitedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_limitedColumn) = value
            End Set
        End Property
        
        Public Property AR_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_term As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_termColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property cod_price As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_priceColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.discountColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_source As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_territory As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_report As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.desc_sales_reportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = value
            End Set
        End Property
        
        Public Property user_id As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_idColumn) = value
            End Set
        End Property
        
        Public Property user_password As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_passwordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_passwordColumn) = value
            End Set
        End Property
        
        Public Property AR_statement As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_statementColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_statementColumn) = value
            End Set
        End Property
        
        Public Property AR_send_copy As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_send_copyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_send_copyColumn) = value
            End Set
        End Property
        
        Public Property AR_finance_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_finance_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_require_PO As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_require_POColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_require_POColumn) = value
            End Set
        End Property
        
        Public Property AR_credit_hold As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_credit_holdColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = value
            End Set
        End Property
        
        Public Property AR_accept_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_accept_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = value
            End Set
        End Property
        
        Public Property cust_notes As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_notesColumn) = value
            End Set
        End Property
        
        Public Property Taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.TaxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.TaxableColumn) = value
            End Set
        End Property
        
        Public Property Inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.InactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.InactiveColumn) = value
            End Set
        End Property
        
        Public Property Customer_No As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.Customer_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.Customer_NoColumn) = value
            End Set
        End Property
        
        Public Function Isvip_codeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.vip_codeColumn)
        End Function
        
        Public Sub Setvip_codeNull()
            Me(Me.tablecust_trtab_main.vip_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_companyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_companyColumn)
        End Function
        
        Public Sub Setcod_companyNull()
            Me(Me.tablecust_trtab_main.cod_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecust_trtab_main.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tablecust_trtab_main.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecust_trtab_main.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablecust_trtab_main.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablecust_trtab_main.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablecust_trtab_main.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablecust_trtab_main.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablecust_trtab_main.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablecust_trtab_main.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablecust_trtab_main.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablecust_trtab_main.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablecust_trtab_main.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablecust_trtab_main.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablecust_trtab_main.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablecust_trtab_main.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablecust_trtab_main.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablecust_trtab_main.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablecust_trtab_main.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablecust_trtab_main.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablecust_trtab_main.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablecust_trtab_main.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablecust_trtab_main.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablecust_trtab_main.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablecust_trtab_main.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_nameColumn)
        End Function
        
        Public Sub Setdriver_nameNull()
            Me(Me.tablecust_trtab_main.driver_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablecust_trtab_main.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablecust_trtab_main.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_repNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_repColumn)
        End Function
        
        Public Sub Setcod_sales_repNull()
            Me(Me.tablecust_trtab_main.cod_sales_repColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tablecust_trtab_main.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_exempt_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_exempt_taxColumn)
        End Function
        
        Public Sub Setcust_exempt_taxNull()
            Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_checkColumn)
        End Function
        
        Public Sub Setscrap_checkNull()
            Me(Me.tablecust_trtab_main.scrap_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_valueNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_valueColumn)
        End Function
        
        Public Sub Setscrap_valueNull()
            Me(Me.tablecust_trtab_main.scrap_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_card_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_card_noColumn)
        End Function
        
        Public Sub Setcredit_card_noNull()
            Me(Me.tablecust_trtab_main.credit_card_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isexpiration_credit_dateNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.expiration_credit_dateColumn)
        End Function
        
        Public Sub Setexpiration_credit_dateNull()
            Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_limitedNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_limitedColumn)
        End Function
        
        Public Sub Setcredit_limitedNull()
            Me(Me.tablecust_trtab_main.credit_limitedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_chargeColumn)
        End Function
        
        Public Sub SetAR_chargeNull()
            Me(Me.tablecust_trtab_main.AR_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_termColumn)
        End Function
        
        Public Sub SetAR_termNull()
            Me(Me.tablecust_trtab_main.AR_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_taxColumn)
        End Function
        
        Public Sub Setcod_sales_taxNull()
            Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_priceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_priceColumn)
        End Function
        
        Public Sub Setcod_priceNull()
            Me(Me.tablecust_trtab_main.cod_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tablecust_trtab_main.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tablecust_trtab_main.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sourceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sourceColumn)
        End Function
        
        Public Sub Setcod_sourceNull()
            Me(Me.tablecust_trtab_main.cod_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tablecust_trtab_main.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_territoryNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_territoryColumn)
        End Function
        
        Public Sub Setcod_territoryNull()
            Me(Me.tablecust_trtab_main.cod_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sales_reportNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.desc_sales_reportColumn)
        End Function
        
        Public Sub Setdesc_sales_reportNull()
            Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_idNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_idColumn)
        End Function
        
        Public Sub Setuser_idNull()
            Me(Me.tablecust_trtab_main.user_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_passwordNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_passwordColumn)
        End Function
        
        Public Sub Setuser_passwordNull()
            Me(Me.tablecust_trtab_main.user_passwordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_statementNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_statementColumn)
        End Function
        
        Public Sub SetAR_statementNull()
            Me(Me.tablecust_trtab_main.AR_statementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_send_copyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_send_copyColumn)
        End Function
        
        Public Sub SetAR_send_copyNull()
            Me(Me.tablecust_trtab_main.AR_send_copyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_finance_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_finance_chargeColumn)
        End Function
        
        Public Sub SetAR_finance_chargeNull()
            Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_require_PONull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_require_POColumn)
        End Function
        
        Public Sub SetAR_require_PONull()
            Me(Me.tablecust_trtab_main.AR_require_POColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_credit_holdNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_credit_holdColumn)
        End Function
        
        Public Sub SetAR_credit_holdNull()
            Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_accept_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_accept_checkColumn)
        End Function
        
        Public Sub SetAR_accept_checkNull()
            Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_notesNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_notesColumn)
        End Function
        
        Public Sub Setcust_notesNull()
            Me(Me.tablecust_trtab_main.cust_notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tablecust_trtab_main.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInactiveNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.InactiveColumn)
        End Function
        
        Public Sub SetInactiveNull()
            Me(Me.tablecust_trtab_main.InactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomer_NoNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.Customer_NoColumn)
        End Function
        
        Public Sub SetCustomer_NoNull()
            Me(Me.tablecust_trtab_main.Customer_NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_trtab_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_trtab_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_trtab_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
