'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmCustomerBalance
    Inherits DataSet
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmCustomerBalance = CType(MyBase.Clone,DSFrmCustomerBalance)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmCustomerBalance"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmCustomerBalance.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
    End Sub
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceNo As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnOldPayment As DataColumn
        
        Private columnDueDate As DataColumn
        
        Private columnPastDue As DataColumn
        
        Private columnDueDateYYYYMMDD As DataColumn
        
        Private columnFlagForBalance As DataColumn
        
        Private columnInvoiceDateYYYYMMDD As DataColumn
        
        Private columnType As DataColumn
        
        Private columnInvoiceNoForOrder As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnCancel_flag As DataColumn
        
        Private columnTypeOfRecord As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnSTORENO As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property OldPaymentColumn As DataColumn
            Get
                Return Me.columnOldPayment
            End Get
        End Property
        
        Friend ReadOnly Property DueDateColumn As DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        Friend ReadOnly Property PastDueColumn As DataColumn
            Get
                Return Me.columnPastDue
            End Get
        End Property
        
        Friend ReadOnly Property DueDateYYYYMMDDColumn As DataColumn
            Get
                Return Me.columnDueDateYYYYMMDD
            End Get
        End Property
        
        Friend ReadOnly Property FlagForBalanceColumn As DataColumn
            Get
                Return Me.columnFlagForBalance
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateYYYYMMDDColumn As DataColumn
            Get
                Return Me.columnInvoiceDateYYYYMMDD
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoForOrderColumn As DataColumn
            Get
                Return Me.columnInvoiceNoForOrder
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property Cancel_flagColumn As DataColumn
            Get
                Return Me.columnCancel_flag
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfRecordColumn As DataColumn
            Get
                Return Me.columnTypeOfRecord
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow( _
                    ByVal InvoiceNo As String,  _
                    ByVal InvoiceDate As String,  _
                    ByVal OriginalAmount As Double,  _
                    ByVal Payment As Double,  _
                    ByVal AmountDue As Double,  _
                    ByVal OldPayment As Double,  _
                    ByVal DueDate As String,  _
                    ByVal PastDue As Integer,  _
                    ByVal DueDateYYYYMMDD As String,  _
                    ByVal FlagForBalance As Boolean,  _
                    ByVal InvoiceDateYYYYMMDD As String,  _
                    ByVal Type As Integer,  _
                    ByVal InvoiceNoForOrder As String,  _
                    ByVal ID_payment As Integer,  _
                    ByVal Cancel_flag As Boolean,  _
                    ByVal TypeOfRecord As Integer,  _
                    ByVal Paid_amount As Double,  _
                    ByVal STORENO As String,  _
                    ByVal SHORTNAME As String) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {InvoiceNo, InvoiceDate, OriginalAmount, Payment, AmountDue, OldPayment, DueDate, PastDue, DueDateYYYYMMDD, FlagForBalance, InvoiceDateYYYYMMDD, Type, InvoiceNoForOrder, ID_payment, Cancel_flag, TypeOfRecord, Paid_amount, STORENO, SHORTNAME}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnOldPayment = Me.Columns("OldPayment")
            Me.columnDueDate = Me.Columns("DueDate")
            Me.columnPastDue = Me.Columns("PastDue")
            Me.columnDueDateYYYYMMDD = Me.Columns("DueDateYYYYMMDD")
            Me.columnFlagForBalance = Me.Columns("FlagForBalance")
            Me.columnInvoiceDateYYYYMMDD = Me.Columns("InvoiceDateYYYYMMDD")
            Me.columnType = Me.Columns("Type")
            Me.columnInvoiceNoForOrder = Me.Columns("InvoiceNoForOrder")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnCancel_flag = Me.Columns("Cancel_flag")
            Me.columnTypeOfRecord = Me.Columns("TypeOfRecord")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnOldPayment = New DataColumn("OldPayment", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOldPayment)
            Me.columnDueDate = New DataColumn("DueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDueDate)
            Me.columnPastDue = New DataColumn("PastDue", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPastDue)
            Me.columnDueDateYYYYMMDD = New DataColumn("DueDateYYYYMMDD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDueDateYYYYMMDD)
            Me.columnFlagForBalance = New DataColumn("FlagForBalance", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagForBalance)
            Me.columnInvoiceDateYYYYMMDD = New DataColumn("InvoiceDateYYYYMMDD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDateYYYYMMDD)
            Me.columnType = New DataColumn("Type", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnInvoiceNoForOrder = New DataColumn("InvoiceNoForOrder", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNoForOrder)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnCancel_flag = New DataColumn("Cancel_flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCancel_flag)
            Me.columnTypeOfRecord = New DataColumn("TypeOfRecord", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfRecord)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnInvoiceNo.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property InvoiceNo As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.InvoiceNoColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.InvoiceDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.OriginalAmountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property Payment As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.PaymentColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.PaymentColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AmountDueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property OldPayment As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.OldPaymentColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.OldPaymentColumn) = value
            End Set
        End Property
        
        Public Property DueDate As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.DueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.DueDateColumn) = value
            End Set
        End Property
        
        Public Property PastDue As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.PastDueColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.PastDueColumn) = value
            End Set
        End Property
        
        Public Property DueDateYYYYMMDD As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.DueDateYYYYMMDDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.DueDateYYYYMMDDColumn) = value
            End Set
        End Property
        
        Public Property FlagForBalance As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.FlagForBalanceColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.FlagForBalanceColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDateYYYYMMDD As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.InvoiceDateYYYYMMDDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceDateYYYYMMDDColumn) = value
            End Set
        End Property
        
        Public Property Type As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.TypeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.TypeColumn) = value
            End Set
        End Property
        
        Public Property InvoiceNoForOrder As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.InvoiceNoForOrderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceNoForOrderColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property Cancel_flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.Cancel_flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.Cancel_flagColumn) = value
            End Set
        End Property
        
        Public Property TypeOfRecord As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.TypeOfRecordColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.TypeOfRecordColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.Paid_amountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property STORENO As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.STORENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.STORENOColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.InvoiceDateColumn)
        End Function
        
        Public Sub SetInvoiceDateNull()
            Me(Me.tableservice_center_dtl.InvoiceDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableservice_center_dtl.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableservice_center_dtl.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableservice_center_dtl.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOldPaymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.OldPaymentColumn)
        End Function
        
        Public Sub SetOldPaymentNull()
            Me(Me.tableservice_center_dtl.OldPaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.DueDateColumn)
        End Function
        
        Public Sub SetDueDateNull()
            Me(Me.tableservice_center_dtl.DueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPastDueNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.PastDueColumn)
        End Function
        
        Public Sub SetPastDueNull()
            Me(Me.tableservice_center_dtl.PastDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDueDateYYYYMMDDNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.DueDateYYYYMMDDColumn)
        End Function
        
        Public Sub SetDueDateYYYYMMDDNull()
            Me(Me.tableservice_center_dtl.DueDateYYYYMMDDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagForBalanceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.FlagForBalanceColumn)
        End Function
        
        Public Sub SetFlagForBalanceNull()
            Me(Me.tableservice_center_dtl.FlagForBalanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoiceDateYYYYMMDDNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.InvoiceDateYYYYMMDDColumn)
        End Function
        
        Public Sub SetInvoiceDateYYYYMMDDNull()
            Me(Me.tableservice_center_dtl.InvoiceDateYYYYMMDDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableservice_center_dtl.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoiceNoForOrderNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.InvoiceNoForOrderColumn)
        End Function
        
        Public Sub SetInvoiceNoForOrderNull()
            Me(Me.tableservice_center_dtl.InvoiceNoForOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableservice_center_dtl.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCancel_flagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.Cancel_flagColumn)
        End Function
        
        Public Sub SetCancel_flagNull()
            Me(Me.tableservice_center_dtl.Cancel_flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfRecordNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.TypeOfRecordColumn)
        End Function
        
        Public Sub SetTypeOfRecordNull()
            Me(Me.tableservice_center_dtl.TypeOfRecordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableservice_center_dtl.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTORENONull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.STORENOColumn)
        End Function
        
        Public Sub SetSTORENONull()
            Me(Me.tableservice_center_dtl.STORENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableservice_center_dtl.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnSTORENO.AllowDBNull = false
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
