'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmReceivePayment
    Inherits DataSet
    
    Private tablebas_cc_type As bas_cc_typeDataTable
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableLOGO As LOGODataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Private tableGL_payment_deposit_Detail As GL_payment_deposit_DetailDataTable
    
    Private tableGridRecord As GridRecordDataTable
    
    Private tableGL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableGL_payment_deposit_ForAdj As GL_payment_deposit_ForAdjDataTable
    
    Private tableGL_debit_deposit As GL_debit_depositDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
                Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
            End If
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            If (Not (ds.Tables("GL_payment_deposit_Detail")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_deposit_DetailDataTable(ds.Tables("GL_payment_deposit_Detail")))
            End If
            If (Not (ds.Tables("GridRecord")) Is Nothing) Then
                Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
            End If
            If (Not (ds.Tables("GL_account_adjustment_dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_dtlDataTable(ds.Tables("GL_account_adjustment_dtl")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("GL_payment_deposit_ForAdj")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_deposit_ForAdjDataTable(ds.Tables("GL_payment_deposit_ForAdj")))
            End If
            If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_cc_type As bas_cc_typeDataTable
        Get
            Return Me.tablebas_cc_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit_Detail As GL_payment_deposit_DetailDataTable
        Get
            Return Me.tableGL_payment_deposit_Detail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GridRecord As GridRecordDataTable
        Get
            Return Me.tableGridRecord
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
        Get
            Return Me.tableGL_account_adjustment_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit_ForAdj As GL_payment_deposit_ForAdjDataTable
        Get
            Return Me.tableGL_payment_deposit_ForAdj
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit As GL_debit_depositDataTable
        Get
            Return Me.tableGL_debit_deposit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmReceivePayment = CType(MyBase.Clone,DSFrmReceivePayment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
            Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
        End If
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        If (Not (ds.Tables("GL_payment_deposit_Detail")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_deposit_DetailDataTable(ds.Tables("GL_payment_deposit_Detail")))
        End If
        If (Not (ds.Tables("GridRecord")) Is Nothing) Then
            Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
        End If
        If (Not (ds.Tables("GL_account_adjustment_dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_dtlDataTable(ds.Tables("GL_account_adjustment_dtl")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("GL_payment_deposit_ForAdj")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_deposit_ForAdjDataTable(ds.Tables("GL_payment_deposit_ForAdj")))
        End If
        If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_cc_type = CType(Me.Tables("bas_cc_type"),bas_cc_typeDataTable)
        If (Not (Me.tablebas_cc_type) Is Nothing) Then
            Me.tablebas_cc_type.InitVars
        End If
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
        Me.tableGL_payment_deposit_Detail = CType(Me.Tables("GL_payment_deposit_Detail"),GL_payment_deposit_DetailDataTable)
        If (Not (Me.tableGL_payment_deposit_Detail) Is Nothing) Then
            Me.tableGL_payment_deposit_Detail.InitVars
        End If
        Me.tableGridRecord = CType(Me.Tables("GridRecord"),GridRecordDataTable)
        If (Not (Me.tableGridRecord) Is Nothing) Then
            Me.tableGridRecord.InitVars
        End If
        Me.tableGL_account_adjustment_dtl = CType(Me.Tables("GL_account_adjustment_dtl"),GL_account_adjustment_dtlDataTable)
        If (Not (Me.tableGL_account_adjustment_dtl) Is Nothing) Then
            Me.tableGL_account_adjustment_dtl.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableGL_payment_deposit_ForAdj = CType(Me.Tables("GL_payment_deposit_ForAdj"),GL_payment_deposit_ForAdjDataTable)
        If (Not (Me.tableGL_payment_deposit_ForAdj) Is Nothing) Then
            Me.tableGL_payment_deposit_ForAdj.InitVars
        End If
        Me.tableGL_debit_deposit = CType(Me.Tables("GL_debit_deposit"),GL_debit_depositDataTable)
        If (Not (Me.tableGL_debit_deposit) Is Nothing) Then
            Me.tableGL_debit_deposit.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmReceivePayment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmReceivePayment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_cc_type = New bas_cc_typeDataTable
        Me.Tables.Add(Me.tablebas_cc_type)
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
        Me.tableGL_payment_deposit_Detail = New GL_payment_deposit_DetailDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit_Detail)
        Me.tableGridRecord = New GridRecordDataTable
        Me.Tables.Add(Me.tableGridRecord)
        Me.tableGL_account_adjustment_dtl = New GL_account_adjustment_dtlDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_dtl)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableGL_payment_deposit_ForAdj = New GL_payment_deposit_ForAdjDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit_ForAdj)
        Me.tableGL_debit_deposit = New GL_debit_depositDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit)
    End Sub
    
    Private Function ShouldSerializebas_cc_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit_Detail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGridRecord() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_adjustment_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit_ForAdj() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_deposit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_cc_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_cc_typeRowChangeEvent)
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    Public Delegate Sub GL_payment_deposit_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_deposit_DetailRowChangeEvent)
    
    Public Delegate Sub GridRecordRowChangeEventHandler(ByVal sender As Object, ByVal e As GridRecordRowChangeEvent)
    
    Public Delegate Sub GL_account_adjustment_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_dtlRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub GL_payment_deposit_ForAdjRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_deposit_ForAdjRowChangeEvent)
    
    Public Delegate Sub GL_debit_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_depositRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncc_type As DataColumn
        
        Private columncc_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_cc_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_type_descColumn As DataColumn
            Get
                Return Me.columncc_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_cc_typeRow
            Get
                Return CType(Me.Rows(index),bas_cc_typeRow)
            End Get
        End Property
        
        Public Event bas_cc_typeRowChanged As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowChanging As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleted As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleting As bas_cc_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_cc_typeRow(ByVal cc_type As String, ByVal cc_type_desc As String) As bas_cc_typeRow
            Dim rowbas_cc_typeRow As bas_cc_typeRow = CType(Me.NewRow,bas_cc_typeRow)
            rowbas_cc_typeRow.ItemArray = New Object() {cc_type, cc_type_desc}
            Me.Rows.Add(rowbas_cc_typeRow)
            Return rowbas_cc_typeRow
        End Function
        
        Public Function FindBycc_type(ByVal cc_type As String) As bas_cc_typeRow
            Return CType(Me.Rows.Find(New Object() {cc_type}),bas_cc_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_cc_typeDataTable = CType(MyBase.Clone,bas_cc_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_cc_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_type_desc = Me.Columns("cc_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_type_desc = New DataColumn("cc_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncc_type}, true))
            Me.columncc_type.AllowDBNull = false
            Me.columncc_type.Unique = true
        End Sub
        
        Public Function Newbas_cc_typeRow() As bas_cc_typeRow
            Return CType(Me.NewRow,bas_cc_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_cc_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_cc_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_cc_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanged(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_cc_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanging(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_cc_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleted(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_cc_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleting(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRow
        Inherits DataRow
        
        Private tablebas_cc_type As bas_cc_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_cc_type = CType(Me.Table,bas_cc_typeDataTable)
        End Sub
        
        Public Property cc_type As String
            Get
                Return CType(Me(Me.tablebas_cc_type.cc_typeColumn),String)
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_cc_type.cc_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_type_descColumn) = value
            End Set
        End Property
        
        Public Function Iscc_type_descNull() As Boolean
            Return Me.IsNull(Me.tablebas_cc_type.cc_type_descColumn)
        End Function
        
        Public Sub Setcc_type_descNull()
            Me(Me.tablebas_cc_type.cc_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_cc_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_cc_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_cc_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnID_payment_due As DataColumn
        
        Private columnDiscount As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property ID_payment_dueColumn As DataColumn
            Get
                Return Me.columnID_payment_due
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow(ByVal id_service_center As String, ByVal refer_type As String, ByVal payment_type As String, ByVal payment_amount As Decimal, ByVal flag_deposit_bank As Boolean, ByVal id_GL_journal As Integer, ByVal Paid_amount As Decimal, ByVal ID_payment_due As Integer, ByVal Discount As Decimal) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {id_service_center, refer_type, payment_type, payment_amount, flag_deposit_bank, id_GL_journal, Paid_amount, Nothing, ID_payment_due, Discount}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnID_payment_due = Me.Columns("ID_payment_due")
            Me.columnDiscount = Me.Columns("Discount")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnID_payment_due = New DataColumn("ID_payment_due", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment_due)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnID_payment_due.AllowDBNull = false
            Me.columnID_payment_due.ReadOnly = true
            Me.columnDiscount.ReadOnly = true
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property ID_payment_due As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit.ID_payment_dueColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.ID_payment_dueColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.DiscountColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_payment_deposit.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableGL_payment_deposit.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGL_payment_deposit.DiscountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnRefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property Refrence_noColumn As DataColumn
            Get
                Return Me.columnRefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String, ByVal Amount As Decimal, ByVal Refrence_no As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME, Amount, Refrence_no}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As Store_SetupRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),Store_SetupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnRefrence_no = Me.Columns("Refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnRefrence_no = New DataColumn("Refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrence_no)
            Me.Constraints.Add(New UniqueConstraint("DSFrmReceivePaymentKey3", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.AmountColumn) = value
            End Set
        End Property
        
        Public Property Refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.Refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.Refrence_noColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableStore_Setup.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.Refrence_noColumn)
        End Function
        
        Public Sub SetRefrence_noNull()
            Me(Me.tableStore_Setup.Refrence_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_DetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment_due As DataColumn
        
        Private columnID_payment_Paid As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit_Detail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_payment_dueColumn As DataColumn
            Get
                Return Me.columnID_payment_due
            End Get
        End Property
        
        Friend ReadOnly Property ID_payment_PaidColumn As DataColumn
            Get
                Return Me.columnID_payment_Paid
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_deposit_DetailRow
            Get
                Return CType(Me.Rows(index),GL_payment_deposit_DetailRow)
            End Get
        End Property
        
        Public Event GL_payment_deposit_DetailRowChanged As GL_payment_deposit_DetailRowChangeEventHandler
        
        Public Event GL_payment_deposit_DetailRowChanging As GL_payment_deposit_DetailRowChangeEventHandler
        
        Public Event GL_payment_deposit_DetailRowDeleted As GL_payment_deposit_DetailRowChangeEventHandler
        
        Public Event GL_payment_deposit_DetailRowDeleting As GL_payment_deposit_DetailRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_deposit_DetailRow(ByVal row As GL_payment_deposit_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_deposit_DetailRow(ByVal ID_payment_due As Integer, ByVal ID_payment_Paid As Integer, ByVal refrence_no As String) As GL_payment_deposit_DetailRow
            Dim rowGL_payment_deposit_DetailRow As GL_payment_deposit_DetailRow = CType(Me.NewRow,GL_payment_deposit_DetailRow)
            rowGL_payment_deposit_DetailRow.ItemArray = New Object() {ID_payment_due, ID_payment_Paid, refrence_no}
            Me.Rows.Add(rowGL_payment_deposit_DetailRow)
            Return rowGL_payment_deposit_DetailRow
        End Function
        
        Public Function FindByID_payment_dueID_payment_Paid(ByVal ID_payment_due As Integer, ByVal ID_payment_Paid As Integer) As GL_payment_deposit_DetailRow
            Return CType(Me.Rows.Find(New Object() {ID_payment_due, ID_payment_Paid}),GL_payment_deposit_DetailRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_deposit_DetailDataTable = CType(MyBase.Clone,GL_payment_deposit_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_deposit_DetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment_due = Me.Columns("ID_payment_due")
            Me.columnID_payment_Paid = Me.Columns("ID_payment_Paid")
            Me.columnrefrence_no = Me.Columns("refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment_due = New DataColumn("ID_payment_due", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment_due)
            Me.columnID_payment_Paid = New DataColumn("ID_payment_Paid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment_Paid)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_payment_due, Me.columnID_payment_Paid}, true))
            Me.columnID_payment_due.AllowDBNull = false
            Me.columnID_payment_Paid.AllowDBNull = false
        End Sub
        
        Public Function NewGL_payment_deposit_DetailRow() As GL_payment_deposit_DetailRow
            Return CType(Me.NewRow,GL_payment_deposit_DetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_deposit_DetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_deposit_DetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_deposit_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_DetailRowChanged(Me, New GL_payment_deposit_DetailRowChangeEvent(CType(e.Row,GL_payment_deposit_DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_deposit_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_DetailRowChanging(Me, New GL_payment_deposit_DetailRowChangeEvent(CType(e.Row,GL_payment_deposit_DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_deposit_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_DetailRowDeleted(Me, New GL_payment_deposit_DetailRowChangeEvent(CType(e.Row,GL_payment_deposit_DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_deposit_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_DetailRowDeleting(Me, New GL_payment_deposit_DetailRowChangeEvent(CType(e.Row,GL_payment_deposit_DetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_deposit_DetailRow(ByVal row As GL_payment_deposit_DetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_DetailRow
        Inherits DataRow
        
        Private tableGL_payment_deposit_Detail As GL_payment_deposit_DetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit_Detail = CType(Me.Table,GL_payment_deposit_DetailDataTable)
        End Sub
        
        Public Property ID_payment_due As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_Detail.ID_payment_dueColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Detail.ID_payment_dueColumn) = value
            End Set
        End Property
        
        Public Property ID_payment_Paid As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_Detail.ID_payment_PaidColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Detail.ID_payment_PaidColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Detail.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Detail.refrence_noColumn) = value
            End Set
        End Property
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Detail.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit_Detail.refrence_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_DetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_deposit_DetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_deposit_DetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_deposit_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceNo As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnOldPayment As DataColumn
        
        Private columnDateForSort As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columnThisTableID As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnStoreNo As DataColumn
        
        Private columnAR_Adj_Flag As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("GridRecord")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property OldPaymentColumn As DataColumn
            Get
                Return Me.columnOldPayment
            End Get
        End Property
        
        Friend ReadOnly Property DateForSortColumn As DataColumn
            Get
                Return Me.columnDateForSort
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property ThisTableIDColumn As DataColumn
            Get
                Return Me.columnThisTableID
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property StoreNoColumn As DataColumn
            Get
                Return Me.columnStoreNo
            End Get
        End Property
        
        Friend ReadOnly Property AR_Adj_FlagColumn As DataColumn
            Get
                Return Me.columnAR_Adj_Flag
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GridRecordRow
            Get
                Return CType(Me.Rows(index),GridRecordRow)
            End Get
        End Property
        
        Public Event GridRecordRowChanged As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowChanging As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleted As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleting As GridRecordRowChangeEventHandler
        
        Public Overloads Sub AddGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGridRecordRow(ByVal InvoiceNo As String, ByVal InvoiceDate As String, ByVal OriginalAmount As Decimal, ByVal Payment As Decimal, ByVal CheckFlag As Boolean, ByVal AmountDue As Decimal, ByVal OldPayment As Decimal, ByVal DateForSort As String, ByVal AR_terms As String, ByVal Discount As Decimal, ByVal AR_due_date As String, ByVal ID_payment As Integer, ByVal StoreNo As String, ByVal AR_Adj_Flag As Integer, ByVal SHORTNAME As String) As GridRecordRow
            Dim rowGridRecordRow As GridRecordRow = CType(Me.NewRow,GridRecordRow)
            rowGridRecordRow.ItemArray = New Object() {InvoiceNo, InvoiceDate, OriginalAmount, Payment, CheckFlag, AmountDue, OldPayment, DateForSort, AR_terms, Discount, AR_due_date, Nothing, ID_payment, StoreNo, AR_Adj_Flag, SHORTNAME}
            Me.Rows.Add(rowGridRecordRow)
            Return rowGridRecordRow
        End Function
        
        Public Function FindByThisTableID(ByVal ThisTableID As Long) As GridRecordRow
            Return CType(Me.Rows.Find(New Object() {ThisTableID}),GridRecordRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GridRecordDataTable = CType(MyBase.Clone,GridRecordDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GridRecordDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnOldPayment = Me.Columns("OldPayment")
            Me.columnDateForSort = Me.Columns("DateForSort")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columnThisTableID = Me.Columns("ThisTableID")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnStoreNo = Me.Columns("StoreNo")
            Me.columnAR_Adj_Flag = Me.Columns("AR_Adj_Flag")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnOldPayment = New DataColumn("OldPayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOldPayment)
            Me.columnDateForSort = New DataColumn("DateForSort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateForSort)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columnThisTableID = New DataColumn("ThisTableID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThisTableID)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnStoreNo = New DataColumn("StoreNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStoreNo)
            Me.columnAR_Adj_Flag = New DataColumn("AR_Adj_Flag", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_Adj_Flag)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("DSFrmReceivePaymentKey1", New DataColumn() {Me.columnThisTableID}, true))
            Me.columnInvoiceNo.AllowDBNull = false
            Me.columnThisTableID.AutoIncrement = true
            Me.columnThisTableID.AllowDBNull = false
            Me.columnThisTableID.Unique = true
        End Sub
        
        Public Function NewGridRecordRow() As GridRecordRow
            Return CType(Me.NewRow,GridRecordRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GridRecordRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GridRecordRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GridRecordRowChangedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanged(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GridRecordRowChangingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanging(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GridRecordRowDeletedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleted(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GridRecordRowDeletingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleting(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRow
        Inherits DataRow
        
        Private tableGridRecord As GridRecordDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGridRecord = CType(Me.Table,GridRecordDataTable)
        End Sub
        
        Public Property InvoiceNo As String
            Get
                Return CType(Me(Me.tableGridRecord.InvoiceNoColumn),String)
            End Get
            Set
                Me(Me.tableGridRecord.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.InvoiceDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.PaymentColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.CheckFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AmountDueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property OldPayment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.OldPaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.OldPaymentColumn) = value
            End Set
        End Property
        
        Public Property DateForSort As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.DateForSortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.DateForSortColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.DiscountColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property ThisTableID As Long
            Get
                Return CType(Me(Me.tableGridRecord.ThisTableIDColumn),Long)
            End Get
            Set
                Me(Me.tableGridRecord.ThisTableIDColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property StoreNo As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.StoreNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.StoreNoColumn) = value
            End Set
        End Property
        
        Public Property AR_Adj_Flag As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AR_Adj_FlagColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AR_Adj_FlagColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.InvoiceDateColumn)
        End Function
        
        Public Sub SetInvoiceDateNull()
            Me(Me.tableGridRecord.InvoiceDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableGridRecord.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableGridRecord.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableGridRecord.CheckFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableGridRecord.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOldPaymentNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.OldPaymentColumn)
        End Function
        
        Public Sub SetOldPaymentNull()
            Me(Me.tableGridRecord.OldPaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateForSortNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.DateForSortColumn)
        End Function
        
        Public Sub SetDateForSortNull()
            Me(Me.tableGridRecord.DateForSortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableGridRecord.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGridRecord.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableGridRecord.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableGridRecord.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStoreNoNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.StoreNoColumn)
        End Function
        
        Public Sub SetStoreNoNull()
            Me(Me.tableGridRecord.StoreNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_Adj_FlagNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AR_Adj_FlagColumn)
        End Function
        
        Public Sub SetAR_Adj_FlagNull()
            Me(Me.tableGridRecord.AR_Adj_FlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableGridRecord.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GridRecordRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GridRecordRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GridRecordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceNo As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Private columnDateForSort As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Friend ReadOnly Property DateForSortColumn As DataColumn
            Get
                Return Me.columnDateForSort
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_dtlRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_dtlRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_dtlRowChanged As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowChanging As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowDeleted As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowDeleting As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_dtlRow(ByVal row As GL_account_adjustment_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_dtlRow(ByVal InvoiceNo As String, ByVal InvoiceDate As String, ByVal Payment As Decimal, ByVal CheckFlag As Integer, ByVal DateForSort As String, ByVal Discount As Integer, ByVal OriginalAmount As Decimal, ByVal AmountDue As Decimal, ByVal id_service_center As String) As GL_account_adjustment_dtlRow
            Dim rowGL_account_adjustment_dtlRow As GL_account_adjustment_dtlRow = CType(Me.NewRow,GL_account_adjustment_dtlRow)
            rowGL_account_adjustment_dtlRow.ItemArray = New Object() {InvoiceNo, InvoiceDate, Payment, CheckFlag, DateForSort, Discount, OriginalAmount, AmountDue, id_service_center}
            Me.Rows.Add(rowGL_account_adjustment_dtlRow)
            Return rowGL_account_adjustment_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_dtlDataTable = CType(MyBase.Clone,GL_account_adjustment_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
            Me.columnDateForSort = Me.Columns("DateForSort")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnid_service_center = Me.Columns("id_service_center")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnDateForSort = New DataColumn("DateForSort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateForSort)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnInvoiceNo.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account_adjustment_dtlRow() As GL_account_adjustment_dtlRow
            Return CType(Me.NewRow,GL_account_adjustment_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowChanged(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowChanging(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowDeleted(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowDeleting(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_dtlRow(ByVal row As GL_account_adjustment_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_dtl = CType(Me.Table,GL_account_adjustment_dtlDataTable)
        End Sub
        
        Public Property InvoiceNo As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_dtl.InvoiceNoColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.InvoiceDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.PaymentColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.CheckFlagColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Property DateForSort As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.DateForSortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.DateForSortColumn) = value
            End Set
        End Property
        
        Public Property Discount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.DiscountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.DiscountColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.AmountDueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_dtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.InvoiceDateColumn)
        End Function
        
        Public Sub SetInvoiceDateNull()
            Me(Me.tableGL_account_adjustment_dtl.InvoiceDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableGL_account_adjustment_dtl.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableGL_account_adjustment_dtl.CheckFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateForSortNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.DateForSortColumn)
        End Function
        
        Public Sub SetDateForSortNull()
            Me(Me.tableGL_account_adjustment_dtl.DateForSortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGL_account_adjustment_dtl.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableGL_account_adjustment_dtl.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableGL_account_adjustment_dtl.AmountDueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInvoiceNo As DataColumn
        
        Private columnInvoiceDate As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnDiscount1 As DataColumn
        
        Private columnDateForSort As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnAR_Adj_Flag As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceDateColumn As DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property Discount1Column As DataColumn
            Get
                Return Me.columnDiscount1
            End Get
        End Property
        
        Friend ReadOnly Property DateForSortColumn As DataColumn
            Get
                Return Me.columnDateForSort
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property AR_Adj_FlagColumn As DataColumn
            Get
                Return Me.columnAR_Adj_Flag
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow(ByVal InvoiceNo As String, ByVal InvoiceDate As String, ByVal OriginalAmount As Decimal, ByVal AmountDue As Decimal, ByVal AR_terms As String, ByVal Discount As Decimal, ByVal AR_due_date As String, ByVal Discount1 As Decimal, ByVal DateForSort As String, ByVal Payment As Decimal, ByVal AR_Adj_Flag As Integer, ByVal CheckFlag As Boolean) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {InvoiceNo, InvoiceDate, OriginalAmount, AmountDue, AR_terms, Discount, AR_due_date, Nothing, Discount1, DateForSort, Payment, AR_Adj_Flag, CheckFlag}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnInvoiceDate = Me.Columns("InvoiceDate")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnDiscount1 = Me.Columns("Discount1")
            Me.columnDateForSort = Me.Columns("DateForSort")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnAR_Adj_Flag = Me.Columns("AR_Adj_Flag")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
        End Sub
        
        Private Sub InitClass()
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnInvoiceDate = New DataColumn("InvoiceDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceDate)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnDiscount1 = New DataColumn("Discount1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount1)
            Me.columnDateForSort = New DataColumn("DateForSort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateForSort)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnAR_Adj_Flag = New DataColumn("AR_Adj_Flag", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_Adj_Flag)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnInvoiceNo.AllowDBNull = false
            Me.columnAmountDue.AllowDBNull = false
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnDiscount1.ReadOnly = true
            Me.columnDateForSort.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property InvoiceNo As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.InvoiceNoColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property InvoiceDate As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.InvoiceDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.InvoiceDateColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Return CType(Me(Me.tableservice_center_dtl.AmountDueColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_dtl.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.DiscountColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableservice_center_dtl.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableservice_center_dtl.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property Discount1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.Discount1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.Discount1Column) = value
            End Set
        End Property
        
        Public Property DateForSort As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.DateForSortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.DateForSortColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.PaymentColumn) = value
            End Set
        End Property
        
        Public Property AR_Adj_Flag As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AR_Adj_FlagColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AR_Adj_FlagColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.CheckFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.InvoiceDateColumn)
        End Function
        
        Public Sub SetInvoiceDateNull()
            Me(Me.tableservice_center_dtl.InvoiceDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableservice_center_dtl.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableservice_center_dtl.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableservice_center_dtl.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableservice_center_dtl.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscount1Null() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.Discount1Column)
        End Function
        
        Public Sub SetDiscount1Null()
            Me(Me.tableservice_center_dtl.Discount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateForSortNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.DateForSortColumn)
        End Function
        
        Public Sub SetDateForSortNull()
            Me(Me.tableservice_center_dtl.DateForSortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableservice_center_dtl.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_Adj_FlagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AR_Adj_FlagColumn)
        End Function
        
        Public Sub SetAR_Adj_FlagNull()
            Me(Me.tableservice_center_dtl.AR_Adj_FlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableservice_center_dtl.CheckFlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_ForAdjDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnrefrence_no_Adjustment As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit_ForAdj")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_AdjustmentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Adjustment
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_deposit_ForAdjRow
            Get
                Return CType(Me.Rows(index),GL_payment_deposit_ForAdjRow)
            End Get
        End Property
        
        Public Event GL_payment_deposit_ForAdjRowChanged As GL_payment_deposit_ForAdjRowChangeEventHandler
        
        Public Event GL_payment_deposit_ForAdjRowChanging As GL_payment_deposit_ForAdjRowChangeEventHandler
        
        Public Event GL_payment_deposit_ForAdjRowDeleted As GL_payment_deposit_ForAdjRowChangeEventHandler
        
        Public Event GL_payment_deposit_ForAdjRowDeleting As GL_payment_deposit_ForAdjRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_deposit_ForAdjRow(ByVal row As GL_payment_deposit_ForAdjRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_deposit_ForAdjRow(ByVal id_service_center As String, ByVal payment_amount As Decimal, ByVal refrence_no_Adjustment As String, ByVal flag_deposit_bank As Boolean) As GL_payment_deposit_ForAdjRow
            Dim rowGL_payment_deposit_ForAdjRow As GL_payment_deposit_ForAdjRow = CType(Me.NewRow,GL_payment_deposit_ForAdjRow)
            rowGL_payment_deposit_ForAdjRow.ItemArray = New Object() {id_service_center, payment_amount, Nothing, refrence_no_Adjustment, flag_deposit_bank}
            Me.Rows.Add(rowGL_payment_deposit_ForAdjRow)
            Return rowGL_payment_deposit_ForAdjRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_deposit_ForAdjDataTable = CType(MyBase.Clone,GL_payment_deposit_ForAdjDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_deposit_ForAdjDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnrefrence_no_Adjustment = Me.Columns("refrence_no_Adjustment")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnrefrence_no_Adjustment = New DataColumn("refrence_no_Adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Adjustment)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
        End Sub
        
        Public Function NewGL_payment_deposit_ForAdjRow() As GL_payment_deposit_ForAdjRow
            Return CType(Me.NewRow,GL_payment_deposit_ForAdjRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_deposit_ForAdjRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_deposit_ForAdjRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_deposit_ForAdjRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_ForAdjRowChanged(Me, New GL_payment_deposit_ForAdjRowChangeEvent(CType(e.Row,GL_payment_deposit_ForAdjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_deposit_ForAdjRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_ForAdjRowChanging(Me, New GL_payment_deposit_ForAdjRowChangeEvent(CType(e.Row,GL_payment_deposit_ForAdjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_deposit_ForAdjRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_ForAdjRowDeleted(Me, New GL_payment_deposit_ForAdjRowChangeEvent(CType(e.Row,GL_payment_deposit_ForAdjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_deposit_ForAdjRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_ForAdjRowDeleting(Me, New GL_payment_deposit_ForAdjRowChangeEvent(CType(e.Row,GL_payment_deposit_ForAdjRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_deposit_ForAdjRow(ByVal row As GL_payment_deposit_ForAdjRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_ForAdjRow
        Inherits DataRow
        
        Private tableGL_payment_deposit_ForAdj As GL_payment_deposit_ForAdjDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit_ForAdj = CType(Me.Table,GL_payment_deposit_ForAdjDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_ForAdj.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_ForAdj.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_ForAdj.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_ForAdj.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_ForAdj.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_ForAdj.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_Adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_ForAdj.refrence_no_AdjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_ForAdj.refrence_no_AdjustmentColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_ForAdj.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_ForAdj.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_ForAdj.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit_ForAdj.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_ForAdj.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit_ForAdj.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_no_AdjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_ForAdj.refrence_no_AdjustmentColumn)
        End Function
        
        Public Sub Setrefrence_no_AdjustmentNull()
            Me(Me.tableGL_payment_deposit_ForAdj.refrence_no_AdjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_ForAdj.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit_ForAdj.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_ForAdjRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_deposit_ForAdjRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_deposit_ForAdjRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_deposit_ForAdjRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_debit_deposit As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columntype_transaction As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnid_transfer As DataColumn
        
        Private columnid_external_cash As DataColumn
        
        Private columnid_ATM As DataColumn
        
        Private columnid_adjustment_no As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnCleared_bank As DataColumn
        
        Private columnMemo As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_depositColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property type_transactionColumn As DataColumn
            Get
                Return Me.columntype_transaction
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property id_transferColumn As DataColumn
            Get
                Return Me.columnid_transfer
            End Get
        End Property
        
        Friend ReadOnly Property id_external_cashColumn As DataColumn
            Get
                Return Me.columnid_external_cash
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property id_adjustment_noColumn As DataColumn
            Get
                Return Me.columnid_adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property Cleared_bankColumn As DataColumn
            Get
                Return Me.columnCleared_bank
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_depositRow
            Get
                Return CType(Me.Rows(index),GL_debit_depositRow)
            End Get
        End Property
        
        Public Event GL_debit_depositRowChanged As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowChanging As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleted As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleting As GL_debit_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_depositRow(ByVal id_debit_deposit_head As Integer, ByVal type_transaction As String, ByVal ID_payment As Integer, ByVal id_check As Integer, ByVal id_transfer As Integer, ByVal id_external_cash As Integer, ByVal id_ATM As Integer, ByVal id_adjustment_no As Integer, ByVal debit_amount As Decimal, ByVal deposit_amount As Decimal, ByVal GL_account As String, ByVal Cleared_bank As Boolean, ByVal Memo As String) As GL_debit_depositRow
            Dim rowGL_debit_depositRow As GL_debit_depositRow = CType(Me.NewRow,GL_debit_depositRow)
            rowGL_debit_depositRow.ItemArray = New Object() {Nothing, id_debit_deposit_head, type_transaction, ID_payment, id_check, id_transfer, id_external_cash, id_ATM, id_adjustment_no, debit_amount, deposit_amount, GL_account, Cleared_bank, Memo}
            Me.Rows.Add(rowGL_debit_depositRow)
            Return rowGL_debit_depositRow
        End Function
        
        Public Function FindByid_debit_deposit(ByVal id_debit_deposit As Integer) As GL_debit_depositRow
            Return CType(Me.Rows.Find(New Object() {id_debit_deposit}),GL_debit_depositRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_depositDataTable = CType(MyBase.Clone,GL_debit_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_debit_deposit = Me.Columns("id_debit_deposit")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columntype_transaction = Me.Columns("type_transaction")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnid_transfer = Me.Columns("id_transfer")
            Me.columnid_external_cash = Me.Columns("id_external_cash")
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columnid_adjustment_no = Me.Columns("id_adjustment_no")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnCleared_bank = Me.Columns("Cleared_bank")
            Me.columnMemo = Me.Columns("Memo")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_debit_deposit = New DataColumn("id_debit_deposit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columntype_transaction = New DataColumn("type_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_transaction)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnid_transfer = New DataColumn("id_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_transfer)
            Me.columnid_external_cash = New DataColumn("id_external_cash", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_external_cash)
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columnid_adjustment_no = New DataColumn("id_adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_adjustment_no)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnCleared_bank = New DataColumn("Cleared_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCleared_bank)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_debit_deposit}, true))
            Me.columnid_debit_deposit.AutoIncrement = true
            Me.columnid_debit_deposit.AllowDBNull = false
            Me.columnid_debit_deposit.ReadOnly = true
            Me.columnid_debit_deposit.Unique = true
            Me.columnCleared_bank.AllowDBNull = false
        End Sub
        
        Public Function NewGL_debit_depositRow() As GL_debit_depositRow
            Return CType(Me.NewRow,GL_debit_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanged(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanging(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleted(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleting(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRow
        Inherits DataRow
        
        Private tableGL_debit_deposit As GL_debit_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit = CType(Me.Table,GL_debit_depositDataTable)
        End Sub
        
        Public Property id_debit_deposit As Integer
            Get
                Return CType(Me(Me.tableGL_debit_deposit.id_debit_depositColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_debit_depositColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property type_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.type_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.type_transactionColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_checkColumn) = value
            End Set
        End Property
        
        Public Property id_transfer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_transferColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_transferColumn) = value
            End Set
        End Property
        
        Public Property id_external_cash As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_external_cashColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_external_cashColumn) = value
            End Set
        End Property
        
        Public Property id_ATM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_ATMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property id_adjustment_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_adjustment_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.debit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property Cleared_bank As Boolean
            Get
                Return CType(Me(Me.tableGL_debit_deposit.Cleared_bankColumn),Boolean)
            End Get
            Set
                Me(Me.tableGL_debit_deposit.Cleared_bankColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.MemoColumn) = value
            End Set
        End Property
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype_transactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.type_transactionColumn)
        End Function
        
        Public Sub Settype_transactionNull()
            Me(Me.tableGL_debit_deposit.type_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableGL_debit_deposit.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tableGL_debit_deposit.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_transferColumn)
        End Function
        
        Public Sub Setid_transferNull()
            Me(Me.tableGL_debit_deposit.id_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_external_cashNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_external_cashColumn)
        End Function
        
        Public Sub Setid_external_cashNull()
            Me(Me.tableGL_debit_deposit.id_external_cashColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_ATMNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_ATMColumn)
        End Function
        
        Public Sub Setid_ATMNull()
            Me(Me.tableGL_debit_deposit.id_ATMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_adjustment_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_adjustment_noColumn)
        End Function
        
        Public Sub Setid_adjustment_noNull()
            Me(Me.tableGL_debit_deposit.id_adjustment_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdebit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.debit_amountColumn)
        End Function
        
        Public Sub Setdebit_amountNull()
            Me(Me.tableGL_debit_deposit.debit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableGL_debit_deposit.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_debit_deposit.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_debit_deposit.MemoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
