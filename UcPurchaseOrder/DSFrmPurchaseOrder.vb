'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPurchaseOrder
    Inherits DataSet
    
    Private tableinv_buyer As inv_buyerDataTable
    
    Private tableInv_purchase_order_head As Inv_purchase_order_headDataTable
    
    Private tableInv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
    
    Private tableInv_purchase_order_headSearch1 As Inv_purchase_order_headSearch1DataTable
    
    Private tableInv_purchase_order_head1 As Inv_purchase_order_head1DataTable
    
    Private tableInv_purchase_order_headSearch As Inv_purchase_order_headSearchDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_buyer")) Is Nothing) Then
                Me.Tables.Add(New inv_buyerDataTable(ds.Tables("inv_buyer")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_head")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_headDataTable(ds.Tables("Inv_purchase_order_head")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_dtlDataTable(ds.Tables("Inv_purchase_order_dtl")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_headSearch1")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_headSearch1DataTable(ds.Tables("Inv_purchase_order_headSearch1")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_head1")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_head1DataTable(ds.Tables("Inv_purchase_order_head1")))
            End If
            If (Not (ds.Tables("Inv_purchase_order_headSearch")) Is Nothing) Then
                Me.Tables.Add(New Inv_purchase_order_headSearchDataTable(ds.Tables("Inv_purchase_order_headSearch")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_buyer As inv_buyerDataTable
        Get
            Return Me.tableinv_buyer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_head As Inv_purchase_order_headDataTable
        Get
            Return Me.tableInv_purchase_order_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
        Get
            Return Me.tableInv_purchase_order_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_headSearch1 As Inv_purchase_order_headSearch1DataTable
        Get
            Return Me.tableInv_purchase_order_headSearch1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_head1 As Inv_purchase_order_head1DataTable
        Get
            Return Me.tableInv_purchase_order_head1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_purchase_order_headSearch As Inv_purchase_order_headSearchDataTable
        Get
            Return Me.tableInv_purchase_order_headSearch
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPurchaseOrder = CType(MyBase.Clone,DSFrmPurchaseOrder)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_buyer")) Is Nothing) Then
            Me.Tables.Add(New inv_buyerDataTable(ds.Tables("inv_buyer")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_head")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_headDataTable(ds.Tables("Inv_purchase_order_head")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_dtlDataTable(ds.Tables("Inv_purchase_order_dtl")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_headSearch1")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_headSearch1DataTable(ds.Tables("Inv_purchase_order_headSearch1")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_head1")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_head1DataTable(ds.Tables("Inv_purchase_order_head1")))
        End If
        If (Not (ds.Tables("Inv_purchase_order_headSearch")) Is Nothing) Then
            Me.Tables.Add(New Inv_purchase_order_headSearchDataTable(ds.Tables("Inv_purchase_order_headSearch")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_buyer = CType(Me.Tables("inv_buyer"),inv_buyerDataTable)
        If (Not (Me.tableinv_buyer) Is Nothing) Then
            Me.tableinv_buyer.InitVars
        End If
        Me.tableInv_purchase_order_head = CType(Me.Tables("Inv_purchase_order_head"),Inv_purchase_order_headDataTable)
        If (Not (Me.tableInv_purchase_order_head) Is Nothing) Then
            Me.tableInv_purchase_order_head.InitVars
        End If
        Me.tableInv_purchase_order_dtl = CType(Me.Tables("Inv_purchase_order_dtl"),Inv_purchase_order_dtlDataTable)
        If (Not (Me.tableInv_purchase_order_dtl) Is Nothing) Then
            Me.tableInv_purchase_order_dtl.InitVars
        End If
        Me.tableInv_purchase_order_headSearch1 = CType(Me.Tables("Inv_purchase_order_headSearch1"),Inv_purchase_order_headSearch1DataTable)
        If (Not (Me.tableInv_purchase_order_headSearch1) Is Nothing) Then
            Me.tableInv_purchase_order_headSearch1.InitVars
        End If
        Me.tableInv_purchase_order_head1 = CType(Me.Tables("Inv_purchase_order_head1"),Inv_purchase_order_head1DataTable)
        If (Not (Me.tableInv_purchase_order_head1) Is Nothing) Then
            Me.tableInv_purchase_order_head1.InitVars
        End If
        Me.tableInv_purchase_order_headSearch = CType(Me.Tables("Inv_purchase_order_headSearch"),Inv_purchase_order_headSearchDataTable)
        If (Not (Me.tableInv_purchase_order_headSearch) Is Nothing) Then
            Me.tableInv_purchase_order_headSearch.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPurchaseOrder"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPurchaseOrder.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_buyer = New inv_buyerDataTable
        Me.Tables.Add(Me.tableinv_buyer)
        Me.tableInv_purchase_order_head = New Inv_purchase_order_headDataTable
        Me.Tables.Add(Me.tableInv_purchase_order_head)
        Me.tableInv_purchase_order_dtl = New Inv_purchase_order_dtlDataTable
        Me.Tables.Add(Me.tableInv_purchase_order_dtl)
        Me.tableInv_purchase_order_headSearch1 = New Inv_purchase_order_headSearch1DataTable
        Me.Tables.Add(Me.tableInv_purchase_order_headSearch1)
        Me.tableInv_purchase_order_head1 = New Inv_purchase_order_head1DataTable
        Me.Tables.Add(Me.tableInv_purchase_order_head1)
        Me.tableInv_purchase_order_headSearch = New Inv_purchase_order_headSearchDataTable
        Me.Tables.Add(Me.tableInv_purchase_order_headSearch)
        Me.InitExpressions
    End Sub
    
    Private Function ShouldSerializeinv_buyer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_headSearch1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_head1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_purchase_order_headSearch() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Private Sub InitExpressions()
        Me.tableInv_purchase_order_headSearch.ReminderColumn.Expression = "TotalAmount-TotalAmountReceive"
    End Sub
    
    Public Delegate Sub inv_buyerRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_buyerRowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_headRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_headRowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_dtlRowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_headSearch1RowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_headSearch1RowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_head1RowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_head1RowChangeEvent)
    
    Public Delegate Sub Inv_purchase_order_headSearchRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_purchase_order_headSearchRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbuyer_id As DataColumn
        
        Private columndesc_buyer As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_buyer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property desc_buyerColumn As DataColumn
            Get
                Return Me.columndesc_buyer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_buyerRow
            Get
                Return CType(Me.Rows(index),inv_buyerRow)
            End Get
        End Property
        
        Public Event inv_buyerRowChanged As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowChanging As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowDeleted As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowDeleting As inv_buyerRowChangeEventHandler
        
        Public Overloads Sub Addinv_buyerRow(ByVal row As inv_buyerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_buyerRow(ByVal buyer_id As String, ByVal desc_buyer As String) As inv_buyerRow
            Dim rowinv_buyerRow As inv_buyerRow = CType(Me.NewRow,inv_buyerRow)
            rowinv_buyerRow.ItemArray = New Object() {buyer_id, desc_buyer}
            Me.Rows.Add(rowinv_buyerRow)
            Return rowinv_buyerRow
        End Function
        
        Public Function FindBybuyer_id(ByVal buyer_id As String) As inv_buyerRow
            Return CType(Me.Rows.Find(New Object() {buyer_id}),inv_buyerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_buyerDataTable = CType(MyBase.Clone,inv_buyerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_buyerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columndesc_buyer = Me.Columns("desc_buyer")
        End Sub
        
        Private Sub InitClass()
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columndesc_buyer = New DataColumn("desc_buyer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_buyer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnbuyer_id}, true))
            Me.columnbuyer_id.AllowDBNull = false
            Me.columnbuyer_id.Unique = true
        End Sub
        
        Public Function Newinv_buyerRow() As inv_buyerRow
            Return CType(Me.NewRow,inv_buyerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_buyerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_buyerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_buyerRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowChanged(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_buyerRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowChanging(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_buyerRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowDeleted(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_buyerRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowDeleting(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_buyerRow(ByVal row As inv_buyerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerRow
        Inherits DataRow
        
        Private tableinv_buyer As inv_buyerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_buyer = CType(Me.Table,inv_buyerDataTable)
        End Sub
        
        Public Property buyer_id As String
            Get
                Return CType(Me(Me.tableinv_buyer.buyer_idColumn),String)
            End Get
            Set
                Me(Me.tableinv_buyer.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property desc_buyer As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_buyer.desc_buyerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_buyer.desc_buyerColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_buyerNull() As Boolean
            Return Me.IsNull(Me.tableinv_buyer.desc_buyerColumn)
        End Function
        
        Public Sub Setdesc_buyerNull()
            Me(Me.tableinv_buyer.desc_buyerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_buyerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_buyerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_buyerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columndate_po As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnshipto_store_no As DataColumn
        
        Private columnshipto_cod_customer As DataColumn
        
        Private columnbuyer_id As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property date_poColumn As DataColumn
            Get
                Return Me.columndate_po
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property shipto_store_noColumn As DataColumn
            Get
                Return Me.columnshipto_store_no
            End Get
        End Property
        
        Friend ReadOnly Property shipto_cod_customerColumn As DataColumn
            Get
                Return Me.columnshipto_cod_customer
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_headRow
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_headRow)
            End Get
        End Property
        
        Public Event Inv_purchase_order_headRowChanged As Inv_purchase_order_headRowChangeEventHandler
        
        Public Event Inv_purchase_order_headRowChanging As Inv_purchase_order_headRowChangeEventHandler
        
        Public Event Inv_purchase_order_headRowDeleted As Inv_purchase_order_headRowChangeEventHandler
        
        Public Event Inv_purchase_order_headRowDeleting As Inv_purchase_order_headRowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_headRow(ByVal row As Inv_purchase_order_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_headRow(ByVal po_no As String, ByVal date_po As String, ByVal cod_vendor As String, ByVal shipto_store_no As String, ByVal shipto_cod_customer As String, ByVal buyer_id As String, ByVal house_comments As String, ByVal vend_comments As String) As Inv_purchase_order_headRow
            Dim rowInv_purchase_order_headRow As Inv_purchase_order_headRow = CType(Me.NewRow,Inv_purchase_order_headRow)
            rowInv_purchase_order_headRow.ItemArray = New Object() {po_no, date_po, cod_vendor, shipto_store_no, shipto_cod_customer, buyer_id, house_comments, vend_comments}
            Me.Rows.Add(rowInv_purchase_order_headRow)
            Return rowInv_purchase_order_headRow
        End Function
        
        Public Function FindBypo_no(ByVal po_no As String) As Inv_purchase_order_headRow
            Return CType(Me.Rows.Find(New Object() {po_no}),Inv_purchase_order_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_headDataTable = CType(MyBase.Clone,Inv_purchase_order_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columndate_po = Me.Columns("date_po")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnshipto_store_no = Me.Columns("shipto_store_no")
            Me.columnshipto_cod_customer = Me.Columns("shipto_cod_customer")
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columndate_po = New DataColumn("date_po", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_po)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnshipto_store_no = New DataColumn("shipto_store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_store_no)
            Me.columnshipto_cod_customer = New DataColumn("shipto_cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_cod_customer)
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnpo_no}, true))
            Me.columnpo_no.AllowDBNull = false
            Me.columnpo_no.Unique = true
        End Sub
        
        Public Function NewInv_purchase_order_headRow() As Inv_purchase_order_headRow
            Return CType(Me.NewRow,Inv_purchase_order_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_headRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headRowChanged(Me, New Inv_purchase_order_headRowChangeEvent(CType(e.Row,Inv_purchase_order_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_headRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headRowChanging(Me, New Inv_purchase_order_headRowChangeEvent(CType(e.Row,Inv_purchase_order_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headRowDeleted(Me, New Inv_purchase_order_headRowChangeEvent(CType(e.Row,Inv_purchase_order_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headRowDeleting(Me, New Inv_purchase_order_headRowChangeEvent(CType(e.Row,Inv_purchase_order_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_headRow(ByVal row As Inv_purchase_order_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headRow
        Inherits DataRow
        
        Private tableInv_purchase_order_head As Inv_purchase_order_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_head = CType(Me.Table,Inv_purchase_order_headDataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_head.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property date_po As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.date_poColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.date_poColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property shipto_store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.shipto_store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.shipto_store_noColumn) = value
            End Set
        End Property
        
        Public Property shipto_cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.shipto_cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.shipto_cod_customerColumn) = value
            End Set
        End Property
        
        Public Property buyer_id As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.buyer_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Function Isdate_poNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.date_poColumn)
        End Function
        
        Public Sub Setdate_poNull()
            Me(Me.tableInv_purchase_order_head.date_poColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_purchase_order_head.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_store_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.shipto_store_noColumn)
        End Function
        
        Public Sub Setshipto_store_noNull()
            Me(Me.tableInv_purchase_order_head.shipto_store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_cod_customerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.shipto_cod_customerColumn)
        End Function
        
        Public Sub Setshipto_cod_customerNull()
            Me(Me.tableInv_purchase_order_head.shipto_cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbuyer_idNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.buyer_idColumn)
        End Function
        
        Public Sub Setbuyer_idNull()
            Me(Me.tableInv_purchase_order_head.buyer_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_purchase_order_head.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_purchase_order_head.vend_commentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnfrieght As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnInvItemCost As DataColumn
        
        Private columncost As DataColumn
        
        Private columnwieght_lbs As DataColumn
        
        Private columnexcost As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property frieghtColumn As DataColumn
            Get
                Return Me.columnfrieght
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property InvItemCostColumn As DataColumn
            Get
                Return Me.columnInvItemCost
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property wieght_lbsColumn As DataColumn
            Get
                Return Me.columnwieght_lbs
            End Get
        End Property
        
        Friend ReadOnly Property excostColumn As DataColumn
            Get
                Return Me.columnexcost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_dtlRow
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_dtlRow)
            End Get
        End Property
        
        Public Event Inv_purchase_order_dtlRowChanged As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowChanging As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowDeleted As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Event Inv_purchase_order_dtlRowDeleting As Inv_purchase_order_dtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_dtlRow(ByVal row As Inv_purchase_order_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_dtlRow(ByVal po_no As String, ByVal item_no As String, ByVal qty As Single, ByVal taxable As Boolean, ByVal fet As Single, ByVal frieght As Single, ByVal desc_item As String, ByVal InvItemCost As Single, ByVal cost As Single, ByVal wieght_lbs As String, ByVal excost As Decimal) As Inv_purchase_order_dtlRow
            Dim rowInv_purchase_order_dtlRow As Inv_purchase_order_dtlRow = CType(Me.NewRow,Inv_purchase_order_dtlRow)
            rowInv_purchase_order_dtlRow.ItemArray = New Object() {po_no, item_no, qty, taxable, fet, frieght, desc_item, InvItemCost, cost, wieght_lbs, excost}
            Me.Rows.Add(rowInv_purchase_order_dtlRow)
            Return rowInv_purchase_order_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_dtlDataTable = CType(MyBase.Clone,Inv_purchase_order_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnfet = Me.Columns("fet")
            Me.columnfrieght = Me.Columns("frieght")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnInvItemCost = Me.Columns("InvItemCost")
            Me.columncost = Me.Columns("cost")
            Me.columnwieght_lbs = Me.Columns("wieght_lbs")
            Me.columnexcost = Me.Columns("excost")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnfrieght = New DataColumn("frieght", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrieght)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnInvItemCost = New DataColumn("InvItemCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvItemCost)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnwieght_lbs = New DataColumn("wieght_lbs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwieght_lbs)
            Me.columnexcost = New DataColumn("excost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexcost)
            Me.columnpo_no.AllowDBNull = false
            Me.columnInvItemCost.AllowDBNull = false
        End Sub
        
        Public Function NewInv_purchase_order_dtlRow() As Inv_purchase_order_dtlRow
            Return CType(Me.NewRow,Inv_purchase_order_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowChanged(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowChanging(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowDeleted(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_dtlRowDeleting(Me, New Inv_purchase_order_dtlRowChangeEvent(CType(e.Row,Inv_purchase_order_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_dtlRow(ByVal row As Inv_purchase_order_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlRow
        Inherits DataRow
        
        Private tableInv_purchase_order_dtl As Inv_purchase_order_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_dtl = CType(Me.Table,Inv_purchase_order_dtlDataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.po_noColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property frieght As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.frieghtColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.frieghtColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property InvItemCost As Single
            Get
                Return CType(Me(Me.tableInv_purchase_order_dtl.InvItemCostColumn),Single)
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.InvItemCostColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.costColumn) = value
            End Set
        End Property
        
        Public Property wieght_lbs As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.wieght_lbsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.wieght_lbsColumn) = value
            End Set
        End Property
        
        Public Property excost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_dtl.excostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_dtl.excostColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableInv_purchase_order_dtl.item_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_purchase_order_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_purchase_order_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableInv_purchase_order_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfrieghtNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.frieghtColumn)
        End Function
        
        Public Sub SetfrieghtNull()
            Me(Me.tableInv_purchase_order_dtl.frieghtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInv_purchase_order_dtl.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_purchase_order_dtl.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswieght_lbsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.wieght_lbsColumn)
        End Function
        
        Public Sub Setwieght_lbsNull()
            Me(Me.tableInv_purchase_order_dtl.wieght_lbsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsexcostNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_dtl.excostColumn)
        End Function
        
        Public Sub SetexcostNull()
            Me(Me.tableInv_purchase_order_dtl.excostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearch1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columndate_po As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnshipto_store_no As DataColumn
        
        Private columnshipto_cod_customer As DataColumn
        
        Private columnbuyer_id As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Private columnTotalAmount As DataColumn
        
        Private columnBuyer As DataColumn
        
        Private columnPo_NoReceive As DataColumn
        
        Private columnREMAINDER_ As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_headSearch1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property date_poColumn As DataColumn
            Get
                Return Me.columndate_po
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property shipto_store_noColumn As DataColumn
            Get
                Return Me.columnshipto_store_no
            End Get
        End Property
        
        Friend ReadOnly Property shipto_cod_customerColumn As DataColumn
            Get
                Return Me.columnshipto_cod_customer
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Friend ReadOnly Property TotalAmountColumn As DataColumn
            Get
                Return Me.columnTotalAmount
            End Get
        End Property
        
        Friend ReadOnly Property BuyerColumn As DataColumn
            Get
                Return Me.columnBuyer
            End Get
        End Property
        
        Friend ReadOnly Property Po_NoReceiveColumn As DataColumn
            Get
                Return Me.columnPo_NoReceive
            End Get
        End Property
        
        Friend ReadOnly Property REMAINDER_Column As DataColumn
            Get
                Return Me.columnREMAINDER_
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_headSearch1Row
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_headSearch1Row)
            End Get
        End Property
        
        Public Event Inv_purchase_order_headSearch1RowChanged As Inv_purchase_order_headSearch1RowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearch1RowChanging As Inv_purchase_order_headSearch1RowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearch1RowDeleted As Inv_purchase_order_headSearch1RowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearch1RowDeleting As Inv_purchase_order_headSearch1RowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_headSearch1Row(ByVal row As Inv_purchase_order_headSearch1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_headSearch1Row(ByVal po_no As String, ByVal date_po As String, ByVal cod_vendor As String, ByVal shipto_store_no As String, ByVal shipto_cod_customer As String, ByVal buyer_id As String, ByVal house_comments As String, ByVal vend_comments As String, ByVal TotalAmount As Single, ByVal Buyer As String, ByVal Po_NoReceive As String, ByVal REMAINDER_ As Decimal) As Inv_purchase_order_headSearch1Row
            Dim rowInv_purchase_order_headSearch1Row As Inv_purchase_order_headSearch1Row = CType(Me.NewRow,Inv_purchase_order_headSearch1Row)
            rowInv_purchase_order_headSearch1Row.ItemArray = New Object() {po_no, date_po, cod_vendor, shipto_store_no, shipto_cod_customer, buyer_id, house_comments, vend_comments, TotalAmount, Buyer, Po_NoReceive, REMAINDER_}
            Me.Rows.Add(rowInv_purchase_order_headSearch1Row)
            Return rowInv_purchase_order_headSearch1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_headSearch1DataTable = CType(MyBase.Clone,Inv_purchase_order_headSearch1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_headSearch1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columndate_po = Me.Columns("date_po")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnshipto_store_no = Me.Columns("shipto_store_no")
            Me.columnshipto_cod_customer = Me.Columns("shipto_cod_customer")
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
            Me.columnTotalAmount = Me.Columns("TotalAmount")
            Me.columnBuyer = Me.Columns("Buyer")
            Me.columnPo_NoReceive = Me.Columns("Po_NoReceive")
            Me.columnREMAINDER_ = Me.Columns("REMAINDER ")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columndate_po = New DataColumn("date_po", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_po)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnshipto_store_no = New DataColumn("shipto_store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_store_no)
            Me.columnshipto_cod_customer = New DataColumn("shipto_cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_cod_customer)
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.columnTotalAmount = New DataColumn("TotalAmount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalAmount)
            Me.columnBuyer = New DataColumn("Buyer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuyer)
            Me.columnPo_NoReceive = New DataColumn("Po_NoReceive", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPo_NoReceive)
            Me.columnREMAINDER_ = New DataColumn("REMAINDER ", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMAINDER_)
            Me.columnpo_no.AllowDBNull = false
            Me.columnTotalAmount.ReadOnly = true
        End Sub
        
        Public Function NewInv_purchase_order_headSearch1Row() As Inv_purchase_order_headSearch1Row
            Return CType(Me.NewRow,Inv_purchase_order_headSearch1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_headSearch1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_headSearch1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_headSearch1RowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearch1RowChanged(Me, New Inv_purchase_order_headSearch1RowChangeEvent(CType(e.Row,Inv_purchase_order_headSearch1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_headSearch1RowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearch1RowChanging(Me, New Inv_purchase_order_headSearch1RowChangeEvent(CType(e.Row,Inv_purchase_order_headSearch1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_headSearch1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearch1RowDeleted(Me, New Inv_purchase_order_headSearch1RowChangeEvent(CType(e.Row,Inv_purchase_order_headSearch1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_headSearch1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearch1RowDeleting(Me, New Inv_purchase_order_headSearch1RowChangeEvent(CType(e.Row,Inv_purchase_order_headSearch1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_headSearch1Row(ByVal row As Inv_purchase_order_headSearch1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearch1Row
        Inherits DataRow
        
        Private tableInv_purchase_order_headSearch1 As Inv_purchase_order_headSearch1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_headSearch1 = CType(Me.Table,Inv_purchase_order_headSearch1DataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_headSearch1.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.po_noColumn) = value
            End Set
        End Property
        
        Public Property date_po As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.date_poColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.date_poColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property shipto_store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.shipto_store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.shipto_store_noColumn) = value
            End Set
        End Property
        
        Public Property shipto_cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.shipto_cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.shipto_cod_customerColumn) = value
            End Set
        End Property
        
        Public Property buyer_id As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.buyer_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Property TotalAmount As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.TotalAmountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.TotalAmountColumn) = value
            End Set
        End Property
        
        Public Property Buyer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.BuyerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.BuyerColumn) = value
            End Set
        End Property
        
        Public Property Po_NoReceive As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.Po_NoReceiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.Po_NoReceiveColumn) = value
            End Set
        End Property
        
        Public Property REMAINDER_ As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch1.REMAINDER_Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch1.REMAINDER_Column) = value
            End Set
        End Property
        
        Public Function Isdate_poNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.date_poColumn)
        End Function
        
        Public Sub Setdate_poNull()
            Me(Me.tableInv_purchase_order_headSearch1.date_poColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_purchase_order_headSearch1.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_store_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.shipto_store_noColumn)
        End Function
        
        Public Sub Setshipto_store_noNull()
            Me(Me.tableInv_purchase_order_headSearch1.shipto_store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_cod_customerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.shipto_cod_customerColumn)
        End Function
        
        Public Sub Setshipto_cod_customerNull()
            Me(Me.tableInv_purchase_order_headSearch1.shipto_cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbuyer_idNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.buyer_idColumn)
        End Function
        
        Public Sub Setbuyer_idNull()
            Me(Me.tableInv_purchase_order_headSearch1.buyer_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_purchase_order_headSearch1.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_purchase_order_headSearch1.vend_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalAmountNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.TotalAmountColumn)
        End Function
        
        Public Sub SetTotalAmountNull()
            Me(Me.tableInv_purchase_order_headSearch1.TotalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBuyerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.BuyerColumn)
        End Function
        
        Public Sub SetBuyerNull()
            Me(Me.tableInv_purchase_order_headSearch1.BuyerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPo_NoReceiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.Po_NoReceiveColumn)
        End Function
        
        Public Sub SetPo_NoReceiveNull()
            Me(Me.tableInv_purchase_order_headSearch1.Po_NoReceiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMAINDER_Null() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch1.REMAINDER_Column)
        End Function
        
        Public Sub SetREMAINDER_Null()
            Me(Me.tableInv_purchase_order_headSearch1.REMAINDER_Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearch1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_headSearch1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_headSearch1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_headSearch1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_head1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columndate_po As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnshipto_store_no As DataColumn
        
        Private columnshipto_cod_customer As DataColumn
        
        Private columnbuyer_id As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_head1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property date_poColumn As DataColumn
            Get
                Return Me.columndate_po
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property shipto_store_noColumn As DataColumn
            Get
                Return Me.columnshipto_store_no
            End Get
        End Property
        
        Friend ReadOnly Property shipto_cod_customerColumn As DataColumn
            Get
                Return Me.columnshipto_cod_customer
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_head1Row
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_head1Row)
            End Get
        End Property
        
        Public Event Inv_purchase_order_head1RowChanged As Inv_purchase_order_head1RowChangeEventHandler
        
        Public Event Inv_purchase_order_head1RowChanging As Inv_purchase_order_head1RowChangeEventHandler
        
        Public Event Inv_purchase_order_head1RowDeleted As Inv_purchase_order_head1RowChangeEventHandler
        
        Public Event Inv_purchase_order_head1RowDeleting As Inv_purchase_order_head1RowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_head1Row(ByVal row As Inv_purchase_order_head1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_head1Row(ByVal po_no As String, ByVal date_po As String, ByVal cod_vendor As String, ByVal shipto_store_no As String, ByVal shipto_cod_customer As String, ByVal buyer_id As String, ByVal house_comments As String, ByVal vend_comments As String) As Inv_purchase_order_head1Row
            Dim rowInv_purchase_order_head1Row As Inv_purchase_order_head1Row = CType(Me.NewRow,Inv_purchase_order_head1Row)
            rowInv_purchase_order_head1Row.ItemArray = New Object() {po_no, date_po, cod_vendor, shipto_store_no, shipto_cod_customer, buyer_id, house_comments, vend_comments}
            Me.Rows.Add(rowInv_purchase_order_head1Row)
            Return rowInv_purchase_order_head1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_head1DataTable = CType(MyBase.Clone,Inv_purchase_order_head1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_head1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columndate_po = Me.Columns("date_po")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnshipto_store_no = Me.Columns("shipto_store_no")
            Me.columnshipto_cod_customer = Me.Columns("shipto_cod_customer")
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columndate_po = New DataColumn("date_po", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_po)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnshipto_store_no = New DataColumn("shipto_store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_store_no)
            Me.columnshipto_cod_customer = New DataColumn("shipto_cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_cod_customer)
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.columnpo_no.AllowDBNull = false
        End Sub
        
        Public Function NewInv_purchase_order_head1Row() As Inv_purchase_order_head1Row
            Return CType(Me.NewRow,Inv_purchase_order_head1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_head1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_head1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_head1RowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_head1RowChanged(Me, New Inv_purchase_order_head1RowChangeEvent(CType(e.Row,Inv_purchase_order_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_head1RowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_head1RowChanging(Me, New Inv_purchase_order_head1RowChangeEvent(CType(e.Row,Inv_purchase_order_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_head1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_head1RowDeleted(Me, New Inv_purchase_order_head1RowChangeEvent(CType(e.Row,Inv_purchase_order_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_head1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_head1RowDeleting(Me, New Inv_purchase_order_head1RowChangeEvent(CType(e.Row,Inv_purchase_order_head1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_head1Row(ByVal row As Inv_purchase_order_head1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_head1Row
        Inherits DataRow
        
        Private tableInv_purchase_order_head1 As Inv_purchase_order_head1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_head1 = CType(Me.Table,Inv_purchase_order_head1DataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_head1.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.po_noColumn) = value
            End Set
        End Property
        
        Public Property date_po As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.date_poColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.date_poColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property shipto_store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.shipto_store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.shipto_store_noColumn) = value
            End Set
        End Property
        
        Public Property shipto_cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.shipto_cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.shipto_cod_customerColumn) = value
            End Set
        End Property
        
        Public Property buyer_id As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.buyer_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_head1.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_head1.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Function Isdate_poNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.date_poColumn)
        End Function
        
        Public Sub Setdate_poNull()
            Me(Me.tableInv_purchase_order_head1.date_poColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_purchase_order_head1.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_store_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.shipto_store_noColumn)
        End Function
        
        Public Sub Setshipto_store_noNull()
            Me(Me.tableInv_purchase_order_head1.shipto_store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_cod_customerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.shipto_cod_customerColumn)
        End Function
        
        Public Sub Setshipto_cod_customerNull()
            Me(Me.tableInv_purchase_order_head1.shipto_cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbuyer_idNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.buyer_idColumn)
        End Function
        
        Public Sub Setbuyer_idNull()
            Me(Me.tableInv_purchase_order_head1.buyer_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_purchase_order_head1.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_head1.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_purchase_order_head1.vend_commentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_head1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_head1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_head1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_head1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearchDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpo_no As DataColumn
        
        Private columndate_po As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnshipto_store_no As DataColumn
        
        Private columnshipto_cod_customer As DataColumn
        
        Private columnbuyer_id As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Private columnbuyer As DataColumn
        
        Private columnTotalAmount As DataColumn
        
        Private columnPo_NoReceive As DataColumn
        
        Private columnTotalAmountReceive As DataColumn
        
        Private columnReminder As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_purchase_order_headSearch")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property date_poColumn As DataColumn
            Get
                Return Me.columndate_po
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property shipto_store_noColumn As DataColumn
            Get
                Return Me.columnshipto_store_no
            End Get
        End Property
        
        Friend ReadOnly Property shipto_cod_customerColumn As DataColumn
            Get
                Return Me.columnshipto_cod_customer
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Friend ReadOnly Property buyerColumn As DataColumn
            Get
                Return Me.columnbuyer
            End Get
        End Property
        
        Friend ReadOnly Property TotalAmountColumn As DataColumn
            Get
                Return Me.columnTotalAmount
            End Get
        End Property
        
        Friend ReadOnly Property Po_NoReceiveColumn As DataColumn
            Get
                Return Me.columnPo_NoReceive
            End Get
        End Property
        
        Friend ReadOnly Property TotalAmountReceiveColumn As DataColumn
            Get
                Return Me.columnTotalAmountReceive
            End Get
        End Property
        
        Friend ReadOnly Property ReminderColumn As DataColumn
            Get
                Return Me.columnReminder
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_purchase_order_headSearchRow
            Get
                Return CType(Me.Rows(index),Inv_purchase_order_headSearchRow)
            End Get
        End Property
        
        Public Event Inv_purchase_order_headSearchRowChanged As Inv_purchase_order_headSearchRowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearchRowChanging As Inv_purchase_order_headSearchRowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearchRowDeleted As Inv_purchase_order_headSearchRowChangeEventHandler
        
        Public Event Inv_purchase_order_headSearchRowDeleting As Inv_purchase_order_headSearchRowChangeEventHandler
        
        Public Overloads Sub AddInv_purchase_order_headSearchRow(ByVal row As Inv_purchase_order_headSearchRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_purchase_order_headSearchRow(ByVal po_no As String, ByVal date_po As String, ByVal cod_vendor As String, ByVal shipto_store_no As String, ByVal shipto_cod_customer As String, ByVal buyer_id As String, ByVal house_comments As String, ByVal vend_comments As String, ByVal buyer As String, ByVal TotalAmount As Double, ByVal Po_NoReceive As String, ByVal TotalAmountReceive As Double, ByVal Reminder As Decimal) As Inv_purchase_order_headSearchRow
            Dim rowInv_purchase_order_headSearchRow As Inv_purchase_order_headSearchRow = CType(Me.NewRow,Inv_purchase_order_headSearchRow)
            rowInv_purchase_order_headSearchRow.ItemArray = New Object() {po_no, date_po, cod_vendor, shipto_store_no, shipto_cod_customer, buyer_id, house_comments, vend_comments, buyer, TotalAmount, Po_NoReceive, TotalAmountReceive, Reminder}
            Me.Rows.Add(rowInv_purchase_order_headSearchRow)
            Return rowInv_purchase_order_headSearchRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_purchase_order_headSearchDataTable = CType(MyBase.Clone,Inv_purchase_order_headSearchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_purchase_order_headSearchDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpo_no = Me.Columns("po_no")
            Me.columndate_po = Me.Columns("date_po")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnshipto_store_no = Me.Columns("shipto_store_no")
            Me.columnshipto_cod_customer = Me.Columns("shipto_cod_customer")
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
            Me.columnbuyer = Me.Columns("buyer")
            Me.columnTotalAmount = Me.Columns("TotalAmount")
            Me.columnPo_NoReceive = Me.Columns("Po_NoReceive")
            Me.columnTotalAmountReceive = Me.Columns("TotalAmountReceive")
            Me.columnReminder = Me.Columns("Reminder")
        End Sub
        
        Private Sub InitClass()
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columndate_po = New DataColumn("date_po", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_po)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnshipto_store_no = New DataColumn("shipto_store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_store_no)
            Me.columnshipto_cod_customer = New DataColumn("shipto_cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshipto_cod_customer)
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.columnbuyer = New DataColumn("buyer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer)
            Me.columnTotalAmount = New DataColumn("TotalAmount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalAmount)
            Me.columnPo_NoReceive = New DataColumn("Po_NoReceive", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPo_NoReceive)
            Me.columnTotalAmountReceive = New DataColumn("TotalAmountReceive", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalAmountReceive)
            Me.columnReminder = New DataColumn("Reminder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReminder)
            Me.columnpo_no.AllowDBNull = false
            Me.columnTotalAmount.ReadOnly = true
            Me.columnTotalAmountReceive.ReadOnly = true
            Me.columnReminder.ReadOnly = true
        End Sub
        
        Public Function NewInv_purchase_order_headSearchRow() As Inv_purchase_order_headSearchRow
            Return CType(Me.NewRow,Inv_purchase_order_headSearchRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_purchase_order_headSearchRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_purchase_order_headSearchRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_purchase_order_headSearchRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearchRowChanged(Me, New Inv_purchase_order_headSearchRowChangeEvent(CType(e.Row,Inv_purchase_order_headSearchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_purchase_order_headSearchRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearchRowChanging(Me, New Inv_purchase_order_headSearchRowChangeEvent(CType(e.Row,Inv_purchase_order_headSearchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_purchase_order_headSearchRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearchRowDeleted(Me, New Inv_purchase_order_headSearchRowChangeEvent(CType(e.Row,Inv_purchase_order_headSearchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_purchase_order_headSearchRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_purchase_order_headSearchRowDeleting(Me, New Inv_purchase_order_headSearchRowChangeEvent(CType(e.Row,Inv_purchase_order_headSearchRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_purchase_order_headSearchRow(ByVal row As Inv_purchase_order_headSearchRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearchRow
        Inherits DataRow
        
        Private tableInv_purchase_order_headSearch As Inv_purchase_order_headSearchDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_purchase_order_headSearch = CType(Me.Table,Inv_purchase_order_headSearchDataTable)
        End Sub
        
        Public Property po_no As String
            Get
                Return CType(Me(Me.tableInv_purchase_order_headSearch.po_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.po_noColumn) = value
            End Set
        End Property
        
        Public Property date_po As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.date_poColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.date_poColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property shipto_store_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.shipto_store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.shipto_store_noColumn) = value
            End Set
        End Property
        
        Public Property shipto_cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.shipto_cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.shipto_cod_customerColumn) = value
            End Set
        End Property
        
        Public Property buyer_id As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.buyer_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Property buyer As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.buyerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.buyerColumn) = value
            End Set
        End Property
        
        Public Property TotalAmount As Double
            Get
                If Me.IsTotalAmountNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.TotalAmountColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.TotalAmountColumn) = value
            End Set
        End Property
        
        Public Property Po_NoReceive As String
            Get
                If Me.IsPo_NoReceiveNull Then
                    Return "''"
                Else
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.Po_NoReceiveColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.Po_NoReceiveColumn) = value
            End Set
        End Property
        
        Public Property TotalAmountReceive As Double
            Get
                If Me.IsTotalAmountReceiveNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.TotalAmountReceiveColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.TotalAmountReceiveColumn) = value
            End Set
        End Property
        
        Public Property Reminder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_purchase_order_headSearch.ReminderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_purchase_order_headSearch.ReminderColumn) = value
            End Set
        End Property
        
        Public Function Isdate_poNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.date_poColumn)
        End Function
        
        Public Sub Setdate_poNull()
            Me(Me.tableInv_purchase_order_headSearch.date_poColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_purchase_order_headSearch.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_store_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.shipto_store_noColumn)
        End Function
        
        Public Sub Setshipto_store_noNull()
            Me(Me.tableInv_purchase_order_headSearch.shipto_store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshipto_cod_customerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.shipto_cod_customerColumn)
        End Function
        
        Public Sub Setshipto_cod_customerNull()
            Me(Me.tableInv_purchase_order_headSearch.shipto_cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbuyer_idNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.buyer_idColumn)
        End Function
        
        Public Sub Setbuyer_idNull()
            Me(Me.tableInv_purchase_order_headSearch.buyer_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_purchase_order_headSearch.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_purchase_order_headSearch.vend_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbuyerNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.buyerColumn)
        End Function
        
        Public Sub SetbuyerNull()
            Me(Me.tableInv_purchase_order_headSearch.buyerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalAmountNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.TotalAmountColumn)
        End Function
        
        Public Sub SetTotalAmountNull()
            Me(Me.tableInv_purchase_order_headSearch.TotalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPo_NoReceiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.Po_NoReceiveColumn)
        End Function
        
        Public Sub SetPo_NoReceiveNull()
            Me(Me.tableInv_purchase_order_headSearch.Po_NoReceiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalAmountReceiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.TotalAmountReceiveColumn)
        End Function
        
        Public Sub SetTotalAmountReceiveNull()
            Me(Me.tableInv_purchase_order_headSearch.TotalAmountReceiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReminderNull() As Boolean
            Return Me.IsNull(Me.tableInv_purchase_order_headSearch.ReminderColumn)
        End Function
        
        Public Sub SetReminderNull()
            Me(Me.tableInv_purchase_order_headSearch.ReminderColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_purchase_order_headSearchRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_purchase_order_headSearchRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_purchase_order_headSearchRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_purchase_order_headSearchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
