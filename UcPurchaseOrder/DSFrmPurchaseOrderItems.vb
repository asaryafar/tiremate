'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPurchaseOrderItems
    Inherits DataSet
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableservice_center_head1 As service_center_head1DataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableinv_item As inv_itemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("service_center_head1")) Is Nothing) Then
                Me.Tables.Add(New service_center_head1DataTable(ds.Tables("service_center_head1")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("inv_item")) Is Nothing) Then
                Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head1 As service_center_head1DataTable
        Get
            Return Me.tableservice_center_head1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item As inv_itemDataTable
        Get
            Return Me.tableinv_item
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPurchaseOrderItems = CType(MyBase.Clone,DSFrmPurchaseOrderItems)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("service_center_head1")) Is Nothing) Then
            Me.Tables.Add(New service_center_head1DataTable(ds.Tables("service_center_head1")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("inv_item")) Is Nothing) Then
            Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableservice_center_head1 = CType(Me.Tables("service_center_head1"),service_center_head1DataTable)
        If (Not (Me.tableservice_center_head1) Is Nothing) Then
            Me.tableservice_center_head1.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableinv_item = CType(Me.Tables("inv_item"),inv_itemDataTable)
        If (Not (Me.tableinv_item) Is Nothing) Then
            Me.tableinv_item.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPurchaseOrderItems"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPurchaseOrderItems.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableservice_center_head1 = New service_center_head1DataTable
        Me.Tables.Add(Me.tableservice_center_head1)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableinv_item = New inv_itemDataTable
        Me.Tables.Add(Me.tableinv_item)
        Me.InitExpressions
    End Sub
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Private Sub InitExpressions()
        Me.tableservice_center_head1.ExCostColumn.Expression = "(COST+FET)*QTY"
        Me.tableservice_center_head.ExCostColumn.Expression = "qtyOrder *(cost+fet)"
        Me.tableinv_item.ExCostColumn.Expression = "qtyOrder *(cost+fet)"
    End Sub
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub service_center_head1RowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_head1RowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub inv_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnGL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal GL_account As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type, GL_account}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnGL_account = Me.Columns("GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableinv_tab_type_item.GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_head1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columnqty As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnExCost As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property ExCostColumn As DataColumn
            Get
                Return Me.columnExCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_head1Row
            Get
                Return CType(Me.Rows(index),service_center_head1Row)
            End Get
        End Property
        
        Public Event service_center_head1RowChanged As service_center_head1RowChangeEventHandler
        
        Public Event service_center_head1RowChanging As service_center_head1RowChangeEventHandler
        
        Public Event service_center_head1RowDeleted As service_center_head1RowChangeEventHandler
        
        Public Event service_center_head1RowDeleting As service_center_head1RowChangeEventHandler
        
        Public Overloads Sub Addservice_center_head1Row(ByVal row As service_center_head1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_head1Row(ByVal selected As Boolean, ByVal cod_select As String, ByVal qty As Decimal, ByVal desc_item As String, ByVal cost As Single, ByVal fet As Single, ByVal cod_brand As String, ByVal complete_desc_brand As String, ByVal ExCost As Single) As service_center_head1Row
            Dim rowservice_center_head1Row As service_center_head1Row = CType(Me.NewRow,service_center_head1Row)
            rowservice_center_head1Row.ItemArray = New Object() {selected, cod_select, qty, desc_item, cost, fet, cod_brand, complete_desc_brand, ExCost}
            Me.Rows.Add(rowservice_center_head1Row)
            Return rowservice_center_head1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_head1DataTable = CType(MyBase.Clone,service_center_head1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_head1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqty = Me.Columns("qty")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnExCost = Me.Columns("ExCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnExCost = New DataColumn("ExCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExCost)
            Me.columnqty.ReadOnly = true
            Me.columncost.AllowDBNull = false
            Me.columncod_brand.AllowDBNull = false
            Me.columnExCost.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_head1Row() As service_center_head1Row
            Return CType(Me.NewRow,service_center_head1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_head1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_head1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_head1RowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_head1RowChanged(Me, New service_center_head1RowChangeEvent(CType(e.Row,service_center_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_head1RowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_head1RowChanging(Me, New service_center_head1RowChangeEvent(CType(e.Row,service_center_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_head1RowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_head1RowDeleted(Me, New service_center_head1RowChangeEvent(CType(e.Row,service_center_head1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_head1RowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_head1RowDeleting(Me, New service_center_head1RowChangeEvent(CType(e.Row,service_center_head1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_head1Row(ByVal row As service_center_head1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_head1Row
        Inherits DataRow
        
        Private tableservice_center_head1 As service_center_head1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head1 = CType(Me.Table,service_center_head1DataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.selectedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.qtyColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Return CType(Me(Me.tableservice_center_head1.costColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_head1.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.fetColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableservice_center_head1.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head1.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property ExCost As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head1.ExCostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head1.ExCostColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableservice_center_head1.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_head1.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableservice_center_head1.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableservice_center_head1.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableservice_center_head1.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableservice_center_head1.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExCostNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head1.ExCostColumn)
        End Function
        
        Public Sub SetExCostNull()
            Me(Me.tableservice_center_head1.ExCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_head1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_head1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_head1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_head1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columnqtySold As DataColumn
        
        Private columnqtyOrder As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnline As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnExCost As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtySoldColumn As DataColumn
            Get
                Return Me.columnqtySold
            End Get
        End Property
        
        Friend ReadOnly Property qtyOrderColumn As DataColumn
            Get
                Return Me.columnqtyOrder
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property ExCostColumn As DataColumn
            Get
                Return Me.columnExCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal selected As Boolean, ByVal cod_select As String, ByVal qtySold As Integer, ByVal qtyOrder As Integer, ByVal desc_item As String, ByVal cost As Single, ByVal fet As Single, ByVal cod_brand As String, ByVal complete_desc_brand As String, ByVal line As String, ByVal on_hand As Single, ByVal ExCost As Decimal) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {selected, cod_select, qtySold, qtyOrder, desc_item, cost, fet, cod_brand, complete_desc_brand, line, on_hand, ExCost}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqtySold = Me.Columns("qtySold")
            Me.columnqtyOrder = Me.Columns("qtyOrder")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnline = Me.Columns("line")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnExCost = Me.Columns("ExCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqtySold = New DataColumn("qtySold", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtySold)
            Me.columnqtyOrder = New DataColumn("qtyOrder", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyOrder)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnExCost = New DataColumn("ExCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExCost)
            Me.columnqtySold.ReadOnly = true
            Me.columncost.AllowDBNull = false
            Me.columncod_brand.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnExCost.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.selectedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qtySold As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.qtySoldColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.qtySoldColumn) = value
            End Set
        End Property
        
        Public Property qtyOrder As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.qtyOrderColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.qtyOrderColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Return CType(Me(Me.tableservice_center_head.costColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_head.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.fetColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableservice_center_head.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableservice_center_head.lineColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.lineColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.on_handColumn) = value
            End Set
        End Property
        
        Public Property ExCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ExCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ExCostColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableservice_center_head.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_head.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtySoldNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.qtySoldColumn)
        End Function
        
        Public Sub SetqtySoldNull()
            Me(Me.tableservice_center_head.qtySoldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyOrderNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.qtyOrderColumn)
        End Function
        
        Public Sub SetqtyOrderNull()
            Me(Me.tableservice_center_head.qtyOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableservice_center_head.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableservice_center_head.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableservice_center_head.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableservice_center_head.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExCostNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ExCostColumn)
        End Function
        
        Public Sub SetExCostNull()
            Me(Me.tableservice_center_head.ExCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columncod_brand As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columnqtyReOrder As DataColumn
        
        Private columnqtyOrder As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnline As DataColumn
        
        Private columnmin_stock As DataColumn
        
        Private columnon_order As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnExCost As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtyReOrderColumn As DataColumn
            Get
                Return Me.columnqtyReOrder
            End Get
        End Property
        
        Friend ReadOnly Property qtyOrderColumn As DataColumn
            Get
                Return Me.columnqtyOrder
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property min_stockColumn As DataColumn
            Get
                Return Me.columnmin_stock
            End Get
        End Property
        
        Friend ReadOnly Property on_orderColumn As DataColumn
            Get
                Return Me.columnon_order
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property ExCostColumn As DataColumn
            Get
                Return Me.columnExCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemRow
            Get
                Return CType(Me.Rows(index),inv_itemRow)
            End Get
        End Property
        
        Public Event inv_itemRowChanged As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowChanging As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleted As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleting As inv_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemRow(ByVal selected As Boolean, ByVal desc_item As String, ByVal cost As Single, ByVal fet As Single, ByVal cod_brand As String, ByVal cod_select As String, ByVal qtyReOrder As Long, ByVal qtyOrder As Long, ByVal complete_desc_brand As String, ByVal line As String, ByVal min_stock As Single, ByVal on_order As Single, ByVal on_hand As Single, ByVal ExCost As Decimal) As inv_itemRow
            Dim rowinv_itemRow As inv_itemRow = CType(Me.NewRow,inv_itemRow)
            rowinv_itemRow.ItemArray = New Object() {selected, desc_item, cost, fet, cod_brand, cod_select, qtyReOrder, qtyOrder, complete_desc_brand, line, min_stock, on_order, on_hand, ExCost}
            Me.Rows.Add(rowinv_itemRow)
            Return rowinv_itemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemDataTable = CType(MyBase.Clone,inv_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqtyReOrder = Me.Columns("qtyReOrder")
            Me.columnqtyOrder = Me.Columns("qtyOrder")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnline = Me.Columns("line")
            Me.columnmin_stock = Me.Columns("min_stock")
            Me.columnon_order = Me.Columns("on_order")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnExCost = Me.Columns("ExCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqtyReOrder = New DataColumn("qtyReOrder", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyReOrder)
            Me.columnqtyOrder = New DataColumn("qtyOrder", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqtyOrder)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnmin_stock = New DataColumn("min_stock", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmin_stock)
            Me.columnon_order = New DataColumn("on_order", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_order)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnExCost = New DataColumn("ExCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExCost)
            Me.columncost.AllowDBNull = false
            Me.columncod_brand.AllowDBNull = false
            Me.columncod_select.AllowDBNull = false
            Me.columnqtyReOrder.ReadOnly = true
            Me.columnline.AllowDBNull = false
            Me.columnExCost.ReadOnly = true
        End Sub
        
        Public Function Newinv_itemRow() As inv_itemRow
            Return CType(Me.NewRow,inv_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanged(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanging(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleted(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleting(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRow
        Inherits DataRow
        
        Private tableinv_item As inv_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item = CType(Me.Table,inv_itemDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.selectedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.selectedColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Return CType(Me(Me.tableinv_item.costColumn),Single)
            End Get
            Set
                Me(Me.tableinv_item.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.fetColumn) = value
            End Set
        End Property
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_item.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Return CType(Me(Me.tableinv_item.cod_selectColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qtyReOrder As Long
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.qtyReOrderColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.qtyReOrderColumn) = value
            End Set
        End Property
        
        Public Property qtyOrder As Long
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.qtyOrderColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.qtyOrderColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_item.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.lineColumn) = value
            End Set
        End Property
        
        Public Property min_stock As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.min_stockColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.min_stockColumn) = value
            End Set
        End Property
        
        Public Property on_order As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.on_orderColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.on_orderColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.on_handColumn) = value
            End Set
        End Property
        
        Public Property ExCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.ExCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.ExCostColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableinv_item.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_item.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyReOrderNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.qtyReOrderColumn)
        End Function
        
        Public Sub SetqtyReOrderNull()
            Me(Me.tableinv_item.qtyReOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyOrderNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.qtyOrderColumn)
        End Function
        
        Public Sub SetqtyOrderNull()
            Me(Me.tableinv_item.qtyOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_item.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismin_stockNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.min_stockColumn)
        End Function
        
        Public Sub Setmin_stockNull()
            Me(Me.tableinv_item.min_stockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_orderNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.on_orderColumn)
        End Function
        
        Public Sub Seton_orderNull()
            Me(Me.tableinv_item.on_orderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableinv_item.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExCostNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.ExCostColumn)
        End Function
        
        Public Sub SetExCostNull()
            Me(Me.tableinv_item.ExCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
