'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmReceiveReturnProduct
    Inherits DataSet
    
    Private tableInv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
    
    Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Inv_Receive_product_dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_product_dtlDataTable(ds.Tables("Inv_Receive_product_dtl")))
            End If
            If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
        Get
            Return Me.tableInv_Receive_product_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_Products_head As Inv_Receive_Products_headDataTable
        Get
            Return Me.tableInv_Receive_Products_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmReceiveReturnProduct = CType(MyBase.Clone,DSFrmReceiveReturnProduct)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Inv_Receive_product_dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_product_dtlDataTable(ds.Tables("Inv_Receive_product_dtl")))
        End If
        If (Not (ds.Tables("Inv_Receive_Products_head")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_Products_headDataTable(ds.Tables("Inv_Receive_Products_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInv_Receive_product_dtl = CType(Me.Tables("Inv_Receive_product_dtl"),Inv_Receive_product_dtlDataTable)
        If (Not (Me.tableInv_Receive_product_dtl) Is Nothing) Then
            Me.tableInv_Receive_product_dtl.InitVars
        End If
        Me.tableInv_Receive_Products_head = CType(Me.Tables("Inv_Receive_Products_head"),Inv_Receive_Products_headDataTable)
        If (Not (Me.tableInv_Receive_Products_head) Is Nothing) Then
            Me.tableInv_Receive_Products_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmReceiveReturnProduct"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmReceiveReturnProduct.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInv_Receive_product_dtl = New Inv_Receive_product_dtlDataTable
        Me.Tables.Add(Me.tableInv_Receive_product_dtl)
        Me.tableInv_Receive_Products_head = New Inv_Receive_Products_headDataTable
        Me.Tables.Add(Me.tableInv_Receive_Products_head)
    End Sub
    
    Private Function ShouldSerializeInv_Receive_product_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Receive_Products_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Inv_Receive_product_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_product_dtlRowChangeEvent)
    
    Public Delegate Sub Inv_Receive_Products_headRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_Products_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_receive_ref As DataColumn
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Private columncost As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnInvItemCost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnExCost As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_product_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property InvItemCostColumn As DataColumn
            Get
                Return Me.columnInvItemCost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property ExCostColumn As DataColumn
            Get
                Return Me.columnExCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_product_dtlRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_product_dtlRow)
            End Get
        End Property
        
        Public Event Inv_Receive_product_dtlRowChanged As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowChanging As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowDeleted As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_dtlRowDeleting As Inv_Receive_product_dtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_product_dtlRow(ByVal row As Inv_Receive_product_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_product_dtlRow(ByVal id_receive_ref As String, ByVal item_no As String, ByVal qty As Single, ByVal cost As Single, ByVal taxable As Boolean, ByVal desc_item As String, ByVal InvItemCost As Single, ByVal fet As Single, ByVal ExCost As Decimal) As Inv_Receive_product_dtlRow
            Dim rowInv_Receive_product_dtlRow As Inv_Receive_product_dtlRow = CType(Me.NewRow,Inv_Receive_product_dtlRow)
            rowInv_Receive_product_dtlRow.ItemArray = New Object() {id_receive_ref, item_no, qty, cost, taxable, desc_item, InvItemCost, fet, ExCost}
            Me.Rows.Add(rowInv_Receive_product_dtlRow)
            Return rowInv_Receive_product_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_product_dtlDataTable = CType(MyBase.Clone,Inv_Receive_product_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_product_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
            Me.columncost = Me.Columns("cost")
            Me.columntaxable = Me.Columns("taxable")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnInvItemCost = Me.Columns("InvItemCost")
            Me.columnfet = Me.Columns("fet")
            Me.columnExCost = Me.Columns("ExCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnInvItemCost = New DataColumn("InvItemCost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvItemCost)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnExCost = New DataColumn("ExCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExCost)
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function NewInv_Receive_product_dtlRow() As Inv_Receive_product_dtlRow
            Return CType(Me.NewRow,Inv_Receive_product_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_product_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_product_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_product_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowChanged(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_product_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowChanging(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_product_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowDeleted(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_product_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_dtlRowDeleting(Me, New Inv_Receive_product_dtlRowChangeEvent(CType(e.Row,Inv_Receive_product_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_product_dtlRow(ByVal row As Inv_Receive_product_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlRow
        Inherits DataRow
        
        Private tableInv_Receive_product_dtl As Inv_Receive_product_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_product_dtl = CType(Me.Table,Inv_Receive_product_dtlDataTable)
        End Sub
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_dtl.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                If Me.IsqtyNull Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableInv_Receive_product_dtl.qtyColumn),Single)
                End If
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                If Me.IscostNull Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableInv_Receive_product_dtl.costColumn),Single)
                End If
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.costColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property InvItemCost As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property ExCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_dtl.ExCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_dtl.ExCostColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_Receive_product_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableInv_Receive_product_dtl.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableInv_Receive_product_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableInv_Receive_product_dtl.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvItemCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.InvItemCostColumn)
        End Function
        
        Public Sub SetInvItemCostNull()
            Me(Me.tableInv_Receive_product_dtl.InvItemCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableInv_Receive_product_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExCostNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_dtl.ExCostColumn)
        End Function
        
        Public Sub SetExCostNull()
            Me(Me.tableInv_Receive_product_dtl.ExCostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_product_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_product_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_product_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_receive_ref As DataColumn
        
        Private columndate_receive As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnbill_credit As DataColumn
        
        Private columnbill_receive As DataColumn
        
        Private columnap_term As DataColumn
        
        Private columnreceipt_bill_date As DataColumn
        
        Private columnvendor_ref_no As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnhouse_comments As DataColumn
        
        Private columnvend_comments As DataColumn
        
        Private columnDiscount As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_Products_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property date_receiveColumn As DataColumn
            Get
                Return Me.columndate_receive
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property bill_creditColumn As DataColumn
            Get
                Return Me.columnbill_credit
            End Get
        End Property
        
        Friend ReadOnly Property bill_receiveColumn As DataColumn
            Get
                Return Me.columnbill_receive
            End Get
        End Property
        
        Friend ReadOnly Property ap_termColumn As DataColumn
            Get
                Return Me.columnap_term
            End Get
        End Property
        
        Friend ReadOnly Property receipt_bill_dateColumn As DataColumn
            Get
                Return Me.columnreceipt_bill_date
            End Get
        End Property
        
        Friend ReadOnly Property vendor_ref_noColumn As DataColumn
            Get
                Return Me.columnvendor_ref_no
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property house_commentsColumn As DataColumn
            Get
                Return Me.columnhouse_comments
            End Get
        End Property
        
        Friend ReadOnly Property vend_commentsColumn As DataColumn
            Get
                Return Me.columnvend_comments
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_Products_headRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_Products_headRow)
            End Get
        End Property
        
        Public Event Inv_Receive_Products_headRowChanged As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowChanging As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleted As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Event Inv_Receive_Products_headRowDeleting As Inv_Receive_Products_headRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_Products_headRow(ByVal id_receive_ref As String, ByVal date_receive As String, ByVal cod_vendor As String, ByVal bill_credit As String, ByVal bill_receive As Boolean, ByVal ap_term As String, ByVal receipt_bill_date As String, ByVal vendor_ref_no As String, ByVal due_date As String, ByVal po_no As String, ByVal house_comments As String, ByVal vend_comments As String, ByVal Discount As Decimal) As Inv_Receive_Products_headRow
            Dim rowInv_Receive_Products_headRow As Inv_Receive_Products_headRow = CType(Me.NewRow,Inv_Receive_Products_headRow)
            rowInv_Receive_Products_headRow.ItemArray = New Object() {id_receive_ref, date_receive, cod_vendor, bill_credit, bill_receive, ap_term, receipt_bill_date, vendor_ref_no, due_date, po_no, house_comments, vend_comments, Discount}
            Me.Rows.Add(rowInv_Receive_Products_headRow)
            Return rowInv_Receive_Products_headRow
        End Function
        
        Public Function FindByid_receive_ref(ByVal id_receive_ref As String) As Inv_Receive_Products_headRow
            Return CType(Me.Rows.Find(New Object() {id_receive_ref}),Inv_Receive_Products_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_Products_headDataTable = CType(MyBase.Clone,Inv_Receive_Products_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_Products_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columndate_receive = Me.Columns("date_receive")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnbill_credit = Me.Columns("bill_credit")
            Me.columnbill_receive = Me.Columns("bill_receive")
            Me.columnap_term = Me.Columns("ap_term")
            Me.columnreceipt_bill_date = Me.Columns("receipt_bill_date")
            Me.columnvendor_ref_no = Me.Columns("vendor_ref_no")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnhouse_comments = Me.Columns("house_comments")
            Me.columnvend_comments = Me.Columns("vend_comments")
            Me.columnDiscount = Me.Columns("Discount")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columndate_receive = New DataColumn("date_receive", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnbill_credit = New DataColumn("bill_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_credit)
            Me.columnbill_receive = New DataColumn("bill_receive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbill_receive)
            Me.columnap_term = New DataColumn("ap_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnap_term)
            Me.columnreceipt_bill_date = New DataColumn("receipt_bill_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceipt_bill_date)
            Me.columnvendor_ref_no = New DataColumn("vendor_ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_ref_no)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnhouse_comments = New DataColumn("house_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comments)
            Me.columnvend_comments = New DataColumn("vend_comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvend_comments)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_receive_ref}, true))
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnid_receive_ref.Unique = true
        End Sub
        
        Public Function NewInv_Receive_Products_headRow() As Inv_Receive_Products_headRow
            Return CType(Me.NewRow,Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_Products_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_Products_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_Products_headRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanged(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_Products_headRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowChanging(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleted(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_Products_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_Products_headRowDeleting(Me, New Inv_Receive_Products_headRowChangeEvent(CType(e.Row,Inv_Receive_Products_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_Products_headRow(ByVal row As Inv_Receive_Products_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRow
        Inherits DataRow
        
        Private tableInv_Receive_Products_head As Inv_Receive_Products_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_Products_head = CType(Me.Table,Inv_Receive_Products_headDataTable)
        End Sub
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_Products_head.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property date_receive As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.date_receiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property bill_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.bill_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.bill_creditColumn) = value
            End Set
        End Property
        
        Public Property bill_receive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.bill_receiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.bill_receiveColumn) = value
            End Set
        End Property
        
        Public Property ap_term As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.ap_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.ap_termColumn) = value
            End Set
        End Property
        
        Public Property receipt_bill_date As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn) = value
            End Set
        End Property
        
        Public Property vendor_ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.due_dateColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property house_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.house_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.house_commentsColumn) = value
            End Set
        End Property
        
        Public Property vend_comments As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.vend_commentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.vend_commentsColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_Products_head.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_Products_head.DiscountColumn) = value
            End Set
        End Property
        
        Public Function Isdate_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.date_receiveColumn)
        End Function
        
        Public Sub Setdate_receiveNull()
            Me(Me.tableInv_Receive_Products_head.date_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableInv_Receive_Products_head.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_creditNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.bill_creditColumn)
        End Function
        
        Public Sub Setbill_creditNull()
            Me(Me.tableInv_Receive_Products_head.bill_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbill_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.bill_receiveColumn)
        End Function
        
        Public Sub Setbill_receiveNull()
            Me(Me.tableInv_Receive_Products_head.bill_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isap_termNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.ap_termColumn)
        End Function
        
        Public Sub Setap_termNull()
            Me(Me.tableInv_Receive_Products_head.ap_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceipt_bill_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn)
        End Function
        
        Public Sub Setreceipt_bill_dateNull()
            Me(Me.tableInv_Receive_Products_head.receipt_bill_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_ref_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.vendor_ref_noColumn)
        End Function
        
        Public Sub Setvendor_ref_noNull()
            Me(Me.tableInv_Receive_Products_head.vendor_ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableInv_Receive_Products_head.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableInv_Receive_Products_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.house_commentsColumn)
        End Function
        
        Public Sub Sethouse_commentsNull()
            Me(Me.tableInv_Receive_Products_head.house_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvend_commentsNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.vend_commentsColumn)
        End Function
        
        Public Sub Setvend_commentsNull()
            Me(Me.tableInv_Receive_Products_head.vend_commentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_Products_head.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableInv_Receive_Products_head.DiscountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_Products_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_Products_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_Products_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_Products_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
