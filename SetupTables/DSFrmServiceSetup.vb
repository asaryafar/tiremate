'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmServiceSetup
    Inherits DataSet
    
    Private tablebas_zipcode As bas_zipcodeDataTable
    
    Private tablecust_tab_class As cust_tab_classDataTable
    
    Private tablecust_tab_source As cust_tab_sourceDataTable
    
    Private tablecust_tab_territory As cust_tab_territoryDataTable
    
    Private tablecust_tab_type As cust_tab_typeDataTable
    
    Private tableinv_tab_oil_type As inv_tab_oil_typeDataTable
    
    Private tableinv_tab_quarts As inv_tab_quartsDataTable
    
    Private tableinv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
    
    Private tableinv_tab_service_category As inv_tab_service_categoryDataTable
    
    Private tableinv_tab_service_type As inv_tab_service_typeDataTable
    
    Private tableinv_tab_line As inv_tab_lineDataTable
    
    Private tableinv_buyer As inv_buyerDataTable
    
    Private tableinv_tab_vendor_class As inv_tab_vendor_classDataTable
    
    Private tableinv_tab_vendor_type As inv_tab_vendor_typeDataTable
    
    Private tableSTORE_SETUP As STORE_SETUPDataTable
    
    Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
                Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
            End If
            If (Not (ds.Tables("cust_tab_class")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_classDataTable(ds.Tables("cust_tab_class")))
            End If
            If (Not (ds.Tables("cust_tab_source")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_sourceDataTable(ds.Tables("cust_tab_source")))
            End If
            If (Not (ds.Tables("cust_tab_territory")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_territoryDataTable(ds.Tables("cust_tab_territory")))
            End If
            If (Not (ds.Tables("cust_tab_type")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_typeDataTable(ds.Tables("cust_tab_type")))
            End If
            If (Not (ds.Tables("inv_tab_oil_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_oil_typeDataTable(ds.Tables("inv_tab_oil_type")))
            End If
            If (Not (ds.Tables("inv_tab_quarts")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_quartsDataTable(ds.Tables("inv_tab_quarts")))
            End If
            If (Not (ds.Tables("inv_tab_vehicle_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vehicle_typeDataTable(ds.Tables("inv_tab_vehicle_type")))
            End If
            If (Not (ds.Tables("inv_tab_service_category")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_service_categoryDataTable(ds.Tables("inv_tab_service_category")))
            End If
            If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
            End If
            If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
            End If
            If (Not (ds.Tables("inv_buyer")) Is Nothing) Then
                Me.Tables.Add(New inv_buyerDataTable(ds.Tables("inv_buyer")))
            End If
            If (Not (ds.Tables("inv_tab_vendor_class")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vendor_classDataTable(ds.Tables("inv_tab_vendor_class")))
            End If
            If (Not (ds.Tables("inv_tab_vendor_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vendor_typeDataTable(ds.Tables("inv_tab_vendor_type")))
            End If
            If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
                Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
            End If
            If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
                Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_zipcode As bas_zipcodeDataTable
        Get
            Return Me.tablebas_zipcode
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_class As cust_tab_classDataTable
        Get
            Return Me.tablecust_tab_class
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_source As cust_tab_sourceDataTable
        Get
            Return Me.tablecust_tab_source
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_territory As cust_tab_territoryDataTable
        Get
            Return Me.tablecust_tab_territory
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_type As cust_tab_typeDataTable
        Get
            Return Me.tablecust_tab_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_oil_type As inv_tab_oil_typeDataTable
        Get
            Return Me.tableinv_tab_oil_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_quarts As inv_tab_quartsDataTable
        Get
            Return Me.tableinv_tab_quarts
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
        Get
            Return Me.tableinv_tab_vehicle_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_service_category As inv_tab_service_categoryDataTable
        Get
            Return Me.tableinv_tab_service_category
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_service_type As inv_tab_service_typeDataTable
        Get
            Return Me.tableinv_tab_service_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_line As inv_tab_lineDataTable
        Get
            Return Me.tableinv_tab_line
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_buyer As inv_buyerDataTable
        Get
            Return Me.tableinv_buyer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vendor_class As inv_tab_vendor_classDataTable
        Get
            Return Me.tableinv_tab_vendor_class
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vendor_type As inv_tab_vendor_typeDataTable
        Get
            Return Me.tableinv_tab_vendor_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STORE_SETUP As STORE_SETUPDataTable
        Get
            Return Me.tableSTORE_SETUP
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        Get
            Return Me.tableGL_TAB_AR_TERM
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmServiceSetup = CType(MyBase.Clone,DSFrmServiceSetup)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
            Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
        End If
        If (Not (ds.Tables("cust_tab_class")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_classDataTable(ds.Tables("cust_tab_class")))
        End If
        If (Not (ds.Tables("cust_tab_source")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_sourceDataTable(ds.Tables("cust_tab_source")))
        End If
        If (Not (ds.Tables("cust_tab_territory")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_territoryDataTable(ds.Tables("cust_tab_territory")))
        End If
        If (Not (ds.Tables("cust_tab_type")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_typeDataTable(ds.Tables("cust_tab_type")))
        End If
        If (Not (ds.Tables("inv_tab_oil_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_oil_typeDataTable(ds.Tables("inv_tab_oil_type")))
        End If
        If (Not (ds.Tables("inv_tab_quarts")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_quartsDataTable(ds.Tables("inv_tab_quarts")))
        End If
        If (Not (ds.Tables("inv_tab_vehicle_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vehicle_typeDataTable(ds.Tables("inv_tab_vehicle_type")))
        End If
        If (Not (ds.Tables("inv_tab_service_category")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_service_categoryDataTable(ds.Tables("inv_tab_service_category")))
        End If
        If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
        End If
        If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
        End If
        If (Not (ds.Tables("inv_buyer")) Is Nothing) Then
            Me.Tables.Add(New inv_buyerDataTable(ds.Tables("inv_buyer")))
        End If
        If (Not (ds.Tables("inv_tab_vendor_class")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vendor_classDataTable(ds.Tables("inv_tab_vendor_class")))
        End If
        If (Not (ds.Tables("inv_tab_vendor_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vendor_typeDataTable(ds.Tables("inv_tab_vendor_type")))
        End If
        If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
            Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
        End If
        If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
            Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_zipcode = CType(Me.Tables("bas_zipcode"),bas_zipcodeDataTable)
        If (Not (Me.tablebas_zipcode) Is Nothing) Then
            Me.tablebas_zipcode.InitVars
        End If
        Me.tablecust_tab_class = CType(Me.Tables("cust_tab_class"),cust_tab_classDataTable)
        If (Not (Me.tablecust_tab_class) Is Nothing) Then
            Me.tablecust_tab_class.InitVars
        End If
        Me.tablecust_tab_source = CType(Me.Tables("cust_tab_source"),cust_tab_sourceDataTable)
        If (Not (Me.tablecust_tab_source) Is Nothing) Then
            Me.tablecust_tab_source.InitVars
        End If
        Me.tablecust_tab_territory = CType(Me.Tables("cust_tab_territory"),cust_tab_territoryDataTable)
        If (Not (Me.tablecust_tab_territory) Is Nothing) Then
            Me.tablecust_tab_territory.InitVars
        End If
        Me.tablecust_tab_type = CType(Me.Tables("cust_tab_type"),cust_tab_typeDataTable)
        If (Not (Me.tablecust_tab_type) Is Nothing) Then
            Me.tablecust_tab_type.InitVars
        End If
        Me.tableinv_tab_oil_type = CType(Me.Tables("inv_tab_oil_type"),inv_tab_oil_typeDataTable)
        If (Not (Me.tableinv_tab_oil_type) Is Nothing) Then
            Me.tableinv_tab_oil_type.InitVars
        End If
        Me.tableinv_tab_quarts = CType(Me.Tables("inv_tab_quarts"),inv_tab_quartsDataTable)
        If (Not (Me.tableinv_tab_quarts) Is Nothing) Then
            Me.tableinv_tab_quarts.InitVars
        End If
        Me.tableinv_tab_vehicle_type = CType(Me.Tables("inv_tab_vehicle_type"),inv_tab_vehicle_typeDataTable)
        If (Not (Me.tableinv_tab_vehicle_type) Is Nothing) Then
            Me.tableinv_tab_vehicle_type.InitVars
        End If
        Me.tableinv_tab_service_category = CType(Me.Tables("inv_tab_service_category"),inv_tab_service_categoryDataTable)
        If (Not (Me.tableinv_tab_service_category) Is Nothing) Then
            Me.tableinv_tab_service_category.InitVars
        End If
        Me.tableinv_tab_service_type = CType(Me.Tables("inv_tab_service_type"),inv_tab_service_typeDataTable)
        If (Not (Me.tableinv_tab_service_type) Is Nothing) Then
            Me.tableinv_tab_service_type.InitVars
        End If
        Me.tableinv_tab_line = CType(Me.Tables("inv_tab_line"),inv_tab_lineDataTable)
        If (Not (Me.tableinv_tab_line) Is Nothing) Then
            Me.tableinv_tab_line.InitVars
        End If
        Me.tableinv_buyer = CType(Me.Tables("inv_buyer"),inv_buyerDataTable)
        If (Not (Me.tableinv_buyer) Is Nothing) Then
            Me.tableinv_buyer.InitVars
        End If
        Me.tableinv_tab_vendor_class = CType(Me.Tables("inv_tab_vendor_class"),inv_tab_vendor_classDataTable)
        If (Not (Me.tableinv_tab_vendor_class) Is Nothing) Then
            Me.tableinv_tab_vendor_class.InitVars
        End If
        Me.tableinv_tab_vendor_type = CType(Me.Tables("inv_tab_vendor_type"),inv_tab_vendor_typeDataTable)
        If (Not (Me.tableinv_tab_vendor_type) Is Nothing) Then
            Me.tableinv_tab_vendor_type.InitVars
        End If
        Me.tableSTORE_SETUP = CType(Me.Tables("STORE_SETUP"),STORE_SETUPDataTable)
        If (Not (Me.tableSTORE_SETUP) Is Nothing) Then
            Me.tableSTORE_SETUP.InitVars
        End If
        Me.tableGL_TAB_AR_TERM = CType(Me.Tables("GL_TAB_AR_TERM"),GL_TAB_AR_TERMDataTable)
        If (Not (Me.tableGL_TAB_AR_TERM) Is Nothing) Then
            Me.tableGL_TAB_AR_TERM.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmServiceSetup"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmServiceSetup.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_zipcode = New bas_zipcodeDataTable
        Me.Tables.Add(Me.tablebas_zipcode)
        Me.tablecust_tab_class = New cust_tab_classDataTable
        Me.Tables.Add(Me.tablecust_tab_class)
        Me.tablecust_tab_source = New cust_tab_sourceDataTable
        Me.Tables.Add(Me.tablecust_tab_source)
        Me.tablecust_tab_territory = New cust_tab_territoryDataTable
        Me.Tables.Add(Me.tablecust_tab_territory)
        Me.tablecust_tab_type = New cust_tab_typeDataTable
        Me.Tables.Add(Me.tablecust_tab_type)
        Me.tableinv_tab_oil_type = New inv_tab_oil_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_oil_type)
        Me.tableinv_tab_quarts = New inv_tab_quartsDataTable
        Me.Tables.Add(Me.tableinv_tab_quarts)
        Me.tableinv_tab_vehicle_type = New inv_tab_vehicle_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_vehicle_type)
        Me.tableinv_tab_service_category = New inv_tab_service_categoryDataTable
        Me.Tables.Add(Me.tableinv_tab_service_category)
        Me.tableinv_tab_service_type = New inv_tab_service_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_service_type)
        Me.tableinv_tab_line = New inv_tab_lineDataTable
        Me.Tables.Add(Me.tableinv_tab_line)
        Me.tableinv_buyer = New inv_buyerDataTable
        Me.Tables.Add(Me.tableinv_buyer)
        Me.tableinv_tab_vendor_class = New inv_tab_vendor_classDataTable
        Me.Tables.Add(Me.tableinv_tab_vendor_class)
        Me.tableinv_tab_vendor_type = New inv_tab_vendor_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_vendor_type)
        Me.tableSTORE_SETUP = New STORE_SETUPDataTable
        Me.Tables.Add(Me.tableSTORE_SETUP)
        Me.tableGL_TAB_AR_TERM = New GL_TAB_AR_TERMDataTable
        Me.Tables.Add(Me.tableGL_TAB_AR_TERM)
    End Sub
    
    Private Function ShouldSerializebas_zipcode() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_class() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_source() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_territory() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_oil_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_quarts() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vehicle_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_service_category() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_service_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_line() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_buyer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vendor_class() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vendor_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTORE_SETUP() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_TAB_AR_TERM() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_zipcodeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_zipcodeRowChangeEvent)
    
    Public Delegate Sub cust_tab_classRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_classRowChangeEvent)
    
    Public Delegate Sub cust_tab_sourceRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_sourceRowChangeEvent)
    
    Public Delegate Sub cust_tab_territoryRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_territoryRowChangeEvent)
    
    Public Delegate Sub cust_tab_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_typeRowChangeEvent)
    
    Public Delegate Sub inv_tab_oil_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_oil_typeRowChangeEvent)
    
    Public Delegate Sub inv_tab_quartsRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_quartsRowChangeEvent)
    
    Public Delegate Sub inv_tab_vehicle_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vehicle_typeRowChangeEvent)
    
    Public Delegate Sub inv_tab_service_categoryRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_service_categoryRowChangeEvent)
    
    Public Delegate Sub inv_tab_service_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_service_typeRowChangeEvent)
    
    Public Delegate Sub inv_tab_lineRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_lineRowChangeEvent)
    
    Public Delegate Sub inv_buyerRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_buyerRowChangeEvent)
    
    Public Delegate Sub inv_tab_vendor_classRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vendor_classRowChangeEvent)
    
    Public Delegate Sub inv_tab_vendor_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vendor_typeRowChangeEvent)
    
    Public Delegate Sub STORE_SETUPRowChangeEventHandler(ByVal sender As Object, ByVal e As STORE_SETUPRowChangeEvent)
    
    Public Delegate Sub GL_TAB_AR_TERMRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_TAB_AR_TERMRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_zipcode")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_zipcodeRow
            Get
                Return CType(Me.Rows(index),bas_zipcodeRow)
            End Get
        End Property
        
        Public Event bas_zipcodeRowChanged As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowChanging As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleted As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleting As bas_zipcodeRowChangeEventHandler
        
        Public Overloads Sub Addbas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_zipcodeRow(ByVal state As String) As bas_zipcodeRow
            Dim rowbas_zipcodeRow As bas_zipcodeRow = CType(Me.NewRow,bas_zipcodeRow)
            rowbas_zipcodeRow.ItemArray = New Object() {state}
            Me.Rows.Add(rowbas_zipcodeRow)
            Return rowbas_zipcodeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_zipcodeDataTable = CType(MyBase.Clone,bas_zipcodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_zipcodeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
        End Sub
        
        Public Function Newbas_zipcodeRow() As bas_zipcodeRow
            Return CType(Me.NewRow,bas_zipcodeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_zipcodeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_zipcodeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_zipcodeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanged(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_zipcodeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanging(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_zipcodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleted(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_zipcodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleting(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRow
        Inherits DataRow
        
        Private tablebas_zipcode As bas_zipcodeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_zipcode = CType(Me.Table,bas_zipcodeDataTable)
        End Sub
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.stateColumn) = value
            End Set
        End Property
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tablebas_zipcode.stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_zipcodeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_zipcodeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_zipcodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_class As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_class")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_classRow
            Get
                Return CType(Me.Rows(index),cust_tab_classRow)
            End Get
        End Property
        
        Public Event cust_tab_classRowChanged As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowChanging As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowDeleted As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowDeleting As cust_tab_classRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_classRow(ByVal row As cust_tab_classRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_classRow(ByVal cod_class As String, ByVal desc_class As String) As cust_tab_classRow
            Dim rowcust_tab_classRow As cust_tab_classRow = CType(Me.NewRow,cust_tab_classRow)
            rowcust_tab_classRow.ItemArray = New Object() {cod_class, desc_class}
            Me.Rows.Add(rowcust_tab_classRow)
            Return rowcust_tab_classRow
        End Function
        
        Public Function FindBycod_class(ByVal cod_class As String) As cust_tab_classRow
            Return CType(Me.Rows.Find(New Object() {cod_class}),cust_tab_classRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_classDataTable = CType(MyBase.Clone,cust_tab_classDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_classDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_class = Me.Columns("cod_class")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_class}, true))
            Me.columncod_class.AllowDBNull = false
            Me.columncod_class.Unique = true
        End Sub
        
        Public Function Newcust_tab_classRow() As cust_tab_classRow
            Return CType(Me.NewRow,cust_tab_classRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_classRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_classRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_classRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowChanged(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_classRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowChanging(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_classRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowDeleted(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_classRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowDeleting(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_classRow(ByVal row As cust_tab_classRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classRow
        Inherits DataRow
        
        Private tablecust_tab_class As cust_tab_classDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_class = CType(Me.Table,cust_tab_classDataTable)
        End Sub
        
        Public Property cod_class As String
            Get
                Return CType(Me(Me.tablecust_tab_class.cod_classColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_class.cod_classColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_class.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_class.desc_classColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_class.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tablecust_tab_class.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_classRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_classRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_classRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_source As DataColumn
        
        Private columndesc_source As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_source")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property desc_sourceColumn As DataColumn
            Get
                Return Me.columndesc_source
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_sourceRow
            Get
                Return CType(Me.Rows(index),cust_tab_sourceRow)
            End Get
        End Property
        
        Public Event cust_tab_sourceRowChanged As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowChanging As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowDeleted As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowDeleting As cust_tab_sourceRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_sourceRow(ByVal row As cust_tab_sourceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_sourceRow(ByVal cod_source As String, ByVal desc_source As String) As cust_tab_sourceRow
            Dim rowcust_tab_sourceRow As cust_tab_sourceRow = CType(Me.NewRow,cust_tab_sourceRow)
            rowcust_tab_sourceRow.ItemArray = New Object() {cod_source, desc_source}
            Me.Rows.Add(rowcust_tab_sourceRow)
            Return rowcust_tab_sourceRow
        End Function
        
        Public Function FindBycod_source(ByVal cod_source As String) As cust_tab_sourceRow
            Return CType(Me.Rows.Find(New Object() {cod_source}),cust_tab_sourceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_sourceDataTable = CType(MyBase.Clone,cust_tab_sourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_sourceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_source = Me.Columns("cod_source")
            Me.columndesc_source = Me.Columns("desc_source")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columndesc_source = New DataColumn("desc_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_source)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_source}, true))
            Me.columncod_source.AllowDBNull = false
            Me.columncod_source.Unique = true
        End Sub
        
        Public Function Newcust_tab_sourceRow() As cust_tab_sourceRow
            Return CType(Me.NewRow,cust_tab_sourceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_sourceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_sourceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_sourceRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowChanged(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_sourceRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowChanging(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_sourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowDeleted(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_sourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowDeleting(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_sourceRow(ByVal row As cust_tab_sourceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceRow
        Inherits DataRow
        
        Private tablecust_tab_source As cust_tab_sourceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_source = CType(Me.Table,cust_tab_sourceDataTable)
        End Sub
        
        Public Property cod_source As String
            Get
                Return CType(Me(Me.tablecust_tab_source.cod_sourceColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_source.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property desc_source As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_source.desc_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_source.desc_sourceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sourceNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_source.desc_sourceColumn)
        End Function
        
        Public Sub Setdesc_sourceNull()
            Me(Me.tablecust_tab_source.desc_sourceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_sourceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_sourceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_sourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_territoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_territory As DataColumn
        
        Private columndesc_territory As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_territory")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property desc_territoryColumn As DataColumn
            Get
                Return Me.columndesc_territory
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_territoryRow
            Get
                Return CType(Me.Rows(index),cust_tab_territoryRow)
            End Get
        End Property
        
        Public Event cust_tab_territoryRowChanged As cust_tab_territoryRowChangeEventHandler
        
        Public Event cust_tab_territoryRowChanging As cust_tab_territoryRowChangeEventHandler
        
        Public Event cust_tab_territoryRowDeleted As cust_tab_territoryRowChangeEventHandler
        
        Public Event cust_tab_territoryRowDeleting As cust_tab_territoryRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_territoryRow(ByVal row As cust_tab_territoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_territoryRow(ByVal cod_territory As String, ByVal desc_territory As String) As cust_tab_territoryRow
            Dim rowcust_tab_territoryRow As cust_tab_territoryRow = CType(Me.NewRow,cust_tab_territoryRow)
            rowcust_tab_territoryRow.ItemArray = New Object() {cod_territory, desc_territory}
            Me.Rows.Add(rowcust_tab_territoryRow)
            Return rowcust_tab_territoryRow
        End Function
        
        Public Function FindBycod_territory(ByVal cod_territory As String) As cust_tab_territoryRow
            Return CType(Me.Rows.Find(New Object() {cod_territory}),cust_tab_territoryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_territoryDataTable = CType(MyBase.Clone,cust_tab_territoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_territoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columndesc_territory = Me.Columns("desc_territory")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columndesc_territory = New DataColumn("desc_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_territory)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_territory}, true))
            Me.columncod_territory.AllowDBNull = false
            Me.columncod_territory.Unique = true
        End Sub
        
        Public Function Newcust_tab_territoryRow() As cust_tab_territoryRow
            Return CType(Me.NewRow,cust_tab_territoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_territoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_territoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_territoryRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_territoryRowChanged(Me, New cust_tab_territoryRowChangeEvent(CType(e.Row,cust_tab_territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_territoryRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_territoryRowChanging(Me, New cust_tab_territoryRowChangeEvent(CType(e.Row,cust_tab_territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_territoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_territoryRowDeleted(Me, New cust_tab_territoryRowChangeEvent(CType(e.Row,cust_tab_territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_territoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_territoryRowDeleting(Me, New cust_tab_territoryRowChangeEvent(CType(e.Row,cust_tab_territoryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_territoryRow(ByVal row As cust_tab_territoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_territoryRow
        Inherits DataRow
        
        Private tablecust_tab_territory As cust_tab_territoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_territory = CType(Me.Table,cust_tab_territoryDataTable)
        End Sub
        
        Public Property cod_territory As String
            Get
                Return CType(Me(Me.tablecust_tab_territory.cod_territoryColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_territory.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property desc_territory As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_territory.desc_territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_territory.desc_territoryColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_territoryNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_territory.desc_territoryColumn)
        End Function
        
        Public Sub Setdesc_territoryNull()
            Me(Me.tablecust_tab_territory.desc_territoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_territoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_territoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_territoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_territoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type As DataColumn
        
        Private columndesc_type As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_typeColumn As DataColumn
            Get
                Return Me.columndesc_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_typeRow
            Get
                Return CType(Me.Rows(index),cust_tab_typeRow)
            End Get
        End Property
        
        Public Event cust_tab_typeRowChanged As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowChanging As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowDeleted As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowDeleting As cust_tab_typeRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_typeRow(ByVal row As cust_tab_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_typeRow(ByVal cod_type As String, ByVal desc_type As String) As cust_tab_typeRow
            Dim rowcust_tab_typeRow As cust_tab_typeRow = CType(Me.NewRow,cust_tab_typeRow)
            rowcust_tab_typeRow.ItemArray = New Object() {cod_type, desc_type}
            Me.Rows.Add(rowcust_tab_typeRow)
            Return rowcust_tab_typeRow
        End Function
        
        Public Function FindBycod_type(ByVal cod_type As String) As cust_tab_typeRow
            Return CType(Me.Rows.Find(New Object() {cod_type}),cust_tab_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_typeDataTable = CType(MyBase.Clone,cust_tab_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type = Me.Columns("cod_type")
            Me.columndesc_type = Me.Columns("desc_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columndesc_type = New DataColumn("desc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_type}, true))
            Me.columncod_type.AllowDBNull = false
            Me.columncod_type.Unique = true
        End Sub
        
        Public Function Newcust_tab_typeRow() As cust_tab_typeRow
            Return CType(Me.NewRow,cust_tab_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowChanged(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowChanging(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowDeleted(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowDeleting(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_typeRow(ByVal row As cust_tab_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeRow
        Inherits DataRow
        
        Private tablecust_tab_type As cust_tab_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_type = CType(Me.Table,cust_tab_typeDataTable)
        End Sub
        
        Public Property cod_type As String
            Get
                Return CType(Me(Me.tablecust_tab_type.cod_typeColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_type.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_type As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_type.desc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_type.desc_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_typeNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_type.desc_typeColumn)
        End Function
        
        Public Sub Setdesc_typeNull()
            Me(Me.tablecust_tab_type.desc_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_oil_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_oil_type As DataColumn
        
        Private columndesc_oil_type As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_oil_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_oil_typeColumn As DataColumn
            Get
                Return Me.columncod_oil_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_oil_typeColumn As DataColumn
            Get
                Return Me.columndesc_oil_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_oil_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_oil_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_oil_typeRowChanged As inv_tab_oil_typeRowChangeEventHandler
        
        Public Event inv_tab_oil_typeRowChanging As inv_tab_oil_typeRowChangeEventHandler
        
        Public Event inv_tab_oil_typeRowDeleted As inv_tab_oil_typeRowChangeEventHandler
        
        Public Event inv_tab_oil_typeRowDeleting As inv_tab_oil_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_oil_typeRow(ByVal row As inv_tab_oil_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_oil_typeRow(ByVal cod_oil_type As String, ByVal desc_oil_type As String) As inv_tab_oil_typeRow
            Dim rowinv_tab_oil_typeRow As inv_tab_oil_typeRow = CType(Me.NewRow,inv_tab_oil_typeRow)
            rowinv_tab_oil_typeRow.ItemArray = New Object() {cod_oil_type, desc_oil_type}
            Me.Rows.Add(rowinv_tab_oil_typeRow)
            Return rowinv_tab_oil_typeRow
        End Function
        
        Public Function FindBycod_oil_type(ByVal cod_oil_type As String) As inv_tab_oil_typeRow
            Return CType(Me.Rows.Find(New Object() {cod_oil_type}),inv_tab_oil_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_oil_typeDataTable = CType(MyBase.Clone,inv_tab_oil_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_oil_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_oil_type = Me.Columns("cod_oil_type")
            Me.columndesc_oil_type = Me.Columns("desc_oil_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_oil_type = New DataColumn("cod_oil_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_oil_type)
            Me.columndesc_oil_type = New DataColumn("desc_oil_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_oil_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_oil_type}, true))
            Me.columncod_oil_type.AllowDBNull = false
            Me.columncod_oil_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_oil_typeRow() As inv_tab_oil_typeRow
            Return CType(Me.NewRow,inv_tab_oil_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_oil_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_oil_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_oil_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_oil_typeRowChanged(Me, New inv_tab_oil_typeRowChangeEvent(CType(e.Row,inv_tab_oil_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_oil_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_oil_typeRowChanging(Me, New inv_tab_oil_typeRowChangeEvent(CType(e.Row,inv_tab_oil_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_oil_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_oil_typeRowDeleted(Me, New inv_tab_oil_typeRowChangeEvent(CType(e.Row,inv_tab_oil_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_oil_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_oil_typeRowDeleting(Me, New inv_tab_oil_typeRowChangeEvent(CType(e.Row,inv_tab_oil_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_oil_typeRow(ByVal row As inv_tab_oil_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_oil_typeRow
        Inherits DataRow
        
        Private tableinv_tab_oil_type As inv_tab_oil_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_oil_type = CType(Me.Table,inv_tab_oil_typeDataTable)
        End Sub
        
        Public Property cod_oil_type As String
            Get
                Return CType(Me(Me.tableinv_tab_oil_type.cod_oil_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_oil_type.cod_oil_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_oil_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_oil_type.desc_oil_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_oil_type.desc_oil_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_oil_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_oil_type.desc_oil_typeColumn)
        End Function
        
        Public Sub Setdesc_oil_typeNull()
            Me(Me.tableinv_tab_oil_type.desc_oil_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_oil_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_oil_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_oil_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_oil_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_quartsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_quarts As DataColumn
        
        Private columndesc_quarts As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_quarts")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_quartsColumn As DataColumn
            Get
                Return Me.columncod_quarts
            End Get
        End Property
        
        Friend ReadOnly Property desc_quartsColumn As DataColumn
            Get
                Return Me.columndesc_quarts
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_quartsRow
            Get
                Return CType(Me.Rows(index),inv_tab_quartsRow)
            End Get
        End Property
        
        Public Event inv_tab_quartsRowChanged As inv_tab_quartsRowChangeEventHandler
        
        Public Event inv_tab_quartsRowChanging As inv_tab_quartsRowChangeEventHandler
        
        Public Event inv_tab_quartsRowDeleted As inv_tab_quartsRowChangeEventHandler
        
        Public Event inv_tab_quartsRowDeleting As inv_tab_quartsRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_quartsRow(ByVal row As inv_tab_quartsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_quartsRow(ByVal cod_quarts As String, ByVal desc_quarts As String) As inv_tab_quartsRow
            Dim rowinv_tab_quartsRow As inv_tab_quartsRow = CType(Me.NewRow,inv_tab_quartsRow)
            rowinv_tab_quartsRow.ItemArray = New Object() {cod_quarts, desc_quarts}
            Me.Rows.Add(rowinv_tab_quartsRow)
            Return rowinv_tab_quartsRow
        End Function
        
        Public Function FindBycod_quarts(ByVal cod_quarts As String) As inv_tab_quartsRow
            Return CType(Me.Rows.Find(New Object() {cod_quarts}),inv_tab_quartsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_quartsDataTable = CType(MyBase.Clone,inv_tab_quartsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_quartsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_quarts = Me.Columns("cod_quarts")
            Me.columndesc_quarts = Me.Columns("desc_quarts")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_quarts = New DataColumn("cod_quarts", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quarts)
            Me.columndesc_quarts = New DataColumn("desc_quarts", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quarts)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_quarts}, true))
            Me.columncod_quarts.AllowDBNull = false
            Me.columncod_quarts.Unique = true
        End Sub
        
        Public Function Newinv_tab_quartsRow() As inv_tab_quartsRow
            Return CType(Me.NewRow,inv_tab_quartsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_quartsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_quartsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_quartsRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_quartsRowChanged(Me, New inv_tab_quartsRowChangeEvent(CType(e.Row,inv_tab_quartsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_quartsRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_quartsRowChanging(Me, New inv_tab_quartsRowChangeEvent(CType(e.Row,inv_tab_quartsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_quartsRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_quartsRowDeleted(Me, New inv_tab_quartsRowChangeEvent(CType(e.Row,inv_tab_quartsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_quartsRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_quartsRowDeleting(Me, New inv_tab_quartsRowChangeEvent(CType(e.Row,inv_tab_quartsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_quartsRow(ByVal row As inv_tab_quartsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_quartsRow
        Inherits DataRow
        
        Private tableinv_tab_quarts As inv_tab_quartsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_quarts = CType(Me.Table,inv_tab_quartsDataTable)
        End Sub
        
        Public Property cod_quarts As String
            Get
                Return CType(Me(Me.tableinv_tab_quarts.cod_quartsColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_quarts.cod_quartsColumn) = value
            End Set
        End Property
        
        Public Property desc_quarts As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_quarts.desc_quartsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_quarts.desc_quartsColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_quartsNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_quarts.desc_quartsColumn)
        End Function
        
        Public Sub Setdesc_quartsNull()
            Me(Me.tableinv_tab_quarts.desc_quartsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_quartsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_quartsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_quartsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_quartsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vehicle_type As DataColumn
        
        Private columndesc_vehicle_type As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vehicle_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vehicle_typeColumn As DataColumn
            Get
                Return Me.columncod_vehicle_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_vehicle_typeColumn As DataColumn
            Get
                Return Me.columndesc_vehicle_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vehicle_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_vehicle_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_vehicle_typeRowChanged As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowChanging As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowDeleted As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Event inv_tab_vehicle_typeRowDeleting As inv_tab_vehicle_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vehicle_typeRow(ByVal row As inv_tab_vehicle_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vehicle_typeRow(ByVal cod_vehicle_type As String, ByVal desc_vehicle_type As String) As inv_tab_vehicle_typeRow
            Dim rowinv_tab_vehicle_typeRow As inv_tab_vehicle_typeRow = CType(Me.NewRow,inv_tab_vehicle_typeRow)
            rowinv_tab_vehicle_typeRow.ItemArray = New Object() {cod_vehicle_type, desc_vehicle_type}
            Me.Rows.Add(rowinv_tab_vehicle_typeRow)
            Return rowinv_tab_vehicle_typeRow
        End Function
        
        Public Function FindBycod_vehicle_type(ByVal cod_vehicle_type As String) As inv_tab_vehicle_typeRow
            Return CType(Me.Rows.Find(New Object() {cod_vehicle_type}),inv_tab_vehicle_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vehicle_typeDataTable = CType(MyBase.Clone,inv_tab_vehicle_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vehicle_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vehicle_type = Me.Columns("cod_vehicle_type")
            Me.columndesc_vehicle_type = Me.Columns("desc_vehicle_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vehicle_type = New DataColumn("cod_vehicle_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vehicle_type)
            Me.columndesc_vehicle_type = New DataColumn("desc_vehicle_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vehicle_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vehicle_type}, true))
            Me.columncod_vehicle_type.AllowDBNull = false
            Me.columncod_vehicle_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_vehicle_typeRow() As inv_tab_vehicle_typeRow
            Return CType(Me.NewRow,inv_tab_vehicle_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vehicle_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vehicle_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vehicle_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowChanged(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vehicle_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowChanging(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vehicle_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowDeleted(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vehicle_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vehicle_typeRowDeleting(Me, New inv_tab_vehicle_typeRowChangeEvent(CType(e.Row,inv_tab_vehicle_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vehicle_typeRow(ByVal row As inv_tab_vehicle_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeRow
        Inherits DataRow
        
        Private tableinv_tab_vehicle_type As inv_tab_vehicle_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vehicle_type = CType(Me.Table,inv_tab_vehicle_typeDataTable)
        End Sub
        
        Public Property cod_vehicle_type As String
            Get
                Return CType(Me(Me.tableinv_tab_vehicle_type.cod_vehicle_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vehicle_type.cod_vehicle_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_vehicle_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vehicle_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn)
        End Function
        
        Public Sub Setdesc_vehicle_typeNull()
            Me(Me.tableinv_tab_vehicle_type.desc_vehicle_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vehicle_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vehicle_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vehicle_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vehicle_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnservice_category As DataColumn
        
        Private columndesc_srvice_category As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_service_category")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property service_categoryColumn As DataColumn
            Get
                Return Me.columnservice_category
            End Get
        End Property
        
        Friend ReadOnly Property desc_srvice_categoryColumn As DataColumn
            Get
                Return Me.columndesc_srvice_category
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_service_categoryRow
            Get
                Return CType(Me.Rows(index),inv_tab_service_categoryRow)
            End Get
        End Property
        
        Public Event inv_tab_service_categoryRowChanged As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowChanging As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowDeleted As inv_tab_service_categoryRowChangeEventHandler
        
        Public Event inv_tab_service_categoryRowDeleting As inv_tab_service_categoryRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_service_categoryRow(ByVal row As inv_tab_service_categoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_service_categoryRow(ByVal service_category As String, ByVal desc_srvice_category As String) As inv_tab_service_categoryRow
            Dim rowinv_tab_service_categoryRow As inv_tab_service_categoryRow = CType(Me.NewRow,inv_tab_service_categoryRow)
            rowinv_tab_service_categoryRow.ItemArray = New Object() {service_category, desc_srvice_category}
            Me.Rows.Add(rowinv_tab_service_categoryRow)
            Return rowinv_tab_service_categoryRow
        End Function
        
        Public Function FindByservice_category(ByVal service_category As String) As inv_tab_service_categoryRow
            Return CType(Me.Rows.Find(New Object() {service_category}),inv_tab_service_categoryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_service_categoryDataTable = CType(MyBase.Clone,inv_tab_service_categoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_service_categoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnservice_category = Me.Columns("service_category")
            Me.columndesc_srvice_category = Me.Columns("desc_srvice_category")
        End Sub
        
        Private Sub InitClass()
            Me.columnservice_category = New DataColumn("service_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_category)
            Me.columndesc_srvice_category = New DataColumn("desc_srvice_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_srvice_category)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnservice_category}, true))
            Me.columnservice_category.AllowDBNull = false
            Me.columnservice_category.Unique = true
        End Sub
        
        Public Function Newinv_tab_service_categoryRow() As inv_tab_service_categoryRow
            Return CType(Me.NewRow,inv_tab_service_categoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_service_categoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_service_categoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_service_categoryRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowChanged(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_service_categoryRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowChanging(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_service_categoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowDeleted(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_service_categoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_categoryRowDeleting(Me, New inv_tab_service_categoryRowChangeEvent(CType(e.Row,inv_tab_service_categoryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_service_categoryRow(ByVal row As inv_tab_service_categoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryRow
        Inherits DataRow
        
        Private tableinv_tab_service_category As inv_tab_service_categoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_service_category = CType(Me.Table,inv_tab_service_categoryDataTable)
        End Sub
        
        Public Property service_category As String
            Get
                Return CType(Me(Me.tableinv_tab_service_category.service_categoryColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_service_category.service_categoryColumn) = value
            End Set
        End Property
        
        Public Property desc_srvice_category As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_srvice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_category.desc_srvice_categoryColumn)
        End Function
        
        Public Sub Setdesc_srvice_categoryNull()
            Me(Me.tableinv_tab_service_category.desc_srvice_categoryColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_categoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_service_categoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_service_categoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_service_categoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnservice_type As DataColumn
        
        Private columnservice_type_desc As DataColumn
        
        Private columnasset_GL_account As DataColumn
        
        Private columncost_goods_GL_account As DataColumn
        
        Private columnincome_GL_account As DataColumn
        
        Private columnreturn_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_service_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property service_typeColumn As DataColumn
            Get
                Return Me.columnservice_type
            End Get
        End Property
        
        Friend ReadOnly Property service_type_descColumn As DataColumn
            Get
                Return Me.columnservice_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property asset_GL_accountColumn As DataColumn
            Get
                Return Me.columnasset_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property cost_goods_GL_accountColumn As DataColumn
            Get
                Return Me.columncost_goods_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property income_GL_accountColumn As DataColumn
            Get
                Return Me.columnincome_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property return_GL_accountColumn As DataColumn
            Get
                Return Me.columnreturn_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_service_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_service_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_service_typeRowChanged As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowChanging As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleted As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleting As inv_tab_service_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_service_typeRow(ByVal service_type As String, ByVal service_type_desc As String, ByVal asset_GL_account As String, ByVal cost_goods_GL_account As String, ByVal income_GL_account As String, ByVal return_GL_account As String) As inv_tab_service_typeRow
            Dim rowinv_tab_service_typeRow As inv_tab_service_typeRow = CType(Me.NewRow,inv_tab_service_typeRow)
            rowinv_tab_service_typeRow.ItemArray = New Object() {service_type, service_type_desc, asset_GL_account, cost_goods_GL_account, income_GL_account, return_GL_account}
            Me.Rows.Add(rowinv_tab_service_typeRow)
            Return rowinv_tab_service_typeRow
        End Function
        
        Public Function FindByservice_type(ByVal service_type As String) As inv_tab_service_typeRow
            Return CType(Me.Rows.Find(New Object() {service_type}),inv_tab_service_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_service_typeDataTable = CType(MyBase.Clone,inv_tab_service_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_service_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnservice_type = Me.Columns("service_type")
            Me.columnservice_type_desc = Me.Columns("service_type_desc")
            Me.columnasset_GL_account = Me.Columns("asset_GL_account")
            Me.columncost_goods_GL_account = Me.Columns("cost_goods_GL_account")
            Me.columnincome_GL_account = Me.Columns("income_GL_account")
            Me.columnreturn_GL_account = Me.Columns("return_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnservice_type = New DataColumn("service_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type)
            Me.columnservice_type_desc = New DataColumn("service_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type_desc)
            Me.columnasset_GL_account = New DataColumn("asset_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnasset_GL_account)
            Me.columncost_goods_GL_account = New DataColumn("cost_goods_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost_goods_GL_account)
            Me.columnincome_GL_account = New DataColumn("income_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnincome_GL_account)
            Me.columnreturn_GL_account = New DataColumn("return_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreturn_GL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnservice_type}, true))
            Me.columnservice_type.AllowDBNull = false
            Me.columnservice_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_service_typeRow() As inv_tab_service_typeRow
            Return CType(Me.NewRow,inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_service_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_service_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanged(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_service_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanging(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_service_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleted(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_service_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleting(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRow
        Inherits DataRow
        
        Private tableinv_tab_service_type As inv_tab_service_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_service_type = CType(Me.Table,inv_tab_service_typeDataTable)
        End Sub
        
        Public Property service_type As String
            Get
                Return CType(Me(Me.tableinv_tab_service_type.service_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_typeColumn) = value
            End Set
        End Property
        
        Public Property service_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.service_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_type_descColumn) = value
            End Set
        End Property
        
        Public Property asset_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.asset_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.asset_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property cost_goods_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property income_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.income_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.income_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property return_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.return_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.return_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isservice_type_descNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.service_type_descColumn)
        End Function
        
        Public Sub Setservice_type_descNull()
            Me(Me.tableinv_tab_service_type.service_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isasset_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.asset_GL_accountColumn)
        End Function
        
        Public Sub Setasset_GL_accountNull()
            Me(Me.tableinv_tab_service_type.asset_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscost_goods_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn)
        End Function
        
        Public Sub Setcost_goods_GL_accountNull()
            Me(Me.tableinv_tab_service_type.cost_goods_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isincome_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.income_GL_accountColumn)
        End Function
        
        Public Sub Setincome_GL_accountNull()
            Me(Me.tableinv_tab_service_type.income_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreturn_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.return_GL_accountColumn)
        End Function
        
        Public Sub Setreturn_GL_accountNull()
            Me(Me.tableinv_tab_service_type.return_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_service_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_service_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_service_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnline As DataColumn
        
        Private columnfeatures As DataColumn
        
        Private columnbenefits As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnlimit_warranty As DataColumn
        
        Private columnconstruction As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Private columntread_life As DataColumn
        
        Private columnwet_traction As DataColumn
        
        Private columnquiet_ride As DataColumn
        
        Private columnhandling As DataColumn
        
        Private columnwinter_traction As DataColumn
        
        Private columnnud_traction As DataColumn
        
        Private columnoverall_score As DataColumn
        
        Private columndry_traction As DataColumn
        
        Private columnride_comfort As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property featuresColumn As DataColumn
            Get
                Return Me.columnfeatures
            End Get
        End Property
        
        Friend ReadOnly Property benefitsColumn As DataColumn
            Get
                Return Me.columnbenefits
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property limit_warrantyColumn As DataColumn
            Get
                Return Me.columnlimit_warranty
            End Get
        End Property
        
        Friend ReadOnly Property constructionColumn As DataColumn
            Get
                Return Me.columnconstruction
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Friend ReadOnly Property tread_lifeColumn As DataColumn
            Get
                Return Me.columntread_life
            End Get
        End Property
        
        Friend ReadOnly Property wet_tractionColumn As DataColumn
            Get
                Return Me.columnwet_traction
            End Get
        End Property
        
        Friend ReadOnly Property quiet_rideColumn As DataColumn
            Get
                Return Me.columnquiet_ride
            End Get
        End Property
        
        Friend ReadOnly Property handlingColumn As DataColumn
            Get
                Return Me.columnhandling
            End Get
        End Property
        
        Friend ReadOnly Property winter_tractionColumn As DataColumn
            Get
                Return Me.columnwinter_traction
            End Get
        End Property
        
        Friend ReadOnly Property nud_tractionColumn As DataColumn
            Get
                Return Me.columnnud_traction
            End Get
        End Property
        
        Friend ReadOnly Property overall_scoreColumn As DataColumn
            Get
                Return Me.columnoverall_score
            End Get
        End Property
        
        Friend ReadOnly Property dry_tractionColumn As DataColumn
            Get
                Return Me.columndry_traction
            End Get
        End Property
        
        Friend ReadOnly Property ride_comfortColumn As DataColumn
            Get
                Return Me.columnride_comfort
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_lineRow
            Get
                Return CType(Me.Rows(index),inv_tab_lineRow)
            End Get
        End Property
        
        Public Event inv_tab_lineRowChanged As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowChanging As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleted As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleting As inv_tab_lineRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_lineRow( _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal line As String,  _
                    ByVal features As String,  _
                    ByVal benefits As String,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal limit_warranty As String,  _
                    ByVal construction As String,  _
                    ByVal remark As String,  _
                    ByVal image_remark() As Byte,  _
                    ByVal tread_life As String,  _
                    ByVal wet_traction As String,  _
                    ByVal quiet_ride As String,  _
                    ByVal handling As String,  _
                    ByVal winter_traction As String,  _
                    ByVal nud_traction As String,  _
                    ByVal overall_score As String,  _
                    ByVal dry_traction As String,  _
                    ByVal ride_comfort As String) As inv_tab_lineRow
            Dim rowinv_tab_lineRow As inv_tab_lineRow = CType(Me.NewRow,inv_tab_lineRow)
            rowinv_tab_lineRow.ItemArray = New Object() {cod_brand, style, line, features, benefits, treadwear, traction, temperature, limit_warranty, construction, remark, image_remark, tread_life, wet_traction, quiet_ride, handling, winter_traction, nud_traction, overall_score, dry_traction, ride_comfort}
            Me.Rows.Add(rowinv_tab_lineRow)
            Return rowinv_tab_lineRow
        End Function
        
        Public Function FindByline(ByVal line As String) As inv_tab_lineRow
            Return CType(Me.Rows.Find(New Object() {line}),inv_tab_lineRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_lineDataTable = CType(MyBase.Clone,inv_tab_lineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_lineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnline = Me.Columns("line")
            Me.columnfeatures = Me.Columns("features")
            Me.columnbenefits = Me.Columns("benefits")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnlimit_warranty = Me.Columns("limit_warranty")
            Me.columnconstruction = Me.Columns("construction")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
            Me.columntread_life = Me.Columns("tread_life")
            Me.columnwet_traction = Me.Columns("wet_traction")
            Me.columnquiet_ride = Me.Columns("quiet_ride")
            Me.columnhandling = Me.Columns("handling")
            Me.columnwinter_traction = Me.Columns("winter_traction")
            Me.columnnud_traction = Me.Columns("nud_traction")
            Me.columnoverall_score = Me.Columns("overall_score")
            Me.columndry_traction = Me.Columns("dry_traction")
            Me.columnride_comfort = Me.Columns("ride_comfort")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnfeatures = New DataColumn("features", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfeatures)
            Me.columnbenefits = New DataColumn("benefits", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbenefits)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnlimit_warranty = New DataColumn("limit_warranty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlimit_warranty)
            Me.columnconstruction = New DataColumn("construction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconstruction)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.columntread_life = New DataColumn("tread_life", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntread_life)
            Me.columnwet_traction = New DataColumn("wet_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwet_traction)
            Me.columnquiet_ride = New DataColumn("quiet_ride", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquiet_ride)
            Me.columnhandling = New DataColumn("handling", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhandling)
            Me.columnwinter_traction = New DataColumn("winter_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwinter_traction)
            Me.columnnud_traction = New DataColumn("nud_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnud_traction)
            Me.columnoverall_score = New DataColumn("overall_score", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverall_score)
            Me.columndry_traction = New DataColumn("dry_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndry_traction)
            Me.columnride_comfort = New DataColumn("ride_comfort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnride_comfort)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnline}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnline.Unique = true
        End Sub
        
        Public Function Newinv_tab_lineRow() As inv_tab_lineRow
            Return CType(Me.NewRow,inv_tab_lineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_lineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_lineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_lineRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanged(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_lineRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanging(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_lineRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleted(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_lineRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleting(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRow
        Inherits DataRow
        
        Private tableinv_tab_line As inv_tab_lineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_line = CType(Me.Table,inv_tab_lineDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_line.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_line.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_tab_line.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.lineColumn) = value
            End Set
        End Property
        
        Public Property features As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.featuresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.featuresColumn) = value
            End Set
        End Property
        
        Public Property benefits As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.benefitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.benefitsColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.temperatureColumn) = value
            End Set
        End Property
        
        Public Property limit_warranty As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.limit_warrantyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.limit_warrantyColumn) = value
            End Set
        End Property
        
        Public Property construction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.constructionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.constructionColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.image_remarkColumn) = value
            End Set
        End Property
        
        Public Property tread_life As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tread_lifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tread_lifeColumn) = value
            End Set
        End Property
        
        Public Property wet_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.wet_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.wet_tractionColumn) = value
            End Set
        End Property
        
        Public Property quiet_ride As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.quiet_rideColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.quiet_rideColumn) = value
            End Set
        End Property
        
        Public Property handling As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.handlingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.handlingColumn) = value
            End Set
        End Property
        
        Public Property winter_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.winter_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.winter_tractionColumn) = value
            End Set
        End Property
        
        Public Property nud_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.nud_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.nud_tractionColumn) = value
            End Set
        End Property
        
        Public Property overall_score As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.overall_scoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.overall_scoreColumn) = value
            End Set
        End Property
        
        Public Property dry_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.dry_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.dry_tractionColumn) = value
            End Set
        End Property
        
        Public Property ride_comfort As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.ride_comfortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.ride_comfortColumn) = value
            End Set
        End Property
        
        Public Function IsfeaturesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.featuresColumn)
        End Function
        
        Public Sub SetfeaturesNull()
            Me(Me.tableinv_tab_line.featuresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbenefitsNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.benefitsColumn)
        End Function
        
        Public Sub SetbenefitsNull()
            Me(Me.tableinv_tab_line.benefitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_tab_line.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_tab_line.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_tab_line.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islimit_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.limit_warrantyColumn)
        End Function
        
        Public Sub Setlimit_warrantyNull()
            Me(Me.tableinv_tab_line.limit_warrantyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconstructionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.constructionColumn)
        End Function
        
        Public Sub SetconstructionNull()
            Me(Me.tableinv_tab_line.constructionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_line.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_line.image_remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istread_lifeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tread_lifeColumn)
        End Function
        
        Public Sub Settread_lifeNull()
            Me(Me.tableinv_tab_line.tread_lifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswet_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.wet_tractionColumn)
        End Function
        
        Public Sub Setwet_tractionNull()
            Me(Me.tableinv_tab_line.wet_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isquiet_rideNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.quiet_rideColumn)
        End Function
        
        Public Sub Setquiet_rideNull()
            Me(Me.tableinv_tab_line.quiet_rideColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshandlingNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.handlingColumn)
        End Function
        
        Public Sub SethandlingNull()
            Me(Me.tableinv_tab_line.handlingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswinter_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.winter_tractionColumn)
        End Function
        
        Public Sub Setwinter_tractionNull()
            Me(Me.tableinv_tab_line.winter_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnud_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.nud_tractionColumn)
        End Function
        
        Public Sub Setnud_tractionNull()
            Me(Me.tableinv_tab_line.nud_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isoverall_scoreNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.overall_scoreColumn)
        End Function
        
        Public Sub Setoverall_scoreNull()
            Me(Me.tableinv_tab_line.overall_scoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdry_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.dry_tractionColumn)
        End Function
        
        Public Sub Setdry_tractionNull()
            Me(Me.tableinv_tab_line.dry_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isride_comfortNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.ride_comfortColumn)
        End Function
        
        Public Sub Setride_comfortNull()
            Me(Me.tableinv_tab_line.ride_comfortColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_lineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_lineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_lineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbuyer_id As DataColumn
        
        Private columndesc_buyer As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_buyer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property buyer_idColumn As DataColumn
            Get
                Return Me.columnbuyer_id
            End Get
        End Property
        
        Friend ReadOnly Property desc_buyerColumn As DataColumn
            Get
                Return Me.columndesc_buyer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_buyerRow
            Get
                Return CType(Me.Rows(index),inv_buyerRow)
            End Get
        End Property
        
        Public Event inv_buyerRowChanged As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowChanging As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowDeleted As inv_buyerRowChangeEventHandler
        
        Public Event inv_buyerRowDeleting As inv_buyerRowChangeEventHandler
        
        Public Overloads Sub Addinv_buyerRow(ByVal row As inv_buyerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_buyerRow(ByVal buyer_id As String, ByVal desc_buyer As String) As inv_buyerRow
            Dim rowinv_buyerRow As inv_buyerRow = CType(Me.NewRow,inv_buyerRow)
            rowinv_buyerRow.ItemArray = New Object() {buyer_id, desc_buyer}
            Me.Rows.Add(rowinv_buyerRow)
            Return rowinv_buyerRow
        End Function
        
        Public Function FindBybuyer_id(ByVal buyer_id As String) As inv_buyerRow
            Return CType(Me.Rows.Find(New Object() {buyer_id}),inv_buyerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_buyerDataTable = CType(MyBase.Clone,inv_buyerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_buyerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbuyer_id = Me.Columns("buyer_id")
            Me.columndesc_buyer = Me.Columns("desc_buyer")
        End Sub
        
        Private Sub InitClass()
            Me.columnbuyer_id = New DataColumn("buyer_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbuyer_id)
            Me.columndesc_buyer = New DataColumn("desc_buyer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_buyer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnbuyer_id}, true))
            Me.columnbuyer_id.AllowDBNull = false
            Me.columnbuyer_id.Unique = true
        End Sub
        
        Public Function Newinv_buyerRow() As inv_buyerRow
            Return CType(Me.NewRow,inv_buyerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_buyerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_buyerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_buyerRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowChanged(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_buyerRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowChanging(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_buyerRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowDeleted(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_buyerRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_buyerRowDeleting(Me, New inv_buyerRowChangeEvent(CType(e.Row,inv_buyerRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_buyerRow(ByVal row As inv_buyerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerRow
        Inherits DataRow
        
        Private tableinv_buyer As inv_buyerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_buyer = CType(Me.Table,inv_buyerDataTable)
        End Sub
        
        Public Property buyer_id As String
            Get
                Return CType(Me(Me.tableinv_buyer.buyer_idColumn),String)
            End Get
            Set
                Me(Me.tableinv_buyer.buyer_idColumn) = value
            End Set
        End Property
        
        Public Property desc_buyer As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_buyer.desc_buyerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_buyer.desc_buyerColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_buyerNull() As Boolean
            Return Me.IsNull(Me.tableinv_buyer.desc_buyerColumn)
        End Function
        
        Public Sub Setdesc_buyerNull()
            Me(Me.tableinv_buyer.desc_buyerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_buyerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_buyerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_buyerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_buyerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnclass_vendor As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vendor_class")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vendor_classRow
            Get
                Return CType(Me.Rows(index),inv_tab_vendor_classRow)
            End Get
        End Property
        
        Public Event inv_tab_vendor_classRowChanged As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowChanging As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowDeleted As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowDeleting As inv_tab_vendor_classRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vendor_classRow(ByVal row As inv_tab_vendor_classRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vendor_classRow(ByVal class_vendor As String, ByVal desc_class As String) As inv_tab_vendor_classRow
            Dim rowinv_tab_vendor_classRow As inv_tab_vendor_classRow = CType(Me.NewRow,inv_tab_vendor_classRow)
            rowinv_tab_vendor_classRow.ItemArray = New Object() {class_vendor, desc_class}
            Me.Rows.Add(rowinv_tab_vendor_classRow)
            Return rowinv_tab_vendor_classRow
        End Function
        
        Public Function FindByclass_vendor(ByVal class_vendor As String) As inv_tab_vendor_classRow
            Return CType(Me.Rows.Find(New Object() {class_vendor}),inv_tab_vendor_classRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vendor_classDataTable = CType(MyBase.Clone,inv_tab_vendor_classDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vendor_classDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnclass_vendor = Me.Columns("class_vendor")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnclass_vendor}, true))
            Me.columnclass_vendor.AllowDBNull = false
            Me.columnclass_vendor.Unique = true
        End Sub
        
        Public Function Newinv_tab_vendor_classRow() As inv_tab_vendor_classRow
            Return CType(Me.NewRow,inv_tab_vendor_classRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vendor_classRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vendor_classRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vendor_classRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowChanged(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vendor_classRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowChanging(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vendor_classRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowDeleted(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vendor_classRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowDeleting(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vendor_classRow(ByVal row As inv_tab_vendor_classRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classRow
        Inherits DataRow
        
        Private tableinv_tab_vendor_class As inv_tab_vendor_classDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vendor_class = CType(Me.Table,inv_tab_vendor_classDataTable)
        End Sub
        
        Public Property class_vendor As String
            Get
                Return CType(Me(Me.tableinv_tab_vendor_class.class_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vendor_class.class_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_class.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_class.desc_classColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_class.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableinv_tab_vendor_class.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vendor_classRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vendor_classRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vendor_classRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnvendor_type As DataColumn
        
        Private columndesc_vendor_type As DataColumn
        
        Private columnGL_expense_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vendor_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property vendor_typeColumn As DataColumn
            Get
                Return Me.columnvendor_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendor_typeColumn As DataColumn
            Get
                Return Me.columndesc_vendor_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_expense_accountColumn As DataColumn
            Get
                Return Me.columnGL_expense_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vendor_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_vendor_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_vendor_typeRowChanged As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowChanging As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowDeleted As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowDeleting As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vendor_typeRow(ByVal row As inv_tab_vendor_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vendor_typeRow(ByVal vendor_type As String, ByVal desc_vendor_type As String, ByVal GL_expense_account As String) As inv_tab_vendor_typeRow
            Dim rowinv_tab_vendor_typeRow As inv_tab_vendor_typeRow = CType(Me.NewRow,inv_tab_vendor_typeRow)
            rowinv_tab_vendor_typeRow.ItemArray = New Object() {vendor_type, desc_vendor_type, GL_expense_account}
            Me.Rows.Add(rowinv_tab_vendor_typeRow)
            Return rowinv_tab_vendor_typeRow
        End Function
        
        Public Function FindByvendor_type(ByVal vendor_type As String) As inv_tab_vendor_typeRow
            Return CType(Me.Rows.Find(New Object() {vendor_type}),inv_tab_vendor_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vendor_typeDataTable = CType(MyBase.Clone,inv_tab_vendor_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vendor_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnvendor_type = Me.Columns("vendor_type")
            Me.columndesc_vendor_type = Me.Columns("desc_vendor_type")
            Me.columnGL_expense_account = Me.Columns("GL_expense_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnvendor_type = New DataColumn("vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_type)
            Me.columndesc_vendor_type = New DataColumn("desc_vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor_type)
            Me.columnGL_expense_account = New DataColumn("GL_expense_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_expense_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnvendor_type}, true))
            Me.columnvendor_type.AllowDBNull = false
            Me.columnvendor_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_vendor_typeRow() As inv_tab_vendor_typeRow
            Return CType(Me.NewRow,inv_tab_vendor_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vendor_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vendor_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vendor_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowChanged(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vendor_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowChanging(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vendor_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowDeleted(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vendor_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowDeleting(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vendor_typeRow(ByVal row As inv_tab_vendor_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeRow
        Inherits DataRow
        
        Private tableinv_tab_vendor_type As inv_tab_vendor_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vendor_type = CType(Me.Table,inv_tab_vendor_typeDataTable)
        End Sub
        
        Public Property vendor_type As String
            Get
                Return CType(Me(Me.tableinv_tab_vendor_type.vendor_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_expense_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn)
        End Function
        
        Public Sub Setdesc_vendor_typeNull()
            Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_expense_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_type.GL_expense_accountColumn)
        End Function
        
        Public Sub SetGL_expense_accountNull()
            Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vendor_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vendor_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vendor_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("STORE_SETUP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STORE_SETUPRow
            Get
                Return CType(Me.Rows(index),STORE_SETUPRow)
            End Get
        End Property
        
        Public Event STORE_SETUPRowChanged As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowChanging As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleted As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleting As STORE_SETUPRowChangeEventHandler
        
        Public Overloads Sub AddSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTORE_SETUPRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As STORE_SETUPRow
            Dim rowSTORE_SETUPRow As STORE_SETUPRow = CType(Me.NewRow,STORE_SETUPRow)
            rowSTORE_SETUPRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowSTORE_SETUPRow)
            Return rowSTORE_SETUPRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STORE_SETUPDataTable = CType(MyBase.Clone,STORE_SETUPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STORE_SETUPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnSTORENO.AllowDBNull = false
        End Sub
        
        Public Function NewSTORE_SETUPRow() As STORE_SETUPRow
            Return CType(Me.NewRow,STORE_SETUPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STORE_SETUPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STORE_SETUPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STORE_SETUPRowChangedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanged(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STORE_SETUPRowChangingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanging(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STORE_SETUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleted(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STORE_SETUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleting(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRow
        Inherits DataRow
        
        Private tableSTORE_SETUP As STORE_SETUPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTORE_SETUP = CType(Me.Table,STORE_SETUPDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableSTORE_SETUP.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableSTORE_SETUP.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STORE_SETUPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STORE_SETUPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STORE_SETUPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAR_terms As DataColumn
        
        Private columnKIND_AR As DataColumn
        
        Private columnST_NET_DUE_IN As DataColumn
        
        Private columnST_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnST_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnDD_NET_DUE_BEFORE As DataColumn
        
        Private columnDD_IF_ISSUED_WITHIN_DAYS As DataColumn
        
        Private columnDD_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnDD_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnMP_NO_OF_PAYMENT As DataColumn
        
        Private columnMP_BEFORE_DAY As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_TAB_AR_TERM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property KIND_ARColumn As DataColumn
            Get
                Return Me.columnKIND_AR
            End Get
        End Property
        
        Friend ReadOnly Property ST_NET_DUE_INColumn As DataColumn
            Get
                Return Me.columnST_NET_DUE_IN
            End Get
        End Property
        
        Friend ReadOnly Property ST_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnST_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property ST_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnST_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_NET_DUE_BEFOREColumn As DataColumn
            Get
                Return Me.columnDD_NET_DUE_BEFORE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_ISSUED_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_ISSUED_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnDD_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property MP_NO_OF_PAYMENTColumn As DataColumn
            Get
                Return Me.columnMP_NO_OF_PAYMENT
            End Get
        End Property
        
        Friend ReadOnly Property MP_BEFORE_DAYColumn As DataColumn
            Get
                Return Me.columnMP_BEFORE_DAY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_TAB_AR_TERMRow
            Get
                Return CType(Me.Rows(index),GL_TAB_AR_TERMRow)
            End Get
        End Property
        
        Public Event GL_TAB_AR_TERMRowChanged As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowChanging As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleted As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleting As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Overloads Sub AddGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_TAB_AR_TERMRow(ByVal AR_terms As String, ByVal KIND_AR As Short, ByVal ST_NET_DUE_IN As Short, ByVal ST_DISCOUNT_PERCENTAGE As Decimal, ByVal ST_IF_PAY_WITHIN_DAYS As Short, ByVal DD_NET_DUE_BEFORE As Short, ByVal DD_IF_ISSUED_WITHIN_DAYS As Short, ByVal DD_DISCOUNT_PERCENTAGE As Decimal, ByVal DD_IF_PAY_WITHIN_DAYS As Short, ByVal MP_NO_OF_PAYMENT As Short, ByVal MP_BEFORE_DAY As Short) As GL_TAB_AR_TERMRow
            Dim rowGL_TAB_AR_TERMRow As GL_TAB_AR_TERMRow = CType(Me.NewRow,GL_TAB_AR_TERMRow)
            rowGL_TAB_AR_TERMRow.ItemArray = New Object() {AR_terms, KIND_AR, ST_NET_DUE_IN, ST_DISCOUNT_PERCENTAGE, ST_IF_PAY_WITHIN_DAYS, DD_NET_DUE_BEFORE, DD_IF_ISSUED_WITHIN_DAYS, DD_DISCOUNT_PERCENTAGE, DD_IF_PAY_WITHIN_DAYS, MP_NO_OF_PAYMENT, MP_BEFORE_DAY}
            Me.Rows.Add(rowGL_TAB_AR_TERMRow)
            Return rowGL_TAB_AR_TERMRow
        End Function
        
        Public Function FindByAR_terms(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Return CType(Me.Rows.Find(New Object() {AR_terms}),GL_TAB_AR_TERMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_TAB_AR_TERMDataTable = CType(MyBase.Clone,GL_TAB_AR_TERMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_TAB_AR_TERMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnKIND_AR = Me.Columns("KIND_AR")
            Me.columnST_NET_DUE_IN = Me.Columns("ST_NET_DUE_IN")
            Me.columnST_DISCOUNT_PERCENTAGE = Me.Columns("ST_DISCOUNT_PERCENTAGE")
            Me.columnST_IF_PAY_WITHIN_DAYS = Me.Columns("ST_IF_PAY_WITHIN_DAYS")
            Me.columnDD_NET_DUE_BEFORE = Me.Columns("DD_NET_DUE_BEFORE")
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = Me.Columns("DD_IF_ISSUED_WITHIN_DAYS")
            Me.columnDD_DISCOUNT_PERCENTAGE = Me.Columns("DD_DISCOUNT_PERCENTAGE")
            Me.columnDD_IF_PAY_WITHIN_DAYS = Me.Columns("DD_IF_PAY_WITHIN_DAYS")
            Me.columnMP_NO_OF_PAYMENT = Me.Columns("MP_NO_OF_PAYMENT")
            Me.columnMP_BEFORE_DAY = Me.Columns("MP_BEFORE_DAY")
        End Sub
        
        Private Sub InitClass()
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnKIND_AR = New DataColumn("KIND_AR", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKIND_AR)
            Me.columnST_NET_DUE_IN = New DataColumn("ST_NET_DUE_IN", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_NET_DUE_IN)
            Me.columnST_DISCOUNT_PERCENTAGE = New DataColumn("ST_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_DISCOUNT_PERCENTAGE)
            Me.columnST_IF_PAY_WITHIN_DAYS = New DataColumn("ST_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_IF_PAY_WITHIN_DAYS)
            Me.columnDD_NET_DUE_BEFORE = New DataColumn("DD_NET_DUE_BEFORE", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_NET_DUE_BEFORE)
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = New DataColumn("DD_IF_ISSUED_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_ISSUED_WITHIN_DAYS)
            Me.columnDD_DISCOUNT_PERCENTAGE = New DataColumn("DD_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_DISCOUNT_PERCENTAGE)
            Me.columnDD_IF_PAY_WITHIN_DAYS = New DataColumn("DD_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_PAY_WITHIN_DAYS)
            Me.columnMP_NO_OF_PAYMENT = New DataColumn("MP_NO_OF_PAYMENT", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_NO_OF_PAYMENT)
            Me.columnMP_BEFORE_DAY = New DataColumn("MP_BEFORE_DAY", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_BEFORE_DAY)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAR_terms}, true))
            Me.columnAR_terms.AllowDBNull = false
            Me.columnAR_terms.Unique = true
        End Sub
        
        Public Function NewGL_TAB_AR_TERMRow() As GL_TAB_AR_TERMRow
            Return CType(Me.NewRow,GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_TAB_AR_TERMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanged(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanging(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleted(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleting(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRow
        Inherits DataRow
        
        Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_TAB_AR_TERM = CType(Me.Table,GL_TAB_AR_TERMDataTable)
        End Sub
        
        Public Property AR_terms As String
            Get
                Return CType(Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn),String)
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property KIND_AR As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = value
            End Set
        End Property
        
        Public Property ST_NET_DUE_IN As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = value
            End Set
        End Property
        
        Public Property ST_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property ST_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_NET_DUE_BEFORE As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_ISSUED_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property MP_NO_OF_PAYMENT As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = value
            End Set
        End Property
        
        Public Property MP_BEFORE_DAY As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = value
            End Set
        End Property
        
        Public Function IsKIND_ARNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.KIND_ARColumn)
        End Function
        
        Public Sub SetKIND_ARNull()
            Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_NET_DUE_INNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn)
        End Function
        
        Public Sub SetST_NET_DUE_INNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetST_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetST_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_NET_DUE_BEFORENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn)
        End Function
        
        Public Sub SetDD_NET_DUE_BEFORENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_ISSUED_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_ISSUED_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetDD_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_NO_OF_PAYMENTNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn)
        End Function
        
        Public Sub SetMP_NO_OF_PAYMENTNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_BEFORE_DAYNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn)
        End Function
        
        Public Sub SetMP_BEFORE_DAYNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_TAB_AR_TERMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_TAB_AR_TERMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_TAB_AR_TERMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
