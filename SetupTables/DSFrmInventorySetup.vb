'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmInventorySetup
    Inherits DataSet
    
    Private tableSTORE_SETUP As STORE_SETUPDataTable
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableinv_price_code As inv_price_codeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
                Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
            End If
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
                Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STORE_SETUP As STORE_SETUPDataTable
        Get
            Return Me.tableSTORE_SETUP
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code As inv_price_codeDataTable
        Get
            Return Me.tableinv_price_code
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmInventorySetup = CType(MyBase.Clone,DSFrmInventorySetup)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("STORE_SETUP")) Is Nothing) Then
            Me.Tables.Add(New STORE_SETUPDataTable(ds.Tables("STORE_SETUP")))
        End If
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
            Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSTORE_SETUP = CType(Me.Tables("STORE_SETUP"),STORE_SETUPDataTable)
        If (Not (Me.tableSTORE_SETUP) Is Nothing) Then
            Me.tableSTORE_SETUP.InitVars
        End If
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableinv_price_code = CType(Me.Tables("inv_price_code"),inv_price_codeDataTable)
        If (Not (Me.tableinv_price_code) Is Nothing) Then
            Me.tableinv_price_code.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmInventorySetup"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmInventorySetup.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSTORE_SETUP = New STORE_SETUPDataTable
        Me.Tables.Add(Me.tableSTORE_SETUP)
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableinv_price_code = New inv_price_codeDataTable
        Me.Tables.Add(Me.tableinv_price_code)
    End Sub
    
    Private Function ShouldSerializeSTORE_SETUP() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub STORE_SETUPRowChangeEventHandler(ByVal sender As Object, ByVal e As STORE_SETUPRowChangeEvent)
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub inv_price_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_codeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("STORE_SETUP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STORE_SETUPRow
            Get
                Return CType(Me.Rows(index),STORE_SETUPRow)
            End Get
        End Property
        
        Public Event STORE_SETUPRowChanged As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowChanging As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleted As STORE_SETUPRowChangeEventHandler
        
        Public Event STORE_SETUPRowDeleting As STORE_SETUPRowChangeEventHandler
        
        Public Overloads Sub AddSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTORE_SETUPRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As STORE_SETUPRow
            Dim rowSTORE_SETUPRow As STORE_SETUPRow = CType(Me.NewRow,STORE_SETUPRow)
            rowSTORE_SETUPRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowSTORE_SETUPRow)
            Return rowSTORE_SETUPRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As STORE_SETUPRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),STORE_SETUPRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STORE_SETUPDataTable = CType(MyBase.Clone,STORE_SETUPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STORE_SETUPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewSTORE_SETUPRow() As STORE_SETUPRow
            Return CType(Me.NewRow,STORE_SETUPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STORE_SETUPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STORE_SETUPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STORE_SETUPRowChangedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanged(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STORE_SETUPRowChangingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowChanging(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STORE_SETUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleted(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STORE_SETUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent STORE_SETUPRowDeleting(Me, New STORE_SETUPRowChangeEvent(CType(e.Row,STORE_SETUPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTORE_SETUPRow(ByVal row As STORE_SETUPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRow
        Inherits DataRow
        
        Private tableSTORE_SETUP As STORE_SETUPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTORE_SETUP = CType(Me.Table,STORE_SETUPDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableSTORE_SETUP.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTORE_SETUP.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableSTORE_SETUP.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTORE_SETUP.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableSTORE_SETUP.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STORE_SETUPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STORE_SETUPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STORE_SETUPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STORE_SETUPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Private columnGL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String, ByVal GL_account As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type, GL_account}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
            Me.columnGL_account = Me.Columns("GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableinv_tab_type_item.GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Private columnprice1_c_l_a_p As DataColumn
        
        Private columnprice1_operator As DataColumn
        
        Private columnprice1_d_persent As DataColumn
        
        Private columnprice1_amount As DataColumn
        
        Private columnprice1_odd_price As DataColumn
        
        Private columnprice1_price_level As DataColumn
        
        Private columnprice2_c_l_a_p As DataColumn
        
        Private columnprice2_operator As DataColumn
        
        Private columnprice2_d_persent As DataColumn
        
        Private columnprice2_amount As DataColumn
        
        Private columnprice2_odd_price As DataColumn
        
        Private columnprice2_price_level As DataColumn
        
        Private columnprice3_c_l_a_p As DataColumn
        
        Private columnprice3_operator As DataColumn
        
        Private columnprice3_d_persent As DataColumn
        
        Private columnprice3_amount As DataColumn
        
        Private columnprice3_odd_price As DataColumn
        
        Private columnprice3_price_level As DataColumn
        
        Private columnprice4_c_l_a_p As DataColumn
        
        Private columnprice4_operator As DataColumn
        
        Private columnprice4_d_persent As DataColumn
        
        Private columnprice4_amount As DataColumn
        
        Private columnprice4_odd_price As DataColumn
        
        Private columnprice4_price_level As DataColumn
        
        Private columnprice5_c_l_a_p As DataColumn
        
        Private columnprice5_operator As DataColumn
        
        Private columnprice5_d_persent As DataColumn
        
        Private columnprice5_amount As DataColumn
        
        Private columnprice5_odd_price As DataColumn
        
        Private columnprice5_price_level As DataColumn
        
        Private columnprice6_c_l_a_p As DataColumn
        
        Private columnprice6_operator As DataColumn
        
        Private columnprice6_d_persent As DataColumn
        
        Private columnprice6_amount As DataColumn
        
        Private columnprice6_odd_price As DataColumn
        
        Private columnprice6_price_level As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Friend ReadOnly Property price1_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice1_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price1_operatorColumn As DataColumn
            Get
                Return Me.columnprice1_operator
            End Get
        End Property
        
        Friend ReadOnly Property price1_d_persentColumn As DataColumn
            Get
                Return Me.columnprice1_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price1_amountColumn As DataColumn
            Get
                Return Me.columnprice1_amount
            End Get
        End Property
        
        Friend ReadOnly Property price1_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice1_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price1_price_levelColumn As DataColumn
            Get
                Return Me.columnprice1_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price2_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice2_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price2_operatorColumn As DataColumn
            Get
                Return Me.columnprice2_operator
            End Get
        End Property
        
        Friend ReadOnly Property price2_d_persentColumn As DataColumn
            Get
                Return Me.columnprice2_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price2_amountColumn As DataColumn
            Get
                Return Me.columnprice2_amount
            End Get
        End Property
        
        Friend ReadOnly Property price2_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice2_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price2_price_levelColumn As DataColumn
            Get
                Return Me.columnprice2_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price3_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice3_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price3_operatorColumn As DataColumn
            Get
                Return Me.columnprice3_operator
            End Get
        End Property
        
        Friend ReadOnly Property price3_d_persentColumn As DataColumn
            Get
                Return Me.columnprice3_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price3_amountColumn As DataColumn
            Get
                Return Me.columnprice3_amount
            End Get
        End Property
        
        Friend ReadOnly Property price3_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice3_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price3_price_levelColumn As DataColumn
            Get
                Return Me.columnprice3_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price4_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice4_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price4_operatorColumn As DataColumn
            Get
                Return Me.columnprice4_operator
            End Get
        End Property
        
        Friend ReadOnly Property price4_d_persentColumn As DataColumn
            Get
                Return Me.columnprice4_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price4_amountColumn As DataColumn
            Get
                Return Me.columnprice4_amount
            End Get
        End Property
        
        Friend ReadOnly Property price4_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice4_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price4_price_levelColumn As DataColumn
            Get
                Return Me.columnprice4_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price5_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice5_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price5_operatorColumn As DataColumn
            Get
                Return Me.columnprice5_operator
            End Get
        End Property
        
        Friend ReadOnly Property price5_d_persentColumn As DataColumn
            Get
                Return Me.columnprice5_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price5_amountColumn As DataColumn
            Get
                Return Me.columnprice5_amount
            End Get
        End Property
        
        Friend ReadOnly Property price5_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice5_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price5_price_levelColumn As DataColumn
            Get
                Return Me.columnprice5_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price6_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice6_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price6_operatorColumn As DataColumn
            Get
                Return Me.columnprice6_operator
            End Get
        End Property
        
        Friend ReadOnly Property price6_d_persentColumn As DataColumn
            Get
                Return Me.columnprice6_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price6_amountColumn As DataColumn
            Get
                Return Me.columnprice6_amount
            End Get
        End Property
        
        Friend ReadOnly Property price6_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice6_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price6_price_levelColumn As DataColumn
            Get
                Return Me.columnprice6_price_level
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_codeRow
            Get
                Return CType(Me.Rows(index),inv_price_codeRow)
            End Get
        End Property
        
        Public Event inv_price_codeRowChanged As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowChanging As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleted As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleting As inv_price_codeRowChangeEventHandler
        
        Public Overloads Sub Addinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_codeRow( _
                    ByVal price_code As String,  _
                    ByVal desc_price_code As String,  _
                    ByVal price1_c_l_a_p As String,  _
                    ByVal price1_operator As String,  _
                    ByVal price1_d_persent As String,  _
                    ByVal price1_amount As Single,  _
                    ByVal price1_odd_price As Single,  _
                    ByVal price1_price_level As String,  _
                    ByVal price2_c_l_a_p As String,  _
                    ByVal price2_operator As String,  _
                    ByVal price2_d_persent As String,  _
                    ByVal price2_amount As Single,  _
                    ByVal price2_odd_price As Single,  _
                    ByVal price2_price_level As String,  _
                    ByVal price3_c_l_a_p As String,  _
                    ByVal price3_operator As String,  _
                    ByVal price3_d_persent As String,  _
                    ByVal price3_amount As Single,  _
                    ByVal price3_odd_price As Single,  _
                    ByVal price3_price_level As String,  _
                    ByVal price4_c_l_a_p As String,  _
                    ByVal price4_operator As String,  _
                    ByVal price4_d_persent As String,  _
                    ByVal price4_amount As Single,  _
                    ByVal price4_odd_price As Single,  _
                    ByVal price4_price_level As String,  _
                    ByVal price5_c_l_a_p As String,  _
                    ByVal price5_operator As String,  _
                    ByVal price5_d_persent As String,  _
                    ByVal price5_amount As Single,  _
                    ByVal price5_odd_price As Single,  _
                    ByVal price5_price_level As String,  _
                    ByVal price6_c_l_a_p As String,  _
                    ByVal price6_operator As String,  _
                    ByVal price6_d_persent As String,  _
                    ByVal price6_amount As Single,  _
                    ByVal price6_odd_price As Single,  _
                    ByVal price6_price_level As String,  _
                    ByVal special_notice As String) As inv_price_codeRow
            Dim rowinv_price_codeRow As inv_price_codeRow = CType(Me.NewRow,inv_price_codeRow)
            rowinv_price_codeRow.ItemArray = New Object() {price_code, desc_price_code, price1_c_l_a_p, price1_operator, price1_d_persent, price1_amount, price1_odd_price, price1_price_level, price2_c_l_a_p, price2_operator, price2_d_persent, price2_amount, price2_odd_price, price2_price_level, price3_c_l_a_p, price3_operator, price3_d_persent, price3_amount, price3_odd_price, price3_price_level, price4_c_l_a_p, price4_operator, price4_d_persent, price4_amount, price4_odd_price, price4_price_level, price5_c_l_a_p, price5_operator, price5_d_persent, price5_amount, price5_odd_price, price5_price_level, price6_c_l_a_p, price6_operator, price6_d_persent, price6_amount, price6_odd_price, price6_price_level, special_notice}
            Me.Rows.Add(rowinv_price_codeRow)
            Return rowinv_price_codeRow
        End Function
        
        Public Function FindByprice_code(ByVal price_code As String) As inv_price_codeRow
            Return CType(Me.Rows.Find(New Object() {price_code}),inv_price_codeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_codeDataTable = CType(MyBase.Clone,inv_price_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_codeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
            Me.columnprice1_c_l_a_p = Me.Columns("price1_c_l_a_p")
            Me.columnprice1_operator = Me.Columns("price1_operator")
            Me.columnprice1_d_persent = Me.Columns("price1_d_persent")
            Me.columnprice1_amount = Me.Columns("price1_amount")
            Me.columnprice1_odd_price = Me.Columns("price1_odd_price")
            Me.columnprice1_price_level = Me.Columns("price1_price_level")
            Me.columnprice2_c_l_a_p = Me.Columns("price2_c_l_a_p")
            Me.columnprice2_operator = Me.Columns("price2_operator")
            Me.columnprice2_d_persent = Me.Columns("price2_d_persent")
            Me.columnprice2_amount = Me.Columns("price2_amount")
            Me.columnprice2_odd_price = Me.Columns("price2_odd_price")
            Me.columnprice2_price_level = Me.Columns("price2_price_level")
            Me.columnprice3_c_l_a_p = Me.Columns("price3_c_l_a_p")
            Me.columnprice3_operator = Me.Columns("price3_operator")
            Me.columnprice3_d_persent = Me.Columns("price3_d_persent")
            Me.columnprice3_amount = Me.Columns("price3_amount")
            Me.columnprice3_odd_price = Me.Columns("price3_odd_price")
            Me.columnprice3_price_level = Me.Columns("price3_price_level")
            Me.columnprice4_c_l_a_p = Me.Columns("price4_c_l_a_p")
            Me.columnprice4_operator = Me.Columns("price4_operator")
            Me.columnprice4_d_persent = Me.Columns("price4_d_persent")
            Me.columnprice4_amount = Me.Columns("price4_amount")
            Me.columnprice4_odd_price = Me.Columns("price4_odd_price")
            Me.columnprice4_price_level = Me.Columns("price4_price_level")
            Me.columnprice5_c_l_a_p = Me.Columns("price5_c_l_a_p")
            Me.columnprice5_operator = Me.Columns("price5_operator")
            Me.columnprice5_d_persent = Me.Columns("price5_d_persent")
            Me.columnprice5_amount = Me.Columns("price5_amount")
            Me.columnprice5_odd_price = Me.Columns("price5_odd_price")
            Me.columnprice5_price_level = Me.Columns("price5_price_level")
            Me.columnprice6_c_l_a_p = Me.Columns("price6_c_l_a_p")
            Me.columnprice6_operator = Me.Columns("price6_operator")
            Me.columnprice6_d_persent = Me.Columns("price6_d_persent")
            Me.columnprice6_amount = Me.Columns("price6_amount")
            Me.columnprice6_odd_price = Me.Columns("price6_odd_price")
            Me.columnprice6_price_level = Me.Columns("price6_price_level")
            Me.columnspecial_notice = Me.Columns("special_notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice1_c_l_a_p = New DataColumn("price1_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_c_l_a_p)
            Me.columnprice1_operator = New DataColumn("price1_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_operator)
            Me.columnprice1_d_persent = New DataColumn("price1_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_d_persent)
            Me.columnprice1_amount = New DataColumn("price1_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_amount)
            Me.columnprice1_odd_price = New DataColumn("price1_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_odd_price)
            Me.columnprice1_price_level = New DataColumn("price1_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_price_level)
            Me.columnprice2_c_l_a_p = New DataColumn("price2_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_c_l_a_p)
            Me.columnprice2_operator = New DataColumn("price2_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_operator)
            Me.columnprice2_d_persent = New DataColumn("price2_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_d_persent)
            Me.columnprice2_amount = New DataColumn("price2_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_amount)
            Me.columnprice2_odd_price = New DataColumn("price2_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_odd_price)
            Me.columnprice2_price_level = New DataColumn("price2_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_price_level)
            Me.columnprice3_c_l_a_p = New DataColumn("price3_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_c_l_a_p)
            Me.columnprice3_operator = New DataColumn("price3_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_operator)
            Me.columnprice3_d_persent = New DataColumn("price3_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_d_persent)
            Me.columnprice3_amount = New DataColumn("price3_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_amount)
            Me.columnprice3_odd_price = New DataColumn("price3_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_odd_price)
            Me.columnprice3_price_level = New DataColumn("price3_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_price_level)
            Me.columnprice4_c_l_a_p = New DataColumn("price4_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_c_l_a_p)
            Me.columnprice4_operator = New DataColumn("price4_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_operator)
            Me.columnprice4_d_persent = New DataColumn("price4_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_d_persent)
            Me.columnprice4_amount = New DataColumn("price4_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_amount)
            Me.columnprice4_odd_price = New DataColumn("price4_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_odd_price)
            Me.columnprice4_price_level = New DataColumn("price4_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_price_level)
            Me.columnprice5_c_l_a_p = New DataColumn("price5_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_c_l_a_p)
            Me.columnprice5_operator = New DataColumn("price5_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_operator)
            Me.columnprice5_d_persent = New DataColumn("price5_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_d_persent)
            Me.columnprice5_amount = New DataColumn("price5_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_amount)
            Me.columnprice5_odd_price = New DataColumn("price5_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_odd_price)
            Me.columnprice5_price_level = New DataColumn("price5_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_price_level)
            Me.columnprice6_c_l_a_p = New DataColumn("price6_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_c_l_a_p)
            Me.columnprice6_operator = New DataColumn("price6_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_operator)
            Me.columnprice6_d_persent = New DataColumn("price6_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_d_persent)
            Me.columnprice6_amount = New DataColumn("price6_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_amount)
            Me.columnprice6_odd_price = New DataColumn("price6_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_odd_price)
            Me.columnprice6_price_level = New DataColumn("price6_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_price_level)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnprice_code}, true))
            Me.columnprice_code.AllowDBNull = false
            Me.columnprice_code.Unique = true
        End Sub
        
        Public Function Newinv_price_codeRow() As inv_price_codeRow
            Return CType(Me.NewRow,inv_price_codeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_codeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_codeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanged(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanging(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleted(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleting(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRow
        Inherits DataRow
        
        Private tableinv_price_code As inv_price_codeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code = CType(Me.Table,inv_price_codeDataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Property price1_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price1_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_operatorColumn) = value
            End Set
        End Property
        
        Public Property price1_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price1_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_amountColumn) = value
            End Set
        End Property
        
        Public Property price1_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price1_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price2_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price2_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_operatorColumn) = value
            End Set
        End Property
        
        Public Property price2_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price2_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_amountColumn) = value
            End Set
        End Property
        
        Public Property price2_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price2_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price3_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price3_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_operatorColumn) = value
            End Set
        End Property
        
        Public Property price3_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price3_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_amountColumn) = value
            End Set
        End Property
        
        Public Property price3_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price3_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price4_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price4_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_operatorColumn) = value
            End Set
        End Property
        
        Public Property price4_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price4_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_amountColumn) = value
            End Set
        End Property
        
        Public Property price4_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price4_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price5_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price5_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_operatorColumn) = value
            End Set
        End Property
        
        Public Property price5_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price5_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_amountColumn) = value
            End Set
        End Property
        
        Public Property price5_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price5_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price6_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price6_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_operatorColumn) = value
            End Set
        End Property
        
        Public Property price6_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price6_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_amountColumn) = value
            End Set
        End Property
        
        Public Property price6_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price6_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_price_levelColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.special_noticeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice1_c_l_a_pNull()
            Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_operatorColumn)
        End Function
        
        Public Sub Setprice1_operatorNull()
            Me(Me.tableinv_price_code.price1_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_d_persentColumn)
        End Function
        
        Public Sub Setprice1_d_persentNull()
            Me(Me.tableinv_price_code.price1_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_amountColumn)
        End Function
        
        Public Sub Setprice1_amountNull()
            Me(Me.tableinv_price_code.price1_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_odd_priceColumn)
        End Function
        
        Public Sub Setprice1_odd_priceNull()
            Me(Me.tableinv_price_code.price1_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_price_levelColumn)
        End Function
        
        Public Sub Setprice1_price_levelNull()
            Me(Me.tableinv_price_code.price1_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice2_c_l_a_pNull()
            Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_operatorColumn)
        End Function
        
        Public Sub Setprice2_operatorNull()
            Me(Me.tableinv_price_code.price2_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_d_persentColumn)
        End Function
        
        Public Sub Setprice2_d_persentNull()
            Me(Me.tableinv_price_code.price2_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_amountColumn)
        End Function
        
        Public Sub Setprice2_amountNull()
            Me(Me.tableinv_price_code.price2_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_odd_priceColumn)
        End Function
        
        Public Sub Setprice2_odd_priceNull()
            Me(Me.tableinv_price_code.price2_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_price_levelColumn)
        End Function
        
        Public Sub Setprice2_price_levelNull()
            Me(Me.tableinv_price_code.price2_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice3_c_l_a_pNull()
            Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_operatorColumn)
        End Function
        
        Public Sub Setprice3_operatorNull()
            Me(Me.tableinv_price_code.price3_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_d_persentColumn)
        End Function
        
        Public Sub Setprice3_d_persentNull()
            Me(Me.tableinv_price_code.price3_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_amountColumn)
        End Function
        
        Public Sub Setprice3_amountNull()
            Me(Me.tableinv_price_code.price3_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_odd_priceColumn)
        End Function
        
        Public Sub Setprice3_odd_priceNull()
            Me(Me.tableinv_price_code.price3_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_price_levelColumn)
        End Function
        
        Public Sub Setprice3_price_levelNull()
            Me(Me.tableinv_price_code.price3_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice4_c_l_a_pNull()
            Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_operatorColumn)
        End Function
        
        Public Sub Setprice4_operatorNull()
            Me(Me.tableinv_price_code.price4_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_d_persentColumn)
        End Function
        
        Public Sub Setprice4_d_persentNull()
            Me(Me.tableinv_price_code.price4_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_amountColumn)
        End Function
        
        Public Sub Setprice4_amountNull()
            Me(Me.tableinv_price_code.price4_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_odd_priceColumn)
        End Function
        
        Public Sub Setprice4_odd_priceNull()
            Me(Me.tableinv_price_code.price4_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_price_levelColumn)
        End Function
        
        Public Sub Setprice4_price_levelNull()
            Me(Me.tableinv_price_code.price4_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice5_c_l_a_pNull()
            Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_operatorColumn)
        End Function
        
        Public Sub Setprice5_operatorNull()
            Me(Me.tableinv_price_code.price5_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_d_persentColumn)
        End Function
        
        Public Sub Setprice5_d_persentNull()
            Me(Me.tableinv_price_code.price5_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_amountColumn)
        End Function
        
        Public Sub Setprice5_amountNull()
            Me(Me.tableinv_price_code.price5_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_odd_priceColumn)
        End Function
        
        Public Sub Setprice5_odd_priceNull()
            Me(Me.tableinv_price_code.price5_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_price_levelColumn)
        End Function
        
        Public Sub Setprice5_price_levelNull()
            Me(Me.tableinv_price_code.price5_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice6_c_l_a_pNull()
            Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_operatorColumn)
        End Function
        
        Public Sub Setprice6_operatorNull()
            Me(Me.tableinv_price_code.price6_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_d_persentColumn)
        End Function
        
        Public Sub Setprice6_d_persentNull()
            Me(Me.tableinv_price_code.price6_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_amountColumn)
        End Function
        
        Public Sub Setprice6_amountNull()
            Me(Me.tableinv_price_code.price6_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_odd_priceColumn)
        End Function
        
        Public Sub Setprice6_odd_priceNull()
            Me(Me.tableinv_price_code.price6_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_price_levelColumn)
        End Function
        
        Public Sub Setprice6_price_levelNull()
            Me(Me.tableinv_price_code.price6_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_price_code.special_noticeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_codeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_codeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
