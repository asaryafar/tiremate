'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmAccountsPayableSetup
    Inherits DataSet
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableGL_account1 As GL_account1DataTable
    
    Private tableGL_account2 As GL_account2DataTable
    
    Private tableGL_account3 As GL_account3DataTable
    
    Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("GL_account1")) Is Nothing) Then
                Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
            End If
            If (Not (ds.Tables("GL_account2")) Is Nothing) Then
                Me.Tables.Add(New GL_account2DataTable(ds.Tables("GL_account2")))
            End If
            If (Not (ds.Tables("GL_account3")) Is Nothing) Then
                Me.Tables.Add(New GL_account3DataTable(ds.Tables("GL_account3")))
            End If
            If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
                Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account1 As GL_account1DataTable
        Get
            Return Me.tableGL_account1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account2 As GL_account2DataTable
        Get
            Return Me.tableGL_account2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account3 As GL_account3DataTable
        Get
            Return Me.tableGL_account3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        Get
            Return Me.tableGL_TAB_AR_TERM
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmAccountsPayableSetup = CType(MyBase.Clone,DSFrmAccountsPayableSetup)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("GL_account1")) Is Nothing) Then
            Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
        End If
        If (Not (ds.Tables("GL_account2")) Is Nothing) Then
            Me.Tables.Add(New GL_account2DataTable(ds.Tables("GL_account2")))
        End If
        If (Not (ds.Tables("GL_account3")) Is Nothing) Then
            Me.Tables.Add(New GL_account3DataTable(ds.Tables("GL_account3")))
        End If
        If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
            Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableGL_account1 = CType(Me.Tables("GL_account1"),GL_account1DataTable)
        If (Not (Me.tableGL_account1) Is Nothing) Then
            Me.tableGL_account1.InitVars
        End If
        Me.tableGL_account2 = CType(Me.Tables("GL_account2"),GL_account2DataTable)
        If (Not (Me.tableGL_account2) Is Nothing) Then
            Me.tableGL_account2.InitVars
        End If
        Me.tableGL_account3 = CType(Me.Tables("GL_account3"),GL_account3DataTable)
        If (Not (Me.tableGL_account3) Is Nothing) Then
            Me.tableGL_account3.InitVars
        End If
        Me.tableGL_TAB_AR_TERM = CType(Me.Tables("GL_TAB_AR_TERM"),GL_TAB_AR_TERMDataTable)
        If (Not (Me.tableGL_TAB_AR_TERM) Is Nothing) Then
            Me.tableGL_TAB_AR_TERM.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmAccountsPayableSetup"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmAccountsPayableSetup.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableGL_account1 = New GL_account1DataTable
        Me.Tables.Add(Me.tableGL_account1)
        Me.tableGL_account2 = New GL_account2DataTable
        Me.Tables.Add(Me.tableGL_account2)
        Me.tableGL_account3 = New GL_account3DataTable
        Me.Tables.Add(Me.tableGL_account3)
        Me.tableGL_TAB_AR_TERM = New GL_TAB_AR_TERMDataTable
        Me.Tables.Add(Me.tableGL_TAB_AR_TERM)
    End Sub
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_TAB_AR_TERM() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub GL_account1RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account1RowChangeEvent)
    
    Public Delegate Sub GL_account2RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account2RowChangeEvent)
    
    Public Delegate Sub GL_account3RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account3RowChangeEvent)
    
    Public Delegate Sub GL_TAB_AR_TERMRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_TAB_AR_TERMRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account1Row
            Get
                Return CType(Me.Rows(index),GL_account1Row)
            End Get
        End Property
        
        Public Event GL_account1RowChanged As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowChanging As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleted As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleting As GL_account1RowChangeEventHandler
        
        Public Overloads Sub AddGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account1Row(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_account1Row
            Dim rowGL_account1Row As GL_account1Row = CType(Me.NewRow,GL_account1Row)
            rowGL_account1Row.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_account1Row)
            Return rowGL_account1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account1DataTable = CType(MyBase.Clone,GL_account1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account1Row() As GL_account1Row
            Return CType(Me.NewRow,GL_account1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account1RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanged(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account1RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanging(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account1RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleted(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account1RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleting(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1Row
        Inherits DataRow
        
        Private tableGL_account1 As GL_account1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account1 = CType(Me.Table,GL_account1DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account1.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account1.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account1.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account1.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account1.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account1.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account2Row
            Get
                Return CType(Me.Rows(index),GL_account2Row)
            End Get
        End Property
        
        Public Event GL_account2RowChanged As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowChanging As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowDeleted As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowDeleting As GL_account2RowChangeEventHandler
        
        Public Overloads Sub AddGL_account2Row(ByVal row As GL_account2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account2Row(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_account2Row
            Dim rowGL_account2Row As GL_account2Row = CType(Me.NewRow,GL_account2Row)
            rowGL_account2Row.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_account2Row)
            Return rowGL_account2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account2DataTable = CType(MyBase.Clone,GL_account2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account2Row() As GL_account2Row
            Return CType(Me.NewRow,GL_account2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account2RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account2RowChanged(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account2RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account2RowChanging(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account2RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account2RowDeleted(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account2RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account2RowDeleting(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account2Row(ByVal row As GL_account2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2Row
        Inherits DataRow
        
        Private tableGL_account2 As GL_account2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account2 = CType(Me.Table,GL_account2DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account2.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account2.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account2.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account2.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account2.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account2.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account2.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account2.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account2.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account2.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account2.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account2.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account2.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account2.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account2.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account2.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account2.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account2.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account_master As DataColumn
        
        Private columngroup_GL_account As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_masterColumn As DataColumn
            Get
                Return Me.columnGL_account_master
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account3Row
            Get
                Return CType(Me.Rows(index),GL_account3Row)
            End Get
        End Property
        
        Public Event GL_account3RowChanged As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowChanging As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowDeleted As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowDeleting As GL_account3RowChangeEventHandler
        
        Public Overloads Sub AddGL_account3Row(ByVal row As GL_account3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account3Row(ByVal GL_account As String, ByVal desc_GL_account As String, ByVal GL_account_master As String, ByVal group_GL_account As String, ByVal remark As String) As GL_account3Row
            Dim rowGL_account3Row As GL_account3Row = CType(Me.NewRow,GL_account3Row)
            rowGL_account3Row.ItemArray = New Object() {GL_account, desc_GL_account, GL_account_master, group_GL_account, remark}
            Me.Rows.Add(rowGL_account3Row)
            Return rowGL_account3Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account3DataTable = CType(MyBase.Clone,GL_account3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account_master = Me.Columns("GL_account_master")
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account_master = New DataColumn("GL_account_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_master)
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account3Row() As GL_account3Row
            Return CType(Me.NewRow,GL_account3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account3RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account3RowChanged(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account3RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account3RowChanging(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account3RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account3RowDeleted(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account3RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account3RowDeleting(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account3Row(ByVal row As GL_account3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3Row
        Inherits DataRow
        
        Private tableGL_account3 As GL_account3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account3 = CType(Me.Table,GL_account3DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account3.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account3.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account3.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account3.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account_master As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account3.GL_account_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account3.GL_account_masterColumn) = value
            End Set
        End Property
        
        Public Property group_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account3.group_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account3.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account3.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account3.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account3.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account3.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_masterNull() As Boolean
            Return Me.IsNull(Me.tableGL_account3.GL_account_masterColumn)
        End Function
        
        Public Sub SetGL_account_masterNull()
            Me(Me.tableGL_account3.GL_account_masterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgroup_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account3.group_GL_accountColumn)
        End Function
        
        Public Sub Setgroup_GL_accountNull()
            Me(Me.tableGL_account3.group_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account3.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_account3.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAR_terms As DataColumn
        
        Private columnKIND_AR As DataColumn
        
        Private columnST_NET_DUE_IN As DataColumn
        
        Private columnST_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnST_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnDD_NET_DUE_BEFORE As DataColumn
        
        Private columnDD_IF_ISSUED_WITHIN_DAYS As DataColumn
        
        Private columnDD_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnDD_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnMP_NO_OF_PAYMENT As DataColumn
        
        Private columnMP_BEFORE_DAY As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_TAB_AR_TERM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property KIND_ARColumn As DataColumn
            Get
                Return Me.columnKIND_AR
            End Get
        End Property
        
        Friend ReadOnly Property ST_NET_DUE_INColumn As DataColumn
            Get
                Return Me.columnST_NET_DUE_IN
            End Get
        End Property
        
        Friend ReadOnly Property ST_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnST_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property ST_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnST_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_NET_DUE_BEFOREColumn As DataColumn
            Get
                Return Me.columnDD_NET_DUE_BEFORE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_ISSUED_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_ISSUED_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnDD_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property MP_NO_OF_PAYMENTColumn As DataColumn
            Get
                Return Me.columnMP_NO_OF_PAYMENT
            End Get
        End Property
        
        Friend ReadOnly Property MP_BEFORE_DAYColumn As DataColumn
            Get
                Return Me.columnMP_BEFORE_DAY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_TAB_AR_TERMRow
            Get
                Return CType(Me.Rows(index),GL_TAB_AR_TERMRow)
            End Get
        End Property
        
        Public Event GL_TAB_AR_TERMRowChanged As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowChanging As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleted As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleting As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Overloads Sub AddGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_TAB_AR_TERMRow(ByVal AR_terms As String, ByVal KIND_AR As Short, ByVal ST_NET_DUE_IN As Short, ByVal ST_DISCOUNT_PERCENTAGE As Decimal, ByVal ST_IF_PAY_WITHIN_DAYS As Short, ByVal DD_NET_DUE_BEFORE As Short, ByVal DD_IF_ISSUED_WITHIN_DAYS As Short, ByVal DD_DISCOUNT_PERCENTAGE As Decimal, ByVal DD_IF_PAY_WITHIN_DAYS As Short, ByVal MP_NO_OF_PAYMENT As Short, ByVal MP_BEFORE_DAY As Short) As GL_TAB_AR_TERMRow
            Dim rowGL_TAB_AR_TERMRow As GL_TAB_AR_TERMRow = CType(Me.NewRow,GL_TAB_AR_TERMRow)
            rowGL_TAB_AR_TERMRow.ItemArray = New Object() {AR_terms, KIND_AR, ST_NET_DUE_IN, ST_DISCOUNT_PERCENTAGE, ST_IF_PAY_WITHIN_DAYS, DD_NET_DUE_BEFORE, DD_IF_ISSUED_WITHIN_DAYS, DD_DISCOUNT_PERCENTAGE, DD_IF_PAY_WITHIN_DAYS, MP_NO_OF_PAYMENT, MP_BEFORE_DAY}
            Me.Rows.Add(rowGL_TAB_AR_TERMRow)
            Return rowGL_TAB_AR_TERMRow
        End Function
        
        Public Function FindByAR_terms(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Return CType(Me.Rows.Find(New Object() {AR_terms}),GL_TAB_AR_TERMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_TAB_AR_TERMDataTable = CType(MyBase.Clone,GL_TAB_AR_TERMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_TAB_AR_TERMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnKIND_AR = Me.Columns("KIND_AR")
            Me.columnST_NET_DUE_IN = Me.Columns("ST_NET_DUE_IN")
            Me.columnST_DISCOUNT_PERCENTAGE = Me.Columns("ST_DISCOUNT_PERCENTAGE")
            Me.columnST_IF_PAY_WITHIN_DAYS = Me.Columns("ST_IF_PAY_WITHIN_DAYS")
            Me.columnDD_NET_DUE_BEFORE = Me.Columns("DD_NET_DUE_BEFORE")
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = Me.Columns("DD_IF_ISSUED_WITHIN_DAYS")
            Me.columnDD_DISCOUNT_PERCENTAGE = Me.Columns("DD_DISCOUNT_PERCENTAGE")
            Me.columnDD_IF_PAY_WITHIN_DAYS = Me.Columns("DD_IF_PAY_WITHIN_DAYS")
            Me.columnMP_NO_OF_PAYMENT = Me.Columns("MP_NO_OF_PAYMENT")
            Me.columnMP_BEFORE_DAY = Me.Columns("MP_BEFORE_DAY")
        End Sub
        
        Private Sub InitClass()
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnKIND_AR = New DataColumn("KIND_AR", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKIND_AR)
            Me.columnST_NET_DUE_IN = New DataColumn("ST_NET_DUE_IN", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_NET_DUE_IN)
            Me.columnST_DISCOUNT_PERCENTAGE = New DataColumn("ST_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_DISCOUNT_PERCENTAGE)
            Me.columnST_IF_PAY_WITHIN_DAYS = New DataColumn("ST_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_IF_PAY_WITHIN_DAYS)
            Me.columnDD_NET_DUE_BEFORE = New DataColumn("DD_NET_DUE_BEFORE", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_NET_DUE_BEFORE)
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = New DataColumn("DD_IF_ISSUED_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_ISSUED_WITHIN_DAYS)
            Me.columnDD_DISCOUNT_PERCENTAGE = New DataColumn("DD_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_DISCOUNT_PERCENTAGE)
            Me.columnDD_IF_PAY_WITHIN_DAYS = New DataColumn("DD_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_PAY_WITHIN_DAYS)
            Me.columnMP_NO_OF_PAYMENT = New DataColumn("MP_NO_OF_PAYMENT", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_NO_OF_PAYMENT)
            Me.columnMP_BEFORE_DAY = New DataColumn("MP_BEFORE_DAY", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_BEFORE_DAY)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAR_terms}, true))
            Me.columnAR_terms.AllowDBNull = false
            Me.columnAR_terms.Unique = true
        End Sub
        
        Public Function NewGL_TAB_AR_TERMRow() As GL_TAB_AR_TERMRow
            Return CType(Me.NewRow,GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_TAB_AR_TERMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanged(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanging(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleted(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleting(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRow
        Inherits DataRow
        
        Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_TAB_AR_TERM = CType(Me.Table,GL_TAB_AR_TERMDataTable)
        End Sub
        
        Public Property AR_terms As String
            Get
                Return CType(Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn),String)
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property KIND_AR As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = value
            End Set
        End Property
        
        Public Property ST_NET_DUE_IN As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = value
            End Set
        End Property
        
        Public Property ST_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property ST_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_NET_DUE_BEFORE As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_ISSUED_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property MP_NO_OF_PAYMENT As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = value
            End Set
        End Property
        
        Public Property MP_BEFORE_DAY As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = value
            End Set
        End Property
        
        Public Function IsKIND_ARNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.KIND_ARColumn)
        End Function
        
        Public Sub SetKIND_ARNull()
            Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_NET_DUE_INNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn)
        End Function
        
        Public Sub SetST_NET_DUE_INNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetST_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetST_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_NET_DUE_BEFORENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn)
        End Function
        
        Public Sub SetDD_NET_DUE_BEFORENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_ISSUED_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_ISSUED_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetDD_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_NO_OF_PAYMENTNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn)
        End Function
        
        Public Sub SetMP_NO_OF_PAYMENTNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_BEFORE_DAYNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn)
        End Function
        
        Public Sub SetMP_BEFORE_DAYNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_TAB_AR_TERMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_TAB_AR_TERMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_TAB_AR_TERMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
