'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmGeneralLedgerSetup
    Inherits DataSet
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableGL_account1 As GL_account1DataTable
    
    Private tableGL_account2 As GL_account2DataTable
    
    Private tableGL_account3 As GL_account3DataTable
    
    Private tableGL_account4 As GL_account4DataTable
    
    Private tableGL_account5 As GL_account5DataTable
    
    Private tableGL_account6 As GL_account6DataTable
    
    Private tableGL_account7 As GL_account7DataTable
    
    Private tableGL_account8 As GL_account8DataTable
    
    Private tableGL_account9 As GL_account9DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("GL_account1")) Is Nothing) Then
                Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
            End If
            If (Not (ds.Tables("GL_account2")) Is Nothing) Then
                Me.Tables.Add(New GL_account2DataTable(ds.Tables("GL_account2")))
            End If
            If (Not (ds.Tables("GL_account3")) Is Nothing) Then
                Me.Tables.Add(New GL_account3DataTable(ds.Tables("GL_account3")))
            End If
            If (Not (ds.Tables("GL_account4")) Is Nothing) Then
                Me.Tables.Add(New GL_account4DataTable(ds.Tables("GL_account4")))
            End If
            If (Not (ds.Tables("GL_account5")) Is Nothing) Then
                Me.Tables.Add(New GL_account5DataTable(ds.Tables("GL_account5")))
            End If
            If (Not (ds.Tables("GL_account6")) Is Nothing) Then
                Me.Tables.Add(New GL_account6DataTable(ds.Tables("GL_account6")))
            End If
            If (Not (ds.Tables("GL_account7")) Is Nothing) Then
                Me.Tables.Add(New GL_account7DataTable(ds.Tables("GL_account7")))
            End If
            If (Not (ds.Tables("GL_account8")) Is Nothing) Then
                Me.Tables.Add(New GL_account8DataTable(ds.Tables("GL_account8")))
            End If
            If (Not (ds.Tables("GL_account9")) Is Nothing) Then
                Me.Tables.Add(New GL_account9DataTable(ds.Tables("GL_account9")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account1 As GL_account1DataTable
        Get
            Return Me.tableGL_account1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account2 As GL_account2DataTable
        Get
            Return Me.tableGL_account2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account3 As GL_account3DataTable
        Get
            Return Me.tableGL_account3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account4 As GL_account4DataTable
        Get
            Return Me.tableGL_account4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account5 As GL_account5DataTable
        Get
            Return Me.tableGL_account5
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account6 As GL_account6DataTable
        Get
            Return Me.tableGL_account6
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account7 As GL_account7DataTable
        Get
            Return Me.tableGL_account7
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account8 As GL_account8DataTable
        Get
            Return Me.tableGL_account8
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account9 As GL_account9DataTable
        Get
            Return Me.tableGL_account9
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmGeneralLedgerSetup = CType(MyBase.Clone,DSFrmGeneralLedgerSetup)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("GL_account1")) Is Nothing) Then
            Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
        End If
        If (Not (ds.Tables("GL_account2")) Is Nothing) Then
            Me.Tables.Add(New GL_account2DataTable(ds.Tables("GL_account2")))
        End If
        If (Not (ds.Tables("GL_account3")) Is Nothing) Then
            Me.Tables.Add(New GL_account3DataTable(ds.Tables("GL_account3")))
        End If
        If (Not (ds.Tables("GL_account4")) Is Nothing) Then
            Me.Tables.Add(New GL_account4DataTable(ds.Tables("GL_account4")))
        End If
        If (Not (ds.Tables("GL_account5")) Is Nothing) Then
            Me.Tables.Add(New GL_account5DataTable(ds.Tables("GL_account5")))
        End If
        If (Not (ds.Tables("GL_account6")) Is Nothing) Then
            Me.Tables.Add(New GL_account6DataTable(ds.Tables("GL_account6")))
        End If
        If (Not (ds.Tables("GL_account7")) Is Nothing) Then
            Me.Tables.Add(New GL_account7DataTable(ds.Tables("GL_account7")))
        End If
        If (Not (ds.Tables("GL_account8")) Is Nothing) Then
            Me.Tables.Add(New GL_account8DataTable(ds.Tables("GL_account8")))
        End If
        If (Not (ds.Tables("GL_account9")) Is Nothing) Then
            Me.Tables.Add(New GL_account9DataTable(ds.Tables("GL_account9")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableGL_account1 = CType(Me.Tables("GL_account1"),GL_account1DataTable)
        If (Not (Me.tableGL_account1) Is Nothing) Then
            Me.tableGL_account1.InitVars
        End If
        Me.tableGL_account2 = CType(Me.Tables("GL_account2"),GL_account2DataTable)
        If (Not (Me.tableGL_account2) Is Nothing) Then
            Me.tableGL_account2.InitVars
        End If
        Me.tableGL_account3 = CType(Me.Tables("GL_account3"),GL_account3DataTable)
        If (Not (Me.tableGL_account3) Is Nothing) Then
            Me.tableGL_account3.InitVars
        End If
        Me.tableGL_account4 = CType(Me.Tables("GL_account4"),GL_account4DataTable)
        If (Not (Me.tableGL_account4) Is Nothing) Then
            Me.tableGL_account4.InitVars
        End If
        Me.tableGL_account5 = CType(Me.Tables("GL_account5"),GL_account5DataTable)
        If (Not (Me.tableGL_account5) Is Nothing) Then
            Me.tableGL_account5.InitVars
        End If
        Me.tableGL_account6 = CType(Me.Tables("GL_account6"),GL_account6DataTable)
        If (Not (Me.tableGL_account6) Is Nothing) Then
            Me.tableGL_account6.InitVars
        End If
        Me.tableGL_account7 = CType(Me.Tables("GL_account7"),GL_account7DataTable)
        If (Not (Me.tableGL_account7) Is Nothing) Then
            Me.tableGL_account7.InitVars
        End If
        Me.tableGL_account8 = CType(Me.Tables("GL_account8"),GL_account8DataTable)
        If (Not (Me.tableGL_account8) Is Nothing) Then
            Me.tableGL_account8.InitVars
        End If
        Me.tableGL_account9 = CType(Me.Tables("GL_account9"),GL_account9DataTable)
        If (Not (Me.tableGL_account9) Is Nothing) Then
            Me.tableGL_account9.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmGeneralLedgerSetup"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmGeneralLedgerSetup.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableGL_account1 = New GL_account1DataTable
        Me.Tables.Add(Me.tableGL_account1)
        Me.tableGL_account2 = New GL_account2DataTable
        Me.Tables.Add(Me.tableGL_account2)
        Me.tableGL_account3 = New GL_account3DataTable
        Me.Tables.Add(Me.tableGL_account3)
        Me.tableGL_account4 = New GL_account4DataTable
        Me.Tables.Add(Me.tableGL_account4)
        Me.tableGL_account5 = New GL_account5DataTable
        Me.Tables.Add(Me.tableGL_account5)
        Me.tableGL_account6 = New GL_account6DataTable
        Me.Tables.Add(Me.tableGL_account6)
        Me.tableGL_account7 = New GL_account7DataTable
        Me.Tables.Add(Me.tableGL_account7)
        Me.tableGL_account8 = New GL_account8DataTable
        Me.Tables.Add(Me.tableGL_account8)
        Me.tableGL_account9 = New GL_account9DataTable
        Me.Tables.Add(Me.tableGL_account9)
    End Sub
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account5() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account6() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account7() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account8() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account9() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub GL_account1RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account1RowChangeEvent)
    
    Public Delegate Sub GL_account2RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account2RowChangeEvent)
    
    Public Delegate Sub GL_account3RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account3RowChangeEvent)
    
    Public Delegate Sub GL_account4RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account4RowChangeEvent)
    
    Public Delegate Sub GL_account5RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account5RowChangeEvent)
    
    Public Delegate Sub GL_account6RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account6RowChangeEvent)
    
    Public Delegate Sub GL_account7RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account7RowChangeEvent)
    
    Public Delegate Sub GL_account8RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account8RowChangeEvent)
    
    Public Delegate Sub GL_account9RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account9RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account1Row
            Get
                Return CType(Me.Rows(index),GL_account1Row)
            End Get
        End Property
        
        Public Event GL_account1RowChanged As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowChanging As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleted As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleting As GL_account1RowChangeEventHandler
        
        Public Overloads Sub AddGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account1Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account1Row
            Dim rowGL_account1Row As GL_account1Row = CType(Me.NewRow,GL_account1Row)
            rowGL_account1Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account1Row)
            Return rowGL_account1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account1DataTable = CType(MyBase.Clone,GL_account1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account1Row() As GL_account1Row
            Return CType(Me.NewRow,GL_account1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account1RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanged(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account1RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanging(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account1RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleted(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account1RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleting(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1Row
        Inherits DataRow
        
        Private tableGL_account1 As GL_account1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account1 = CType(Me.Table,GL_account1DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account1.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account1.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account1.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account2Row
            Get
                Return CType(Me.Rows(index),GL_account2Row)
            End Get
        End Property
        
        Public Event GL_account2RowChanged As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowChanging As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowDeleted As GL_account2RowChangeEventHandler
        
        Public Event GL_account2RowDeleting As GL_account2RowChangeEventHandler
        
        Public Overloads Sub AddGL_account2Row(ByVal row As GL_account2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account2Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account2Row
            Dim rowGL_account2Row As GL_account2Row = CType(Me.NewRow,GL_account2Row)
            rowGL_account2Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account2Row)
            Return rowGL_account2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account2DataTable = CType(MyBase.Clone,GL_account2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account2Row() As GL_account2Row
            Return CType(Me.NewRow,GL_account2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account2RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account2RowChanged(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account2RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account2RowChanging(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account2RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account2RowDeleted(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account2RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account2RowDeleting(Me, New GL_account2RowChangeEvent(CType(e.Row,GL_account2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account2Row(ByVal row As GL_account2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2Row
        Inherits DataRow
        
        Private tableGL_account2 As GL_account2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account2 = CType(Me.Table,GL_account2DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account2.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account2.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account2.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account2.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account2.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account2.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account3Row
            Get
                Return CType(Me.Rows(index),GL_account3Row)
            End Get
        End Property
        
        Public Event GL_account3RowChanged As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowChanging As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowDeleted As GL_account3RowChangeEventHandler
        
        Public Event GL_account3RowDeleting As GL_account3RowChangeEventHandler
        
        Public Overloads Sub AddGL_account3Row(ByVal row As GL_account3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account3Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account3Row
            Dim rowGL_account3Row As GL_account3Row = CType(Me.NewRow,GL_account3Row)
            rowGL_account3Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account3Row)
            Return rowGL_account3Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account3DataTable = CType(MyBase.Clone,GL_account3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account3Row() As GL_account3Row
            Return CType(Me.NewRow,GL_account3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account3RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account3RowChanged(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account3RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account3RowChanging(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account3RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account3RowDeleted(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account3RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account3RowDeleting(Me, New GL_account3RowChangeEvent(CType(e.Row,GL_account3Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account3Row(ByVal row As GL_account3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3Row
        Inherits DataRow
        
        Private tableGL_account3 As GL_account3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account3 = CType(Me.Table,GL_account3DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account3.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account3.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account3.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account3.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account3.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account3.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account4Row
            Get
                Return CType(Me.Rows(index),GL_account4Row)
            End Get
        End Property
        
        Public Event GL_account4RowChanged As GL_account4RowChangeEventHandler
        
        Public Event GL_account4RowChanging As GL_account4RowChangeEventHandler
        
        Public Event GL_account4RowDeleted As GL_account4RowChangeEventHandler
        
        Public Event GL_account4RowDeleting As GL_account4RowChangeEventHandler
        
        Public Overloads Sub AddGL_account4Row(ByVal row As GL_account4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account4Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account4Row
            Dim rowGL_account4Row As GL_account4Row = CType(Me.NewRow,GL_account4Row)
            rowGL_account4Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account4Row)
            Return rowGL_account4Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account4DataTable = CType(MyBase.Clone,GL_account4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account4Row() As GL_account4Row
            Return CType(Me.NewRow,GL_account4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account4RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account4RowChanged(Me, New GL_account4RowChangeEvent(CType(e.Row,GL_account4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account4RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account4RowChanging(Me, New GL_account4RowChangeEvent(CType(e.Row,GL_account4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account4RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account4RowDeleted(Me, New GL_account4RowChangeEvent(CType(e.Row,GL_account4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account4RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account4RowDeleting(Me, New GL_account4RowChangeEvent(CType(e.Row,GL_account4Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account4Row(ByVal row As GL_account4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account4Row
        Inherits DataRow
        
        Private tableGL_account4 As GL_account4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account4 = CType(Me.Table,GL_account4DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account4.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account4.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account4.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account4.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account4.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account4.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account5DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account5")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account5Row
            Get
                Return CType(Me.Rows(index),GL_account5Row)
            End Get
        End Property
        
        Public Event GL_account5RowChanged As GL_account5RowChangeEventHandler
        
        Public Event GL_account5RowChanging As GL_account5RowChangeEventHandler
        
        Public Event GL_account5RowDeleted As GL_account5RowChangeEventHandler
        
        Public Event GL_account5RowDeleting As GL_account5RowChangeEventHandler
        
        Public Overloads Sub AddGL_account5Row(ByVal row As GL_account5Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account5Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account5Row
            Dim rowGL_account5Row As GL_account5Row = CType(Me.NewRow,GL_account5Row)
            rowGL_account5Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account5Row)
            Return rowGL_account5Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account5DataTable = CType(MyBase.Clone,GL_account5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account5DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account5Row() As GL_account5Row
            Return CType(Me.NewRow,GL_account5Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account5Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account5Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account5RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account5RowChanged(Me, New GL_account5RowChangeEvent(CType(e.Row,GL_account5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account5RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account5RowChanging(Me, New GL_account5RowChangeEvent(CType(e.Row,GL_account5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account5RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account5RowDeleted(Me, New GL_account5RowChangeEvent(CType(e.Row,GL_account5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account5RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account5RowDeleting(Me, New GL_account5RowChangeEvent(CType(e.Row,GL_account5Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account5Row(ByVal row As GL_account5Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account5Row
        Inherits DataRow
        
        Private tableGL_account5 As GL_account5DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account5 = CType(Me.Table,GL_account5DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account5.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account5.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account5.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account5.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account5.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account5.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account5RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account5Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account5Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account6DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account6")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account6Row
            Get
                Return CType(Me.Rows(index),GL_account6Row)
            End Get
        End Property
        
        Public Event GL_account6RowChanged As GL_account6RowChangeEventHandler
        
        Public Event GL_account6RowChanging As GL_account6RowChangeEventHandler
        
        Public Event GL_account6RowDeleted As GL_account6RowChangeEventHandler
        
        Public Event GL_account6RowDeleting As GL_account6RowChangeEventHandler
        
        Public Overloads Sub AddGL_account6Row(ByVal row As GL_account6Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account6Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account6Row
            Dim rowGL_account6Row As GL_account6Row = CType(Me.NewRow,GL_account6Row)
            rowGL_account6Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account6Row)
            Return rowGL_account6Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account6DataTable = CType(MyBase.Clone,GL_account6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account6DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account6Row() As GL_account6Row
            Return CType(Me.NewRow,GL_account6Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account6Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account6Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account6RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account6RowChanged(Me, New GL_account6RowChangeEvent(CType(e.Row,GL_account6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account6RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account6RowChanging(Me, New GL_account6RowChangeEvent(CType(e.Row,GL_account6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account6RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account6RowDeleted(Me, New GL_account6RowChangeEvent(CType(e.Row,GL_account6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account6RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account6RowDeleting(Me, New GL_account6RowChangeEvent(CType(e.Row,GL_account6Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account6Row(ByVal row As GL_account6Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account6Row
        Inherits DataRow
        
        Private tableGL_account6 As GL_account6DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account6 = CType(Me.Table,GL_account6DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account6.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account6.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account6.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account6.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account6.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account6.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account6RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account6Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account6Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account7DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account7")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account7Row
            Get
                Return CType(Me.Rows(index),GL_account7Row)
            End Get
        End Property
        
        Public Event GL_account7RowChanged As GL_account7RowChangeEventHandler
        
        Public Event GL_account7RowChanging As GL_account7RowChangeEventHandler
        
        Public Event GL_account7RowDeleted As GL_account7RowChangeEventHandler
        
        Public Event GL_account7RowDeleting As GL_account7RowChangeEventHandler
        
        Public Overloads Sub AddGL_account7Row(ByVal row As GL_account7Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account7Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account7Row
            Dim rowGL_account7Row As GL_account7Row = CType(Me.NewRow,GL_account7Row)
            rowGL_account7Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account7Row)
            Return rowGL_account7Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account7DataTable = CType(MyBase.Clone,GL_account7DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account7DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account7Row() As GL_account7Row
            Return CType(Me.NewRow,GL_account7Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account7Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account7Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account7RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account7RowChanged(Me, New GL_account7RowChangeEvent(CType(e.Row,GL_account7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account7RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account7RowChanging(Me, New GL_account7RowChangeEvent(CType(e.Row,GL_account7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account7RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account7RowDeleted(Me, New GL_account7RowChangeEvent(CType(e.Row,GL_account7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account7RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account7RowDeleting(Me, New GL_account7RowChangeEvent(CType(e.Row,GL_account7Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account7Row(ByVal row As GL_account7Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account7Row
        Inherits DataRow
        
        Private tableGL_account7 As GL_account7DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account7 = CType(Me.Table,GL_account7DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account7.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account7.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account7.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account7.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account7.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account7.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account7RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account7Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account7Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account7Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account8DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account8")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account8Row
            Get
                Return CType(Me.Rows(index),GL_account8Row)
            End Get
        End Property
        
        Public Event GL_account8RowChanged As GL_account8RowChangeEventHandler
        
        Public Event GL_account8RowChanging As GL_account8RowChangeEventHandler
        
        Public Event GL_account8RowDeleted As GL_account8RowChangeEventHandler
        
        Public Event GL_account8RowDeleting As GL_account8RowChangeEventHandler
        
        Public Overloads Sub AddGL_account8Row(ByVal row As GL_account8Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account8Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account8Row
            Dim rowGL_account8Row As GL_account8Row = CType(Me.NewRow,GL_account8Row)
            rowGL_account8Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account8Row)
            Return rowGL_account8Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account8DataTable = CType(MyBase.Clone,GL_account8DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account8DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account8Row() As GL_account8Row
            Return CType(Me.NewRow,GL_account8Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account8Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account8Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account8RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account8RowChanged(Me, New GL_account8RowChangeEvent(CType(e.Row,GL_account8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account8RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account8RowChanging(Me, New GL_account8RowChangeEvent(CType(e.Row,GL_account8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account8RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account8RowDeleted(Me, New GL_account8RowChangeEvent(CType(e.Row,GL_account8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account8RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account8RowDeleting(Me, New GL_account8RowChangeEvent(CType(e.Row,GL_account8Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account8Row(ByVal row As GL_account8Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account8Row
        Inherits DataRow
        
        Private tableGL_account8 As GL_account8DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account8 = CType(Me.Table,GL_account8DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account8.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account8.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account8.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account8.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account8.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account8.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account8RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account8Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account8Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account8Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account9DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account9")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account9Row
            Get
                Return CType(Me.Rows(index),GL_account9Row)
            End Get
        End Property
        
        Public Event GL_account9RowChanged As GL_account9RowChangeEventHandler
        
        Public Event GL_account9RowChanging As GL_account9RowChangeEventHandler
        
        Public Event GL_account9RowDeleted As GL_account9RowChangeEventHandler
        
        Public Event GL_account9RowDeleting As GL_account9RowChangeEventHandler
        
        Public Overloads Sub AddGL_account9Row(ByVal row As GL_account9Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account9Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account9Row
            Dim rowGL_account9Row As GL_account9Row = CType(Me.NewRow,GL_account9Row)
            rowGL_account9Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account9Row)
            Return rowGL_account9Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account9DataTable = CType(MyBase.Clone,GL_account9DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account9DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account9Row() As GL_account9Row
            Return CType(Me.NewRow,GL_account9Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account9Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account9Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account9RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account9RowChanged(Me, New GL_account9RowChangeEvent(CType(e.Row,GL_account9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account9RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account9RowChanging(Me, New GL_account9RowChangeEvent(CType(e.Row,GL_account9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account9RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account9RowDeleted(Me, New GL_account9RowChangeEvent(CType(e.Row,GL_account9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account9RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account9RowDeleting(Me, New GL_account9RowChangeEvent(CType(e.Row,GL_account9Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account9Row(ByVal row As GL_account9Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account9Row
        Inherits DataRow
        
        Private tableGL_account9 As GL_account9DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account9 = CType(Me.Table,GL_account9DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account9.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account9.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account9.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account9.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account9.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account9.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account9RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account9Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account9Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account9Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
