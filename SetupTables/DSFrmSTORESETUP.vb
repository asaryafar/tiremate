'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmSTORESETUP
    Inherits DataSet
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Private tablecust_sales_tax As cust_sales_taxDataTable
    
    Private tableemployee As employeeDataTable
    
    Private tablebas_zipcode As bas_zipcodeDataTable
    
    Private tableGL_account As GL_accountDataTable
    
    Private tableGL_account1 As GL_account1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            If (Not (ds.Tables("cust_sales_tax")) Is Nothing) Then
                Me.Tables.Add(New cust_sales_taxDataTable(ds.Tables("cust_sales_tax")))
            End If
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
                Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
            End If
            If (Not (ds.Tables("GL_account")) Is Nothing) Then
                Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
            End If
            If (Not (ds.Tables("GL_account1")) Is Nothing) Then
                Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_sales_tax As cust_sales_taxDataTable
        Get
            Return Me.tablecust_sales_tax
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_zipcode As bas_zipcodeDataTable
        Get
            Return Me.tablebas_zipcode
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account As GL_accountDataTable
        Get
            Return Me.tableGL_account
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account1 As GL_account1DataTable
        Get
            Return Me.tableGL_account1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmSTORESETUP = CType(MyBase.Clone,DSFrmSTORESETUP)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        If (Not (ds.Tables("cust_sales_tax")) Is Nothing) Then
            Me.Tables.Add(New cust_sales_taxDataTable(ds.Tables("cust_sales_tax")))
        End If
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
            Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
        End If
        If (Not (ds.Tables("GL_account")) Is Nothing) Then
            Me.Tables.Add(New GL_accountDataTable(ds.Tables("GL_account")))
        End If
        If (Not (ds.Tables("GL_account1")) Is Nothing) Then
            Me.Tables.Add(New GL_account1DataTable(ds.Tables("GL_account1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
        Me.tablecust_sales_tax = CType(Me.Tables("cust_sales_tax"),cust_sales_taxDataTable)
        If (Not (Me.tablecust_sales_tax) Is Nothing) Then
            Me.tablecust_sales_tax.InitVars
        End If
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tablebas_zipcode = CType(Me.Tables("bas_zipcode"),bas_zipcodeDataTable)
        If (Not (Me.tablebas_zipcode) Is Nothing) Then
            Me.tablebas_zipcode.InitVars
        End If
        Me.tableGL_account = CType(Me.Tables("GL_account"),GL_accountDataTable)
        If (Not (Me.tableGL_account) Is Nothing) Then
            Me.tableGL_account.InitVars
        End If
        Me.tableGL_account1 = CType(Me.Tables("GL_account1"),GL_account1DataTable)
        If (Not (Me.tableGL_account1) Is Nothing) Then
            Me.tableGL_account1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmSTORESETUP"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmSTORESETUP.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
        Me.tablecust_sales_tax = New cust_sales_taxDataTable
        Me.Tables.Add(Me.tablecust_sales_tax)
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tablebas_zipcode = New bas_zipcodeDataTable
        Me.Tables.Add(Me.tablebas_zipcode)
        Me.tableGL_account = New GL_accountDataTable
        Me.Tables.Add(Me.tableGL_account)
        Me.tableGL_account1 = New GL_account1DataTable
        Me.Tables.Add(Me.tableGL_account1)
    End Sub
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_sales_tax() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_zipcode() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    Public Delegate Sub cust_sales_taxRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_sales_taxRowChangeEvent)
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub bas_zipcodeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_zipcodeRowChangeEvent)
    
    Public Delegate Sub GL_accountRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_accountRowChangeEvent)
    
    Public Delegate Sub GL_account1RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As Store_SetupRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),Store_SetupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sales_tax As DataColumn
        
        Private columndesc_sales_tax As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_sales_tax")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_taxColumn As DataColumn
            Get
                Return Me.columndesc_sales_tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_sales_taxRow
            Get
                Return CType(Me.Rows(index),cust_sales_taxRow)
            End Get
        End Property
        
        Public Event cust_sales_taxRowChanged As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowChanging As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowDeleted As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowDeleting As cust_sales_taxRowChangeEventHandler
        
        Public Overloads Sub Addcust_sales_taxRow(ByVal row As cust_sales_taxRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_sales_taxRow(ByVal cod_sales_tax As String, ByVal desc_sales_tax As String) As cust_sales_taxRow
            Dim rowcust_sales_taxRow As cust_sales_taxRow = CType(Me.NewRow,cust_sales_taxRow)
            rowcust_sales_taxRow.ItemArray = New Object() {cod_sales_tax, desc_sales_tax}
            Me.Rows.Add(rowcust_sales_taxRow)
            Return rowcust_sales_taxRow
        End Function
        
        Public Function FindBycod_sales_tax(ByVal cod_sales_tax As String) As cust_sales_taxRow
            Return CType(Me.Rows.Find(New Object() {cod_sales_tax}),cust_sales_taxRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_sales_taxDataTable = CType(MyBase.Clone,cust_sales_taxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_sales_taxDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columndesc_sales_tax = Me.Columns("desc_sales_tax")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columndesc_sales_tax = New DataColumn("desc_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_tax)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_sales_tax}, true))
            Me.columncod_sales_tax.AllowDBNull = false
            Me.columncod_sales_tax.Unique = true
        End Sub
        
        Public Function Newcust_sales_taxRow() As cust_sales_taxRow
            Return CType(Me.NewRow,cust_sales_taxRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_sales_taxRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_sales_taxRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_sales_taxRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowChanged(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_sales_taxRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowChanging(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_sales_taxRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowDeleted(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_sales_taxRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowDeleting(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_sales_taxRow(ByVal row As cust_sales_taxRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxRow
        Inherits DataRow
        
        Private tablecust_sales_tax As cust_sales_taxDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_sales_tax = CType(Me.Table,cust_sales_taxDataTable)
        End Sub
        
        Public Property cod_sales_tax As String
            Get
                Return CType(Me(Me.tablecust_sales_tax.cod_sales_taxColumn),String)
            End Get
            Set
                Me(Me.tablecust_sales_tax.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_sales_tax.desc_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_sales_tax.desc_sales_taxColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_sales_tax.desc_sales_taxColumn)
        End Function
        
        Public Sub Setdesc_sales_taxNull()
            Me(Me.tablecust_sales_tax.desc_sales_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_sales_taxRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_sales_taxRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_sales_taxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnemployee_name As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property employee_nameColumn As DataColumn
            Get
                Return Me.columnemployee_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal employee_code As String, ByVal employee_name As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, employee_name}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnemployee_name = Me.Columns("employee_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnemployee_name = New DataColumn("employee_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
            Me.columnemployee_name.ReadOnly = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property employee_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.employee_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.employee_nameColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.employee_nameColumn)
        End Function
        
        Public Sub Setemployee_nameNull()
            Me(Me.tableemployee.employee_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_zipcode")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_zipcodeRow
            Get
                Return CType(Me.Rows(index),bas_zipcodeRow)
            End Get
        End Property
        
        Public Event bas_zipcodeRowChanged As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowChanging As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleted As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleting As bas_zipcodeRowChangeEventHandler
        
        Public Overloads Sub Addbas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_zipcodeRow(ByVal state As String) As bas_zipcodeRow
            Dim rowbas_zipcodeRow As bas_zipcodeRow = CType(Me.NewRow,bas_zipcodeRow)
            rowbas_zipcodeRow.ItemArray = New Object() {state}
            Me.Rows.Add(rowbas_zipcodeRow)
            Return rowbas_zipcodeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_zipcodeDataTable = CType(MyBase.Clone,bas_zipcodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_zipcodeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
        End Sub
        
        Public Function Newbas_zipcodeRow() As bas_zipcodeRow
            Return CType(Me.NewRow,bas_zipcodeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_zipcodeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_zipcodeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_zipcodeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanged(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_zipcodeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanging(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_zipcodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleted(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_zipcodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleting(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRow
        Inherits DataRow
        
        Private tablebas_zipcode As bas_zipcodeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_zipcode = CType(Me.Table,bas_zipcodeDataTable)
        End Sub
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.stateColumn) = value
            End Set
        End Property
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tablebas_zipcode.stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_zipcodeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_zipcodeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_zipcodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_accountRow
            Get
                Return CType(Me.Rows(index),GL_accountRow)
            End Get
        End Property
        
        Public Event GL_accountRowChanged As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowChanging As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleted As GL_accountRowChangeEventHandler
        
        Public Event GL_accountRowDeleting As GL_accountRowChangeEventHandler
        
        Public Overloads Sub AddGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_accountRow(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_accountRow
            Dim rowGL_accountRow As GL_accountRow = CType(Me.NewRow,GL_accountRow)
            rowGL_accountRow.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_accountRow)
            Return rowGL_accountRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As GL_accountRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),GL_accountRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_accountDataTable = CType(MyBase.Clone,GL_accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_accountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGL_account}, true))
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewGL_accountRow() As GL_accountRow
            Return CType(Me.NewRow,GL_accountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_accountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_accountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_accountRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanged(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_accountRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowChanging(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleted(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_accountRowDeleting(Me, New GL_accountRowChangeEvent(CType(e.Row,GL_accountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_accountRow(ByVal row As GL_accountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRow
        Inherits DataRow
        
        Private tableGL_account As GL_accountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account = CType(Me.Table,GL_accountDataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_accountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_accountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_accountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account1Row
            Get
                Return CType(Me.Rows(index),GL_account1Row)
            End Get
        End Property
        
        Public Event GL_account1RowChanged As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowChanging As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleted As GL_account1RowChangeEventHandler
        
        Public Event GL_account1RowDeleting As GL_account1RowChangeEventHandler
        
        Public Overloads Sub AddGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account1Row(ByVal GL_account As String, ByVal desc_GL_account As String) As GL_account1Row
            Dim rowGL_account1Row As GL_account1Row = CType(Me.NewRow,GL_account1Row)
            rowGL_account1Row.ItemArray = New Object() {GL_account, desc_GL_account}
            Me.Rows.Add(rowGL_account1Row)
            Return rowGL_account1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account1DataTable = CType(MyBase.Clone,GL_account1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account1Row() As GL_account1Row
            Return CType(Me.NewRow,GL_account1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account1RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanged(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account1RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowChanging(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account1RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleted(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account1RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account1RowDeleting(Me, New GL_account1RowChangeEvent(CType(e.Row,GL_account1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account1Row(ByVal row As GL_account1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1Row
        Inherits DataRow
        
        Private tableGL_account1 As GL_account1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account1 = CType(Me.Table,GL_account1DataTable)
        End Sub
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableGL_account1.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account1.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account1.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account1.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account1.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_account1.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
