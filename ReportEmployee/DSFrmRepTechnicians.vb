'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepTechnicians
    Inherits DataSet
    
    Private tableemployee As employeeDataTable
    
    Private tableemployee_position As employee_positionDataTable
    
    Private tableFUTA As FUTADataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("employee_position")) Is Nothing) Then
                Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
            End If
            If (Not (ds.Tables("FUTA")) Is Nothing) Then
                Me.Tables.Add(New FUTADataTable(ds.Tables("FUTA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee_position As employee_positionDataTable
        Get
            Return Me.tableemployee_position
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FUTA As FUTADataTable
        Get
            Return Me.tableFUTA
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepTechnicians = CType(MyBase.Clone,DSFrmRepTechnicians)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("employee_position")) Is Nothing) Then
            Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
        End If
        If (Not (ds.Tables("FUTA")) Is Nothing) Then
            Me.Tables.Add(New FUTADataTable(ds.Tables("FUTA")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableemployee_position = CType(Me.Tables("employee_position"),employee_positionDataTable)
        If (Not (Me.tableemployee_position) Is Nothing) Then
            Me.tableemployee_position.InitVars
        End If
        Me.tableFUTA = CType(Me.Tables("FUTA"),FUTADataTable)
        If (Not (Me.tableFUTA) Is Nothing) Then
            Me.tableFUTA.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepTechnicians"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepTechnicians.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableemployee_position = New employee_positionDataTable
        Me.Tables.Add(Me.tableemployee_position)
        Me.tableFUTA = New FUTADataTable
        Me.Tables.Add(Me.tableFUTA)
    End Sub
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee_position() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFUTA() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub employee_positionRowChangeEventHandler(ByVal sender As Object, ByVal e As employee_positionRowChangeEvent)
    
    Public Delegate Sub FUTARowChangeEventHandler(ByVal sender As Object, ByVal e As FUTARowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columncol1 As DataColumn
        
        Private columncol2 As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property col1Column As DataColumn
            Get
                Return Me.columncol1
            End Get
        End Property
        
        Friend ReadOnly Property col2Column As DataColumn
            Get
                Return Me.columncol2
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal cod As String, ByVal col1 As String, ByVal col2 As String, ByVal flag As Boolean) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {cod, col1, col2, flag}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {cod}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columncol1 = Me.Columns("col1")
            Me.columncol2 = Me.Columns("col2")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columncol1 = New DataColumn("col1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol1)
            Me.columncol2 = New DataColumn("col2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol2)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableemployee.codColumn),String)
            End Get
            Set
                Me(Me.tableemployee.codColumn) = value
            End Set
        End Property
        
        Public Property col1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.col1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.col1Column) = value
            End Set
        End Property
        
        Public Property col2 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.col2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.col2Column) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableemployee.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableemployee.flagColumn) = value
            End Set
        End Property
        
        Public Function Iscol1Null() As Boolean
            Return Me.IsNull(Me.tableemployee.col1Column)
        End Function
        
        Public Sub Setcol1Null()
            Me(Me.tableemployee.col1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol2Null() As Boolean
            Return Me.IsNull(Me.tableemployee.col2Column)
        End Function
        
        Public Sub Setcol2Null()
            Me(Me.tableemployee.col2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableemployee.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableemployee.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columncol1 As DataColumn
        
        Private columncol2 As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("employee_position")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property col1Column As DataColumn
            Get
                Return Me.columncol1
            End Get
        End Property
        
        Friend ReadOnly Property col2Column As DataColumn
            Get
                Return Me.columncol2
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee_positionRow
            Get
                Return CType(Me.Rows(index),employee_positionRow)
            End Get
        End Property
        
        Public Event employee_positionRowChanged As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowChanging As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleted As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleting As employee_positionRowChangeEventHandler
        
        Public Overloads Sub Addemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee_positionRow(ByVal cod As String, ByVal col1 As String, ByVal col2 As Boolean, ByVal flag As Boolean) As employee_positionRow
            Dim rowemployee_positionRow As employee_positionRow = CType(Me.NewRow,employee_positionRow)
            rowemployee_positionRow.ItemArray = New Object() {cod, col1, col2, flag}
            Me.Rows.Add(rowemployee_positionRow)
            Return rowemployee_positionRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As employee_positionRow
            Return CType(Me.Rows.Find(New Object() {cod}),employee_positionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee_positionDataTable = CType(MyBase.Clone,employee_positionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee_positionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columncol1 = Me.Columns("col1")
            Me.columncol2 = Me.Columns("col2")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columncol1 = New DataColumn("col1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol1)
            Me.columncol2 = New DataColumn("col2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncol2)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function Newemployee_positionRow() As employee_positionRow
            Return CType(Me.NewRow,employee_positionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee_positionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee_positionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee_positionRowChangedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanged(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee_positionRowChangingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanging(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee_positionRowDeletedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleted(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee_positionRowDeletingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleting(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRow
        Inherits DataRow
        
        Private tableemployee_position As employee_positionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee_position = CType(Me.Table,employee_positionDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableemployee_position.codColumn),String)
            End Get
            Set
                Me(Me.tableemployee_position.codColumn) = value
            End Set
        End Property
        
        Public Property col1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_position.col1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_position.col1Column) = value
            End Set
        End Property
        
        Public Property col2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee_position.col2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_position.col2Column) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableemployee_position.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableemployee_position.flagColumn) = value
            End Set
        End Property
        
        Public Function Iscol1Null() As Boolean
            Return Me.IsNull(Me.tableemployee_position.col1Column)
        End Function
        
        Public Sub Setcol1Null()
            Me(Me.tableemployee_position.col1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscol2Null() As Boolean
            Return Me.IsNull(Me.tableemployee_position.col2Column)
        End Function
        
        Public Sub Setcol2Null()
            Me(Me.tableemployee_position.col2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableemployee_position.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableemployee_position.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee_positionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee_positionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee_positionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnname As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnFUTA As DataColumn
        
        Private columnEXCEED As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("FUTA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property FUTAColumn As DataColumn
            Get
                Return Me.columnFUTA
            End Get
        End Property
        
        Friend ReadOnly Property EXCEEDColumn As DataColumn
            Get
                Return Me.columnEXCEED
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FUTARow
            Get
                Return CType(Me.Rows(index),FUTARow)
            End Get
        End Property
        
        Public Event FUTARowChanged As FUTARowChangeEventHandler
        
        Public Event FUTARowChanging As FUTARowChangeEventHandler
        
        Public Event FUTARowDeleted As FUTARowChangeEventHandler
        
        Public Event FUTARowDeleting As FUTARowChangeEventHandler
        
        Public Overloads Sub AddFUTARow(ByVal row As FUTARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFUTARow(ByVal employee_code As String, ByVal name As String, ByVal social_security_no As String, ByVal gross_pay As Decimal, ByVal FUTA As Decimal, ByVal EXCEED As Decimal, ByVal Taxable As Decimal, ByVal flag As Boolean) As FUTARow
            Dim rowFUTARow As FUTARow = CType(Me.NewRow,FUTARow)
            rowFUTARow.ItemArray = New Object() {employee_code, name, social_security_no, gross_pay, FUTA, EXCEED, Taxable, flag}
            Me.Rows.Add(rowFUTARow)
            Return rowFUTARow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FUTADataTable = CType(MyBase.Clone,FUTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FUTADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnname = Me.Columns("name")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnFUTA = Me.Columns("FUTA")
            Me.columnEXCEED = Me.Columns("EXCEED")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnFUTA = New DataColumn("FUTA", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFUTA)
            Me.columnEXCEED = New DataColumn("EXCEED", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCEED)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function NewFUTARow() As FUTARow
            Return CType(Me.NewRow,FUTARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FUTARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FUTARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FUTARowChangedEvent) Is Nothing) Then
                RaiseEvent FUTARowChanged(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FUTARowChangingEvent) Is Nothing) Then
                RaiseEvent FUTARowChanging(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FUTARowDeletedEvent) Is Nothing) Then
                RaiseEvent FUTARowDeleted(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FUTARowDeletingEvent) Is Nothing) Then
                RaiseEvent FUTARowDeleting(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFUTARow(ByVal row As FUTARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTARow
        Inherits DataRow
        
        Private tableFUTA As FUTADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFUTA = CType(Me.Table,FUTADataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableFUTA.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableFUTA.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.nameColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.gross_payColumn) = value
            End Set
        End Property
        
        Public Property FUTA As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.FUTAColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.FUTAColumn) = value
            End Set
        End Property
        
        Public Property EXCEED As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.EXCEEDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.EXCEEDColumn) = value
            End Set
        End Property
        
        Public Property Taxable As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.TaxableColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.TaxableColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableFUTA.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tableFUTA.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tableFUTA.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFUTANull() As Boolean
            Return Me.IsNull(Me.tableFUTA.FUTAColumn)
        End Function
        
        Public Sub SetFUTANull()
            Me(Me.tableFUTA.FUTAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXCEEDNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.EXCEEDColumn)
        End Function
        
        Public Sub SetEXCEEDNull()
            Me(Me.tableFUTA.EXCEEDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tableFUTA.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableFUTA.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FUTARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FUTARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FUTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
