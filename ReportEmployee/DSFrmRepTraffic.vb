'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepTraffic
    Inherits DataSet
    
    Private tablesource As sourceDataTable
    
    Private tabletype As typeDataTable
    
    Private tableList As ListDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("source")) Is Nothing) Then
                Me.Tables.Add(New sourceDataTable(ds.Tables("source")))
            End If
            If (Not (ds.Tables("type")) Is Nothing) Then
                Me.Tables.Add(New typeDataTable(ds.Tables("type")))
            End If
            If (Not (ds.Tables("List")) Is Nothing) Then
                Me.Tables.Add(New ListDataTable(ds.Tables("List")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property source As sourceDataTable
        Get
            Return Me.tablesource
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property type As typeDataTable
        Get
            Return Me.tabletype
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property List As ListDataTable
        Get
            Return Me.tableList
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepTraffic = CType(MyBase.Clone,DSFrmRepTraffic)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("source")) Is Nothing) Then
            Me.Tables.Add(New sourceDataTable(ds.Tables("source")))
        End If
        If (Not (ds.Tables("type")) Is Nothing) Then
            Me.Tables.Add(New typeDataTable(ds.Tables("type")))
        End If
        If (Not (ds.Tables("List")) Is Nothing) Then
            Me.Tables.Add(New ListDataTable(ds.Tables("List")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablesource = CType(Me.Tables("source"),sourceDataTable)
        If (Not (Me.tablesource) Is Nothing) Then
            Me.tablesource.InitVars
        End If
        Me.tabletype = CType(Me.Tables("type"),typeDataTable)
        If (Not (Me.tabletype) Is Nothing) Then
            Me.tabletype.InitVars
        End If
        Me.tableList = CType(Me.Tables("List"),ListDataTable)
        If (Not (Me.tableList) Is Nothing) Then
            Me.tableList.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepTraffic"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepTraffic.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablesource = New sourceDataTable
        Me.Tables.Add(Me.tablesource)
        Me.tabletype = New typeDataTable
        Me.Tables.Add(Me.tabletype)
        Me.tableList = New ListDataTable
        Me.Tables.Add(Me.tableList)
    End Sub
    
    Private Function ShouldSerializesource() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetype() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeList() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub sourceRowChangeEventHandler(ByVal sender As Object, ByVal e As sourceRowChangeEvent)
    
    Public Delegate Sub typeRowChangeEventHandler(ByVal sender As Object, ByVal e As typeRowChangeEvent)
    
    Public Delegate Sub ListRowChangeEventHandler(ByVal sender As Object, ByVal e As ListRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("source")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sourceRow
            Get
                Return CType(Me.Rows(index),sourceRow)
            End Get
        End Property
        
        Public Event sourceRowChanged As sourceRowChangeEventHandler
        
        Public Event sourceRowChanging As sourceRowChangeEventHandler
        
        Public Event sourceRowDeleted As sourceRowChangeEventHandler
        
        Public Event sourceRowDeleting As sourceRowChangeEventHandler
        
        Public Overloads Sub AddsourceRow(ByVal row As sourceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsourceRow(ByVal cod As String, ByVal name As String, ByVal flag As Boolean) As sourceRow
            Dim rowsourceRow As sourceRow = CType(Me.NewRow,sourceRow)
            rowsourceRow.ItemArray = New Object() {cod, name, flag}
            Me.Rows.Add(rowsourceRow)
            Return rowsourceRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As sourceRow
            Return CType(Me.Rows.Find(New Object() {cod}),sourceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sourceDataTable = CType(MyBase.Clone,sourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sourceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewsourceRow() As sourceRow
            Return CType(Me.NewRow,sourceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sourceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sourceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sourceRowChangedEvent) Is Nothing) Then
                RaiseEvent sourceRowChanged(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sourceRowChangingEvent) Is Nothing) Then
                RaiseEvent sourceRowChanging(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sourceRowDeleted(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sourceRowDeleting(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesourceRow(ByVal row As sourceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceRow
        Inherits DataRow
        
        Private tablesource As sourceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesource = CType(Me.Table,sourceDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablesource.codColumn),String)
            End Get
            Set
                Me(Me.tablesource.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablesource.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesource.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesource.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesource.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesource.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablesource.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablesource.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablesource.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sourceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sourceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As typeRow
            Get
                Return CType(Me.Rows(index),typeRow)
            End Get
        End Property
        
        Public Event typeRowChanged As typeRowChangeEventHandler
        
        Public Event typeRowChanging As typeRowChangeEventHandler
        
        Public Event typeRowDeleted As typeRowChangeEventHandler
        
        Public Event typeRowDeleting As typeRowChangeEventHandler
        
        Public Overloads Sub AddtypeRow(ByVal row As typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtypeRow(ByVal cod As String, ByVal description As String, ByVal flag As Boolean) As typeRow
            Dim rowtypeRow As typeRow = CType(Me.NewRow,typeRow)
            rowtypeRow.ItemArray = New Object() {cod, description, flag}
            Me.Rows.Add(rowtypeRow)
            Return rowtypeRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As typeRow
            Return CType(Me.Rows.Find(New Object() {cod}),typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As typeDataTable = CType(MyBase.Clone,typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewtypeRow() As typeRow
            Return CType(Me.NewRow,typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.typeRowChangedEvent) Is Nothing) Then
                RaiseEvent typeRowChanged(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.typeRowChangingEvent) Is Nothing) Then
                RaiseEvent typeRowChanging(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent typeRowDeleted(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent typeRowDeleting(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetypeRow(ByVal row As typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRow
        Inherits DataRow
        
        Private tabletype As typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletype = CType(Me.Table,typeDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tabletype.codColumn),String)
            End Get
            Set
                Me(Me.tabletype.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tabletype.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.descriptionColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletype.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.flagColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletype.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tabletype.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tabletype.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tabletype.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncustomer_no As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columncity As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnCustSince As DataColumn
        
        Private columndesc_type As DataColumn
        
        Private columndesc_source As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("List")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property customer_noColumn As DataColumn
            Get
                Return Me.columncustomer_no
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property CustSinceColumn As DataColumn
            Get
                Return Me.columnCustSince
            End Get
        End Property
        
        Friend ReadOnly Property desc_typeColumn As DataColumn
            Get
                Return Me.columndesc_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_sourceColumn As DataColumn
            Get
                Return Me.columndesc_source
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListRow
            Get
                Return CType(Me.Rows(index),ListRow)
            End Get
        End Property
        
        Public Event ListRowChanged As ListRowChangeEventHandler
        
        Public Event ListRowChanging As ListRowChangeEventHandler
        
        Public Event ListRowDeleted As ListRowChangeEventHandler
        
        Public Event ListRowDeleting As ListRowChangeEventHandler
        
        Public Overloads Sub AddListRow(ByVal row As ListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddListRow(ByVal customer_no As String, ByVal f_name As String, ByVal name As String, ByVal complete_name As String, ByVal city As String, ByVal zip As String, ByVal phone_1 As String, ByVal CustSince As Date, ByVal desc_type As String, ByVal desc_source As String, ByVal flag As Boolean, ByVal address As String, ByVal state As String) As ListRow
            Dim rowListRow As ListRow = CType(Me.NewRow,ListRow)
            rowListRow.ItemArray = New Object() {customer_no, f_name, name, complete_name, city, zip, phone_1, CustSince, desc_type, desc_source, flag, address, state}
            Me.Rows.Add(rowListRow)
            Return rowListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ListDataTable = CType(MyBase.Clone,ListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncustomer_no = Me.Columns("customer_no")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columncity = Me.Columns("city")
            Me.columnzip = Me.Columns("zip")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnCustSince = Me.Columns("CustSince")
            Me.columndesc_type = Me.Columns("desc_type")
            Me.columndesc_source = Me.Columns("desc_source")
            Me.columnflag = Me.Columns("flag")
            Me.columnaddress = Me.Columns("address")
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columncustomer_no = New DataColumn("customer_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_no)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnCustSince = New DataColumn("CustSince", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustSince)
            Me.columndesc_type = New DataColumn("desc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type)
            Me.columndesc_source = New DataColumn("desc_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_source)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewListRow() As ListRow
            Return CType(Me.NewRow,ListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListRowChangedEvent) Is Nothing) Then
                RaiseEvent ListRowChanged(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListRowChangingEvent) Is Nothing) Then
                RaiseEvent ListRowChanging(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListRowDeleted(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListRowDeleting(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveListRow(ByVal row As ListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRow
        Inherits DataRow
        
        Private tableList As ListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableList = CType(Me.Table,ListDataTable)
        End Sub
        
        Public Property customer_no As String
            Get
                Try 
                    Return CType(Me(Me.tableList.customer_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.customer_noColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableList.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.cityColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tableList.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.zipColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableList.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.phone_1Column) = value
            End Set
        End Property
        
        Public Property CustSince As Date
            Get
                Try 
                    Return CType(Me(Me.tableList.CustSinceColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.CustSinceColumn) = value
            End Set
        End Property
        
        Public Property desc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_source As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_sourceColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableList.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.flagColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableList.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.addressColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tableList.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.stateColumn) = value
            End Set
        End Property
        
        Public Function Iscustomer_noNull() As Boolean
            Return Me.IsNull(Me.tableList.customer_noColumn)
        End Function
        
        Public Sub Setcustomer_noNull()
            Me(Me.tableList.customer_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableList.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableList.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableList.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableList.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableList.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableList.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableList.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableList.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tableList.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tableList.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableList.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableList.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustSinceNull() As Boolean
            Return Me.IsNull(Me.tableList.CustSinceColumn)
        End Function
        
        Public Sub SetCustSinceNull()
            Me(Me.tableList.CustSinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_typeNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_typeColumn)
        End Function
        
        Public Sub Setdesc_typeNull()
            Me(Me.tableList.desc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sourceNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_sourceColumn)
        End Function
        
        Public Sub Setdesc_sourceNull()
            Me(Me.tableList.desc_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableList.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableList.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableList.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableList.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableList.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tableList.stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
