'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepVendor
    Inherits DataSet
    
    Private tablebuyer As buyerDataTable
    
    Private tableclas As clasDataTable
    
    Private tabletype As typeDataTable
    
    Private tablevendor As vendorDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("buyer")) Is Nothing) Then
                Me.Tables.Add(New buyerDataTable(ds.Tables("buyer")))
            End If
            If (Not (ds.Tables("clas")) Is Nothing) Then
                Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
            End If
            If (Not (ds.Tables("type")) Is Nothing) Then
                Me.Tables.Add(New typeDataTable(ds.Tables("type")))
            End If
            If (Not (ds.Tables("vendor")) Is Nothing) Then
                Me.Tables.Add(New vendorDataTable(ds.Tables("vendor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property buyer As buyerDataTable
        Get
            Return Me.tablebuyer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property clas As clasDataTable
        Get
            Return Me.tableclas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property type As typeDataTable
        Get
            Return Me.tabletype
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vendor As vendorDataTable
        Get
            Return Me.tablevendor
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepVendor = CType(MyBase.Clone,DSFrmRepVendor)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("buyer")) Is Nothing) Then
            Me.Tables.Add(New buyerDataTable(ds.Tables("buyer")))
        End If
        If (Not (ds.Tables("clas")) Is Nothing) Then
            Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
        End If
        If (Not (ds.Tables("type")) Is Nothing) Then
            Me.Tables.Add(New typeDataTable(ds.Tables("type")))
        End If
        If (Not (ds.Tables("vendor")) Is Nothing) Then
            Me.Tables.Add(New vendorDataTable(ds.Tables("vendor")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebuyer = CType(Me.Tables("buyer"),buyerDataTable)
        If (Not (Me.tablebuyer) Is Nothing) Then
            Me.tablebuyer.InitVars
        End If
        Me.tableclas = CType(Me.Tables("clas"),clasDataTable)
        If (Not (Me.tableclas) Is Nothing) Then
            Me.tableclas.InitVars
        End If
        Me.tabletype = CType(Me.Tables("type"),typeDataTable)
        If (Not (Me.tabletype) Is Nothing) Then
            Me.tabletype.InitVars
        End If
        Me.tablevendor = CType(Me.Tables("vendor"),vendorDataTable)
        If (Not (Me.tablevendor) Is Nothing) Then
            Me.tablevendor.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepVendor"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepVendor.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebuyer = New buyerDataTable
        Me.Tables.Add(Me.tablebuyer)
        Me.tableclas = New clasDataTable
        Me.Tables.Add(Me.tableclas)
        Me.tabletype = New typeDataTable
        Me.Tables.Add(Me.tabletype)
        Me.tablevendor = New vendorDataTable
        Me.Tables.Add(Me.tablevendor)
    End Sub
    
    Private Function ShouldSerializebuyer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeclas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetype() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializevendor() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub buyerRowChangeEventHandler(ByVal sender As Object, ByVal e As buyerRowChangeEvent)
    
    Public Delegate Sub clasRowChangeEventHandler(ByVal sender As Object, ByVal e As clasRowChangeEvent)
    
    Public Delegate Sub typeRowChangeEventHandler(ByVal sender As Object, ByVal e As typeRowChangeEvent)
    
    Public Delegate Sub vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As vendorRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class buyerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("buyer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As buyerRow
            Get
                Return CType(Me.Rows(index),buyerRow)
            End Get
        End Property
        
        Public Event buyerRowChanged As buyerRowChangeEventHandler
        
        Public Event buyerRowChanging As buyerRowChangeEventHandler
        
        Public Event buyerRowDeleted As buyerRowChangeEventHandler
        
        Public Event buyerRowDeleting As buyerRowChangeEventHandler
        
        Public Overloads Sub AddbuyerRow(ByVal row As buyerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddbuyerRow(ByVal cod As String, ByVal name As String, ByVal flag As Boolean) As buyerRow
            Dim rowbuyerRow As buyerRow = CType(Me.NewRow,buyerRow)
            rowbuyerRow.ItemArray = New Object() {cod, name, flag}
            Me.Rows.Add(rowbuyerRow)
            Return rowbuyerRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As buyerRow
            Return CType(Me.Rows.Find(New Object() {cod}),buyerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As buyerDataTable = CType(MyBase.Clone,buyerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New buyerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewbuyerRow() As buyerRow
            Return CType(Me.NewRow,buyerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New buyerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(buyerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.buyerRowChangedEvent) Is Nothing) Then
                RaiseEvent buyerRowChanged(Me, New buyerRowChangeEvent(CType(e.Row,buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.buyerRowChangingEvent) Is Nothing) Then
                RaiseEvent buyerRowChanging(Me, New buyerRowChangeEvent(CType(e.Row,buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.buyerRowDeletedEvent) Is Nothing) Then
                RaiseEvent buyerRowDeleted(Me, New buyerRowChangeEvent(CType(e.Row,buyerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.buyerRowDeletingEvent) Is Nothing) Then
                RaiseEvent buyerRowDeleting(Me, New buyerRowChangeEvent(CType(e.Row,buyerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovebuyerRow(ByVal row As buyerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class buyerRow
        Inherits DataRow
        
        Private tablebuyer As buyerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebuyer = CType(Me.Table,buyerDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablebuyer.codColumn),String)
            End Get
            Set
                Me(Me.tablebuyer.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablebuyer.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebuyer.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tablebuyer.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tablebuyer.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablebuyer.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablebuyer.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablebuyer.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablebuyer.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class buyerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As buyerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As buyerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As buyerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("clas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As clasRow
            Get
                Return CType(Me.Rows(index),clasRow)
            End Get
        End Property
        
        Public Event clasRowChanged As clasRowChangeEventHandler
        
        Public Event clasRowChanging As clasRowChangeEventHandler
        
        Public Event clasRowDeleted As clasRowChangeEventHandler
        
        Public Event clasRowDeleting As clasRowChangeEventHandler
        
        Public Overloads Sub AddclasRow(ByVal row As clasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddclasRow(ByVal cod As String, ByVal name As String, ByVal flag As Boolean) As clasRow
            Dim rowclasRow As clasRow = CType(Me.NewRow,clasRow)
            rowclasRow.ItemArray = New Object() {cod, name, flag}
            Me.Rows.Add(rowclasRow)
            Return rowclasRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As clasRow
            Return CType(Me.Rows.Find(New Object() {cod}),clasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As clasDataTable = CType(MyBase.Clone,clasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New clasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewclasRow() As clasRow
            Return CType(Me.NewRow,clasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New clasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(clasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clasRowChangedEvent) Is Nothing) Then
                RaiseEvent clasRowChanged(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clasRowChangingEvent) Is Nothing) Then
                RaiseEvent clasRowChanging(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clasRowDeletedEvent) Is Nothing) Then
                RaiseEvent clasRowDeleted(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clasRowDeletingEvent) Is Nothing) Then
                RaiseEvent clasRowDeleting(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveclasRow(ByVal row As clasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRow
        Inherits DataRow
        
        Private tableclas As clasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableclas = CType(Me.Table,clasDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableclas.codColumn),String)
            End Get
            Set
                Me(Me.tableclas.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableclas.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableclas.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableclas.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableclas.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableclas.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableclas.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableclas.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As clasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As clasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As clasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As typeRow
            Get
                Return CType(Me.Rows(index),typeRow)
            End Get
        End Property
        
        Public Event typeRowChanged As typeRowChangeEventHandler
        
        Public Event typeRowChanging As typeRowChangeEventHandler
        
        Public Event typeRowDeleted As typeRowChangeEventHandler
        
        Public Event typeRowDeleting As typeRowChangeEventHandler
        
        Public Overloads Sub AddtypeRow(ByVal row As typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtypeRow(ByVal cod As String, ByVal name As String, ByVal flag As Boolean) As typeRow
            Dim rowtypeRow As typeRow = CType(Me.NewRow,typeRow)
            rowtypeRow.ItemArray = New Object() {cod, name, flag}
            Me.Rows.Add(rowtypeRow)
            Return rowtypeRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As typeRow
            Return CType(Me.Rows.Find(New Object() {cod}),typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As typeDataTable = CType(MyBase.Clone,typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewtypeRow() As typeRow
            Return CType(Me.NewRow,typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.typeRowChangedEvent) Is Nothing) Then
                RaiseEvent typeRowChanged(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.typeRowChangingEvent) Is Nothing) Then
                RaiseEvent typeRowChanging(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent typeRowDeleted(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent typeRowDeleting(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetypeRow(ByVal row As typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRow
        Inherits DataRow
        
        Private tabletype As typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletype = CType(Me.Table,typeDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tabletype.codColumn),String)
            End Get
            Set
                Me(Me.tabletype.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tabletype.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tabletype.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tabletype.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tabletype.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tabletype.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tabletype.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tabletype.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnname As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As vendorRow
            Get
                Return CType(Me.Rows(index),vendorRow)
            End Get
        End Property
        
        Public Event vendorRowChanged As vendorRowChangeEventHandler
        
        Public Event vendorRowChanging As vendorRowChangeEventHandler
        
        Public Event vendorRowDeleted As vendorRowChangeEventHandler
        
        Public Event vendorRowDeleting As vendorRowChangeEventHandler
        
        Public Overloads Sub AddvendorRow(ByVal row As vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddvendorRow(ByVal cod As String, ByVal name As String, ByVal flag As Boolean) As vendorRow
            Dim rowvendorRow As vendorRow = CType(Me.NewRow,vendorRow)
            rowvendorRow.ItemArray = New Object() {cod, name, flag}
            Me.Rows.Add(rowvendorRow)
            Return rowvendorRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As vendorRow
            Return CType(Me.Rows.Find(New Object() {cod}),vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As vendorDataTable = CType(MyBase.Clone,vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnname = Me.Columns("name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewvendorRow() As vendorRow
            Return CType(Me.NewRow,vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent vendorRowChanged(Me, New vendorRowChangeEvent(CType(e.Row,vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent vendorRowChanging(Me, New vendorRowChangeEvent(CType(e.Row,vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent vendorRowDeleted(Me, New vendorRowChangeEvent(CType(e.Row,vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent vendorRowDeleting(Me, New vendorRowChangeEvent(CType(e.Row,vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovevendorRow(ByVal row As vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vendorRow
        Inherits DataRow
        
        Private tablevendor As vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablevendor = CType(Me.Table,vendorDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablevendor.codColumn),String)
            End Get
            Set
                Me(Me.tablevendor.codColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablevendor.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevendor.nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                If Me.IsflagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tablevendor.flagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tablevendor.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablevendor.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablevendor.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablevendor.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablevendor.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
