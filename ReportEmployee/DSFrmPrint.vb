'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrint
    Inherits DataSet
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableservice_center_dtl_Header As service_center_dtl_HeaderDataTable
    
    Private tablePerformanceSummery As PerformanceSummeryDataTable
    
    Private tableSaleDetail As SaleDetailDataTable
    
    Private tableUsers As UsersDataTable
    
    Private tablePayroll As PayrollDataTable
    
    Private tableFUTA As FUTADataTable
    
    Private relationservice_center_dtl_Headerservice_center_dtl As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("service_center_dtl_Header")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtl_HeaderDataTable(ds.Tables("service_center_dtl_Header")))
            End If
            If (Not (ds.Tables("PerformanceSummery")) Is Nothing) Then
                Me.Tables.Add(New PerformanceSummeryDataTable(ds.Tables("PerformanceSummery")))
            End If
            If (Not (ds.Tables("SaleDetail")) Is Nothing) Then
                Me.Tables.Add(New SaleDetailDataTable(ds.Tables("SaleDetail")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Payroll")) Is Nothing) Then
                Me.Tables.Add(New PayrollDataTable(ds.Tables("Payroll")))
            End If
            If (Not (ds.Tables("FUTA")) Is Nothing) Then
                Me.Tables.Add(New FUTADataTable(ds.Tables("FUTA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl_Header As service_center_dtl_HeaderDataTable
        Get
            Return Me.tableservice_center_dtl_Header
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PerformanceSummery As PerformanceSummeryDataTable
        Get
            Return Me.tablePerformanceSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaleDetail As SaleDetailDataTable
        Get
            Return Me.tableSaleDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Payroll As PayrollDataTable
        Get
            Return Me.tablePayroll
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FUTA As FUTADataTable
        Get
            Return Me.tableFUTA
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrint = CType(MyBase.Clone,DSFrmPrint)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("service_center_dtl_Header")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtl_HeaderDataTable(ds.Tables("service_center_dtl_Header")))
        End If
        If (Not (ds.Tables("PerformanceSummery")) Is Nothing) Then
            Me.Tables.Add(New PerformanceSummeryDataTable(ds.Tables("PerformanceSummery")))
        End If
        If (Not (ds.Tables("SaleDetail")) Is Nothing) Then
            Me.Tables.Add(New SaleDetailDataTable(ds.Tables("SaleDetail")))
        End If
        If (Not (ds.Tables("Users")) Is Nothing) Then
            Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
        End If
        If (Not (ds.Tables("Payroll")) Is Nothing) Then
            Me.Tables.Add(New PayrollDataTable(ds.Tables("Payroll")))
        End If
        If (Not (ds.Tables("FUTA")) Is Nothing) Then
            Me.Tables.Add(New FUTADataTable(ds.Tables("FUTA")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableservice_center_dtl_Header = CType(Me.Tables("service_center_dtl_Header"),service_center_dtl_HeaderDataTable)
        If (Not (Me.tableservice_center_dtl_Header) Is Nothing) Then
            Me.tableservice_center_dtl_Header.InitVars
        End If
        Me.tablePerformanceSummery = CType(Me.Tables("PerformanceSummery"),PerformanceSummeryDataTable)
        If (Not (Me.tablePerformanceSummery) Is Nothing) Then
            Me.tablePerformanceSummery.InitVars
        End If
        Me.tableSaleDetail = CType(Me.Tables("SaleDetail"),SaleDetailDataTable)
        If (Not (Me.tableSaleDetail) Is Nothing) Then
            Me.tableSaleDetail.InitVars
        End If
        Me.tableUsers = CType(Me.Tables("Users"),UsersDataTable)
        If (Not (Me.tableUsers) Is Nothing) Then
            Me.tableUsers.InitVars
        End If
        Me.tablePayroll = CType(Me.Tables("Payroll"),PayrollDataTable)
        If (Not (Me.tablePayroll) Is Nothing) Then
            Me.tablePayroll.InitVars
        End If
        Me.tableFUTA = CType(Me.Tables("FUTA"),FUTADataTable)
        If (Not (Me.tableFUTA) Is Nothing) Then
            Me.tableFUTA.InitVars
        End If
        Me.relationservice_center_dtl_Headerservice_center_dtl = Me.Relations("service_center_dtl_Headerservice_center_dtl")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrint"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrint.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableservice_center_dtl_Header = New service_center_dtl_HeaderDataTable
        Me.Tables.Add(Me.tableservice_center_dtl_Header)
        Me.tablePerformanceSummery = New PerformanceSummeryDataTable
        Me.Tables.Add(Me.tablePerformanceSummery)
        Me.tableSaleDetail = New SaleDetailDataTable
        Me.Tables.Add(Me.tableSaleDetail)
        Me.tableUsers = New UsersDataTable
        Me.Tables.Add(Me.tableUsers)
        Me.tablePayroll = New PayrollDataTable
        Me.Tables.Add(Me.tablePayroll)
        Me.tableFUTA = New FUTADataTable
        Me.Tables.Add(Me.tableFUTA)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("service_center_dtl_Headerservice_center_dtl", New DataColumn() {Me.tableservice_center_dtl_Header.cod_technicianColumn}, New DataColumn() {Me.tableservice_center_dtl.cod_technicianColumn})
        Me.tableservice_center_dtl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationservice_center_dtl_Headerservice_center_dtl = New DataRelation("service_center_dtl_Headerservice_center_dtl", New DataColumn() {Me.tableservice_center_dtl_Header.cod_technicianColumn}, New DataColumn() {Me.tableservice_center_dtl.cod_technicianColumn}, false)
        Me.Relations.Add(Me.relationservice_center_dtl_Headerservice_center_dtl)
    End Sub
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl_Header() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePerformanceSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSaleDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePayroll() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFUTA() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub service_center_dtl_HeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtl_HeaderRowChangeEvent)
    
    Public Delegate Sub PerformanceSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As PerformanceSummeryRowChangeEvent)
    
    Public Delegate Sub SaleDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As SaleDetailRowChangeEvent)
    
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)
    
    Public Delegate Sub PayrollRowChangeEventHandler(ByVal sender As Object, ByVal e As PayrollRowChangeEvent)
    
    Public Delegate Sub FUTARowChangeEventHandler(ByVal sender As Object, ByVal e As FUTARowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnname As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnext_price As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_technician As DataColumn
        
        Private columncod_position As DataColumn
        
        Private columnFEmp As DataColumn
        
        Private columnfpos As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property ext_priceColumn As DataColumn
            Get
                Return Me.columnext_price
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property cod_positionColumn As DataColumn
            Get
                Return Me.columncod_position
            End Get
        End Property
        
        Friend ReadOnly Property FEmpColumn As DataColumn
            Get
                Return Me.columnFEmp
            End Get
        End Property
        
        Friend ReadOnly Property fposColumn As DataColumn
            Get
                Return Me.columnfpos
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal name As String, ByVal qty As Decimal, ByVal ext_price As Decimal, ByVal flag As Boolean, ByVal cod_technician As String, ByVal cod_position As String, ByVal FEmp As Boolean, ByVal fpos As Boolean) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {name, qty, ext_price, flag, cod_technician, cod_position, FEmp, fpos}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnname = Me.Columns("name")
            Me.columnqty = Me.Columns("qty")
            Me.columnext_price = Me.Columns("ext_price")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columncod_position = Me.Columns("cod_position")
            Me.columnFEmp = Me.Columns("FEmp")
            Me.columnfpos = Me.Columns("fpos")
        End Sub
        
        Private Sub InitClass()
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnext_price = New DataColumn("ext_price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_price)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columncod_position = New DataColumn("cod_position", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_position)
            Me.columnFEmp = New DataColumn("FEmp", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEmp)
            Me.columnfpos = New DataColumn("fpos", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfpos)
            Me.columnname.ReadOnly = true
            Me.columnqty.ReadOnly = true
            Me.columnext_price.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.nameColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.qtyColumn) = value
            End Set
        End Property
        
        Public Property ext_price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ext_priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ext_priceColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property cod_position As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_positionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_positionColumn) = value
            End Set
        End Property
        
        Public Property FEmp As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.FEmpColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.FEmpColumn) = value
            End Set
        End Property
        
        Public Property fpos As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.fposColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.fposColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableservice_center_head.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableservice_center_head.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_priceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ext_priceColumn)
        End Function
        
        Public Sub Setext_priceNull()
            Me(Me.tableservice_center_head.ext_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableservice_center_head.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableservice_center_head.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_positionNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_positionColumn)
        End Function
        
        Public Sub Setcod_positionNull()
            Me(Me.tableservice_center_head.cod_positionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEmpNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.FEmpColumn)
        End Function
        
        Public Sub SetFEmpNull()
            Me(Me.tableservice_center_head.FEmpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfposNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.fposColumn)
        End Function
        
        Public Sub SetfposNull()
            Me(Me.tableservice_center_head.fposColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_technician As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnqty As DataColumn
        
        Private columncost As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnsvc As DataColumn
        
        Private columncat As DataColumn
        
        Private columntype As DataColumn
        
        Private columnline As DataColumn
        
        Private columnext_Price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columngross As DataColumn
        
        Private columnext_cost As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property svcColumn As DataColumn
            Get
                Return Me.columnsvc
            End Get
        End Property
        
        Friend ReadOnly Property catColumn As DataColumn
            Get
                Return Me.columncat
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property ext_PriceColumn As DataColumn
            Get
                Return Me.columnext_Price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property grossColumn As DataColumn
            Get
                Return Me.columngross
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow( _
                    ByVal parentservice_center_dtl_HeaderRowByservice_center_dtl_Headerservice_center_dtl As service_center_dtl_HeaderRow,  _
                    ByVal cod_select As String,  _
                    ByVal desc_radif As String,  _
                    ByVal id_service_center As String,  _
                    ByVal date_refer As Date,  _
                    ByVal qty As Decimal,  _
                    ByVal cost As Decimal,  _
                    ByVal price As Decimal,  _
                    ByVal svc As String,  _
                    ByVal cat As String,  _
                    ByVal type As String,  _
                    ByVal line As String,  _
                    ByVal ext_Price As Decimal,  _
                    ByVal fet As Decimal,  _
                    ByVal gross As Decimal,  _
                    ByVal ext_cost As Decimal) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {parentservice_center_dtl_HeaderRowByservice_center_dtl_Headerservice_center_dtl(0), cod_select, desc_radif, id_service_center, date_refer, qty, cost, price, svc, cat, type, line, ext_Price, fet, gross, ext_cost}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnqty = Me.Columns("qty")
            Me.columncost = Me.Columns("cost")
            Me.columnprice = Me.Columns("price")
            Me.columnsvc = Me.Columns("svc")
            Me.columncat = Me.Columns("cat")
            Me.columntype = Me.Columns("type")
            Me.columnline = Me.Columns("line")
            Me.columnext_Price = Me.Columns("ext_Price")
            Me.columnfet = Me.Columns("fet")
            Me.columngross = Me.Columns("gross")
            Me.columnext_cost = Me.Columns("ext_cost")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnsvc = New DataColumn("svc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsvc)
            Me.columncat = New DataColumn("cat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncat)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnext_Price = New DataColumn("ext_Price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_Price)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columngross = New DataColumn("gross", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columnqty.ReadOnly = true
            Me.columncost.ReadOnly = true
            Me.columnprice.ReadOnly = true
            Me.columnsvc.ReadOnly = true
            Me.columncat.ReadOnly = true
            Me.columnfet.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.date_referColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.costColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.priceColumn) = value
            End Set
        End Property
        
        Public Property svc As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.svcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.svcColumn) = value
            End Set
        End Property
        
        Public Property cat As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.catColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.catColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.typeColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.lineColumn) = value
            End Set
        End Property
        
        Public Property ext_Price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.ext_PriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.ext_PriceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.fetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property gross As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.grossColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.grossColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.ext_costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.ext_costColumn) = value
            End Set
        End Property
        
        Public Property service_center_dtl_HeaderRow As service_center_dtl_HeaderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("service_center_dtl_Headerservice_center_dtl")),service_center_dtl_HeaderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("service_center_dtl_Headerservice_center_dtl"))
            End Set
        End Property
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableservice_center_dtl.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_dtl.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableservice_center_dtl.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableservice_center_dtl.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_dtl.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableservice_center_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableservice_center_dtl.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableservice_center_dtl.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssvcNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.svcColumn)
        End Function
        
        Public Sub SetsvcNull()
            Me(Me.tableservice_center_dtl.svcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscatNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.catColumn)
        End Function
        
        Public Sub SetcatNull()
            Me(Me.tableservice_center_dtl.catColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tableservice_center_dtl.typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableservice_center_dtl.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_PriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.ext_PriceColumn)
        End Function
        
        Public Sub Setext_PriceNull()
            Me(Me.tableservice_center_dtl.ext_PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableservice_center_dtl.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgrossNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.grossColumn)
        End Function
        
        Public Sub SetgrossNull()
            Me(Me.tableservice_center_dtl.grossColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tableservice_center_dtl.ext_costColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_HeaderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_technician As DataColumn
        
        Private columnname As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnext_Price As DataColumn
        
        Private columnext_cost As DataColumn
        
        Private columngross As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl_Header")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property ext_PriceColumn As DataColumn
            Get
                Return Me.columnext_Price
            End Get
        End Property
        
        Friend ReadOnly Property ext_costColumn As DataColumn
            Get
                Return Me.columnext_cost
            End Get
        End Property
        
        Friend ReadOnly Property grossColumn As DataColumn
            Get
                Return Me.columngross
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtl_HeaderRow
            Get
                Return CType(Me.Rows(index),service_center_dtl_HeaderRow)
            End Get
        End Property
        
        Public Event service_center_dtl_HeaderRowChanged As service_center_dtl_HeaderRowChangeEventHandler
        
        Public Event service_center_dtl_HeaderRowChanging As service_center_dtl_HeaderRowChangeEventHandler
        
        Public Event service_center_dtl_HeaderRowDeleted As service_center_dtl_HeaderRowChangeEventHandler
        
        Public Event service_center_dtl_HeaderRowDeleting As service_center_dtl_HeaderRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtl_HeaderRow(ByVal row As service_center_dtl_HeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtl_HeaderRow(ByVal cod_technician As String, ByVal name As String, ByVal qty As Decimal, ByVal price As Decimal, ByVal flag As Boolean, ByVal ext_Price As Decimal, ByVal ext_cost As Decimal, ByVal gross As Decimal) As service_center_dtl_HeaderRow
            Dim rowservice_center_dtl_HeaderRow As service_center_dtl_HeaderRow = CType(Me.NewRow,service_center_dtl_HeaderRow)
            rowservice_center_dtl_HeaderRow.ItemArray = New Object() {cod_technician, name, qty, price, flag, ext_Price, ext_cost, gross}
            Me.Rows.Add(rowservice_center_dtl_HeaderRow)
            Return rowservice_center_dtl_HeaderRow
        End Function
        
        Public Function FindBycod_technician(ByVal cod_technician As String) As service_center_dtl_HeaderRow
            Return CType(Me.Rows.Find(New Object() {cod_technician}),service_center_dtl_HeaderRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtl_HeaderDataTable = CType(MyBase.Clone,service_center_dtl_HeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtl_HeaderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columnname = Me.Columns("name")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnflag = Me.Columns("flag")
            Me.columnext_Price = Me.Columns("ext_Price")
            Me.columnext_cost = Me.Columns("ext_cost")
            Me.columngross = Me.Columns("gross")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnext_Price = New DataColumn("ext_Price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_Price)
            Me.columnext_cost = New DataColumn("ext_cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_cost)
            Me.columngross = New DataColumn("gross", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintKey1", New DataColumn() {Me.columncod_technician}, true))
            Me.columncod_technician.AllowDBNull = false
            Me.columncod_technician.Unique = true
            Me.columnname.ReadOnly = true
            Me.columnqty.ReadOnly = true
            Me.columnprice.ReadOnly = true
            Me.columnflag.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_dtl_HeaderRow() As service_center_dtl_HeaderRow
            Return CType(Me.NewRow,service_center_dtl_HeaderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtl_HeaderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtl_HeaderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtl_HeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_HeaderRowChanged(Me, New service_center_dtl_HeaderRowChangeEvent(CType(e.Row,service_center_dtl_HeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtl_HeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_HeaderRowChanging(Me, New service_center_dtl_HeaderRowChangeEvent(CType(e.Row,service_center_dtl_HeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtl_HeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_HeaderRowDeleted(Me, New service_center_dtl_HeaderRowChangeEvent(CType(e.Row,service_center_dtl_HeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtl_HeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_HeaderRowDeleting(Me, New service_center_dtl_HeaderRowChangeEvent(CType(e.Row,service_center_dtl_HeaderRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtl_HeaderRow(ByVal row As service_center_dtl_HeaderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_HeaderRow
        Inherits DataRow
        
        Private tableservice_center_dtl_Header As service_center_dtl_HeaderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl_Header = CType(Me.Table,service_center_dtl_HeaderDataTable)
        End Sub
        
        Public Property cod_technician As String
            Get
                Return CType(Me(Me.tableservice_center_dtl_Header.cod_technicianColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Header.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.nameColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Header.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Header.priceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.priceColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Header.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.flagColumn) = value
            End Set
        End Property
        
        Public Property ext_Price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Header.ext_PriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.ext_PriceColumn) = value
            End Set
        End Property
        
        Public Property ext_cost As Decimal
            Get
                If Me.Isext_costNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableservice_center_dtl_Header.ext_costColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.ext_costColumn) = value
            End Set
        End Property
        
        Public Property gross As Decimal
            Get
                If Me.IsgrossNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableservice_center_dtl_Header.grossColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableservice_center_dtl_Header.grossColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableservice_center_dtl_Header.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableservice_center_dtl_Header.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableservice_center_dtl_Header.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableservice_center_dtl_Header.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_PriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.ext_PriceColumn)
        End Function
        
        Public Sub Setext_PriceNull()
            Me(Me.tableservice_center_dtl_Header.ext_PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_costNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.ext_costColumn)
        End Function
        
        Public Sub Setext_costNull()
            Me(Me.tableservice_center_dtl_Header.ext_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgrossNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Header.grossColumn)
        End Function
        
        Public Sub SetgrossNull()
            Me(Me.tableservice_center_dtl_Header.grossColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Getservice_center_dtlRows() As service_center_dtlRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("service_center_dtl_Headerservice_center_dtl")),service_center_dtlRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_HeaderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtl_HeaderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtl_HeaderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtl_HeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerformanceSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnname As DataColumn
        
        Private columnprice_Tire As DataColumn
        
        Private columnprice_Label As DataColumn
        
        Private columnprice_Fees As DataColumn
        
        Private columnprice_Out As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_technician As DataColumn
        
        Friend Sub New()
            MyBase.New("PerformanceSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property price_TireColumn As DataColumn
            Get
                Return Me.columnprice_Tire
            End Get
        End Property
        
        Friend ReadOnly Property price_LabelColumn As DataColumn
            Get
                Return Me.columnprice_Label
            End Get
        End Property
        
        Friend ReadOnly Property price_FeesColumn As DataColumn
            Get
                Return Me.columnprice_Fees
            End Get
        End Property
        
        Friend ReadOnly Property price_OutColumn As DataColumn
            Get
                Return Me.columnprice_Out
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PerformanceSummeryRow
            Get
                Return CType(Me.Rows(index),PerformanceSummeryRow)
            End Get
        End Property
        
        Public Event PerformanceSummeryRowChanged As PerformanceSummeryRowChangeEventHandler
        
        Public Event PerformanceSummeryRowChanging As PerformanceSummeryRowChangeEventHandler
        
        Public Event PerformanceSummeryRowDeleted As PerformanceSummeryRowChangeEventHandler
        
        Public Event PerformanceSummeryRowDeleting As PerformanceSummeryRowChangeEventHandler
        
        Public Overloads Sub AddPerformanceSummeryRow(ByVal row As PerformanceSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPerformanceSummeryRow(ByVal name As String, ByVal price_Tire As Decimal, ByVal price_Label As Decimal, ByVal price_Fees As Decimal, ByVal price_Out As Decimal, ByVal flag As Boolean, ByVal cod_technician As String) As PerformanceSummeryRow
            Dim rowPerformanceSummeryRow As PerformanceSummeryRow = CType(Me.NewRow,PerformanceSummeryRow)
            rowPerformanceSummeryRow.ItemArray = New Object() {name, price_Tire, price_Label, price_Fees, price_Out, flag, cod_technician}
            Me.Rows.Add(rowPerformanceSummeryRow)
            Return rowPerformanceSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PerformanceSummeryDataTable = CType(MyBase.Clone,PerformanceSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PerformanceSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnname = Me.Columns("name")
            Me.columnprice_Tire = Me.Columns("price_Tire")
            Me.columnprice_Label = Me.Columns("price_Label")
            Me.columnprice_Fees = Me.Columns("price_Fees")
            Me.columnprice_Out = Me.Columns("price_Out")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_technician = Me.Columns("cod_technician")
        End Sub
        
        Private Sub InitClass()
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnprice_Tire = New DataColumn("price_Tire", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Tire)
            Me.columnprice_Label = New DataColumn("price_Label", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Label)
            Me.columnprice_Fees = New DataColumn("price_Fees", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Fees)
            Me.columnprice_Out = New DataColumn("price_Out", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Out)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
        End Sub
        
        Public Function NewPerformanceSummeryRow() As PerformanceSummeryRow
            Return CType(Me.NewRow,PerformanceSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PerformanceSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PerformanceSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PerformanceSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent PerformanceSummeryRowChanged(Me, New PerformanceSummeryRowChangeEvent(CType(e.Row,PerformanceSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PerformanceSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent PerformanceSummeryRowChanging(Me, New PerformanceSummeryRowChangeEvent(CType(e.Row,PerformanceSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PerformanceSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent PerformanceSummeryRowDeleted(Me, New PerformanceSummeryRowChangeEvent(CType(e.Row,PerformanceSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PerformanceSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent PerformanceSummeryRowDeleting(Me, New PerformanceSummeryRowChangeEvent(CType(e.Row,PerformanceSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePerformanceSummeryRow(ByVal row As PerformanceSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerformanceSummeryRow
        Inherits DataRow
        
        Private tablePerformanceSummery As PerformanceSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePerformanceSummery = CType(Me.Table,PerformanceSummeryDataTable)
        End Sub
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property price_Tire As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.price_TireColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.price_TireColumn) = value
            End Set
        End Property
        
        Public Property price_Label As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.price_LabelColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.price_LabelColumn) = value
            End Set
        End Property
        
        Public Property price_Fees As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.price_FeesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.price_FeesColumn) = value
            End Set
        End Property
        
        Public Property price_Out As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.price_OutColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.price_OutColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tablePerformanceSummery.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePerformanceSummery.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablePerformanceSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_TireNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.price_TireColumn)
        End Function
        
        Public Sub Setprice_TireNull()
            Me(Me.tablePerformanceSummery.price_TireColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_LabelNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.price_LabelColumn)
        End Function
        
        Public Sub Setprice_LabelNull()
            Me(Me.tablePerformanceSummery.price_LabelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_FeesNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.price_FeesColumn)
        End Function
        
        Public Sub Setprice_FeesNull()
            Me(Me.tablePerformanceSummery.price_FeesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_OutNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.price_OutColumn)
        End Function
        
        Public Sub Setprice_OutNull()
            Me(Me.tablePerformanceSummery.price_OutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablePerformanceSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tablePerformanceSummery.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tablePerformanceSummery.cod_technicianColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerformanceSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PerformanceSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PerformanceSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PerformanceSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnadd_user As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnprice_Tire As DataColumn
        
        Private columnprice_Label As DataColumn
        
        Private columnprice_Fees As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFet As DataColumn
        
        Private columnPrice_subtotal As DataColumn
        
        Private columntax As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntotal As DataColumn
        
        Private columnName_customer As DataColumn
        
        Private columnlicense_no_vehicle As DataColumn
        
        Private columnAdd_user_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("SaleDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property price_TireColumn As DataColumn
            Get
                Return Me.columnprice_Tire
            End Get
        End Property
        
        Friend ReadOnly Property price_LabelColumn As DataColumn
            Get
                Return Me.columnprice_Label
            End Get
        End Property
        
        Friend ReadOnly Property price_FeesColumn As DataColumn
            Get
                Return Me.columnprice_Fees
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FetColumn As DataColumn
            Get
                Return Me.columnFet
            End Get
        End Property
        
        Friend ReadOnly Property Price_subtotalColumn As DataColumn
            Get
                Return Me.columnPrice_subtotal
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property totalColumn As DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        Friend ReadOnly Property Name_customerColumn As DataColumn
            Get
                Return Me.columnName_customer
            End Get
        End Property
        
        Friend ReadOnly Property license_no_vehicleColumn As DataColumn
            Get
                Return Me.columnlicense_no_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property Add_user_NameColumn As DataColumn
            Get
                Return Me.columnAdd_user_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SaleDetailRow
            Get
                Return CType(Me.Rows(index),SaleDetailRow)
            End Get
        End Property
        
        Public Event SaleDetailRowChanged As SaleDetailRowChangeEventHandler
        
        Public Event SaleDetailRowChanging As SaleDetailRowChangeEventHandler
        
        Public Event SaleDetailRowDeleted As SaleDetailRowChangeEventHandler
        
        Public Event SaleDetailRowDeleting As SaleDetailRowChangeEventHandler
        
        Public Overloads Sub AddSaleDetailRow(ByVal row As SaleDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSaleDetailRow(ByVal add_user As Short, ByVal id_service_center As String, ByVal date_refer As Date, ByVal price_Tire As Decimal, ByVal price_Label As Decimal, ByVal price_Fees As Decimal, ByVal flag As Boolean, ByVal Fet As Decimal, ByVal Price_subtotal As Decimal, ByVal tax As Decimal, ByVal discount As Decimal, ByVal total As Decimal, ByVal Name_customer As String, ByVal license_no_vehicle As String, ByVal Add_user_Name As String) As SaleDetailRow
            Dim rowSaleDetailRow As SaleDetailRow = CType(Me.NewRow,SaleDetailRow)
            rowSaleDetailRow.ItemArray = New Object() {add_user, id_service_center, date_refer, price_Tire, price_Label, price_Fees, flag, Fet, Price_subtotal, tax, discount, total, Name_customer, license_no_vehicle, Add_user_Name}
            Me.Rows.Add(rowSaleDetailRow)
            Return rowSaleDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SaleDetailDataTable = CType(MyBase.Clone,SaleDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SaleDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnadd_user = Me.Columns("add_user")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnprice_Tire = Me.Columns("price_Tire")
            Me.columnprice_Label = Me.Columns("price_Label")
            Me.columnprice_Fees = Me.Columns("price_Fees")
            Me.columnflag = Me.Columns("flag")
            Me.columnFet = Me.Columns("Fet")
            Me.columnPrice_subtotal = Me.Columns("Price_subtotal")
            Me.columntax = Me.Columns("tax")
            Me.columndiscount = Me.Columns("discount")
            Me.columntotal = Me.Columns("total")
            Me.columnName_customer = Me.Columns("Name_customer")
            Me.columnlicense_no_vehicle = Me.Columns("license_no_vehicle")
            Me.columnAdd_user_Name = Me.Columns("Add_user_Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnadd_user = New DataColumn("add_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnprice_Tire = New DataColumn("price_Tire", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Tire)
            Me.columnprice_Label = New DataColumn("price_Label", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Label)
            Me.columnprice_Fees = New DataColumn("price_Fees", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_Fees)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFet = New DataColumn("Fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFet)
            Me.columnPrice_subtotal = New DataColumn("Price_subtotal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_subtotal)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntotal = New DataColumn("total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotal)
            Me.columnName_customer = New DataColumn("Name_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName_customer)
            Me.columnlicense_no_vehicle = New DataColumn("license_no_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlicense_no_vehicle)
            Me.columnAdd_user_Name = New DataColumn("Add_user_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdd_user_Name)
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewSaleDetailRow() As SaleDetailRow
            Return CType(Me.NewRow,SaleDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SaleDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SaleDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SaleDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent SaleDetailRowChanged(Me, New SaleDetailRowChangeEvent(CType(e.Row,SaleDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SaleDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent SaleDetailRowChanging(Me, New SaleDetailRowChangeEvent(CType(e.Row,SaleDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SaleDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent SaleDetailRowDeleted(Me, New SaleDetailRowChangeEvent(CType(e.Row,SaleDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SaleDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent SaleDetailRowDeleting(Me, New SaleDetailRowChangeEvent(CType(e.Row,SaleDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSaleDetailRow(ByVal row As SaleDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleDetailRow
        Inherits DataRow
        
        Private tableSaleDetail As SaleDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSaleDetail = CType(Me.Table,SaleDetailDataTable)
        End Sub
        
        Public Property add_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.add_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.add_userColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableSaleDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableSaleDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.date_referColumn) = value
            End Set
        End Property
        
        Public Property price_Tire As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.price_TireColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.price_TireColumn) = value
            End Set
        End Property
        
        Public Property price_Label As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.price_LabelColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.price_LabelColumn) = value
            End Set
        End Property
        
        Public Property price_Fees As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.price_FeesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.price_FeesColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property Fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.FetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.FetColumn) = value
            End Set
        End Property
        
        Public Property Price_subtotal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.Price_subtotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.Price_subtotalColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.taxColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.discountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.discountColumn) = value
            End Set
        End Property
        
        Public Property total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.totalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.totalColumn) = value
            End Set
        End Property
        
        Public Property Name_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.Name_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.Name_customerColumn) = value
            End Set
        End Property
        
        Public Property license_no_vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.license_no_vehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.license_no_vehicleColumn) = value
            End Set
        End Property
        
        Public Property Add_user_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleDetail.Add_user_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleDetail.Add_user_NameColumn) = value
            End Set
        End Property
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableSaleDetail.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableSaleDetail.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_TireNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.price_TireColumn)
        End Function
        
        Public Sub Setprice_TireNull()
            Me(Me.tableSaleDetail.price_TireColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_LabelNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.price_LabelColumn)
        End Function
        
        Public Sub Setprice_LabelNull()
            Me(Me.tableSaleDetail.price_LabelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_FeesNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.price_FeesColumn)
        End Function
        
        Public Sub Setprice_FeesNull()
            Me(Me.tableSaleDetail.price_FeesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableSaleDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFetNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.FetColumn)
        End Function
        
        Public Sub SetFetNull()
            Me(Me.tableSaleDetail.FetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_subtotalNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.Price_subtotalColumn)
        End Function
        
        Public Sub SetPrice_subtotalNull()
            Me(Me.tableSaleDetail.Price_subtotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableSaleDetail.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableSaleDetail.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.totalColumn)
        End Function
        
        Public Sub SettotalNull()
            Me(Me.tableSaleDetail.totalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsName_customerNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.Name_customerColumn)
        End Function
        
        Public Sub SetName_customerNull()
            Me(Me.tableSaleDetail.Name_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islicense_no_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.license_no_vehicleColumn)
        End Function
        
        Public Sub Setlicense_no_vehicleNull()
            Me(Me.tableSaleDetail.license_no_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdd_user_NameNull() As Boolean
            Return Me.IsNull(Me.tableSaleDetail.Add_user_NameColumn)
        End Function
        
        Public Sub SetAdd_user_NameNull()
            Me(Me.tableSaleDetail.Add_user_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SaleDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SaleDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SaleDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserId As DataColumn
        
        Private columnUserLogin As DataColumn
        
        Friend Sub New()
            MyBase.New("Users")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index),UsersRow)
            End Get
        End Property
        
        Public Event UsersRowChanged As UsersRowChangeEventHandler
        
        Public Event UsersRowChanging As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleted As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleting As UsersRowChangeEventHandler
        
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsersRow(ByVal UserLogin As String) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow,UsersRow)
            rowUsersRow.ItemArray = New Object() {Nothing, UserLogin}
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function
        
        Public Function FindByUserId(ByVal UserId As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserId}),UsersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone,UsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserId = Me.Columns("UserId")
            Me.columnUserLogin = Me.Columns("UserLogin")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintKey2", New DataColumn() {Me.columnUserId}, true))
            Me.columnUserId.AutoIncrement = true
            Me.columnUserId.AllowDBNull = false
            Me.columnUserId.Unique = true
        End Sub
        
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow,UsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRow
        Inherits DataRow
        
        Private tableUsers As UsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table,UsersDataTable)
        End Sub
        
        Public Property UserId As Integer
            Get
                Return CType(Me(Me.tableUsers.UserIdColumn),Integer)
            End Get
            Set
                Me(Me.tableUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayrollDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnname As DataColumn
        
        Private columnPayrollDate As DataColumn
        
        Private columnloan As DataColumn
        
        Private columnsaving As DataColumn
        
        Private columnAdvance As DataColumn
        
        Private columnGurnish As DataColumn
        
        Private columnOther As DataColumn
        
        Private columnFederal As DataColumn
        
        Private columnSocial As DataColumn
        
        Private columnMedicare As DataColumn
        
        Private columnStateTax As DataColumn
        
        Private columnUnEmpTax As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnNetPay As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("Payroll")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property PayrollDateColumn As DataColumn
            Get
                Return Me.columnPayrollDate
            End Get
        End Property
        
        Friend ReadOnly Property loanColumn As DataColumn
            Get
                Return Me.columnloan
            End Get
        End Property
        
        Friend ReadOnly Property savingColumn As DataColumn
            Get
                Return Me.columnsaving
            End Get
        End Property
        
        Friend ReadOnly Property AdvanceColumn As DataColumn
            Get
                Return Me.columnAdvance
            End Get
        End Property
        
        Friend ReadOnly Property GurnishColumn As DataColumn
            Get
                Return Me.columnGurnish
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Friend ReadOnly Property FederalColumn As DataColumn
            Get
                Return Me.columnFederal
            End Get
        End Property
        
        Friend ReadOnly Property SocialColumn As DataColumn
            Get
                Return Me.columnSocial
            End Get
        End Property
        
        Friend ReadOnly Property MedicareColumn As DataColumn
            Get
                Return Me.columnMedicare
            End Get
        End Property
        
        Friend ReadOnly Property StateTaxColumn As DataColumn
            Get
                Return Me.columnStateTax
            End Get
        End Property
        
        Friend ReadOnly Property UnEmpTaxColumn As DataColumn
            Get
                Return Me.columnUnEmpTax
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property NetPayColumn As DataColumn
            Get
                Return Me.columnNetPay
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PayrollRow
            Get
                Return CType(Me.Rows(index),PayrollRow)
            End Get
        End Property
        
        Public Event PayrollRowChanged As PayrollRowChangeEventHandler
        
        Public Event PayrollRowChanging As PayrollRowChangeEventHandler
        
        Public Event PayrollRowDeleted As PayrollRowChangeEventHandler
        
        Public Event PayrollRowDeleting As PayrollRowChangeEventHandler
        
        Public Overloads Sub AddPayrollRow(ByVal row As PayrollRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPayrollRow( _
                    ByVal employee_code As String,  _
                    ByVal name As String,  _
                    ByVal PayrollDate As Date,  _
                    ByVal loan As Decimal,  _
                    ByVal saving As Decimal,  _
                    ByVal Advance As Decimal,  _
                    ByVal Gurnish As Decimal,  _
                    ByVal Other As Decimal,  _
                    ByVal Federal As Decimal,  _
                    ByVal Social As Decimal,  _
                    ByVal Medicare As Decimal,  _
                    ByVal StateTax As Decimal,  _
                    ByVal UnEmpTax As Decimal,  _
                    ByVal gross_pay As Decimal,  _
                    ByVal NetPay As Decimal,  _
                    ByVal no_of_check As String,  _
                    ByVal flag As Boolean) As PayrollRow
            Dim rowPayrollRow As PayrollRow = CType(Me.NewRow,PayrollRow)
            rowPayrollRow.ItemArray = New Object() {employee_code, name, PayrollDate, loan, saving, Advance, Gurnish, Other, Federal, Social, Medicare, StateTax, UnEmpTax, gross_pay, NetPay, no_of_check, flag}
            Me.Rows.Add(rowPayrollRow)
            Return rowPayrollRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PayrollDataTable = CType(MyBase.Clone,PayrollDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PayrollDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnname = Me.Columns("name")
            Me.columnPayrollDate = Me.Columns("PayrollDate")
            Me.columnloan = Me.Columns("loan")
            Me.columnsaving = Me.Columns("saving")
            Me.columnAdvance = Me.Columns("Advance")
            Me.columnGurnish = Me.Columns("Gurnish")
            Me.columnOther = Me.Columns("Other")
            Me.columnFederal = Me.Columns("Federal")
            Me.columnSocial = Me.Columns("Social")
            Me.columnMedicare = Me.Columns("Medicare")
            Me.columnStateTax = Me.Columns("StateTax")
            Me.columnUnEmpTax = Me.Columns("UnEmpTax")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnNetPay = Me.Columns("NetPay")
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnPayrollDate = New DataColumn("PayrollDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayrollDate)
            Me.columnloan = New DataColumn("loan", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan)
            Me.columnsaving = New DataColumn("saving", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving)
            Me.columnAdvance = New DataColumn("Advance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdvance)
            Me.columnGurnish = New DataColumn("Gurnish", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGurnish)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columnFederal = New DataColumn("Federal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFederal)
            Me.columnSocial = New DataColumn("Social", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSocial)
            Me.columnMedicare = New DataColumn("Medicare", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedicare)
            Me.columnStateTax = New DataColumn("StateTax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStateTax)
            Me.columnUnEmpTax = New DataColumn("UnEmpTax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnEmpTax)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnNetPay = New DataColumn("NetPay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNetPay)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
        End Sub
        
        Public Function NewPayrollRow() As PayrollRow
            Return CType(Me.NewRow,PayrollRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PayrollRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PayrollRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PayrollRowChangedEvent) Is Nothing) Then
                RaiseEvent PayrollRowChanged(Me, New PayrollRowChangeEvent(CType(e.Row,PayrollRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PayrollRowChangingEvent) Is Nothing) Then
                RaiseEvent PayrollRowChanging(Me, New PayrollRowChangeEvent(CType(e.Row,PayrollRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PayrollRowDeletedEvent) Is Nothing) Then
                RaiseEvent PayrollRowDeleted(Me, New PayrollRowChangeEvent(CType(e.Row,PayrollRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PayrollRowDeletingEvent) Is Nothing) Then
                RaiseEvent PayrollRowDeleting(Me, New PayrollRowChangeEvent(CType(e.Row,PayrollRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePayrollRow(ByVal row As PayrollRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayrollRow
        Inherits DataRow
        
        Private tablePayroll As PayrollDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePayroll = CType(Me.Table,PayrollDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.nameColumn) = value
            End Set
        End Property
        
        Public Property PayrollDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.PayrollDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.PayrollDateColumn) = value
            End Set
        End Property
        
        Public Property loan As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.loanColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.loanColumn) = value
            End Set
        End Property
        
        Public Property saving As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.savingColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.savingColumn) = value
            End Set
        End Property
        
        Public Property Advance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.AdvanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.AdvanceColumn) = value
            End Set
        End Property
        
        Public Property Gurnish As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.GurnishColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.GurnishColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.OtherColumn) = value
            End Set
        End Property
        
        Public Property Federal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.FederalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.FederalColumn) = value
            End Set
        End Property
        
        Public Property Social As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.SocialColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.SocialColumn) = value
            End Set
        End Property
        
        Public Property Medicare As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.MedicareColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.MedicareColumn) = value
            End Set
        End Property
        
        Public Property StateTax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.StateTaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.StateTaxColumn) = value
            End Set
        End Property
        
        Public Property UnEmpTax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.UnEmpTaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.UnEmpTaxColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.gross_payColumn) = value
            End Set
        End Property
        
        Public Property NetPay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.NetPayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.NetPayColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePayroll.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePayroll.flagColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablePayroll.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablePayroll.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayrollDateNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.PayrollDateColumn)
        End Function
        
        Public Sub SetPayrollDateNull()
            Me(Me.tablePayroll.PayrollDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsloanNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.loanColumn)
        End Function
        
        Public Sub SetloanNull()
            Me(Me.tablePayroll.loanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssavingNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.savingColumn)
        End Function
        
        Public Sub SetsavingNull()
            Me(Me.tablePayroll.savingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdvanceNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.AdvanceColumn)
        End Function
        
        Public Sub SetAdvanceNull()
            Me(Me.tablePayroll.AdvanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGurnishNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.GurnishColumn)
        End Function
        
        Public Sub SetGurnishNull()
            Me(Me.tablePayroll.GurnishColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tablePayroll.OtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFederalNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.FederalColumn)
        End Function
        
        Public Sub SetFederalNull()
            Me(Me.tablePayroll.FederalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSocialNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.SocialColumn)
        End Function
        
        Public Sub SetSocialNull()
            Me(Me.tablePayroll.SocialColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedicareNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.MedicareColumn)
        End Function
        
        Public Sub SetMedicareNull()
            Me(Me.tablePayroll.MedicareColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateTaxNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.StateTaxColumn)
        End Function
        
        Public Sub SetStateTaxNull()
            Me(Me.tablePayroll.StateTaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnEmpTaxNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.UnEmpTaxColumn)
        End Function
        
        Public Sub SetUnEmpTaxNull()
            Me(Me.tablePayroll.UnEmpTaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tablePayroll.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetPayNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.NetPayColumn)
        End Function
        
        Public Sub SetNetPayNull()
            Me(Me.tablePayroll.NetPayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tablePayroll.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablePayroll.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablePayroll.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PayrollRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PayrollRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PayrollRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PayrollRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnname As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columngross_pay As DataColumn
        
        Private columnFUTA As DataColumn
        
        Private columnEXCEED As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("FUTA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property gross_payColumn As DataColumn
            Get
                Return Me.columngross_pay
            End Get
        End Property
        
        Friend ReadOnly Property FUTAColumn As DataColumn
            Get
                Return Me.columnFUTA
            End Get
        End Property
        
        Friend ReadOnly Property EXCEEDColumn As DataColumn
            Get
                Return Me.columnEXCEED
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FUTARow
            Get
                Return CType(Me.Rows(index),FUTARow)
            End Get
        End Property
        
        Public Event FUTARowChanged As FUTARowChangeEventHandler
        
        Public Event FUTARowChanging As FUTARowChangeEventHandler
        
        Public Event FUTARowDeleted As FUTARowChangeEventHandler
        
        Public Event FUTARowDeleting As FUTARowChangeEventHandler
        
        Public Overloads Sub AddFUTARow(ByVal row As FUTARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFUTARow(ByVal employee_code As String, ByVal name As String, ByVal social_security_no As String, ByVal gross_pay As Decimal, ByVal FUTA As Decimal, ByVal EXCEED As Decimal, ByVal Taxable As Decimal, ByVal flag As Boolean) As FUTARow
            Dim rowFUTARow As FUTARow = CType(Me.NewRow,FUTARow)
            rowFUTARow.ItemArray = New Object() {employee_code, name, social_security_no, gross_pay, FUTA, EXCEED, Taxable, flag}
            Me.Rows.Add(rowFUTARow)
            Return rowFUTARow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FUTADataTable = CType(MyBase.Clone,FUTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FUTADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnname = Me.Columns("name")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columngross_pay = Me.Columns("gross_pay")
            Me.columnFUTA = Me.Columns("FUTA")
            Me.columnEXCEED = Me.Columns("EXCEED")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columngross_pay = New DataColumn("gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngross_pay)
            Me.columnFUTA = New DataColumn("FUTA", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFUTA)
            Me.columnEXCEED = New DataColumn("EXCEED", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCEED)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function NewFUTARow() As FUTARow
            Return CType(Me.NewRow,FUTARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FUTARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FUTARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FUTARowChangedEvent) Is Nothing) Then
                RaiseEvent FUTARowChanged(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FUTARowChangingEvent) Is Nothing) Then
                RaiseEvent FUTARowChanging(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FUTARowDeletedEvent) Is Nothing) Then
                RaiseEvent FUTARowDeleted(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FUTARowDeletingEvent) Is Nothing) Then
                RaiseEvent FUTARowDeleting(Me, New FUTARowChangeEvent(CType(e.Row,FUTARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFUTARow(ByVal row As FUTARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTARow
        Inherits DataRow
        
        Private tableFUTA As FUTADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFUTA = CType(Me.Table,FUTADataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableFUTA.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableFUTA.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.nameColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.gross_payColumn) = value
            End Set
        End Property
        
        Public Property FUTA As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.FUTAColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.FUTAColumn) = value
            End Set
        End Property
        
        Public Property EXCEED As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.EXCEEDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.EXCEEDColumn) = value
            End Set
        End Property
        
        Public Property Taxable As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.TaxableColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.TaxableColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFUTA.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFUTA.flagColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableFUTA.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tableFUTA.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgross_payNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.gross_payColumn)
        End Function
        
        Public Sub Setgross_payNull()
            Me(Me.tableFUTA.gross_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFUTANull() As Boolean
            Return Me.IsNull(Me.tableFUTA.FUTAColumn)
        End Function
        
        Public Sub SetFUTANull()
            Me(Me.tableFUTA.FUTAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXCEEDNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.EXCEEDColumn)
        End Function
        
        Public Sub SetEXCEEDNull()
            Me(Me.tableFUTA.EXCEEDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tableFUTA.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableFUTA.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableFUTA.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FUTARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FUTARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FUTARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FUTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
