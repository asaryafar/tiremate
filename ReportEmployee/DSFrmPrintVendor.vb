'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrintVendor
    Inherits DataSet
    
    Private tableUnpaidDetail As UnpaidDetailDataTable
    
    Private tableUnpaidSummery As UnpaidSummeryDataTable
    
    Private tableCashDetail As CashDetailDataTable
    
    Private tableCreditSummary As CreditSummaryDataTable
    
    Private tableCreditDetail As CreditDetailDataTable
    
    Private tableInventoryPurchasesDetail As InventoryPurchasesDetailDataTable
    
    Private tableOutsidePurchasesDetail As OutsidePurchasesDetailDataTable
    
    Private tableInventoryPurchasesSummary As InventoryPurchasesSummaryDataTable
    
    Private tableOutsidePurchasesSummary As OutsidePurchasesSummaryDataTable
    
    Private tablePaymentDtl As PaymentDtlDataTable
    
    Private tableVendorList As VendorListDataTable
    
    Private tableVendor_bill As Vendor_billDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UnpaidDetail")) Is Nothing) Then
                Me.Tables.Add(New UnpaidDetailDataTable(ds.Tables("UnpaidDetail")))
            End If
            If (Not (ds.Tables("UnpaidSummery")) Is Nothing) Then
                Me.Tables.Add(New UnpaidSummeryDataTable(ds.Tables("UnpaidSummery")))
            End If
            If (Not (ds.Tables("CashDetail")) Is Nothing) Then
                Me.Tables.Add(New CashDetailDataTable(ds.Tables("CashDetail")))
            End If
            If (Not (ds.Tables("CreditSummary")) Is Nothing) Then
                Me.Tables.Add(New CreditSummaryDataTable(ds.Tables("CreditSummary")))
            End If
            If (Not (ds.Tables("CreditDetail")) Is Nothing) Then
                Me.Tables.Add(New CreditDetailDataTable(ds.Tables("CreditDetail")))
            End If
            If (Not (ds.Tables("InventoryPurchasesDetail")) Is Nothing) Then
                Me.Tables.Add(New InventoryPurchasesDetailDataTable(ds.Tables("InventoryPurchasesDetail")))
            End If
            If (Not (ds.Tables("OutsidePurchasesDetail")) Is Nothing) Then
                Me.Tables.Add(New OutsidePurchasesDetailDataTable(ds.Tables("OutsidePurchasesDetail")))
            End If
            If (Not (ds.Tables("InventoryPurchasesSummary")) Is Nothing) Then
                Me.Tables.Add(New InventoryPurchasesSummaryDataTable(ds.Tables("InventoryPurchasesSummary")))
            End If
            If (Not (ds.Tables("OutsidePurchasesSummary")) Is Nothing) Then
                Me.Tables.Add(New OutsidePurchasesSummaryDataTable(ds.Tables("OutsidePurchasesSummary")))
            End If
            If (Not (ds.Tables("PaymentDtl")) Is Nothing) Then
                Me.Tables.Add(New PaymentDtlDataTable(ds.Tables("PaymentDtl")))
            End If
            If (Not (ds.Tables("VendorList")) Is Nothing) Then
                Me.Tables.Add(New VendorListDataTable(ds.Tables("VendorList")))
            End If
            If (Not (ds.Tables("Vendor_bill")) Is Nothing) Then
                Me.Tables.Add(New Vendor_billDataTable(ds.Tables("Vendor_bill")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UnpaidDetail As UnpaidDetailDataTable
        Get
            Return Me.tableUnpaidDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UnpaidSummery As UnpaidSummeryDataTable
        Get
            Return Me.tableUnpaidSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CashDetail As CashDetailDataTable
        Get
            Return Me.tableCashDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditSummary As CreditSummaryDataTable
        Get
            Return Me.tableCreditSummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CreditDetail As CreditDetailDataTable
        Get
            Return Me.tableCreditDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InventoryPurchasesDetail As InventoryPurchasesDetailDataTable
        Get
            Return Me.tableInventoryPurchasesDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OutsidePurchasesDetail As OutsidePurchasesDetailDataTable
        Get
            Return Me.tableOutsidePurchasesDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InventoryPurchasesSummary As InventoryPurchasesSummaryDataTable
        Get
            Return Me.tableInventoryPurchasesSummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OutsidePurchasesSummary As OutsidePurchasesSummaryDataTable
        Get
            Return Me.tableOutsidePurchasesSummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PaymentDtl As PaymentDtlDataTable
        Get
            Return Me.tablePaymentDtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VendorList As VendorListDataTable
        Get
            Return Me.tableVendorList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Vendor_bill As Vendor_billDataTable
        Get
            Return Me.tableVendor_bill
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrintVendor = CType(MyBase.Clone,DSFrmPrintVendor)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("UnpaidDetail")) Is Nothing) Then
            Me.Tables.Add(New UnpaidDetailDataTable(ds.Tables("UnpaidDetail")))
        End If
        If (Not (ds.Tables("UnpaidSummery")) Is Nothing) Then
            Me.Tables.Add(New UnpaidSummeryDataTable(ds.Tables("UnpaidSummery")))
        End If
        If (Not (ds.Tables("CashDetail")) Is Nothing) Then
            Me.Tables.Add(New CashDetailDataTable(ds.Tables("CashDetail")))
        End If
        If (Not (ds.Tables("CreditSummary")) Is Nothing) Then
            Me.Tables.Add(New CreditSummaryDataTable(ds.Tables("CreditSummary")))
        End If
        If (Not (ds.Tables("CreditDetail")) Is Nothing) Then
            Me.Tables.Add(New CreditDetailDataTable(ds.Tables("CreditDetail")))
        End If
        If (Not (ds.Tables("InventoryPurchasesDetail")) Is Nothing) Then
            Me.Tables.Add(New InventoryPurchasesDetailDataTable(ds.Tables("InventoryPurchasesDetail")))
        End If
        If (Not (ds.Tables("OutsidePurchasesDetail")) Is Nothing) Then
            Me.Tables.Add(New OutsidePurchasesDetailDataTable(ds.Tables("OutsidePurchasesDetail")))
        End If
        If (Not (ds.Tables("InventoryPurchasesSummary")) Is Nothing) Then
            Me.Tables.Add(New InventoryPurchasesSummaryDataTable(ds.Tables("InventoryPurchasesSummary")))
        End If
        If (Not (ds.Tables("OutsidePurchasesSummary")) Is Nothing) Then
            Me.Tables.Add(New OutsidePurchasesSummaryDataTable(ds.Tables("OutsidePurchasesSummary")))
        End If
        If (Not (ds.Tables("PaymentDtl")) Is Nothing) Then
            Me.Tables.Add(New PaymentDtlDataTable(ds.Tables("PaymentDtl")))
        End If
        If (Not (ds.Tables("VendorList")) Is Nothing) Then
            Me.Tables.Add(New VendorListDataTable(ds.Tables("VendorList")))
        End If
        If (Not (ds.Tables("Vendor_bill")) Is Nothing) Then
            Me.Tables.Add(New Vendor_billDataTable(ds.Tables("Vendor_bill")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUnpaidDetail = CType(Me.Tables("UnpaidDetail"),UnpaidDetailDataTable)
        If (Not (Me.tableUnpaidDetail) Is Nothing) Then
            Me.tableUnpaidDetail.InitVars
        End If
        Me.tableUnpaidSummery = CType(Me.Tables("UnpaidSummery"),UnpaidSummeryDataTable)
        If (Not (Me.tableUnpaidSummery) Is Nothing) Then
            Me.tableUnpaidSummery.InitVars
        End If
        Me.tableCashDetail = CType(Me.Tables("CashDetail"),CashDetailDataTable)
        If (Not (Me.tableCashDetail) Is Nothing) Then
            Me.tableCashDetail.InitVars
        End If
        Me.tableCreditSummary = CType(Me.Tables("CreditSummary"),CreditSummaryDataTable)
        If (Not (Me.tableCreditSummary) Is Nothing) Then
            Me.tableCreditSummary.InitVars
        End If
        Me.tableCreditDetail = CType(Me.Tables("CreditDetail"),CreditDetailDataTable)
        If (Not (Me.tableCreditDetail) Is Nothing) Then
            Me.tableCreditDetail.InitVars
        End If
        Me.tableInventoryPurchasesDetail = CType(Me.Tables("InventoryPurchasesDetail"),InventoryPurchasesDetailDataTable)
        If (Not (Me.tableInventoryPurchasesDetail) Is Nothing) Then
            Me.tableInventoryPurchasesDetail.InitVars
        End If
        Me.tableOutsidePurchasesDetail = CType(Me.Tables("OutsidePurchasesDetail"),OutsidePurchasesDetailDataTable)
        If (Not (Me.tableOutsidePurchasesDetail) Is Nothing) Then
            Me.tableOutsidePurchasesDetail.InitVars
        End If
        Me.tableInventoryPurchasesSummary = CType(Me.Tables("InventoryPurchasesSummary"),InventoryPurchasesSummaryDataTable)
        If (Not (Me.tableInventoryPurchasesSummary) Is Nothing) Then
            Me.tableInventoryPurchasesSummary.InitVars
        End If
        Me.tableOutsidePurchasesSummary = CType(Me.Tables("OutsidePurchasesSummary"),OutsidePurchasesSummaryDataTable)
        If (Not (Me.tableOutsidePurchasesSummary) Is Nothing) Then
            Me.tableOutsidePurchasesSummary.InitVars
        End If
        Me.tablePaymentDtl = CType(Me.Tables("PaymentDtl"),PaymentDtlDataTable)
        If (Not (Me.tablePaymentDtl) Is Nothing) Then
            Me.tablePaymentDtl.InitVars
        End If
        Me.tableVendorList = CType(Me.Tables("VendorList"),VendorListDataTable)
        If (Not (Me.tableVendorList) Is Nothing) Then
            Me.tableVendorList.InitVars
        End If
        Me.tableVendor_bill = CType(Me.Tables("Vendor_bill"),Vendor_billDataTable)
        If (Not (Me.tableVendor_bill) Is Nothing) Then
            Me.tableVendor_bill.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrintVendor"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrintVendor.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUnpaidDetail = New UnpaidDetailDataTable
        Me.Tables.Add(Me.tableUnpaidDetail)
        Me.tableUnpaidSummery = New UnpaidSummeryDataTable
        Me.Tables.Add(Me.tableUnpaidSummery)
        Me.tableCashDetail = New CashDetailDataTable
        Me.Tables.Add(Me.tableCashDetail)
        Me.tableCreditSummary = New CreditSummaryDataTable
        Me.Tables.Add(Me.tableCreditSummary)
        Me.tableCreditDetail = New CreditDetailDataTable
        Me.Tables.Add(Me.tableCreditDetail)
        Me.tableInventoryPurchasesDetail = New InventoryPurchasesDetailDataTable
        Me.Tables.Add(Me.tableInventoryPurchasesDetail)
        Me.tableOutsidePurchasesDetail = New OutsidePurchasesDetailDataTable
        Me.Tables.Add(Me.tableOutsidePurchasesDetail)
        Me.tableInventoryPurchasesSummary = New InventoryPurchasesSummaryDataTable
        Me.Tables.Add(Me.tableInventoryPurchasesSummary)
        Me.tableOutsidePurchasesSummary = New OutsidePurchasesSummaryDataTable
        Me.Tables.Add(Me.tableOutsidePurchasesSummary)
        Me.tablePaymentDtl = New PaymentDtlDataTable
        Me.Tables.Add(Me.tablePaymentDtl)
        Me.tableVendorList = New VendorListDataTable
        Me.Tables.Add(Me.tableVendorList)
        Me.tableVendor_bill = New Vendor_billDataTable
        Me.Tables.Add(Me.tableVendor_bill)
    End Sub
    
    Private Function ShouldSerializeUnpaidDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUnpaidSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCashDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCreditSummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCreditDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventoryPurchasesDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOutsidePurchasesDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventoryPurchasesSummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOutsidePurchasesSummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePaymentDtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVendorList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVendor_bill() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UnpaidDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As UnpaidDetailRowChangeEvent)
    
    Public Delegate Sub UnpaidSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As UnpaidSummeryRowChangeEvent)
    
    Public Delegate Sub CashDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CashDetailRowChangeEvent)
    
    Public Delegate Sub CreditSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditSummaryRowChangeEvent)
    
    Public Delegate Sub CreditDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CreditDetailRowChangeEvent)
    
    Public Delegate Sub InventoryPurchasesDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryPurchasesDetailRowChangeEvent)
    
    Public Delegate Sub OutsidePurchasesDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As OutsidePurchasesDetailRowChangeEvent)
    
    Public Delegate Sub InventoryPurchasesSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryPurchasesSummaryRowChangeEvent)
    
    Public Delegate Sub OutsidePurchasesSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As OutsidePurchasesSummaryRowChangeEvent)
    
    Public Delegate Sub PaymentDtlRowChangeEventHandler(ByVal sender As Object, ByVal e As PaymentDtlRowChangeEvent)
    
    Public Delegate Sub VendorListRowChangeEventHandler(ByVal sender As Object, ByVal e As VendorListRowChangeEvent)
    
    Public Delegate Sub Vendor_billRowChangeEventHandler(ByVal sender As Object, ByVal e As Vendor_billRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columndesc_vendor_type As DataColumn
        
        Private columndesc_class As DataColumn
        
        Private columndesc_buyer As DataColumn
        
        Private column_date As DataColumn
        
        Private columndue As DataColumn
        
        Private columnOriginal As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnref As DataColumn
        
        Private columnstore As DataColumn
        
        Private columnAP As DataColumn
        
        Private columnDisco As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Friend Sub New()
            MyBase.New("UnpaidDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendor_typeColumn As DataColumn
            Get
                Return Me.columndesc_vendor_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Friend ReadOnly Property desc_buyerColumn As DataColumn
            Get
                Return Me.columndesc_buyer
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property OriginalColumn As DataColumn
            Get
                Return Me.columnOriginal
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property refColumn As DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        Friend ReadOnly Property storeColumn As DataColumn
            Get
                Return Me.columnstore
            End Get
        End Property
        
        Friend ReadOnly Property APColumn As DataColumn
            Get
                Return Me.columnAP
            End Get
        End Property
        
        Friend ReadOnly Property DiscoColumn As DataColumn
            Get
                Return Me.columnDisco
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UnpaidDetailRow
            Get
                Return CType(Me.Rows(index),UnpaidDetailRow)
            End Get
        End Property
        
        Public Event UnpaidDetailRowChanged As UnpaidDetailRowChangeEventHandler
        
        Public Event UnpaidDetailRowChanging As UnpaidDetailRowChangeEventHandler
        
        Public Event UnpaidDetailRowDeleted As UnpaidDetailRowChangeEventHandler
        
        Public Event UnpaidDetailRowDeleting As UnpaidDetailRowChangeEventHandler
        
        Public Overloads Sub AddUnpaidDetailRow(ByVal row As UnpaidDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUnpaidDetailRow( _
                    ByVal cod_vendor As String,  _
                    ByVal desc_vendor As String,  _
                    ByVal desc_vendor_type As String,  _
                    ByVal desc_class As String,  _
                    ByVal desc_buyer As String,  _
                    ByVal _date As Date,  _
                    ByVal due As Date,  _
                    ByVal Original As Double,  _
                    ByVal pay As Decimal,  _
                    ByVal AmountDue As Double,  _
                    ByVal ref As String,  _
                    ByVal store As String,  _
                    ByVal AP As String,  _
                    ByVal Disco As Double,  _
                    ByVal flag As Boolean,  _
                    ByVal OrderDate As String) As UnpaidDetailRow
            Dim rowUnpaidDetailRow As UnpaidDetailRow = CType(Me.NewRow,UnpaidDetailRow)
            rowUnpaidDetailRow.ItemArray = New Object() {cod_vendor, desc_vendor, desc_vendor_type, desc_class, desc_buyer, _date, due, Original, pay, AmountDue, ref, store, AP, Disco, flag, OrderDate}
            Me.Rows.Add(rowUnpaidDetailRow)
            Return rowUnpaidDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UnpaidDetailDataTable = CType(MyBase.Clone,UnpaidDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UnpaidDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columndesc_vendor_type = Me.Columns("desc_vendor_type")
            Me.columndesc_class = Me.Columns("desc_class")
            Me.columndesc_buyer = Me.Columns("desc_buyer")
            Me.column_date = Me.Columns("date")
            Me.columndue = Me.Columns("due")
            Me.columnOriginal = Me.Columns("Original")
            Me.columnpay = Me.Columns("pay")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnref = Me.Columns("ref")
            Me.columnstore = Me.Columns("store")
            Me.columnAP = Me.Columns("AP")
            Me.columnDisco = Me.Columns("Disco")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderDate = Me.Columns("OrderDate")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columndesc_vendor_type = New DataColumn("desc_vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor_type)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.columndesc_buyer = New DataColumn("desc_buyer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_buyer)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columndue = New DataColumn("due", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnOriginal = New DataColumn("Original", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginal)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnref = New DataColumn("ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref)
            Me.columnstore = New DataColumn("store", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore)
            Me.columnAP = New DataColumn("AP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAP)
            Me.columnDisco = New DataColumn("Disco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisco)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnOriginal.ReadOnly = true
            Me.columnpay.ReadOnly = true
            Me.columnAmountDue.ReadOnly = true
            Me.columnstore.AllowDBNull = false
        End Sub
        
        Public Function NewUnpaidDetailRow() As UnpaidDetailRow
            Return CType(Me.NewRow,UnpaidDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UnpaidDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UnpaidDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UnpaidDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent UnpaidDetailRowChanged(Me, New UnpaidDetailRowChangeEvent(CType(e.Row,UnpaidDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UnpaidDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent UnpaidDetailRowChanging(Me, New UnpaidDetailRowChangeEvent(CType(e.Row,UnpaidDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UnpaidDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent UnpaidDetailRowDeleted(Me, New UnpaidDetailRowChangeEvent(CType(e.Row,UnpaidDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UnpaidDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent UnpaidDetailRowDeleting(Me, New UnpaidDetailRowChangeEvent(CType(e.Row,UnpaidDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUnpaidDetailRow(ByVal row As UnpaidDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidDetailRow
        Inherits DataRow
        
        Private tableUnpaidDetail As UnpaidDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUnpaidDetail = CType(Me.Table,UnpaidDetailDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableUnpaidDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableUnpaidDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.desc_vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.desc_vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.desc_classColumn) = value
            End Set
        End Property
        
        Public Property desc_buyer As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.desc_buyerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.desc_buyerColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail._dateColumn) = value
            End Set
        End Property
        
        Public Property due As Date
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.dueColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.dueColumn) = value
            End Set
        End Property
        
        Public Property Original As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.OriginalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.OriginalColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.payColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.AmountDueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property ref As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.refColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.refColumn) = value
            End Set
        End Property
        
        Public Property store As String
            Get
                Return CType(Me(Me.tableUnpaidDetail.storeColumn),String)
            End Get
            Set
                Me(Me.tableUnpaidDetail.storeColumn) = value
            End Set
        End Property
        
        Public Property AP As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.APColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.APColumn) = value
            End Set
        End Property
        
        Public Property Disco As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.DiscoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.DiscoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidDetail.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidDetail.OrderDateColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableUnpaidDetail.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.desc_vendor_typeColumn)
        End Function
        
        Public Sub Setdesc_vendor_typeNull()
            Me(Me.tableUnpaidDetail.desc_vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableUnpaidDetail.desc_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_buyerNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.desc_buyerColumn)
        End Function
        
        Public Sub Setdesc_buyerNull()
            Me(Me.tableUnpaidDetail.desc_buyerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableUnpaidDetail._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableUnpaidDetail.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.OriginalColumn)
        End Function
        
        Public Sub SetOriginalNull()
            Me(Me.tableUnpaidDetail.OriginalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tableUnpaidDetail.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableUnpaidDetail.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.refColumn)
        End Function
        
        Public Sub SetrefNull()
            Me(Me.tableUnpaidDetail.refColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAPNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.APColumn)
        End Function
        
        Public Sub SetAPNull()
            Me(Me.tableUnpaidDetail.APColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscoNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.DiscoColumn)
        End Function
        
        Public Sub SetDiscoNull()
            Me(Me.tableUnpaidDetail.DiscoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableUnpaidDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidDetail.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableUnpaidDetail.OrderDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UnpaidDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UnpaidDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UnpaidDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOriginal As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columndisco As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columndue As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("UnpaidSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OriginalColumn As DataColumn
            Get
                Return Me.columnOriginal
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property discoColumn As DataColumn
            Get
                Return Me.columndisco
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UnpaidSummeryRow
            Get
                Return CType(Me.Rows(index),UnpaidSummeryRow)
            End Get
        End Property
        
        Public Event UnpaidSummeryRowChanged As UnpaidSummeryRowChangeEventHandler
        
        Public Event UnpaidSummeryRowChanging As UnpaidSummeryRowChangeEventHandler
        
        Public Event UnpaidSummeryRowDeleted As UnpaidSummeryRowChangeEventHandler
        
        Public Event UnpaidSummeryRowDeleting As UnpaidSummeryRowChangeEventHandler
        
        Public Overloads Sub AddUnpaidSummeryRow(ByVal row As UnpaidSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUnpaidSummeryRow(ByVal Original As Double, ByVal pay As Decimal, ByVal AmountDue As Double, ByVal disco As Double, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal due As Date, ByVal flag As Boolean) As UnpaidSummeryRow
            Dim rowUnpaidSummeryRow As UnpaidSummeryRow = CType(Me.NewRow,UnpaidSummeryRow)
            rowUnpaidSummeryRow.ItemArray = New Object() {Original, pay, AmountDue, disco, cod_vendor, desc_vendor, due, flag}
            Me.Rows.Add(rowUnpaidSummeryRow)
            Return rowUnpaidSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UnpaidSummeryDataTable = CType(MyBase.Clone,UnpaidSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UnpaidSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOriginal = Me.Columns("Original")
            Me.columnpay = Me.Columns("pay")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columndisco = Me.Columns("disco")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columndue = Me.Columns("due")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnOriginal = New DataColumn("Original", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginal)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columndisco = New DataColumn("disco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndisco)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columndue = New DataColumn("due", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOriginal.ReadOnly = true
            Me.columnpay.ReadOnly = true
            Me.columnAmountDue.ReadOnly = true
            Me.columndisco.ReadOnly = true
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function NewUnpaidSummeryRow() As UnpaidSummeryRow
            Return CType(Me.NewRow,UnpaidSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UnpaidSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UnpaidSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UnpaidSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent UnpaidSummeryRowChanged(Me, New UnpaidSummeryRowChangeEvent(CType(e.Row,UnpaidSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UnpaidSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent UnpaidSummeryRowChanging(Me, New UnpaidSummeryRowChangeEvent(CType(e.Row,UnpaidSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UnpaidSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent UnpaidSummeryRowDeleted(Me, New UnpaidSummeryRowChangeEvent(CType(e.Row,UnpaidSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UnpaidSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent UnpaidSummeryRowDeleting(Me, New UnpaidSummeryRowChangeEvent(CType(e.Row,UnpaidSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUnpaidSummeryRow(ByVal row As UnpaidSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidSummeryRow
        Inherits DataRow
        
        Private tableUnpaidSummery As UnpaidSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUnpaidSummery = CType(Me.Table,UnpaidSummeryDataTable)
        End Sub
        
        Public Property Original As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.OriginalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.OriginalColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.payColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.AmountDueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property disco As Double
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.discoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.discoColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableUnpaidSummery.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableUnpaidSummery.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property due As Date
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.dueColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.dueColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUnpaidSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUnpaidSummery.flagColumn) = value
            End Set
        End Property
        
        Public Function IsOriginalNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.OriginalColumn)
        End Function
        
        Public Sub SetOriginalNull()
            Me(Me.tableUnpaidSummery.OriginalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tableUnpaidSummery.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableUnpaidSummery.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscoNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.discoColumn)
        End Function
        
        Public Sub SetdiscoNull()
            Me(Me.tableUnpaidSummery.discoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableUnpaidSummery.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableUnpaidSummery.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableUnpaidSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableUnpaidSummery.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UnpaidSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UnpaidSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UnpaidSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UnpaidSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnOriginal As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columndisco As DataColumn
        
        Private columndue As DataColumn
        
        Private columnPastDue As DataColumn
        
        Private columnRemain10Day As DataColumn
        
        Private columnRemain30Day As DataColumn
        
        Private columnRemain60Day As DataColumn
        
        Private columnRemain90Day As DataColumn
        
        Private columnOver90Day As DataColumn
        
        Private columnref As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("CashDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property OriginalColumn As DataColumn
            Get
                Return Me.columnOriginal
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property discoColumn As DataColumn
            Get
                Return Me.columndisco
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property PastDueColumn As DataColumn
            Get
                Return Me.columnPastDue
            End Get
        End Property
        
        Friend ReadOnly Property Remain10DayColumn As DataColumn
            Get
                Return Me.columnRemain10Day
            End Get
        End Property
        
        Friend ReadOnly Property Remain30DayColumn As DataColumn
            Get
                Return Me.columnRemain30Day
            End Get
        End Property
        
        Friend ReadOnly Property Remain60DayColumn As DataColumn
            Get
                Return Me.columnRemain60Day
            End Get
        End Property
        
        Friend ReadOnly Property Remain90DayColumn As DataColumn
            Get
                Return Me.columnRemain90Day
            End Get
        End Property
        
        Friend ReadOnly Property Over90DayColumn As DataColumn
            Get
                Return Me.columnOver90Day
            End Get
        End Property
        
        Friend ReadOnly Property refColumn As DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CashDetailRow
            Get
                Return CType(Me.Rows(index),CashDetailRow)
            End Get
        End Property
        
        Public Event CashDetailRowChanged As CashDetailRowChangeEventHandler
        
        Public Event CashDetailRowChanging As CashDetailRowChangeEventHandler
        
        Public Event CashDetailRowDeleted As CashDetailRowChangeEventHandler
        
        Public Event CashDetailRowDeleting As CashDetailRowChangeEventHandler
        
        Public Overloads Sub AddCashDetailRow(ByVal row As CashDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCashDetailRow(ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal Original As Double, ByVal pay As Decimal, ByVal AmountDue As Double, ByVal disco As Double, ByVal due As Date, ByVal PastDue As Double, ByVal Remain10Day As Double, ByVal Remain30Day As Double, ByVal Remain60Day As Double, ByVal Remain90Day As Double, ByVal Over90Day As Double, ByVal ref As String, ByVal flag As Boolean) As CashDetailRow
            Dim rowCashDetailRow As CashDetailRow = CType(Me.NewRow,CashDetailRow)
            rowCashDetailRow.ItemArray = New Object() {cod_vendor, desc_vendor, Original, pay, AmountDue, disco, due, PastDue, Remain10Day, Remain30Day, Remain60Day, Remain90Day, Over90Day, ref, flag}
            Me.Rows.Add(rowCashDetailRow)
            Return rowCashDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CashDetailDataTable = CType(MyBase.Clone,CashDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CashDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnOriginal = Me.Columns("Original")
            Me.columnpay = Me.Columns("pay")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columndisco = Me.Columns("disco")
            Me.columndue = Me.Columns("due")
            Me.columnPastDue = Me.Columns("PastDue")
            Me.columnRemain10Day = Me.Columns("Remain10Day")
            Me.columnRemain30Day = Me.Columns("Remain30Day")
            Me.columnRemain60Day = Me.Columns("Remain60Day")
            Me.columnRemain90Day = Me.Columns("Remain90Day")
            Me.columnOver90Day = Me.Columns("Over90Day")
            Me.columnref = Me.Columns("ref")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnOriginal = New DataColumn("Original", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginal)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columndisco = New DataColumn("disco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndisco)
            Me.columndue = New DataColumn("due", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnPastDue = New DataColumn("PastDue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPastDue)
            Me.columnRemain10Day = New DataColumn("Remain10Day", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemain10Day)
            Me.columnRemain30Day = New DataColumn("Remain30Day", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemain30Day)
            Me.columnRemain60Day = New DataColumn("Remain60Day", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemain60Day)
            Me.columnRemain90Day = New DataColumn("Remain90Day", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemain90Day)
            Me.columnOver90Day = New DataColumn("Over90Day", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOver90Day)
            Me.columnref = New DataColumn("ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnPastDue.ReadOnly = true
            Me.columnRemain10Day.ReadOnly = true
            Me.columnRemain30Day.ReadOnly = true
            Me.columnRemain60Day.ReadOnly = true
            Me.columnRemain90Day.ReadOnly = true
            Me.columnOver90Day.ReadOnly = true
        End Sub
        
        Public Function NewCashDetailRow() As CashDetailRow
            Return CType(Me.NewRow,CashDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CashDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CashDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CashDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CashDetailRowChanged(Me, New CashDetailRowChangeEvent(CType(e.Row,CashDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CashDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CashDetailRowChanging(Me, New CashDetailRowChangeEvent(CType(e.Row,CashDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CashDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CashDetailRowDeleted(Me, New CashDetailRowChangeEvent(CType(e.Row,CashDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CashDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CashDetailRowDeleting(Me, New CashDetailRowChangeEvent(CType(e.Row,CashDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCashDetailRow(ByVal row As CashDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashDetailRow
        Inherits DataRow
        
        Private tableCashDetail As CashDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCashDetail = CType(Me.Table,CashDetailDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableCashDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableCashDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property Original As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.OriginalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.OriginalColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.payColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.AmountDueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property disco As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.discoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.discoColumn) = value
            End Set
        End Property
        
        Public Property due As Date
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.dueColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.dueColumn) = value
            End Set
        End Property
        
        Public Property PastDue As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.PastDueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.PastDueColumn) = value
            End Set
        End Property
        
        Public Property Remain10Day As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.Remain10DayColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.Remain10DayColumn) = value
            End Set
        End Property
        
        Public Property Remain30Day As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.Remain30DayColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.Remain30DayColumn) = value
            End Set
        End Property
        
        Public Property Remain60Day As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.Remain60DayColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.Remain60DayColumn) = value
            End Set
        End Property
        
        Public Property Remain90Day As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.Remain90DayColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.Remain90DayColumn) = value
            End Set
        End Property
        
        Public Property Over90Day As Double
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.Over90DayColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.Over90DayColumn) = value
            End Set
        End Property
        
        Public Property ref As String
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.refColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.refColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCashDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashDetail.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableCashDetail.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.OriginalColumn)
        End Function
        
        Public Sub SetOriginalNull()
            Me(Me.tableCashDetail.OriginalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tableCashDetail.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableCashDetail.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscoNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.discoColumn)
        End Function
        
        Public Sub SetdiscoNull()
            Me(Me.tableCashDetail.discoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableCashDetail.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPastDueNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.PastDueColumn)
        End Function
        
        Public Sub SetPastDueNull()
            Me(Me.tableCashDetail.PastDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemain10DayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.Remain10DayColumn)
        End Function
        
        Public Sub SetRemain10DayNull()
            Me(Me.tableCashDetail.Remain10DayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemain30DayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.Remain30DayColumn)
        End Function
        
        Public Sub SetRemain30DayNull()
            Me(Me.tableCashDetail.Remain30DayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemain60DayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.Remain60DayColumn)
        End Function
        
        Public Sub SetRemain60DayNull()
            Me(Me.tableCashDetail.Remain60DayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemain90DayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.Remain90DayColumn)
        End Function
        
        Public Sub SetRemain90DayNull()
            Me(Me.tableCashDetail.Remain90DayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOver90DayNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.Over90DayColumn)
        End Function
        
        Public Sub SetOver90DayNull()
            Me(Me.tableCashDetail.Over90DayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.refColumn)
        End Function
        
        Public Sub SetrefNull()
            Me(Me.tableCashDetail.refColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCashDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCashDetail.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CashDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CashDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CashDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CashDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditSummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnamount_credit As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("CreditSummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property amount_creditColumn As DataColumn
            Get
                Return Me.columnamount_credit
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditSummaryRow
            Get
                Return CType(Me.Rows(index),CreditSummaryRow)
            End Get
        End Property
        
        Public Event CreditSummaryRowChanged As CreditSummaryRowChangeEventHandler
        
        Public Event CreditSummaryRowChanging As CreditSummaryRowChangeEventHandler
        
        Public Event CreditSummaryRowDeleted As CreditSummaryRowChangeEventHandler
        
        Public Event CreditSummaryRowDeleting As CreditSummaryRowChangeEventHandler
        
        Public Overloads Sub AddCreditSummaryRow(ByVal row As CreditSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCreditSummaryRow(ByVal amount_credit As Decimal, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal flag As Boolean) As CreditSummaryRow
            Dim rowCreditSummaryRow As CreditSummaryRow = CType(Me.NewRow,CreditSummaryRow)
            rowCreditSummaryRow.ItemArray = New Object() {amount_credit, cod_vendor, desc_vendor, flag}
            Me.Rows.Add(rowCreditSummaryRow)
            Return rowCreditSummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CreditSummaryDataTable = CType(MyBase.Clone,CreditSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CreditSummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnamount_credit = Me.Columns("amount_credit")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnamount_credit = New DataColumn("amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_credit)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnamount_credit.ReadOnly = true
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function NewCreditSummaryRow() As CreditSummaryRow
            Return CType(Me.NewRow,CreditSummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CreditSummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CreditSummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditSummaryRowChanged(Me, New CreditSummaryRowChangeEvent(CType(e.Row,CreditSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditSummaryRowChanging(Me, New CreditSummaryRowChangeEvent(CType(e.Row,CreditSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditSummaryRowDeleted(Me, New CreditSummaryRowChangeEvent(CType(e.Row,CreditSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditSummaryRowDeleting(Me, New CreditSummaryRowChangeEvent(CType(e.Row,CreditSummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCreditSummaryRow(ByVal row As CreditSummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditSummaryRow
        Inherits DataRow
        
        Private tableCreditSummary As CreditSummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditSummary = CType(Me.Table,CreditSummaryDataTable)
        End Sub
        
        Public Property amount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCreditSummary.amount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSummary.amount_creditColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableCreditSummary.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableCreditSummary.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditSummary.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSummary.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCreditSummary.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditSummary.flagColumn) = value
            End Set
        End Property
        
        Public Function Isamount_creditNull() As Boolean
            Return Me.IsNull(Me.tableCreditSummary.amount_creditColumn)
        End Function
        
        Public Sub Setamount_creditNull()
            Me(Me.tableCreditSummary.amount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableCreditSummary.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableCreditSummary.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCreditSummary.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCreditSummary.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditSummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CreditSummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CreditSummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CreditSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnamount_credit As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columndate_credit As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Private columnref_no As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("CreditDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property amount_creditColumn As DataColumn
            Get
                Return Me.columnamount_credit
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property date_creditColumn As DataColumn
            Get
                Return Me.columndate_credit
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property ref_noColumn As DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CreditDetailRow
            Get
                Return CType(Me.Rows(index),CreditDetailRow)
            End Get
        End Property
        
        Public Event CreditDetailRowChanged As CreditDetailRowChangeEventHandler
        
        Public Event CreditDetailRowChanging As CreditDetailRowChangeEventHandler
        
        Public Event CreditDetailRowDeleted As CreditDetailRowChangeEventHandler
        
        Public Event CreditDetailRowDeleting As CreditDetailRowChangeEventHandler
        
        Public Overloads Sub AddCreditDetailRow(ByVal row As CreditDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCreditDetailRow(ByVal amount_credit As Decimal, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal date_credit As Date, ByVal Remark As String, ByVal due_date As Date, ByVal ref_no As String, ByVal flag As Boolean) As CreditDetailRow
            Dim rowCreditDetailRow As CreditDetailRow = CType(Me.NewRow,CreditDetailRow)
            rowCreditDetailRow.ItemArray = New Object() {amount_credit, cod_vendor, desc_vendor, date_credit, Remark, due_date, Nothing, ref_no, flag}
            Me.Rows.Add(rowCreditDetailRow)
            Return rowCreditDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CreditDetailDataTable = CType(MyBase.Clone,CreditDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CreditDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnamount_credit = Me.Columns("amount_credit")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columndate_credit = Me.Columns("date_credit")
            Me.columnRemark = Me.Columns("Remark")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columnref_no = Me.Columns("ref_no")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnamount_credit = New DataColumn("amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_credit)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columndate_credit = New DataColumn("date_credit", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_credit)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columndue_date = New DataColumn("due_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnref_no = New DataColumn("ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref_no)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnamount_credit.ReadOnly = true
            Me.columncod_vendor.AllowDBNull = false
            Me.columnid_vendor_credit.AutoIncrement = true
            Me.columnid_vendor_credit.AllowDBNull = false
            Me.columnid_vendor_credit.ReadOnly = true
        End Sub
        
        Public Function NewCreditDetailRow() As CreditDetailRow
            Return CType(Me.NewRow,CreditDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CreditDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CreditDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CreditDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CreditDetailRowChanged(Me, New CreditDetailRowChangeEvent(CType(e.Row,CreditDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CreditDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CreditDetailRowChanging(Me, New CreditDetailRowChangeEvent(CType(e.Row,CreditDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CreditDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CreditDetailRowDeleted(Me, New CreditDetailRowChangeEvent(CType(e.Row,CreditDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CreditDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CreditDetailRowDeleting(Me, New CreditDetailRowChangeEvent(CType(e.Row,CreditDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCreditDetailRow(ByVal row As CreditDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditDetailRow
        Inherits DataRow
        
        Private tableCreditDetail As CreditDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCreditDetail = CType(Me.Table,CreditDetailDataTable)
        End Sub
        
        Public Property amount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.amount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.amount_creditColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableCreditDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableCreditDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property date_credit As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.date_creditColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.date_creditColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.RemarkColumn) = value
            End Set
        End Property
        
        Public Property due_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.due_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.due_dateColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tableCreditDetail.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tableCreditDetail.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.ref_noColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCreditDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCreditDetail.flagColumn) = value
            End Set
        End Property
        
        Public Function Isamount_creditNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.amount_creditColumn)
        End Function
        
        Public Sub Setamount_creditNull()
            Me(Me.tableCreditDetail.amount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableCreditDetail.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_creditNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.date_creditColumn)
        End Function
        
        Public Sub Setdate_creditNull()
            Me(Me.tableCreditDetail.date_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableCreditDetail.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableCreditDetail.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.ref_noColumn)
        End Function
        
        Public Sub Setref_noNull()
            Me(Me.tableCreditDetail.ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCreditDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCreditDetail.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CreditDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CreditDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CreditDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CreditDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndesc_vendor As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnid_receive_ref As DataColumn
        
        Private columndate_receive As DataColumn
        
        Private columnvendor_ref_no As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnTotalPrice As DataColumn
        
        Private columnTotalQty As DataColumn
        
        Private columnreceipt_bill_date As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("InventoryPurchasesDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property date_receiveColumn As DataColumn
            Get
                Return Me.columndate_receive
            End Get
        End Property
        
        Friend ReadOnly Property vendor_ref_noColumn As DataColumn
            Get
                Return Me.columnvendor_ref_no
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property TotalPriceColumn As DataColumn
            Get
                Return Me.columnTotalPrice
            End Get
        End Property
        
        Friend ReadOnly Property TotalQtyColumn As DataColumn
            Get
                Return Me.columnTotalQty
            End Get
        End Property
        
        Friend ReadOnly Property receipt_bill_dateColumn As DataColumn
            Get
                Return Me.columnreceipt_bill_date
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryPurchasesDetailRow
            Get
                Return CType(Me.Rows(index),InventoryPurchasesDetailRow)
            End Get
        End Property
        
        Public Event InventoryPurchasesDetailRowChanged As InventoryPurchasesDetailRowChangeEventHandler
        
        Public Event InventoryPurchasesDetailRowChanging As InventoryPurchasesDetailRowChangeEventHandler
        
        Public Event InventoryPurchasesDetailRowDeleted As InventoryPurchasesDetailRowChangeEventHandler
        
        Public Event InventoryPurchasesDetailRowDeleting As InventoryPurchasesDetailRowChangeEventHandler
        
        Public Overloads Sub AddInventoryPurchasesDetailRow(ByVal row As InventoryPurchasesDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryPurchasesDetailRow(ByVal desc_vendor As String, ByVal cod_vendor As String, ByVal id_receive_ref As String, ByVal date_receive As Date, ByVal vendor_ref_no As String, ByVal po_no As String, ByVal TotalPrice As Double, ByVal TotalQty As Double, ByVal receipt_bill_date As Date, ByVal flag As Boolean) As InventoryPurchasesDetailRow
            Dim rowInventoryPurchasesDetailRow As InventoryPurchasesDetailRow = CType(Me.NewRow,InventoryPurchasesDetailRow)
            rowInventoryPurchasesDetailRow.ItemArray = New Object() {desc_vendor, cod_vendor, id_receive_ref, date_receive, vendor_ref_no, po_no, TotalPrice, TotalQty, receipt_bill_date, flag}
            Me.Rows.Add(rowInventoryPurchasesDetailRow)
            Return rowInventoryPurchasesDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryPurchasesDetailDataTable = CType(MyBase.Clone,InventoryPurchasesDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryPurchasesDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columndate_receive = Me.Columns("date_receive")
            Me.columnvendor_ref_no = Me.Columns("vendor_ref_no")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnTotalPrice = Me.Columns("TotalPrice")
            Me.columnTotalQty = Me.Columns("TotalQty")
            Me.columnreceipt_bill_date = Me.Columns("receipt_bill_date")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columndate_receive = New DataColumn("date_receive", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive)
            Me.columnvendor_ref_no = New DataColumn("vendor_ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_ref_no)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnTotalPrice = New DataColumn("TotalPrice", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalPrice)
            Me.columnTotalQty = New DataColumn("TotalQty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalQty)
            Me.columnreceipt_bill_date = New DataColumn("receipt_bill_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceipt_bill_date)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnid_receive_ref.AllowDBNull = false
        End Sub
        
        Public Function NewInventoryPurchasesDetailRow() As InventoryPurchasesDetailRow
            Return CType(Me.NewRow,InventoryPurchasesDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryPurchasesDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryPurchasesDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryPurchasesDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesDetailRowChanged(Me, New InventoryPurchasesDetailRowChangeEvent(CType(e.Row,InventoryPurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryPurchasesDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesDetailRowChanging(Me, New InventoryPurchasesDetailRowChangeEvent(CType(e.Row,InventoryPurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryPurchasesDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesDetailRowDeleted(Me, New InventoryPurchasesDetailRowChangeEvent(CType(e.Row,InventoryPurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryPurchasesDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesDetailRowDeleting(Me, New InventoryPurchasesDetailRowChangeEvent(CType(e.Row,InventoryPurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryPurchasesDetailRow(ByVal row As InventoryPurchasesDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesDetailRow
        Inherits DataRow
        
        Private tableInventoryPurchasesDetail As InventoryPurchasesDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventoryPurchasesDetail = CType(Me.Table,InventoryPurchasesDetailDataTable)
        End Sub
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableInventoryPurchasesDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInventoryPurchasesDetail.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property date_receive As Date
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.date_receiveColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.date_receiveColumn) = value
            End Set
        End Property
        
        Public Property vendor_ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.vendor_ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.vendor_ref_noColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.po_noColumn) = value
            End Set
        End Property
        
        Public Property TotalPrice As Double
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.TotalPriceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.TotalPriceColumn) = value
            End Set
        End Property
        
        Public Property TotalQty As Double
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.TotalQtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.TotalQtyColumn) = value
            End Set
        End Property
        
        Public Property receipt_bill_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.receipt_bill_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.receipt_bill_dateColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesDetail.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableInventoryPurchasesDetail.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_receiveNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.date_receiveColumn)
        End Function
        
        Public Sub Setdate_receiveNull()
            Me(Me.tableInventoryPurchasesDetail.date_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_ref_noNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.vendor_ref_noColumn)
        End Function
        
        Public Sub Setvendor_ref_noNull()
            Me(Me.tableInventoryPurchasesDetail.vendor_ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableInventoryPurchasesDetail.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalPriceNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.TotalPriceColumn)
        End Function
        
        Public Sub SetTotalPriceNull()
            Me(Me.tableInventoryPurchasesDetail.TotalPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalQtyNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.TotalQtyColumn)
        End Function
        
        Public Sub SetTotalQtyNull()
            Me(Me.tableInventoryPurchasesDetail.TotalQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceipt_bill_dateNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.receipt_bill_dateColumn)
        End Function
        
        Public Sub Setreceipt_bill_dateNull()
            Me(Me.tableInventoryPurchasesDetail.receipt_bill_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableInventoryPurchasesDetail.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryPurchasesDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryPurchasesDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryPurchasesDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnItemNo As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnExtPrice As DataColumn
        
        Private columnExtCost As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnVendorRef As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnLine As DataColumn
        
        Friend Sub New()
            MyBase.New("OutsidePurchasesDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property ItemNoColumn As DataColumn
            Get
                Return Me.columnItemNo
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property ExtPriceColumn As DataColumn
            Get
                Return Me.columnExtPrice
            End Get
        End Property
        
        Friend ReadOnly Property ExtCostColumn As DataColumn
            Get
                Return Me.columnExtCost
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property VendorRefColumn As DataColumn
            Get
                Return Me.columnVendorRef
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OutsidePurchasesDetailRow
            Get
                Return CType(Me.Rows(index),OutsidePurchasesDetailRow)
            End Get
        End Property
        
        Public Event OutsidePurchasesDetailRowChanged As OutsidePurchasesDetailRowChangeEventHandler
        
        Public Event OutsidePurchasesDetailRowChanging As OutsidePurchasesDetailRowChangeEventHandler
        
        Public Event OutsidePurchasesDetailRowDeleted As OutsidePurchasesDetailRowChangeEventHandler
        
        Public Event OutsidePurchasesDetailRowDeleting As OutsidePurchasesDetailRowChangeEventHandler
        
        Public Overloads Sub AddOutsidePurchasesDetailRow(ByVal row As OutsidePurchasesDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOutsidePurchasesDetailRow(ByVal id_service_center As String, ByVal ItemNo As String, ByVal ItemDesc As String, ByVal qty As Decimal, ByVal ExtPrice As Decimal, ByVal ExtCost As Decimal, ByVal po_no As String, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal VendorRef As String, ByVal flag As Boolean, ByVal Line As String) As OutsidePurchasesDetailRow
            Dim rowOutsidePurchasesDetailRow As OutsidePurchasesDetailRow = CType(Me.NewRow,OutsidePurchasesDetailRow)
            rowOutsidePurchasesDetailRow.ItemArray = New Object() {id_service_center, ItemNo, ItemDesc, qty, ExtPrice, ExtCost, po_no, cod_vendor, desc_vendor, VendorRef, flag, Line}
            Me.Rows.Add(rowOutsidePurchasesDetailRow)
            Return rowOutsidePurchasesDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OutsidePurchasesDetailDataTable = CType(MyBase.Clone,OutsidePurchasesDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OutsidePurchasesDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnItemNo = Me.Columns("ItemNo")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnqty = Me.Columns("qty")
            Me.columnExtPrice = Me.Columns("ExtPrice")
            Me.columnExtCost = Me.Columns("ExtCost")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnVendorRef = Me.Columns("VendorRef")
            Me.columnflag = Me.Columns("flag")
            Me.columnLine = Me.Columns("Line")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnItemNo = New DataColumn("ItemNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemNo)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnExtPrice = New DataColumn("ExtPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtPrice)
            Me.columnExtCost = New DataColumn("ExtCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtCost)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnVendorRef = New DataColumn("VendorRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVendorRef)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnid_service_center.AllowDBNull = false
            Me.columnqty.AllowDBNull = false
        End Sub
        
        Public Function NewOutsidePurchasesDetailRow() As OutsidePurchasesDetailRow
            Return CType(Me.NewRow,OutsidePurchasesDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OutsidePurchasesDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OutsidePurchasesDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OutsidePurchasesDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesDetailRowChanged(Me, New OutsidePurchasesDetailRowChangeEvent(CType(e.Row,OutsidePurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OutsidePurchasesDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesDetailRowChanging(Me, New OutsidePurchasesDetailRowChangeEvent(CType(e.Row,OutsidePurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OutsidePurchasesDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesDetailRowDeleted(Me, New OutsidePurchasesDetailRowChangeEvent(CType(e.Row,OutsidePurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OutsidePurchasesDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesDetailRowDeleting(Me, New OutsidePurchasesDetailRowChangeEvent(CType(e.Row,OutsidePurchasesDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOutsidePurchasesDetailRow(ByVal row As OutsidePurchasesDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesDetailRow
        Inherits DataRow
        
        Private tableOutsidePurchasesDetail As OutsidePurchasesDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOutsidePurchasesDetail = CType(Me.Table,OutsidePurchasesDetailDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableOutsidePurchasesDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property ItemNo As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.ItemNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.ItemNoColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.ItemDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableOutsidePurchasesDetail.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.qtyColumn) = value
            End Set
        End Property
        
        Public Property ExtPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.ExtPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.ExtPriceColumn) = value
            End Set
        End Property
        
        Public Property ExtCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.ExtCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.ExtCostColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.po_noColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property VendorRef As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.VendorRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.VendorRefColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesDetail.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesDetail.LineColumn) = value
            End Set
        End Property
        
        Public Function IsItemNoNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.ItemNoColumn)
        End Function
        
        Public Sub SetItemNoNull()
            Me(Me.tableOutsidePurchasesDetail.ItemNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.ItemDescColumn)
        End Function
        
        Public Sub SetItemDescNull()
            Me(Me.tableOutsidePurchasesDetail.ItemDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtPriceNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.ExtPriceColumn)
        End Function
        
        Public Sub SetExtPriceNull()
            Me(Me.tableOutsidePurchasesDetail.ExtPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtCostNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.ExtCostColumn)
        End Function
        
        Public Sub SetExtCostNull()
            Me(Me.tableOutsidePurchasesDetail.ExtCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableOutsidePurchasesDetail.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableOutsidePurchasesDetail.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableOutsidePurchasesDetail.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVendorRefNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.VendorRefColumn)
        End Function
        
        Public Sub SetVendorRefNull()
            Me(Me.tableOutsidePurchasesDetail.VendorRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableOutsidePurchasesDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesDetail.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableOutsidePurchasesDetail.LineColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OutsidePurchasesDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OutsidePurchasesDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OutsidePurchasesDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesSummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndesc_vendor As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnTotalPrice As DataColumn
        
        Private columnTotalQty As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("InventoryPurchasesSummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property TotalPriceColumn As DataColumn
            Get
                Return Me.columnTotalPrice
            End Get
        End Property
        
        Friend ReadOnly Property TotalQtyColumn As DataColumn
            Get
                Return Me.columnTotalQty
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryPurchasesSummaryRow
            Get
                Return CType(Me.Rows(index),InventoryPurchasesSummaryRow)
            End Get
        End Property
        
        Public Event InventoryPurchasesSummaryRowChanged As InventoryPurchasesSummaryRowChangeEventHandler
        
        Public Event InventoryPurchasesSummaryRowChanging As InventoryPurchasesSummaryRowChangeEventHandler
        
        Public Event InventoryPurchasesSummaryRowDeleted As InventoryPurchasesSummaryRowChangeEventHandler
        
        Public Event InventoryPurchasesSummaryRowDeleting As InventoryPurchasesSummaryRowChangeEventHandler
        
        Public Overloads Sub AddInventoryPurchasesSummaryRow(ByVal row As InventoryPurchasesSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryPurchasesSummaryRow(ByVal desc_vendor As String, ByVal cod_vendor As String, ByVal TotalPrice As Double, ByVal TotalQty As Double, ByVal flag As Boolean) As InventoryPurchasesSummaryRow
            Dim rowInventoryPurchasesSummaryRow As InventoryPurchasesSummaryRow = CType(Me.NewRow,InventoryPurchasesSummaryRow)
            rowInventoryPurchasesSummaryRow.ItemArray = New Object() {desc_vendor, cod_vendor, TotalPrice, TotalQty, flag}
            Me.Rows.Add(rowInventoryPurchasesSummaryRow)
            Return rowInventoryPurchasesSummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryPurchasesSummaryDataTable = CType(MyBase.Clone,InventoryPurchasesSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryPurchasesSummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnTotalPrice = Me.Columns("TotalPrice")
            Me.columnTotalQty = Me.Columns("TotalQty")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnTotalPrice = New DataColumn("TotalPrice", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalPrice)
            Me.columnTotalQty = New DataColumn("TotalQty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalQty)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function NewInventoryPurchasesSummaryRow() As InventoryPurchasesSummaryRow
            Return CType(Me.NewRow,InventoryPurchasesSummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryPurchasesSummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryPurchasesSummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryPurchasesSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesSummaryRowChanged(Me, New InventoryPurchasesSummaryRowChangeEvent(CType(e.Row,InventoryPurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryPurchasesSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesSummaryRowChanging(Me, New InventoryPurchasesSummaryRowChangeEvent(CType(e.Row,InventoryPurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryPurchasesSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesSummaryRowDeleted(Me, New InventoryPurchasesSummaryRowChangeEvent(CType(e.Row,InventoryPurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryPurchasesSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryPurchasesSummaryRowDeleting(Me, New InventoryPurchasesSummaryRowChangeEvent(CType(e.Row,InventoryPurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryPurchasesSummaryRow(ByVal row As InventoryPurchasesSummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesSummaryRow
        Inherits DataRow
        
        Private tableInventoryPurchasesSummary As InventoryPurchasesSummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventoryPurchasesSummary = CType(Me.Table,InventoryPurchasesSummaryDataTable)
        End Sub
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesSummary.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesSummary.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableInventoryPurchasesSummary.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableInventoryPurchasesSummary.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property TotalPrice As Double
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesSummary.TotalPriceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesSummary.TotalPriceColumn) = value
            End Set
        End Property
        
        Public Property TotalQty As Double
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesSummary.TotalQtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesSummary.TotalQtyColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInventoryPurchasesSummary.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryPurchasesSummary.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesSummary.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableInventoryPurchasesSummary.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalPriceNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesSummary.TotalPriceColumn)
        End Function
        
        Public Sub SetTotalPriceNull()
            Me(Me.tableInventoryPurchasesSummary.TotalPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalQtyNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesSummary.TotalQtyColumn)
        End Function
        
        Public Sub SetTotalQtyNull()
            Me(Me.tableInventoryPurchasesSummary.TotalQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableInventoryPurchasesSummary.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableInventoryPurchasesSummary.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryPurchasesSummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryPurchasesSummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryPurchasesSummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryPurchasesSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesSummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnqty As DataColumn
        
        Private columnExtPrice As DataColumn
        
        Private columnExtCost As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("OutsidePurchasesSummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property ExtPriceColumn As DataColumn
            Get
                Return Me.columnExtPrice
            End Get
        End Property
        
        Friend ReadOnly Property ExtCostColumn As DataColumn
            Get
                Return Me.columnExtCost
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OutsidePurchasesSummaryRow
            Get
                Return CType(Me.Rows(index),OutsidePurchasesSummaryRow)
            End Get
        End Property
        
        Public Event OutsidePurchasesSummaryRowChanged As OutsidePurchasesSummaryRowChangeEventHandler
        
        Public Event OutsidePurchasesSummaryRowChanging As OutsidePurchasesSummaryRowChangeEventHandler
        
        Public Event OutsidePurchasesSummaryRowDeleted As OutsidePurchasesSummaryRowChangeEventHandler
        
        Public Event OutsidePurchasesSummaryRowDeleting As OutsidePurchasesSummaryRowChangeEventHandler
        
        Public Overloads Sub AddOutsidePurchasesSummaryRow(ByVal row As OutsidePurchasesSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOutsidePurchasesSummaryRow(ByVal qty As Decimal, ByVal ExtPrice As Decimal, ByVal ExtCost As Decimal, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal flag As Boolean) As OutsidePurchasesSummaryRow
            Dim rowOutsidePurchasesSummaryRow As OutsidePurchasesSummaryRow = CType(Me.NewRow,OutsidePurchasesSummaryRow)
            rowOutsidePurchasesSummaryRow.ItemArray = New Object() {qty, ExtPrice, ExtCost, cod_vendor, desc_vendor, flag}
            Me.Rows.Add(rowOutsidePurchasesSummaryRow)
            Return rowOutsidePurchasesSummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OutsidePurchasesSummaryDataTable = CType(MyBase.Clone,OutsidePurchasesSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OutsidePurchasesSummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnqty = Me.Columns("qty")
            Me.columnExtPrice = Me.Columns("ExtPrice")
            Me.columnExtCost = Me.Columns("ExtCost")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnExtPrice = New DataColumn("ExtPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtPrice)
            Me.columnExtCost = New DataColumn("ExtCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtCost)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnqty.AllowDBNull = false
        End Sub
        
        Public Function NewOutsidePurchasesSummaryRow() As OutsidePurchasesSummaryRow
            Return CType(Me.NewRow,OutsidePurchasesSummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OutsidePurchasesSummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OutsidePurchasesSummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OutsidePurchasesSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesSummaryRowChanged(Me, New OutsidePurchasesSummaryRowChangeEvent(CType(e.Row,OutsidePurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OutsidePurchasesSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesSummaryRowChanging(Me, New OutsidePurchasesSummaryRowChangeEvent(CType(e.Row,OutsidePurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OutsidePurchasesSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesSummaryRowDeleted(Me, New OutsidePurchasesSummaryRowChangeEvent(CType(e.Row,OutsidePurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OutsidePurchasesSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent OutsidePurchasesSummaryRowDeleting(Me, New OutsidePurchasesSummaryRowChangeEvent(CType(e.Row,OutsidePurchasesSummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOutsidePurchasesSummaryRow(ByVal row As OutsidePurchasesSummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesSummaryRow
        Inherits DataRow
        
        Private tableOutsidePurchasesSummary As OutsidePurchasesSummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOutsidePurchasesSummary = CType(Me.Table,OutsidePurchasesSummaryDataTable)
        End Sub
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableOutsidePurchasesSummary.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.qtyColumn) = value
            End Set
        End Property
        
        Public Property ExtPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesSummary.ExtPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.ExtPriceColumn) = value
            End Set
        End Property
        
        Public Property ExtCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesSummary.ExtCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.ExtCostColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesSummary.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesSummary.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOutsidePurchasesSummary.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsidePurchasesSummary.flagColumn) = value
            End Set
        End Property
        
        Public Function IsExtPriceNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesSummary.ExtPriceColumn)
        End Function
        
        Public Sub SetExtPriceNull()
            Me(Me.tableOutsidePurchasesSummary.ExtPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtCostNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesSummary.ExtCostColumn)
        End Function
        
        Public Sub SetExtCostNull()
            Me(Me.tableOutsidePurchasesSummary.ExtCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesSummary.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableOutsidePurchasesSummary.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesSummary.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableOutsidePurchasesSummary.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableOutsidePurchasesSummary.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableOutsidePurchasesSummary.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsidePurchasesSummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OutsidePurchasesSummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OutsidePurchasesSummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OutsidePurchasesSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PaymentDtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private column_date As DataColumn
        
        Private columnOriginal As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnref As DataColumn
        
        Private columnstore As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnname_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("PaymentDtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property OriginalColumn As DataColumn
            Get
                Return Me.columnOriginal
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property refColumn As DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        Friend ReadOnly Property storeColumn As DataColumn
            Get
                Return Me.columnstore
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PaymentDtlRow
            Get
                Return CType(Me.Rows(index),PaymentDtlRow)
            End Get
        End Property
        
        Public Event PaymentDtlRowChanged As PaymentDtlRowChangeEventHandler
        
        Public Event PaymentDtlRowChanging As PaymentDtlRowChangeEventHandler
        
        Public Event PaymentDtlRowDeleted As PaymentDtlRowChangeEventHandler
        
        Public Event PaymentDtlRowDeleting As PaymentDtlRowChangeEventHandler
        
        Public Overloads Sub AddPaymentDtlRow(ByVal row As PaymentDtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPaymentDtlRow(ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal _date As Date, ByVal Original As Decimal, ByVal pay As Decimal, ByVal ref As String, ByVal store As String, ByVal date_of_check As Date, ByVal no_of_check As String, ByVal flag As Boolean, ByVal name_bank As String) As PaymentDtlRow
            Dim rowPaymentDtlRow As PaymentDtlRow = CType(Me.NewRow,PaymentDtlRow)
            rowPaymentDtlRow.ItemArray = New Object() {cod_vendor, desc_vendor, _date, Original, pay, ref, store, date_of_check, no_of_check, flag, name_bank}
            Me.Rows.Add(rowPaymentDtlRow)
            Return rowPaymentDtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PaymentDtlDataTable = CType(MyBase.Clone,PaymentDtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PaymentDtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.column_date = Me.Columns("date")
            Me.columnOriginal = Me.Columns("Original")
            Me.columnpay = Me.Columns("pay")
            Me.columnref = Me.Columns("ref")
            Me.columnstore = Me.Columns("store")
            Me.columndate_of_check = Me.Columns("date_of_check")
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columnflag = Me.Columns("flag")
            Me.columnname_bank = Me.Columns("name_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnOriginal = New DataColumn("Original", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginal)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnref = New DataColumn("ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref)
            Me.columnstore = New DataColumn("store", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function NewPaymentDtlRow() As PaymentDtlRow
            Return CType(Me.NewRow,PaymentDtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PaymentDtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PaymentDtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PaymentDtlRowChangedEvent) Is Nothing) Then
                RaiseEvent PaymentDtlRowChanged(Me, New PaymentDtlRowChangeEvent(CType(e.Row,PaymentDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PaymentDtlRowChangingEvent) Is Nothing) Then
                RaiseEvent PaymentDtlRowChanging(Me, New PaymentDtlRowChangeEvent(CType(e.Row,PaymentDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PaymentDtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent PaymentDtlRowDeleted(Me, New PaymentDtlRowChangeEvent(CType(e.Row,PaymentDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PaymentDtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent PaymentDtlRowDeleting(Me, New PaymentDtlRowChangeEvent(CType(e.Row,PaymentDtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePaymentDtlRow(ByVal row As PaymentDtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PaymentDtlRow
        Inherits DataRow
        
        Private tablePaymentDtl As PaymentDtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePaymentDtl = CType(Me.Table,PaymentDtlDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tablePaymentDtl.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tablePaymentDtl.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl._dateColumn) = value
            End Set
        End Property
        
        Public Property Original As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.OriginalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.OriginalColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.payColumn) = value
            End Set
        End Property
        
        Public Property ref As String
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.refColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.refColumn) = value
            End Set
        End Property
        
        Public Property store As String
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.storeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.storeColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As Date
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.date_of_checkColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.flagColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablePaymentDtl.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaymentDtl.name_bankColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tablePaymentDtl.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tablePaymentDtl._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.OriginalColumn)
        End Function
        
        Public Sub SetOriginalNull()
            Me(Me.tablePaymentDtl.OriginalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tablePaymentDtl.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrefNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.refColumn)
        End Function
        
        Public Sub SetrefNull()
            Me(Me.tablePaymentDtl.refColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstoreNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.storeColumn)
        End Function
        
        Public Sub SetstoreNull()
            Me(Me.tablePaymentDtl.storeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tablePaymentDtl.date_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tablePaymentDtl.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablePaymentDtl.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablePaymentDtl.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablePaymentDtl.name_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PaymentDtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PaymentDtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PaymentDtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PaymentDtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columndesc_vendor_type As DataColumn
        
        Private columndesc_class As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columncity As DataColumn
        
        Private columnstate As DataColumn
        
        Private columnzipcode As DataColumn
        
        Private columnphone As DataColumn
        
        Private columnap_terms As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("VendorList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendor_typeColumn As DataColumn
            Get
                Return Me.columndesc_vendor_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property phoneColumn As DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        Friend ReadOnly Property ap_termsColumn As DataColumn
            Get
                Return Me.columnap_terms
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VendorListRow
            Get
                Return CType(Me.Rows(index),VendorListRow)
            End Get
        End Property
        
        Public Event VendorListRowChanged As VendorListRowChangeEventHandler
        
        Public Event VendorListRowChanging As VendorListRowChangeEventHandler
        
        Public Event VendorListRowDeleted As VendorListRowChangeEventHandler
        
        Public Event VendorListRowDeleting As VendorListRowChangeEventHandler
        
        Public Overloads Sub AddVendorListRow(ByVal row As VendorListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVendorListRow(ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal desc_vendor_type As String, ByVal desc_class As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zipcode As String, ByVal phone As String, ByVal ap_terms As String, ByVal email As String, ByVal flag As Boolean) As VendorListRow
            Dim rowVendorListRow As VendorListRow = CType(Me.NewRow,VendorListRow)
            rowVendorListRow.ItemArray = New Object() {cod_vendor, desc_vendor, desc_vendor_type, desc_class, address, city, state, zipcode, phone, ap_terms, email, flag}
            Me.Rows.Add(rowVendorListRow)
            Return rowVendorListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VendorListDataTable = CType(MyBase.Clone,VendorListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VendorListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columndesc_vendor_type = Me.Columns("desc_vendor_type")
            Me.columndesc_class = Me.Columns("desc_class")
            Me.columnaddress = Me.Columns("address")
            Me.columncity = Me.Columns("city")
            Me.columnstate = Me.Columns("state")
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columnphone = Me.Columns("phone")
            Me.columnap_terms = Me.Columns("ap_terms")
            Me.columnemail = Me.Columns("email")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columndesc_vendor_type = New DataColumn("desc_vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor_type)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columnphone = New DataColumn("phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone)
            Me.columnap_terms = New DataColumn("ap_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnap_terms)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnphone.ReadOnly = true
        End Sub
        
        Public Function NewVendorListRow() As VendorListRow
            Return CType(Me.NewRow,VendorListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VendorListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VendorListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VendorListRowChangedEvent) Is Nothing) Then
                RaiseEvent VendorListRowChanged(Me, New VendorListRowChangeEvent(CType(e.Row,VendorListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VendorListRowChangingEvent) Is Nothing) Then
                RaiseEvent VendorListRowChanging(Me, New VendorListRowChangeEvent(CType(e.Row,VendorListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VendorListRowDeletedEvent) Is Nothing) Then
                RaiseEvent VendorListRowDeleted(Me, New VendorListRowChangeEvent(CType(e.Row,VendorListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VendorListRowDeletingEvent) Is Nothing) Then
                RaiseEvent VendorListRowDeleting(Me, New VendorListRowChangeEvent(CType(e.Row,VendorListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVendorListRow(ByVal row As VendorListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorListRow
        Inherits DataRow
        
        Private tableVendorList As VendorListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendorList = CType(Me.Table,VendorListDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableVendorList.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableVendorList.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.desc_vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.desc_vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.desc_classColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.addressColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.cityColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.stateColumn) = value
            End Set
        End Property
        
        Public Property zipcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.zipcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property phone As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.phoneColumn) = value
            End Set
        End Property
        
        Public Property ap_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.ap_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.ap_termsColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.emailColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVendorList.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorList.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableVendorList.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.desc_vendor_typeColumn)
        End Function
        
        Public Sub Setdesc_vendor_typeNull()
            Me(Me.tableVendorList.desc_vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableVendorList.desc_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableVendorList.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableVendorList.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tableVendorList.stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipcodeNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.zipcodeColumn)
        End Function
        
        Public Sub SetzipcodeNull()
            Me(Me.tableVendorList.zipcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.phoneColumn)
        End Function
        
        Public Sub SetphoneNull()
            Me(Me.tableVendorList.phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isap_termsNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.ap_termsColumn)
        End Function
        
        Public Sub Setap_termsNull()
            Me(Me.tableVendorList.ap_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableVendorList.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableVendorList.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableVendorList.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VendorListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VendorListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VendorListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Vendor_billDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnId_AP_bill_Head As DataColumn
        
        Private columnref_no As DataColumn
        
        Private columnRef_date As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnMin_due_date As DataColumn
        
        Private columndisco As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("Vendor_bill")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_HeadColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_Head
            End Get
        End Property
        
        Friend ReadOnly Property ref_noColumn As DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        Friend ReadOnly Property Ref_dateColumn As DataColumn
            Get
                Return Me.columnRef_date
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property Min_due_dateColumn As DataColumn
            Get
                Return Me.columnMin_due_date
            End Get
        End Property
        
        Friend ReadOnly Property discoColumn As DataColumn
            Get
                Return Me.columndisco
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Vendor_billRow
            Get
                Return CType(Me.Rows(index),Vendor_billRow)
            End Get
        End Property
        
        Public Event Vendor_billRowChanged As Vendor_billRowChangeEventHandler
        
        Public Event Vendor_billRowChanging As Vendor_billRowChangeEventHandler
        
        Public Event Vendor_billRowDeleted As Vendor_billRowChangeEventHandler
        
        Public Event Vendor_billRowDeleting As Vendor_billRowChangeEventHandler
        
        Public Overloads Sub AddVendor_billRow(ByVal row As Vendor_billRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVendor_billRow(ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal Id_AP_bill_Head As String, ByVal ref_no As String, ByVal Ref_date As Date, ByVal Amount As Decimal, ByVal AR_terms As String, ByVal Min_due_date As Date, ByVal disco As Decimal, ByVal flag As Boolean) As Vendor_billRow
            Dim rowVendor_billRow As Vendor_billRow = CType(Me.NewRow,Vendor_billRow)
            rowVendor_billRow.ItemArray = New Object() {cod_vendor, desc_vendor, Id_AP_bill_Head, ref_no, Ref_date, Amount, AR_terms, Min_due_date, disco, flag}
            Me.Rows.Add(rowVendor_billRow)
            Return rowVendor_billRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Vendor_billDataTable = CType(MyBase.Clone,Vendor_billDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Vendor_billDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnId_AP_bill_Head = Me.Columns("Id_AP_bill_Head")
            Me.columnref_no = Me.Columns("ref_no")
            Me.columnRef_date = Me.Columns("Ref_date")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnMin_due_date = Me.Columns("Min_due_date")
            Me.columndisco = Me.Columns("disco")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnId_AP_bill_Head = New DataColumn("Id_AP_bill_Head", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_Head)
            Me.columnref_no = New DataColumn("ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref_no)
            Me.columnRef_date = New DataColumn("Ref_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRef_date)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnMin_due_date = New DataColumn("Min_due_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMin_due_date)
            Me.columndisco = New DataColumn("disco", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndisco)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnId_AP_bill_Head.AllowDBNull = false
            Me.columnAmount.ReadOnly = true
            Me.columndisco.ReadOnly = true
        End Sub
        
        Public Function NewVendor_billRow() As Vendor_billRow
            Return CType(Me.NewRow,Vendor_billRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Vendor_billRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Vendor_billRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Vendor_billRowChangedEvent) Is Nothing) Then
                RaiseEvent Vendor_billRowChanged(Me, New Vendor_billRowChangeEvent(CType(e.Row,Vendor_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Vendor_billRowChangingEvent) Is Nothing) Then
                RaiseEvent Vendor_billRowChanging(Me, New Vendor_billRowChangeEvent(CType(e.Row,Vendor_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Vendor_billRowDeletedEvent) Is Nothing) Then
                RaiseEvent Vendor_billRowDeleted(Me, New Vendor_billRowChangeEvent(CType(e.Row,Vendor_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Vendor_billRowDeletingEvent) Is Nothing) Then
                RaiseEvent Vendor_billRowDeleting(Me, New Vendor_billRowChangeEvent(CType(e.Row,Vendor_billRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVendor_billRow(ByVal row As Vendor_billRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Vendor_billRow
        Inherits DataRow
        
        Private tableVendor_bill As Vendor_billDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendor_bill = CType(Me.Table,Vendor_billDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableVendor_bill.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableVendor_bill.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_Head As String
            Get
                Return CType(Me(Me.tableVendor_bill.Id_AP_bill_HeadColumn),String)
            End Get
            Set
                Me(Me.tableVendor_bill.Id_AP_bill_HeadColumn) = value
            End Set
        End Property
        
        Public Property ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.ref_noColumn) = value
            End Set
        End Property
        
        Public Property Ref_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.Ref_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.Ref_dateColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.AmountColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property Min_due_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.Min_due_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.Min_due_dateColumn) = value
            End Set
        End Property
        
        Public Property disco As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.discoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.discoColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVendor_bill.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor_bill.flagColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableVendor_bill.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.ref_noColumn)
        End Function
        
        Public Sub Setref_noNull()
            Me(Me.tableVendor_bill.ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRef_dateNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.Ref_dateColumn)
        End Function
        
        Public Sub SetRef_dateNull()
            Me(Me.tableVendor_bill.Ref_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableVendor_bill.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableVendor_bill.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMin_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.Min_due_dateColumn)
        End Function
        
        Public Sub SetMin_due_dateNull()
            Me(Me.tableVendor_bill.Min_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscoNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.discoColumn)
        End Function
        
        Public Sub SetdiscoNull()
            Me(Me.tableVendor_bill.discoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableVendor_bill.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableVendor_bill.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Vendor_billRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Vendor_billRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Vendor_billRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Vendor_billRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
