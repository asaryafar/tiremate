'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dsfrmmain
    Inherits DataSet
    
    Private tableGroups As GroupsDataTable
    
    Private tableItems1 As Items1DataTable
    
    Private tableItems As ItemsDataTable
    
    Private tableUserAccess As UserAccessDataTable
    
    Private tableAllItems As AllItemsDataTable
    
    Private tableUserFavorite As UserFavoriteDataTable
    
    Private tableFormProperty As FormPropertyDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Groups")) Is Nothing) Then
                Me.Tables.Add(New GroupsDataTable(ds.Tables("Groups")))
            End If
            If (Not (ds.Tables("Items1")) Is Nothing) Then
                Me.Tables.Add(New Items1DataTable(ds.Tables("Items1")))
            End If
            If (Not (ds.Tables("Items")) Is Nothing) Then
                Me.Tables.Add(New ItemsDataTable(ds.Tables("Items")))
            End If
            If (Not (ds.Tables("UserAccess")) Is Nothing) Then
                Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
            End If
            If (Not (ds.Tables("AllItems")) Is Nothing) Then
                Me.Tables.Add(New AllItemsDataTable(ds.Tables("AllItems")))
            End If
            If (Not (ds.Tables("UserFavorite")) Is Nothing) Then
                Me.Tables.Add(New UserFavoriteDataTable(ds.Tables("UserFavorite")))
            End If
            If (Not (ds.Tables("FormProperty")) Is Nothing) Then
                Me.Tables.Add(New FormPropertyDataTable(ds.Tables("FormProperty")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Groups As GroupsDataTable
        Get
            Return Me.tableGroups
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Items1 As Items1DataTable
        Get
            Return Me.tableItems1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Items As ItemsDataTable
        Get
            Return Me.tableItems
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserAccess As UserAccessDataTable
        Get
            Return Me.tableUserAccess
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllItems As AllItemsDataTable
        Get
            Return Me.tableAllItems
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserFavorite As UserFavoriteDataTable
        Get
            Return Me.tableUserFavorite
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FormProperty As FormPropertyDataTable
        Get
            Return Me.tableFormProperty
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dsfrmmain = CType(MyBase.Clone,Dsfrmmain)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Groups")) Is Nothing) Then
            Me.Tables.Add(New GroupsDataTable(ds.Tables("Groups")))
        End If
        If (Not (ds.Tables("Items1")) Is Nothing) Then
            Me.Tables.Add(New Items1DataTable(ds.Tables("Items1")))
        End If
        If (Not (ds.Tables("Items")) Is Nothing) Then
            Me.Tables.Add(New ItemsDataTable(ds.Tables("Items")))
        End If
        If (Not (ds.Tables("UserAccess")) Is Nothing) Then
            Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
        End If
        If (Not (ds.Tables("AllItems")) Is Nothing) Then
            Me.Tables.Add(New AllItemsDataTable(ds.Tables("AllItems")))
        End If
        If (Not (ds.Tables("UserFavorite")) Is Nothing) Then
            Me.Tables.Add(New UserFavoriteDataTable(ds.Tables("UserFavorite")))
        End If
        If (Not (ds.Tables("FormProperty")) Is Nothing) Then
            Me.Tables.Add(New FormPropertyDataTable(ds.Tables("FormProperty")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGroups = CType(Me.Tables("Groups"),GroupsDataTable)
        If (Not (Me.tableGroups) Is Nothing) Then
            Me.tableGroups.InitVars
        End If
        Me.tableItems1 = CType(Me.Tables("Items1"),Items1DataTable)
        If (Not (Me.tableItems1) Is Nothing) Then
            Me.tableItems1.InitVars
        End If
        Me.tableItems = CType(Me.Tables("Items"),ItemsDataTable)
        If (Not (Me.tableItems) Is Nothing) Then
            Me.tableItems.InitVars
        End If
        Me.tableUserAccess = CType(Me.Tables("UserAccess"),UserAccessDataTable)
        If (Not (Me.tableUserAccess) Is Nothing) Then
            Me.tableUserAccess.InitVars
        End If
        Me.tableAllItems = CType(Me.Tables("AllItems"),AllItemsDataTable)
        If (Not (Me.tableAllItems) Is Nothing) Then
            Me.tableAllItems.InitVars
        End If
        Me.tableUserFavorite = CType(Me.Tables("UserFavorite"),UserFavoriteDataTable)
        If (Not (Me.tableUserFavorite) Is Nothing) Then
            Me.tableUserFavorite.InitVars
        End If
        Me.tableFormProperty = CType(Me.Tables("FormProperty"),FormPropertyDataTable)
        If (Not (Me.tableFormProperty) Is Nothing) Then
            Me.tableFormProperty.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dsfrmmain"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/Dsfrmmain.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGroups = New GroupsDataTable
        Me.Tables.Add(Me.tableGroups)
        Me.tableItems1 = New Items1DataTable
        Me.Tables.Add(Me.tableItems1)
        Me.tableItems = New ItemsDataTable
        Me.Tables.Add(Me.tableItems)
        Me.tableUserAccess = New UserAccessDataTable
        Me.Tables.Add(Me.tableUserAccess)
        Me.tableAllItems = New AllItemsDataTable
        Me.Tables.Add(Me.tableAllItems)
        Me.tableUserFavorite = New UserFavoriteDataTable
        Me.Tables.Add(Me.tableUserFavorite)
        Me.tableFormProperty = New FormPropertyDataTable
        Me.Tables.Add(Me.tableFormProperty)
    End Sub
    
    Private Function ShouldSerializeGroups() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItems1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItems() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserAccess() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAllItems() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserFavorite() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFormProperty() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As GroupsRowChangeEvent)
    
    Public Delegate Sub Items1RowChangeEventHandler(ByVal sender As Object, ByVal e As Items1RowChangeEvent)
    
    Public Delegate Sub ItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemsRowChangeEvent)
    
    Public Delegate Sub UserAccessRowChangeEventHandler(ByVal sender As Object, ByVal e As UserAccessRowChangeEvent)
    
    Public Delegate Sub AllItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As AllItemsRowChangeEvent)
    
    Public Delegate Sub UserFavoriteRowChangeEventHandler(ByVal sender As Object, ByVal e As UserFavoriteRowChangeEvent)
    
    Public Delegate Sub FormPropertyRowChangeEventHandler(ByVal sender As Object, ByVal e As FormPropertyRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columngrp_desc As DataColumn
        
        Private columngrp_icon_large As DataColumn
        
        Private columngrp_icon_small As DataColumn
        
        Private columngrp_key As DataColumn
        
        Friend Sub New()
            MyBase.New("Groups")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property grp_descColumn As DataColumn
            Get
                Return Me.columngrp_desc
            End Get
        End Property
        
        Friend ReadOnly Property grp_icon_largeColumn As DataColumn
            Get
                Return Me.columngrp_icon_large
            End Get
        End Property
        
        Friend ReadOnly Property grp_icon_smallColumn As DataColumn
            Get
                Return Me.columngrp_icon_small
            End Get
        End Property
        
        Friend ReadOnly Property grp_keyColumn As DataColumn
            Get
                Return Me.columngrp_key
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GroupsRow
            Get
                Return CType(Me.Rows(index),GroupsRow)
            End Get
        End Property
        
        Public Event GroupsRowChanged As GroupsRowChangeEventHandler
        
        Public Event GroupsRowChanging As GroupsRowChangeEventHandler
        
        Public Event GroupsRowDeleted As GroupsRowChangeEventHandler
        
        Public Event GroupsRowDeleting As GroupsRowChangeEventHandler
        
        Public Overloads Sub AddGroupsRow(ByVal row As GroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGroupsRow(ByVal grp_desc As String, ByVal grp_icon_large As String, ByVal grp_icon_small As String, ByVal grp_key As String) As GroupsRow
            Dim rowGroupsRow As GroupsRow = CType(Me.NewRow,GroupsRow)
            rowGroupsRow.ItemArray = New Object() {grp_desc, grp_icon_large, grp_icon_small, grp_key}
            Me.Rows.Add(rowGroupsRow)
            Return rowGroupsRow
        End Function
        
        Public Function FindBygrp_key(ByVal grp_key As String) As GroupsRow
            Return CType(Me.Rows.Find(New Object() {grp_key}),GroupsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GroupsDataTable = CType(MyBase.Clone,GroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GroupsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columngrp_desc = Me.Columns("grp_desc")
            Me.columngrp_icon_large = Me.Columns("grp_icon_large")
            Me.columngrp_icon_small = Me.Columns("grp_icon_small")
            Me.columngrp_key = Me.Columns("grp_key")
        End Sub
        
        Private Sub InitClass()
            Me.columngrp_desc = New DataColumn("grp_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngrp_desc)
            Me.columngrp_icon_large = New DataColumn("grp_icon_large", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngrp_icon_large)
            Me.columngrp_icon_small = New DataColumn("grp_icon_small", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngrp_icon_small)
            Me.columngrp_key = New DataColumn("grp_key", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngrp_key)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columngrp_key}, true))
            Me.columngrp_key.AllowDBNull = false
            Me.columngrp_key.Unique = true
        End Sub
        
        Public Function NewGroupsRow() As GroupsRow
            Return CType(Me.NewRow,GroupsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GroupsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GroupsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent GroupsRowChanged(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent GroupsRowChanging(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent GroupsRowDeleted(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent GroupsRowDeleting(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGroupsRow(ByVal row As GroupsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupsRow
        Inherits DataRow
        
        Private tableGroups As GroupsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGroups = CType(Me.Table,GroupsDataTable)
        End Sub
        
        Public Property grp_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGroups.grp_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.grp_descColumn) = value
            End Set
        End Property
        
        Public Property grp_icon_large As String
            Get
                Try 
                    Return CType(Me(Me.tableGroups.grp_icon_largeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.grp_icon_largeColumn) = value
            End Set
        End Property
        
        Public Property grp_icon_small As String
            Get
                Try 
                    Return CType(Me(Me.tableGroups.grp_icon_smallColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.grp_icon_smallColumn) = value
            End Set
        End Property
        
        Public Property grp_key As String
            Get
                Return CType(Me(Me.tableGroups.grp_keyColumn),String)
            End Get
            Set
                Me(Me.tableGroups.grp_keyColumn) = value
            End Set
        End Property
        
        Public Function Isgrp_descNull() As Boolean
            Return Me.IsNull(Me.tableGroups.grp_descColumn)
        End Function
        
        Public Sub Setgrp_descNull()
            Me(Me.tableGroups.grp_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgrp_icon_largeNull() As Boolean
            Return Me.IsNull(Me.tableGroups.grp_icon_largeColumn)
        End Function
        
        Public Sub Setgrp_icon_largeNull()
            Me(Me.tableGroups.grp_icon_largeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgrp_icon_smallNull() As Boolean
            Return Me.IsNull(Me.tableGroups.grp_icon_smallColumn)
        End Function
        
        Public Sub Setgrp_icon_smallNull()
            Me(Me.tableGroups.grp_icon_smallColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GroupsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GroupsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GroupsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Items1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItem_large_icon As DataColumn
        
        Private columnItem_small_icon As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnItemKind As DataColumn
        
        Private columnMasterGroup As DataColumn
        
        Private columnItemToolTip As DataColumn
        
        Private columnFromName As DataColumn
        
        Private columnMasterItem As DataColumn
        
        Friend Sub New()
            MyBase.New("Items1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Item_large_iconColumn As DataColumn
            Get
                Return Me.columnItem_large_icon
            End Get
        End Property
        
        Friend ReadOnly Property Item_small_iconColumn As DataColumn
            Get
                Return Me.columnItem_small_icon
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property ItemKindColumn As DataColumn
            Get
                Return Me.columnItemKind
            End Get
        End Property
        
        Friend ReadOnly Property MasterGroupColumn As DataColumn
            Get
                Return Me.columnMasterGroup
            End Get
        End Property
        
        Friend ReadOnly Property ItemToolTipColumn As DataColumn
            Get
                Return Me.columnItemToolTip
            End Get
        End Property
        
        Friend ReadOnly Property FromNameColumn As DataColumn
            Get
                Return Me.columnFromName
            End Get
        End Property
        
        Friend ReadOnly Property MasterItemColumn As DataColumn
            Get
                Return Me.columnMasterItem
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Items1Row
            Get
                Return CType(Me.Rows(index),Items1Row)
            End Get
        End Property
        
        Public Event Items1RowChanged As Items1RowChangeEventHandler
        
        Public Event Items1RowChanging As Items1RowChangeEventHandler
        
        Public Event Items1RowDeleted As Items1RowChangeEventHandler
        
        Public Event Items1RowDeleting As Items1RowChangeEventHandler
        
        Public Overloads Sub AddItems1Row(ByVal row As Items1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItems1Row(ByVal Item_large_icon As String, ByVal Item_small_icon As String, ByVal Itemdesc As String, ByVal ItemKey As String, ByVal ItemKind As Integer, ByVal MasterGroup As String, ByVal ItemToolTip As String, ByVal FromName As String, ByVal MasterItem As String) As Items1Row
            Dim rowItems1Row As Items1Row = CType(Me.NewRow,Items1Row)
            rowItems1Row.ItemArray = New Object() {Item_large_icon, Item_small_icon, Itemdesc, ItemKey, ItemKind, MasterGroup, ItemToolTip, FromName, MasterItem}
            Me.Rows.Add(rowItems1Row)
            Return rowItems1Row
        End Function
        
        Public Function FindByItemKey(ByVal ItemKey As String) As Items1Row
            Return CType(Me.Rows.Find(New Object() {ItemKey}),Items1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Items1DataTable = CType(MyBase.Clone,Items1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Items1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItem_large_icon = Me.Columns("Item_large_icon")
            Me.columnItem_small_icon = Me.Columns("Item_small_icon")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnItemKind = Me.Columns("ItemKind")
            Me.columnMasterGroup = Me.Columns("MasterGroup")
            Me.columnItemToolTip = Me.Columns("ItemToolTip")
            Me.columnFromName = Me.Columns("FromName")
            Me.columnMasterItem = Me.Columns("MasterItem")
        End Sub
        
        Private Sub InitClass()
            Me.columnItem_large_icon = New DataColumn("Item_large_icon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_large_icon)
            Me.columnItem_small_icon = New DataColumn("Item_small_icon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_small_icon)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnItemKind = New DataColumn("ItemKind", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKind)
            Me.columnMasterGroup = New DataColumn("MasterGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterGroup)
            Me.columnItemToolTip = New DataColumn("ItemToolTip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemToolTip)
            Me.columnFromName = New DataColumn("FromName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromName)
            Me.columnMasterItem = New DataColumn("MasterItem", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterItem)
            Me.Constraints.Add(New UniqueConstraint("DsfrmmainKey1", New DataColumn() {Me.columnItemKey}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnItemKey.Unique = true
        End Sub
        
        Public Function NewItems1Row() As Items1Row
            Return CType(Me.NewRow,Items1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Items1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Items1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Items1RowChangedEvent) Is Nothing) Then
                RaiseEvent Items1RowChanged(Me, New Items1RowChangeEvent(CType(e.Row,Items1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Items1RowChangingEvent) Is Nothing) Then
                RaiseEvent Items1RowChanging(Me, New Items1RowChangeEvent(CType(e.Row,Items1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Items1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Items1RowDeleted(Me, New Items1RowChangeEvent(CType(e.Row,Items1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Items1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Items1RowDeleting(Me, New Items1RowChangeEvent(CType(e.Row,Items1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItems1Row(ByVal row As Items1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Items1Row
        Inherits DataRow
        
        Private tableItems1 As Items1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItems1 = CType(Me.Table,Items1DataTable)
        End Sub
        
        Public Property Item_large_icon As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.Item_large_iconColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.Item_large_iconColumn) = value
            End Set
        End Property
        
        Public Property Item_small_icon As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.Item_small_iconColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.Item_small_iconColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As String
            Get
                Return CType(Me(Me.tableItems1.ItemKeyColumn),String)
            End Get
            Set
                Me(Me.tableItems1.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property ItemKind As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems1.ItemKindColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.ItemKindColumn) = value
            End Set
        End Property
        
        Public Property MasterGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.MasterGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.MasterGroupColumn) = value
            End Set
        End Property
        
        Public Property ItemToolTip As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.ItemToolTipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.ItemToolTipColumn) = value
            End Set
        End Property
        
        Public Property FromName As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.FromNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.FromNameColumn) = value
            End Set
        End Property
        
        Public Property MasterItem As String
            Get
                Try 
                    Return CType(Me(Me.tableItems1.MasterItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems1.MasterItemColumn) = value
            End Set
        End Property
        
        Public Function IsItem_large_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems1.Item_large_iconColumn)
        End Function
        
        Public Sub SetItem_large_iconNull()
            Me(Me.tableItems1.Item_large_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_small_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems1.Item_small_iconColumn)
        End Function
        
        Public Sub SetItem_small_iconNull()
            Me(Me.tableItems1.Item_small_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableItems1.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableItems1.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKindNull() As Boolean
            Return Me.IsNull(Me.tableItems1.ItemKindColumn)
        End Function
        
        Public Sub SetItemKindNull()
            Me(Me.tableItems1.ItemKindColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterGroupNull() As Boolean
            Return Me.IsNull(Me.tableItems1.MasterGroupColumn)
        End Function
        
        Public Sub SetMasterGroupNull()
            Me(Me.tableItems1.MasterGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemToolTipNull() As Boolean
            Return Me.IsNull(Me.tableItems1.ItemToolTipColumn)
        End Function
        
        Public Sub SetItemToolTipNull()
            Me(Me.tableItems1.ItemToolTipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromNameNull() As Boolean
            Return Me.IsNull(Me.tableItems1.FromNameColumn)
        End Function
        
        Public Sub SetFromNameNull()
            Me(Me.tableItems1.FromNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterItemNull() As Boolean
            Return Me.IsNull(Me.tableItems1.MasterItemColumn)
        End Function
        
        Public Sub SetMasterItemNull()
            Me(Me.tableItems1.MasterItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Items1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Items1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Items1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Items1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFormName As DataColumn
        
        Private columnItem_large_icon As DataColumn
        
        Private columnItem_small_icon As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnItemKind As DataColumn
        
        Private columnItemToolTip As DataColumn
        
        Private columnMasterGroup As DataColumn
        
        Private columnMasterItem As DataColumn
        
        Friend Sub New()
            MyBase.New("Items")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FormNameColumn As DataColumn
            Get
                Return Me.columnFormName
            End Get
        End Property
        
        Friend ReadOnly Property Item_large_iconColumn As DataColumn
            Get
                Return Me.columnItem_large_icon
            End Get
        End Property
        
        Friend ReadOnly Property Item_small_iconColumn As DataColumn
            Get
                Return Me.columnItem_small_icon
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property ItemKindColumn As DataColumn
            Get
                Return Me.columnItemKind
            End Get
        End Property
        
        Friend ReadOnly Property ItemToolTipColumn As DataColumn
            Get
                Return Me.columnItemToolTip
            End Get
        End Property
        
        Friend ReadOnly Property MasterGroupColumn As DataColumn
            Get
                Return Me.columnMasterGroup
            End Get
        End Property
        
        Friend ReadOnly Property MasterItemColumn As DataColumn
            Get
                Return Me.columnMasterItem
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemsRow
            Get
                Return CType(Me.Rows(index),ItemsRow)
            End Get
        End Property
        
        Public Event ItemsRowChanged As ItemsRowChangeEventHandler
        
        Public Event ItemsRowChanging As ItemsRowChangeEventHandler
        
        Public Event ItemsRowDeleted As ItemsRowChangeEventHandler
        
        Public Event ItemsRowDeleting As ItemsRowChangeEventHandler
        
        Public Overloads Sub AddItemsRow(ByVal row As ItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemsRow(ByVal FormName As String, ByVal Item_large_icon As Integer, ByVal Item_small_icon As Integer, ByVal Itemdesc As String, ByVal ItemKey As Integer, ByVal ItemKind As Integer, ByVal ItemToolTip As String, ByVal MasterGroup As String, ByVal MasterItem As Integer) As ItemsRow
            Dim rowItemsRow As ItemsRow = CType(Me.NewRow,ItemsRow)
            rowItemsRow.ItemArray = New Object() {FormName, Item_large_icon, Item_small_icon, Itemdesc, ItemKey, ItemKind, ItemToolTip, MasterGroup, MasterItem}
            Me.Rows.Add(rowItemsRow)
            Return rowItemsRow
        End Function
        
        Public Function FindByItemKey(ByVal ItemKey As Integer) As ItemsRow
            Return CType(Me.Rows.Find(New Object() {ItemKey}),ItemsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemsDataTable = CType(MyBase.Clone,ItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFormName = Me.Columns("FormName")
            Me.columnItem_large_icon = Me.Columns("Item_large_icon")
            Me.columnItem_small_icon = Me.Columns("Item_small_icon")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnItemKind = Me.Columns("ItemKind")
            Me.columnItemToolTip = Me.Columns("ItemToolTip")
            Me.columnMasterGroup = Me.Columns("MasterGroup")
            Me.columnMasterItem = Me.Columns("MasterItem")
        End Sub
        
        Private Sub InitClass()
            Me.columnFormName = New DataColumn("FormName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormName)
            Me.columnItem_large_icon = New DataColumn("Item_large_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_large_icon)
            Me.columnItem_small_icon = New DataColumn("Item_small_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_small_icon)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnItemKind = New DataColumn("ItemKind", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKind)
            Me.columnItemToolTip = New DataColumn("ItemToolTip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemToolTip)
            Me.columnMasterGroup = New DataColumn("MasterGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterGroup)
            Me.columnMasterItem = New DataColumn("MasterItem", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterItem)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemKey}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnItemKey.Unique = true
        End Sub
        
        Public Function NewItemsRow() As ItemsRow
            Return CType(Me.NewRow,ItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemsRowChanged(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemsRowChanging(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemsRowDeleted(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemsRowDeleting(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemsRow(ByVal row As ItemsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsRow
        Inherits DataRow
        
        Private tableItems As ItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItems = CType(Me.Table,ItemsDataTable)
        End Sub
        
        Public Property FormName As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.FormNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.FormNameColumn) = value
            End Set
        End Property
        
        Public Property Item_large_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.Item_large_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.Item_large_iconColumn) = value
            End Set
        End Property
        
        Public Property Item_small_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.Item_small_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.Item_small_iconColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As Integer
            Get
                Return CType(Me(Me.tableItems.ItemKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableItems.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property ItemKind As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemKindColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemKindColumn) = value
            End Set
        End Property
        
        Public Property ItemToolTip As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemToolTipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemToolTipColumn) = value
            End Set
        End Property
        
        Public Property MasterGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.MasterGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.MasterGroupColumn) = value
            End Set
        End Property
        
        Public Property MasterItem As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.MasterItemColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.MasterItemColumn) = value
            End Set
        End Property
        
        Public Function IsFormNameNull() As Boolean
            Return Me.IsNull(Me.tableItems.FormNameColumn)
        End Function
        
        Public Sub SetFormNameNull()
            Me(Me.tableItems.FormNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_large_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems.Item_large_iconColumn)
        End Function
        
        Public Sub SetItem_large_iconNull()
            Me(Me.tableItems.Item_large_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_small_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems.Item_small_iconColumn)
        End Function
        
        Public Sub SetItem_small_iconNull()
            Me(Me.tableItems.Item_small_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableItems.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKindNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemKindColumn)
        End Function
        
        Public Sub SetItemKindNull()
            Me(Me.tableItems.ItemKindColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemToolTipNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemToolTipColumn)
        End Function
        
        Public Sub SetItemToolTipNull()
            Me(Me.tableItems.ItemToolTipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterGroupNull() As Boolean
            Return Me.IsNull(Me.tableItems.MasterGroupColumn)
        End Function
        
        Public Sub SetMasterGroupNull()
            Me(Me.tableItems.MasterGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterItemNull() As Boolean
            Return Me.IsNull(Me.tableItems.MasterItemColumn)
        End Function
        
        Public Sub SetMasterItemNull()
            Me(Me.tableItems.MasterItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemKey As DataColumn
        
        Private columnUserId As DataColumn
        
        Friend Sub New()
            MyBase.New("UserAccess")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserAccessRow
            Get
                Return CType(Me.Rows(index),UserAccessRow)
            End Get
        End Property
        
        Public Event UserAccessRowChanged As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowChanging As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleted As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleting As UserAccessRowChangeEventHandler
        
        Public Overloads Sub AddUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserAccessRow(ByVal ItemKey As Integer, ByVal UserId As Integer) As UserAccessRow
            Dim rowUserAccessRow As UserAccessRow = CType(Me.NewRow,UserAccessRow)
            rowUserAccessRow.ItemArray = New Object() {ItemKey, UserId}
            Me.Rows.Add(rowUserAccessRow)
            Return rowUserAccessRow
        End Function
        
        Public Function FindByItemKeyUserId(ByVal ItemKey As Integer, ByVal UserId As Integer) As UserAccessRow
            Return CType(Me.Rows.Find(New Object() {ItemKey, UserId}),UserAccessRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserAccessDataTable = CType(MyBase.Clone,UserAccessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserAccessDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnUserId = Me.Columns("UserId")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemKey, Me.columnUserId}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnUserId.AllowDBNull = false
        End Sub
        
        Public Function NewUserAccessRow() As UserAccessRow
            Return CType(Me.NewRow,UserAccessRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserAccessRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserAccessRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserAccessRowChangedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanged(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserAccessRowChangingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanging(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserAccessRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleted(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserAccessRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleting(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRow
        Inherits DataRow
        
        Private tableUserAccess As UserAccessDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserAccess = CType(Me.Table,UserAccessDataTable)
        End Sub
        
        Public Property ItemKey As Integer
            Get
                Return CType(Me(Me.tableUserAccess.ItemKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableUserAccess.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Return CType(Me(Me.tableUserAccess.UserIdColumn),Integer)
            End Get
            Set
                Me(Me.tableUserAccess.UserIdColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserAccessRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserAccessRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserAccessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItem_large_icon As DataColumn
        
        Private columnItem_small_icon As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnItemKind As DataColumn
        
        Private columnMasterGroup As DataColumn
        
        Private columnItemToolTip As DataColumn
        
        Private columnFromName As DataColumn
        
        Private columnMasterItem As DataColumn
        
        Friend Sub New()
            MyBase.New("AllItems")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Item_large_iconColumn As DataColumn
            Get
                Return Me.columnItem_large_icon
            End Get
        End Property
        
        Friend ReadOnly Property Item_small_iconColumn As DataColumn
            Get
                Return Me.columnItem_small_icon
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property ItemKindColumn As DataColumn
            Get
                Return Me.columnItemKind
            End Get
        End Property
        
        Friend ReadOnly Property MasterGroupColumn As DataColumn
            Get
                Return Me.columnMasterGroup
            End Get
        End Property
        
        Friend ReadOnly Property ItemToolTipColumn As DataColumn
            Get
                Return Me.columnItemToolTip
            End Get
        End Property
        
        Friend ReadOnly Property FromNameColumn As DataColumn
            Get
                Return Me.columnFromName
            End Get
        End Property
        
        Friend ReadOnly Property MasterItemColumn As DataColumn
            Get
                Return Me.columnMasterItem
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllItemsRow
            Get
                Return CType(Me.Rows(index),AllItemsRow)
            End Get
        End Property
        
        Public Event AllItemsRowChanged As AllItemsRowChangeEventHandler
        
        Public Event AllItemsRowChanging As AllItemsRowChangeEventHandler
        
        Public Event AllItemsRowDeleted As AllItemsRowChangeEventHandler
        
        Public Event AllItemsRowDeleting As AllItemsRowChangeEventHandler
        
        Public Overloads Sub AddAllItemsRow(ByVal row As AllItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllItemsRow(ByVal Item_large_icon As String, ByVal Item_small_icon As String, ByVal Itemdesc As String, ByVal ItemKey As String, ByVal ItemKind As Integer, ByVal MasterGroup As String, ByVal ItemToolTip As String, ByVal FromName As String, ByVal MasterItem As String) As AllItemsRow
            Dim rowAllItemsRow As AllItemsRow = CType(Me.NewRow,AllItemsRow)
            rowAllItemsRow.ItemArray = New Object() {Item_large_icon, Item_small_icon, Itemdesc, ItemKey, ItemKind, MasterGroup, ItemToolTip, FromName, MasterItem}
            Me.Rows.Add(rowAllItemsRow)
            Return rowAllItemsRow
        End Function
        
        Public Function FindByItemKey(ByVal ItemKey As String) As AllItemsRow
            Return CType(Me.Rows.Find(New Object() {ItemKey}),AllItemsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllItemsDataTable = CType(MyBase.Clone,AllItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItem_large_icon = Me.Columns("Item_large_icon")
            Me.columnItem_small_icon = Me.Columns("Item_small_icon")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnItemKind = Me.Columns("ItemKind")
            Me.columnMasterGroup = Me.Columns("MasterGroup")
            Me.columnItemToolTip = Me.Columns("ItemToolTip")
            Me.columnFromName = Me.Columns("FromName")
            Me.columnMasterItem = Me.Columns("MasterItem")
        End Sub
        
        Private Sub InitClass()
            Me.columnItem_large_icon = New DataColumn("Item_large_icon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_large_icon)
            Me.columnItem_small_icon = New DataColumn("Item_small_icon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_small_icon)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnItemKind = New DataColumn("ItemKind", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKind)
            Me.columnMasterGroup = New DataColumn("MasterGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterGroup)
            Me.columnItemToolTip = New DataColumn("ItemToolTip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemToolTip)
            Me.columnFromName = New DataColumn("FromName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromName)
            Me.columnMasterItem = New DataColumn("MasterItem", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterItem)
            Me.Constraints.Add(New UniqueConstraint("DsfrmmainKey2", New DataColumn() {Me.columnItemKey}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnItemKey.Unique = true
        End Sub
        
        Public Function NewAllItemsRow() As AllItemsRow
            Return CType(Me.NewRow,AllItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent AllItemsRowChanged(Me, New AllItemsRowChangeEvent(CType(e.Row,AllItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent AllItemsRowChanging(Me, New AllItemsRowChangeEvent(CType(e.Row,AllItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllItemsRowDeleted(Me, New AllItemsRowChangeEvent(CType(e.Row,AllItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllItemsRowDeleting(Me, New AllItemsRowChangeEvent(CType(e.Row,AllItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllItemsRow(ByVal row As AllItemsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllItemsRow
        Inherits DataRow
        
        Private tableAllItems As AllItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllItems = CType(Me.Table,AllItemsDataTable)
        End Sub
        
        Public Property Item_large_icon As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.Item_large_iconColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.Item_large_iconColumn) = value
            End Set
        End Property
        
        Public Property Item_small_icon As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.Item_small_iconColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.Item_small_iconColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As String
            Get
                Return CType(Me(Me.tableAllItems.ItemKeyColumn),String)
            End Get
            Set
                Me(Me.tableAllItems.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property ItemKind As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.ItemKindColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.ItemKindColumn) = value
            End Set
        End Property
        
        Public Property MasterGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.MasterGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.MasterGroupColumn) = value
            End Set
        End Property
        
        Public Property ItemToolTip As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.ItemToolTipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.ItemToolTipColumn) = value
            End Set
        End Property
        
        Public Property FromName As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.FromNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.FromNameColumn) = value
            End Set
        End Property
        
        Public Property MasterItem As String
            Get
                Try 
                    Return CType(Me(Me.tableAllItems.MasterItemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllItems.MasterItemColumn) = value
            End Set
        End Property
        
        Public Function IsItem_large_iconNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.Item_large_iconColumn)
        End Function
        
        Public Sub SetItem_large_iconNull()
            Me(Me.tableAllItems.Item_large_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_small_iconNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.Item_small_iconColumn)
        End Function
        
        Public Sub SetItem_small_iconNull()
            Me(Me.tableAllItems.Item_small_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableAllItems.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKindNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.ItemKindColumn)
        End Function
        
        Public Sub SetItemKindNull()
            Me(Me.tableAllItems.ItemKindColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterGroupNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.MasterGroupColumn)
        End Function
        
        Public Sub SetMasterGroupNull()
            Me(Me.tableAllItems.MasterGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemToolTipNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.ItemToolTipColumn)
        End Function
        
        Public Sub SetItemToolTipNull()
            Me(Me.tableAllItems.ItemToolTipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromNameNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.FromNameColumn)
        End Function
        
        Public Sub SetFromNameNull()
            Me(Me.tableAllItems.FromNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterItemNull() As Boolean
            Return Me.IsNull(Me.tableAllItems.MasterItemColumn)
        End Function
        
        Public Sub SetMasterItemNull()
            Me(Me.tableAllItems.MasterItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllItemsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllItemsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllItemsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserFavoriteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemKey As DataColumn
        
        Private columnUserId As DataColumn
        
        Private columnFormName As DataColumn
        
        Private columnItem_large_icon As DataColumn
        
        Private columnItem_small_icon As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnItemKind As DataColumn
        
        Private columnItemToolTip As DataColumn
        
        Private columnMasterGroup As DataColumn
        
        Private columnMasterItem As DataColumn
        
        Friend Sub New()
            MyBase.New("UserFavorite")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property FormNameColumn As DataColumn
            Get
                Return Me.columnFormName
            End Get
        End Property
        
        Friend ReadOnly Property Item_large_iconColumn As DataColumn
            Get
                Return Me.columnItem_large_icon
            End Get
        End Property
        
        Friend ReadOnly Property Item_small_iconColumn As DataColumn
            Get
                Return Me.columnItem_small_icon
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemKindColumn As DataColumn
            Get
                Return Me.columnItemKind
            End Get
        End Property
        
        Friend ReadOnly Property ItemToolTipColumn As DataColumn
            Get
                Return Me.columnItemToolTip
            End Get
        End Property
        
        Friend ReadOnly Property MasterGroupColumn As DataColumn
            Get
                Return Me.columnMasterGroup
            End Get
        End Property
        
        Friend ReadOnly Property MasterItemColumn As DataColumn
            Get
                Return Me.columnMasterItem
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserFavoriteRow
            Get
                Return CType(Me.Rows(index),UserFavoriteRow)
            End Get
        End Property
        
        Public Event UserFavoriteRowChanged As UserFavoriteRowChangeEventHandler
        
        Public Event UserFavoriteRowChanging As UserFavoriteRowChangeEventHandler
        
        Public Event UserFavoriteRowDeleted As UserFavoriteRowChangeEventHandler
        
        Public Event UserFavoriteRowDeleting As UserFavoriteRowChangeEventHandler
        
        Public Overloads Sub AddUserFavoriteRow(ByVal row As UserFavoriteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserFavoriteRow(ByVal ItemKey As Integer, ByVal UserId As Integer, ByVal FormName As String, ByVal Item_large_icon As Integer, ByVal Item_small_icon As Integer, ByVal Itemdesc As String, ByVal ItemKind As Integer, ByVal ItemToolTip As String, ByVal MasterGroup As String, ByVal MasterItem As Integer) As UserFavoriteRow
            Dim rowUserFavoriteRow As UserFavoriteRow = CType(Me.NewRow,UserFavoriteRow)
            rowUserFavoriteRow.ItemArray = New Object() {ItemKey, UserId, FormName, Item_large_icon, Item_small_icon, Itemdesc, ItemKind, ItemToolTip, MasterGroup, MasterItem}
            Me.Rows.Add(rowUserFavoriteRow)
            Return rowUserFavoriteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserFavoriteDataTable = CType(MyBase.Clone,UserFavoriteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserFavoriteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnUserId = Me.Columns("UserId")
            Me.columnFormName = Me.Columns("FormName")
            Me.columnItem_large_icon = Me.Columns("Item_large_icon")
            Me.columnItem_small_icon = Me.Columns("Item_small_icon")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnItemKind = Me.Columns("ItemKind")
            Me.columnItemToolTip = Me.Columns("ItemToolTip")
            Me.columnMasterGroup = Me.Columns("MasterGroup")
            Me.columnMasterItem = Me.Columns("MasterItem")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnFormName = New DataColumn("FormName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormName)
            Me.columnItem_large_icon = New DataColumn("Item_large_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_large_icon)
            Me.columnItem_small_icon = New DataColumn("Item_small_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_small_icon)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnItemKind = New DataColumn("ItemKind", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKind)
            Me.columnItemToolTip = New DataColumn("ItemToolTip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemToolTip)
            Me.columnMasterGroup = New DataColumn("MasterGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterGroup)
            Me.columnMasterItem = New DataColumn("MasterItem", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterItem)
        End Sub
        
        Public Function NewUserFavoriteRow() As UserFavoriteRow
            Return CType(Me.NewRow,UserFavoriteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserFavoriteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserFavoriteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserFavoriteRowChangedEvent) Is Nothing) Then
                RaiseEvent UserFavoriteRowChanged(Me, New UserFavoriteRowChangeEvent(CType(e.Row,UserFavoriteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserFavoriteRowChangingEvent) Is Nothing) Then
                RaiseEvent UserFavoriteRowChanging(Me, New UserFavoriteRowChangeEvent(CType(e.Row,UserFavoriteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserFavoriteRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserFavoriteRowDeleted(Me, New UserFavoriteRowChangeEvent(CType(e.Row,UserFavoriteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserFavoriteRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserFavoriteRowDeleting(Me, New UserFavoriteRowChangeEvent(CType(e.Row,UserFavoriteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserFavoriteRow(ByVal row As UserFavoriteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserFavoriteRow
        Inherits DataRow
        
        Private tableUserFavorite As UserFavoriteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserFavorite = CType(Me.Table,UserFavoriteDataTable)
        End Sub
        
        Public Property ItemKey As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.ItemKeyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.UserIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.UserIdColumn) = value
            End Set
        End Property
        
        Public Property FormName As String
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.FormNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.FormNameColumn) = value
            End Set
        End Property
        
        Public Property Item_large_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.Item_large_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.Item_large_iconColumn) = value
            End Set
        End Property
        
        Public Property Item_small_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.Item_small_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.Item_small_iconColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property ItemKind As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.ItemKindColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.ItemKindColumn) = value
            End Set
        End Property
        
        Public Property ItemToolTip As String
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.ItemToolTipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.ItemToolTipColumn) = value
            End Set
        End Property
        
        Public Property MasterGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.MasterGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.MasterGroupColumn) = value
            End Set
        End Property
        
        Public Property MasterItem As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserFavorite.MasterItemColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserFavorite.MasterItemColumn) = value
            End Set
        End Property
        
        Public Function IsItemKeyNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.ItemKeyColumn)
        End Function
        
        Public Sub SetItemKeyNull()
            Me(Me.tableUserFavorite.ItemKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableUserFavorite.UserIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormNameNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.FormNameColumn)
        End Function
        
        Public Sub SetFormNameNull()
            Me(Me.tableUserFavorite.FormNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_large_iconNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.Item_large_iconColumn)
        End Function
        
        Public Sub SetItem_large_iconNull()
            Me(Me.tableUserFavorite.Item_large_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_small_iconNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.Item_small_iconColumn)
        End Function
        
        Public Sub SetItem_small_iconNull()
            Me(Me.tableUserFavorite.Item_small_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableUserFavorite.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKindNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.ItemKindColumn)
        End Function
        
        Public Sub SetItemKindNull()
            Me(Me.tableUserFavorite.ItemKindColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemToolTipNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.ItemToolTipColumn)
        End Function
        
        Public Sub SetItemToolTipNull()
            Me(Me.tableUserFavorite.ItemToolTipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterGroupNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.MasterGroupColumn)
        End Function
        
        Public Sub SetMasterGroupNull()
            Me(Me.tableUserFavorite.MasterGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterItemNull() As Boolean
            Return Me.IsNull(Me.tableUserFavorite.MasterItemColumn)
        End Function
        
        Public Sub SetMasterItemNull()
            Me(Me.tableUserFavorite.MasterItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserFavoriteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserFavoriteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserFavoriteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserFavoriteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormPropertyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemKey As DataColumn
        
        Private columnPropertyName As DataColumn
        
        Private columnPropertyValue As DataColumn
        
        Friend Sub New()
            MyBase.New("FormProperty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property PropertyNameColumn As DataColumn
            Get
                Return Me.columnPropertyName
            End Get
        End Property
        
        Friend ReadOnly Property PropertyValueColumn As DataColumn
            Get
                Return Me.columnPropertyValue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FormPropertyRow
            Get
                Return CType(Me.Rows(index),FormPropertyRow)
            End Get
        End Property
        
        Public Event FormPropertyRowChanged As FormPropertyRowChangeEventHandler
        
        Public Event FormPropertyRowChanging As FormPropertyRowChangeEventHandler
        
        Public Event FormPropertyRowDeleted As FormPropertyRowChangeEventHandler
        
        Public Event FormPropertyRowDeleting As FormPropertyRowChangeEventHandler
        
        Public Overloads Sub AddFormPropertyRow(ByVal row As FormPropertyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFormPropertyRow(ByVal ItemKey As Integer, ByVal PropertyName As String, ByVal PropertyValue As String) As FormPropertyRow
            Dim rowFormPropertyRow As FormPropertyRow = CType(Me.NewRow,FormPropertyRow)
            rowFormPropertyRow.ItemArray = New Object() {ItemKey, PropertyName, PropertyValue}
            Me.Rows.Add(rowFormPropertyRow)
            Return rowFormPropertyRow
        End Function
        
        Public Function FindByItemKeyPropertyName(ByVal ItemKey As Integer, ByVal PropertyName As String) As FormPropertyRow
            Return CType(Me.Rows.Find(New Object() {ItemKey, PropertyName}),FormPropertyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FormPropertyDataTable = CType(MyBase.Clone,FormPropertyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FormPropertyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnPropertyName = Me.Columns("PropertyName")
            Me.columnPropertyValue = Me.Columns("PropertyValue")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnPropertyName = New DataColumn("PropertyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPropertyName)
            Me.columnPropertyValue = New DataColumn("PropertyValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPropertyValue)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemKey, Me.columnPropertyName}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnPropertyName.AllowDBNull = false
        End Sub
        
        Public Function NewFormPropertyRow() As FormPropertyRow
            Return CType(Me.NewRow,FormPropertyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FormPropertyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FormPropertyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FormPropertyRowChangedEvent) Is Nothing) Then
                RaiseEvent FormPropertyRowChanged(Me, New FormPropertyRowChangeEvent(CType(e.Row,FormPropertyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FormPropertyRowChangingEvent) Is Nothing) Then
                RaiseEvent FormPropertyRowChanging(Me, New FormPropertyRowChangeEvent(CType(e.Row,FormPropertyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FormPropertyRowDeletedEvent) Is Nothing) Then
                RaiseEvent FormPropertyRowDeleted(Me, New FormPropertyRowChangeEvent(CType(e.Row,FormPropertyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FormPropertyRowDeletingEvent) Is Nothing) Then
                RaiseEvent FormPropertyRowDeleting(Me, New FormPropertyRowChangeEvent(CType(e.Row,FormPropertyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFormPropertyRow(ByVal row As FormPropertyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormPropertyRow
        Inherits DataRow
        
        Private tableFormProperty As FormPropertyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFormProperty = CType(Me.Table,FormPropertyDataTable)
        End Sub
        
        Public Property ItemKey As Integer
            Get
                Return CType(Me(Me.tableFormProperty.ItemKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableFormProperty.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property PropertyName As String
            Get
                Return CType(Me(Me.tableFormProperty.PropertyNameColumn),String)
            End Get
            Set
                Me(Me.tableFormProperty.PropertyNameColumn) = value
            End Set
        End Property
        
        Public Property PropertyValue As String
            Get
                Try 
                    Return CType(Me(Me.tableFormProperty.PropertyValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormProperty.PropertyValueColumn) = value
            End Set
        End Property
        
        Public Function IsPropertyValueNull() As Boolean
            Return Me.IsNull(Me.tableFormProperty.PropertyValueColumn)
        End Function
        
        Public Sub SetPropertyValueNull()
            Me(Me.tableFormProperty.PropertyValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormPropertyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FormPropertyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FormPropertyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FormPropertyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
