'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmMain
    Inherits DataSet
    
    Private tableMainMenu As MainMenuDataTable
    
    Private tableUserAccess As UserAccessDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MainMenu")) Is Nothing) Then
                Me.Tables.Add(New MainMenuDataTable(ds.Tables("MainMenu")))
            End If
            If (Not (ds.Tables("UserAccess")) Is Nothing) Then
                Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MainMenu As MainMenuDataTable
        Get
            Return Me.tableMainMenu
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserAccess As UserAccessDataTable
        Get
            Return Me.tableUserAccess
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmMain = CType(MyBase.Clone,DSFrmMain)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MainMenu")) Is Nothing) Then
            Me.Tables.Add(New MainMenuDataTable(ds.Tables("MainMenu")))
        End If
        If (Not (ds.Tables("UserAccess")) Is Nothing) Then
            Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMainMenu = CType(Me.Tables("MainMenu"),MainMenuDataTable)
        If (Not (Me.tableMainMenu) Is Nothing) Then
            Me.tableMainMenu.InitVars
        End If
        Me.tableUserAccess = CType(Me.Tables("UserAccess"),UserAccessDataTable)
        If (Not (Me.tableUserAccess) Is Nothing) Then
            Me.tableUserAccess.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmMain"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmMain.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMainMenu = New MainMenuDataTable
        Me.Tables.Add(Me.tableMainMenu)
        Me.tableUserAccess = New UserAccessDataTable
        Me.Tables.Add(Me.tableUserAccess)
    End Sub
    
    Private Function ShouldSerializeMainMenu() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserAccess() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MainMenuRowChangeEventHandler(ByVal sender As Object, ByVal e As MainMenuRowChangeEvent)
    
    Public Delegate Sub UserAccessRowChangeEventHandler(ByVal sender As Object, ByVal e As UserAccessRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MainMenuDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMainMenuId As DataColumn
        
        Private columnMainMenuName As DataColumn
        
        Private columnMainMenuText As DataColumn
        
        Private columnMainMenuIdParent As DataColumn
        
        Private columnMainMenuFrmName As DataColumn
        
        Private columnMainMenuTableName As DataColumn
        
        Friend Sub New()
            MyBase.New("MainMenu")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuIdColumn As DataColumn
            Get
                Return Me.columnMainMenuId
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuNameColumn As DataColumn
            Get
                Return Me.columnMainMenuName
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuTextColumn As DataColumn
            Get
                Return Me.columnMainMenuText
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuIdParentColumn As DataColumn
            Get
                Return Me.columnMainMenuIdParent
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuFrmNameColumn As DataColumn
            Get
                Return Me.columnMainMenuFrmName
            End Get
        End Property
        
        Friend ReadOnly Property MainMenuTableNameColumn As DataColumn
            Get
                Return Me.columnMainMenuTableName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MainMenuRow
            Get
                Return CType(Me.Rows(index),MainMenuRow)
            End Get
        End Property
        
        Public Event MainMenuRowChanged As MainMenuRowChangeEventHandler
        
        Public Event MainMenuRowChanging As MainMenuRowChangeEventHandler
        
        Public Event MainMenuRowDeleted As MainMenuRowChangeEventHandler
        
        Public Event MainMenuRowDeleting As MainMenuRowChangeEventHandler
        
        Public Overloads Sub AddMainMenuRow(ByVal row As MainMenuRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMainMenuRow(ByVal MainMenuId As Decimal, ByVal MainMenuName As String, ByVal MainMenuText As String, ByVal MainMenuIdParent As Decimal, ByVal MainMenuFrmName As String, ByVal MainMenuTableName As String) As MainMenuRow
            Dim rowMainMenuRow As MainMenuRow = CType(Me.NewRow,MainMenuRow)
            rowMainMenuRow.ItemArray = New Object() {MainMenuId, MainMenuName, MainMenuText, MainMenuIdParent, MainMenuFrmName, MainMenuTableName}
            Me.Rows.Add(rowMainMenuRow)
            Return rowMainMenuRow
        End Function
        
        Public Function FindByMainMenuId(ByVal MainMenuId As Decimal) As MainMenuRow
            Return CType(Me.Rows.Find(New Object() {MainMenuId}),MainMenuRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MainMenuDataTable = CType(MyBase.Clone,MainMenuDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MainMenuDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMainMenuId = Me.Columns("MainMenuId")
            Me.columnMainMenuName = Me.Columns("MainMenuName")
            Me.columnMainMenuText = Me.Columns("MainMenuText")
            Me.columnMainMenuIdParent = Me.Columns("MainMenuIdParent")
            Me.columnMainMenuFrmName = Me.Columns("MainMenuFrmName")
            Me.columnMainMenuTableName = Me.Columns("MainMenuTableName")
        End Sub
        
        Private Sub InitClass()
            Me.columnMainMenuId = New DataColumn("MainMenuId", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuId)
            Me.columnMainMenuName = New DataColumn("MainMenuName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuName)
            Me.columnMainMenuText = New DataColumn("MainMenuText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuText)
            Me.columnMainMenuIdParent = New DataColumn("MainMenuIdParent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuIdParent)
            Me.columnMainMenuFrmName = New DataColumn("MainMenuFrmName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuFrmName)
            Me.columnMainMenuTableName = New DataColumn("MainMenuTableName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMainMenuTableName)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMainMenuId}, true))
            Me.columnMainMenuId.AllowDBNull = false
            Me.columnMainMenuId.Unique = true
            Me.columnMainMenuName.AllowDBNull = false
            Me.columnMainMenuText.AllowDBNull = false
        End Sub
        
        Public Function NewMainMenuRow() As MainMenuRow
            Return CType(Me.NewRow,MainMenuRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MainMenuRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MainMenuRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MainMenuRowChangedEvent) Is Nothing) Then
                RaiseEvent MainMenuRowChanged(Me, New MainMenuRowChangeEvent(CType(e.Row,MainMenuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MainMenuRowChangingEvent) Is Nothing) Then
                RaiseEvent MainMenuRowChanging(Me, New MainMenuRowChangeEvent(CType(e.Row,MainMenuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MainMenuRowDeletedEvent) Is Nothing) Then
                RaiseEvent MainMenuRowDeleted(Me, New MainMenuRowChangeEvent(CType(e.Row,MainMenuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MainMenuRowDeletingEvent) Is Nothing) Then
                RaiseEvent MainMenuRowDeleting(Me, New MainMenuRowChangeEvent(CType(e.Row,MainMenuRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMainMenuRow(ByVal row As MainMenuRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MainMenuRow
        Inherits DataRow
        
        Private tableMainMenu As MainMenuDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMainMenu = CType(Me.Table,MainMenuDataTable)
        End Sub
        
        Public Property MainMenuId As Decimal
            Get
                Return CType(Me(Me.tableMainMenu.MainMenuIdColumn),Decimal)
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuIdColumn) = value
            End Set
        End Property
        
        Public Property MainMenuName As String
            Get
                Return CType(Me(Me.tableMainMenu.MainMenuNameColumn),String)
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuNameColumn) = value
            End Set
        End Property
        
        Public Property MainMenuText As String
            Get
                Return CType(Me(Me.tableMainMenu.MainMenuTextColumn),String)
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuTextColumn) = value
            End Set
        End Property
        
        Public Property MainMenuIdParent As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMainMenu.MainMenuIdParentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuIdParentColumn) = value
            End Set
        End Property
        
        Public Property MainMenuFrmName As String
            Get
                Try 
                    Return CType(Me(Me.tableMainMenu.MainMenuFrmNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuFrmNameColumn) = value
            End Set
        End Property
        
        Public Property MainMenuTableName As String
            Get
                Try 
                    Return CType(Me(Me.tableMainMenu.MainMenuTableNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMainMenu.MainMenuTableNameColumn) = value
            End Set
        End Property
        
        Public Function IsMainMenuIdParentNull() As Boolean
            Return Me.IsNull(Me.tableMainMenu.MainMenuIdParentColumn)
        End Function
        
        Public Sub SetMainMenuIdParentNull()
            Me(Me.tableMainMenu.MainMenuIdParentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMainMenuFrmNameNull() As Boolean
            Return Me.IsNull(Me.tableMainMenu.MainMenuFrmNameColumn)
        End Function
        
        Public Sub SetMainMenuFrmNameNull()
            Me(Me.tableMainMenu.MainMenuFrmNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMainMenuTableNameNull() As Boolean
            Return Me.IsNull(Me.tableMainMenu.MainMenuTableNameColumn)
        End Function
        
        Public Sub SetMainMenuTableNameNull()
            Me(Me.tableMainMenu.MainMenuTableNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MainMenuRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MainMenuRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MainMenuRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MainMenuRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserAccessId As DataColumn
        
        Friend Sub New()
            MyBase.New("UserAccess")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserAccessIdColumn As DataColumn
            Get
                Return Me.columnUserAccessId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserAccessRow
            Get
                Return CType(Me.Rows(index),UserAccessRow)
            End Get
        End Property
        
        Public Event UserAccessRowChanged As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowChanging As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleted As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleting As UserAccessRowChangeEventHandler
        
        Public Overloads Sub AddUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserAccessRow() As UserAccessRow
            Dim rowUserAccessRow As UserAccessRow = CType(Me.NewRow,UserAccessRow)
            rowUserAccessRow.ItemArray = New Object() {Nothing}
            Me.Rows.Add(rowUserAccessRow)
            Return rowUserAccessRow
        End Function
        
        Public Function FindByUserAccessId(ByVal UserAccessId As Decimal) As UserAccessRow
            Return CType(Me.Rows.Find(New Object() {UserAccessId}),UserAccessRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserAccessDataTable = CType(MyBase.Clone,UserAccessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserAccessDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserAccessId = Me.Columns("UserAccessId")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserAccessId = New DataColumn("UserAccessId", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserAccessId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUserAccessId}, true))
            Me.columnUserAccessId.AutoIncrement = true
            Me.columnUserAccessId.AllowDBNull = false
            Me.columnUserAccessId.ReadOnly = true
            Me.columnUserAccessId.Unique = true
        End Sub
        
        Public Function NewUserAccessRow() As UserAccessRow
            Return CType(Me.NewRow,UserAccessRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserAccessRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserAccessRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserAccessRowChangedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanged(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserAccessRowChangingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanging(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserAccessRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleted(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserAccessRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleting(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRow
        Inherits DataRow
        
        Private tableUserAccess As UserAccessDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserAccess = CType(Me.Table,UserAccessDataTable)
        End Sub
        
        Public Property UserAccessId As Decimal
            Get
                Return CType(Me(Me.tableUserAccess.UserAccessIdColumn),Decimal)
            End Get
            Set
                Me(Me.tableUserAccess.UserAccessIdColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserAccessRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserAccessRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserAccessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
