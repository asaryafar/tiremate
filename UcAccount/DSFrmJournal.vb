'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmJournal
    Inherits DataSet
    
    Private tableGL_journal_dtl As GL_journal_dtlDataTable
    
    Private tableGL_journal_head As GL_journal_headDataTable
    
    Private tableGL_ready_description As GL_ready_descriptionDataTable
    
    Private tableGL_type_journal As GL_type_journalDataTable
    
    Private tableGeneralJournal As GeneralJournalDataTable
    
    Private tableTarazKol As TarazKolDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_journal_dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_journal_dtlDataTable(ds.Tables("GL_journal_dtl")))
            End If
            If (Not (ds.Tables("GL_journal_head")) Is Nothing) Then
                Me.Tables.Add(New GL_journal_headDataTable(ds.Tables("GL_journal_head")))
            End If
            If (Not (ds.Tables("GL_ready_description")) Is Nothing) Then
                Me.Tables.Add(New GL_ready_descriptionDataTable(ds.Tables("GL_ready_description")))
            End If
            If (Not (ds.Tables("GL_type_journal")) Is Nothing) Then
                Me.Tables.Add(New GL_type_journalDataTable(ds.Tables("GL_type_journal")))
            End If
            If (Not (ds.Tables("GeneralJournal")) Is Nothing) Then
                Me.Tables.Add(New GeneralJournalDataTable(ds.Tables("GeneralJournal")))
            End If
            If (Not (ds.Tables("TarazKol")) Is Nothing) Then
                Me.Tables.Add(New TarazKolDataTable(ds.Tables("TarazKol")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_journal_dtl As GL_journal_dtlDataTable
        Get
            Return Me.tableGL_journal_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_journal_head As GL_journal_headDataTable
        Get
            Return Me.tableGL_journal_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_ready_description As GL_ready_descriptionDataTable
        Get
            Return Me.tableGL_ready_description
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_type_journal As GL_type_journalDataTable
        Get
            Return Me.tableGL_type_journal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GeneralJournal As GeneralJournalDataTable
        Get
            Return Me.tableGeneralJournal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TarazKol As TarazKolDataTable
        Get
            Return Me.tableTarazKol
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmJournal = CType(MyBase.Clone,DSFrmJournal)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_journal_dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_journal_dtlDataTable(ds.Tables("GL_journal_dtl")))
        End If
        If (Not (ds.Tables("GL_journal_head")) Is Nothing) Then
            Me.Tables.Add(New GL_journal_headDataTable(ds.Tables("GL_journal_head")))
        End If
        If (Not (ds.Tables("GL_ready_description")) Is Nothing) Then
            Me.Tables.Add(New GL_ready_descriptionDataTable(ds.Tables("GL_ready_description")))
        End If
        If (Not (ds.Tables("GL_type_journal")) Is Nothing) Then
            Me.Tables.Add(New GL_type_journalDataTable(ds.Tables("GL_type_journal")))
        End If
        If (Not (ds.Tables("GeneralJournal")) Is Nothing) Then
            Me.Tables.Add(New GeneralJournalDataTable(ds.Tables("GeneralJournal")))
        End If
        If (Not (ds.Tables("TarazKol")) Is Nothing) Then
            Me.Tables.Add(New TarazKolDataTable(ds.Tables("TarazKol")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_journal_dtl = CType(Me.Tables("GL_journal_dtl"),GL_journal_dtlDataTable)
        If (Not (Me.tableGL_journal_dtl) Is Nothing) Then
            Me.tableGL_journal_dtl.InitVars
        End If
        Me.tableGL_journal_head = CType(Me.Tables("GL_journal_head"),GL_journal_headDataTable)
        If (Not (Me.tableGL_journal_head) Is Nothing) Then
            Me.tableGL_journal_head.InitVars
        End If
        Me.tableGL_ready_description = CType(Me.Tables("GL_ready_description"),GL_ready_descriptionDataTable)
        If (Not (Me.tableGL_ready_description) Is Nothing) Then
            Me.tableGL_ready_description.InitVars
        End If
        Me.tableGL_type_journal = CType(Me.Tables("GL_type_journal"),GL_type_journalDataTable)
        If (Not (Me.tableGL_type_journal) Is Nothing) Then
            Me.tableGL_type_journal.InitVars
        End If
        Me.tableGeneralJournal = CType(Me.Tables("GeneralJournal"),GeneralJournalDataTable)
        If (Not (Me.tableGeneralJournal) Is Nothing) Then
            Me.tableGeneralJournal.InitVars
        End If
        Me.tableTarazKol = CType(Me.Tables("TarazKol"),TarazKolDataTable)
        If (Not (Me.tableTarazKol) Is Nothing) Then
            Me.tableTarazKol.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmJournal"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmJournal.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_journal_dtl = New GL_journal_dtlDataTable
        Me.Tables.Add(Me.tableGL_journal_dtl)
        Me.tableGL_journal_head = New GL_journal_headDataTable
        Me.Tables.Add(Me.tableGL_journal_head)
        Me.tableGL_ready_description = New GL_ready_descriptionDataTable
        Me.Tables.Add(Me.tableGL_ready_description)
        Me.tableGL_type_journal = New GL_type_journalDataTable
        Me.Tables.Add(Me.tableGL_type_journal)
        Me.tableGeneralJournal = New GeneralJournalDataTable
        Me.Tables.Add(Me.tableGeneralJournal)
        Me.tableTarazKol = New TarazKolDataTable
        Me.Tables.Add(Me.tableTarazKol)
    End Sub
    
    Private Function ShouldSerializeGL_journal_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_journal_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_ready_description() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_type_journal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGeneralJournal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTarazKol() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_journal_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_journal_dtlRowChangeEvent)
    
    Public Delegate Sub GL_journal_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_journal_headRowChangeEvent)
    
    Public Delegate Sub GL_ready_descriptionRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_ready_descriptionRowChangeEvent)
    
    Public Delegate Sub GL_type_journalRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_type_journalRowChangeEvent)
    
    Public Delegate Sub GeneralJournalRowChangeEventHandler(ByVal sender As Object, ByVal e As GeneralJournalRowChangeEvent)
    
    Public Delegate Sub TarazKolRowChangeEventHandler(ByVal sender As Object, ByVal e As TarazKolRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_GL_journal As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnGL_journal_reference As DataColumn
        
        Private columnGL_journal_amount_debit As DataColumn
        
        Private columnGL_journal_amount_credit As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_journal_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_referenceColumn As DataColumn
            Get
                Return Me.columnGL_journal_reference
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_debitColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_debit
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_creditColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_credit
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_journal_dtlRow
            Get
                Return CType(Me.Rows(index),GL_journal_dtlRow)
            End Get
        End Property
        
        Public Event GL_journal_dtlRowChanged As GL_journal_dtlRowChangeEventHandler
        
        Public Event GL_journal_dtlRowChanging As GL_journal_dtlRowChangeEventHandler
        
        Public Event GL_journal_dtlRowDeleted As GL_journal_dtlRowChangeEventHandler
        
        Public Event GL_journal_dtlRowDeleting As GL_journal_dtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_journal_dtlRow(ByVal row As GL_journal_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_journal_dtlRow(ByVal id_GL_journal As Integer, ByVal radif As Short, ByVal GL_account As String, ByVal GL_journal_reference As String, ByVal GL_journal_amount_debit As Decimal, ByVal GL_journal_amount_credit As Decimal, ByVal desc_GL_account As String) As GL_journal_dtlRow
            Dim rowGL_journal_dtlRow As GL_journal_dtlRow = CType(Me.NewRow,GL_journal_dtlRow)
            rowGL_journal_dtlRow.ItemArray = New Object() {id_GL_journal, radif, GL_account, GL_journal_reference, GL_journal_amount_debit, GL_journal_amount_credit, desc_GL_account}
            Me.Rows.Add(rowGL_journal_dtlRow)
            Return rowGL_journal_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_journal_dtlDataTable = CType(MyBase.Clone,GL_journal_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_journal_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnradif = Me.Columns("radif")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnGL_journal_reference = Me.Columns("GL_journal_reference")
            Me.columnGL_journal_amount_debit = Me.Columns("GL_journal_amount_debit")
            Me.columnGL_journal_amount_credit = Me.Columns("GL_journal_amount_credit")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnGL_journal_reference = New DataColumn("GL_journal_reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_reference)
            Me.columnGL_journal_amount_debit = New DataColumn("GL_journal_amount_debit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_debit)
            Me.columnGL_journal_amount_credit = New DataColumn("GL_journal_amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_credit)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnid_GL_journal.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function NewGL_journal_dtlRow() As GL_journal_dtlRow
            Return CType(Me.NewRow,GL_journal_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_journal_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_journal_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_journal_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_journal_dtlRowChanged(Me, New GL_journal_dtlRowChangeEvent(CType(e.Row,GL_journal_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_journal_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_journal_dtlRowChanging(Me, New GL_journal_dtlRowChangeEvent(CType(e.Row,GL_journal_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_journal_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_journal_dtlRowDeleted(Me, New GL_journal_dtlRowChangeEvent(CType(e.Row,GL_journal_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_journal_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_journal_dtlRowDeleting(Me, New GL_journal_dtlRowChangeEvent(CType(e.Row,GL_journal_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_journal_dtlRow(ByVal row As GL_journal_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_dtlRow
        Inherits DataRow
        
        Private tableGL_journal_dtl As GL_journal_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_journal_dtl = CType(Me.Table,GL_journal_dtlDataTable)
        End Sub
        
        Public Property id_GL_journal As Integer
            Get
                Return CType(Me(Me.tableGL_journal_dtl.id_GL_journalColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_journal_dtl.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableGL_journal_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tableGL_journal_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_dtl.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_dtl.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_reference As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_dtl.GL_journal_referenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_dtl.GL_journal_referenceColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_debit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_dtl.GL_journal_amount_debitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_dtl.GL_journal_amount_debitColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_dtl.GL_journal_amount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_dtl.GL_journal_amount_creditColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_dtl.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_dtl.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_dtl.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_journal_dtl.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_referenceNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_dtl.GL_journal_referenceColumn)
        End Function
        
        Public Sub SetGL_journal_referenceNull()
            Me(Me.tableGL_journal_dtl.GL_journal_referenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_debitNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_dtl.GL_journal_amount_debitColumn)
        End Function
        
        Public Sub SetGL_journal_amount_debitNull()
            Me(Me.tableGL_journal_dtl.GL_journal_amount_debitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_creditNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_dtl.GL_journal_amount_creditColumn)
        End Function
        
        Public Sub SetGL_journal_amount_creditNull()
            Me(Me.tableGL_journal_dtl.GL_journal_amount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_dtl.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_journal_dtl.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_journal_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_journal_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_journal_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_GL_journal As DataColumn
        
        Private columnGL_journal_date As DataColumn
        
        Private columnGL_journal_reference As DataColumn
        
        Private columnGL_journal_type_code As DataColumn
        
        Private columnGL_picture As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_journal_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_dateColumn As DataColumn
            Get
                Return Me.columnGL_journal_date
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_referenceColumn As DataColumn
            Get
                Return Me.columnGL_journal_reference
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_codeColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_code
            End Get
        End Property
        
        Friend ReadOnly Property GL_pictureColumn As DataColumn
            Get
                Return Me.columnGL_picture
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_journal_headRow
            Get
                Return CType(Me.Rows(index),GL_journal_headRow)
            End Get
        End Property
        
        Public Event GL_journal_headRowChanged As GL_journal_headRowChangeEventHandler
        
        Public Event GL_journal_headRowChanging As GL_journal_headRowChangeEventHandler
        
        Public Event GL_journal_headRowDeleted As GL_journal_headRowChangeEventHandler
        
        Public Event GL_journal_headRowDeleting As GL_journal_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_journal_headRow(ByVal row As GL_journal_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_journal_headRow(ByVal GL_journal_date As String, ByVal GL_journal_reference As String, ByVal GL_journal_type_code As String, ByVal GL_picture() As Byte) As GL_journal_headRow
            Dim rowGL_journal_headRow As GL_journal_headRow = CType(Me.NewRow,GL_journal_headRow)
            rowGL_journal_headRow.ItemArray = New Object() {Nothing, GL_journal_date, GL_journal_reference, GL_journal_type_code, GL_picture}
            Me.Rows.Add(rowGL_journal_headRow)
            Return rowGL_journal_headRow
        End Function
        
        Public Function FindByid_GL_journal(ByVal id_GL_journal As Integer) As GL_journal_headRow
            Return CType(Me.Rows.Find(New Object() {id_GL_journal}),GL_journal_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_journal_headDataTable = CType(MyBase.Clone,GL_journal_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_journal_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnGL_journal_date = Me.Columns("GL_journal_date")
            Me.columnGL_journal_reference = Me.Columns("GL_journal_reference")
            Me.columnGL_journal_type_code = Me.Columns("GL_journal_type_code")
            Me.columnGL_picture = Me.Columns("GL_picture")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnGL_journal_date = New DataColumn("GL_journal_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_date)
            Me.columnGL_journal_reference = New DataColumn("GL_journal_reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_reference)
            Me.columnGL_journal_type_code = New DataColumn("GL_journal_type_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_code)
            Me.columnGL_picture = New DataColumn("GL_picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_picture)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_GL_journal}, true))
            Me.columnid_GL_journal.AutoIncrement = true
            Me.columnid_GL_journal.AllowDBNull = false
            Me.columnid_GL_journal.ReadOnly = true
            Me.columnid_GL_journal.Unique = true
        End Sub
        
        Public Function NewGL_journal_headRow() As GL_journal_headRow
            Return CType(Me.NewRow,GL_journal_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_journal_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_journal_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_journal_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_journal_headRowChanged(Me, New GL_journal_headRowChangeEvent(CType(e.Row,GL_journal_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_journal_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_journal_headRowChanging(Me, New GL_journal_headRowChangeEvent(CType(e.Row,GL_journal_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_journal_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_journal_headRowDeleted(Me, New GL_journal_headRowChangeEvent(CType(e.Row,GL_journal_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_journal_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_journal_headRowDeleting(Me, New GL_journal_headRowChangeEvent(CType(e.Row,GL_journal_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_journal_headRow(ByVal row As GL_journal_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_headRow
        Inherits DataRow
        
        Private tableGL_journal_head As GL_journal_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_journal_head = CType(Me.Table,GL_journal_headDataTable)
        End Sub
        
        Public Property id_GL_journal As Integer
            Get
                Return CType(Me(Me.tableGL_journal_head.id_GL_journalColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_journal_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_head.GL_journal_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_head.GL_journal_dateColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_reference As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_head.GL_journal_referenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_head.GL_journal_referenceColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_head.GL_journal_type_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_head.GL_journal_type_codeColumn) = value
            End Set
        End Property
        
        Public Property GL_picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableGL_journal_head.GL_pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_journal_head.GL_pictureColumn) = value
            End Set
        End Property
        
        Public Function IsGL_journal_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_head.GL_journal_dateColumn)
        End Function
        
        Public Sub SetGL_journal_dateNull()
            Me(Me.tableGL_journal_head.GL_journal_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_referenceNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_head.GL_journal_referenceColumn)
        End Function
        
        Public Sub SetGL_journal_referenceNull()
            Me(Me.tableGL_journal_head.GL_journal_referenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_type_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_head.GL_journal_type_codeColumn)
        End Function
        
        Public Sub SetGL_journal_type_codeNull()
            Me(Me.tableGL_journal_head.GL_journal_type_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_pictureNull() As Boolean
            Return Me.IsNull(Me.tableGL_journal_head.GL_pictureColumn)
        End Function
        
        Public Sub SetGL_pictureNull()
            Me(Me.tableGL_journal_head.GL_pictureColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_journal_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_journal_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_journal_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_journal_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_ready_descriptionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_GL_ready_desc As DataColumn
        
        Private columnGL_ready_desc As DataColumn
        
        Private columnGL_journal_type_code As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_ready_description")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_ready_descColumn As DataColumn
            Get
                Return Me.columnid_GL_ready_desc
            End Get
        End Property
        
        Friend ReadOnly Property GL_ready_descColumn As DataColumn
            Get
                Return Me.columnGL_ready_desc
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_codeColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_ready_descriptionRow
            Get
                Return CType(Me.Rows(index),GL_ready_descriptionRow)
            End Get
        End Property
        
        Public Event GL_ready_descriptionRowChanged As GL_ready_descriptionRowChangeEventHandler
        
        Public Event GL_ready_descriptionRowChanging As GL_ready_descriptionRowChangeEventHandler
        
        Public Event GL_ready_descriptionRowDeleted As GL_ready_descriptionRowChangeEventHandler
        
        Public Event GL_ready_descriptionRowDeleting As GL_ready_descriptionRowChangeEventHandler
        
        Public Overloads Sub AddGL_ready_descriptionRow(ByVal row As GL_ready_descriptionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_ready_descriptionRow(ByVal id_GL_ready_desc As Integer, ByVal GL_ready_desc As String, ByVal GL_journal_type_code As String) As GL_ready_descriptionRow
            Dim rowGL_ready_descriptionRow As GL_ready_descriptionRow = CType(Me.NewRow,GL_ready_descriptionRow)
            rowGL_ready_descriptionRow.ItemArray = New Object() {id_GL_ready_desc, GL_ready_desc, GL_journal_type_code}
            Me.Rows.Add(rowGL_ready_descriptionRow)
            Return rowGL_ready_descriptionRow
        End Function
        
        Public Function FindByid_GL_ready_desc(ByVal id_GL_ready_desc As Integer) As GL_ready_descriptionRow
            Return CType(Me.Rows.Find(New Object() {id_GL_ready_desc}),GL_ready_descriptionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_ready_descriptionDataTable = CType(MyBase.Clone,GL_ready_descriptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_ready_descriptionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_GL_ready_desc = Me.Columns("id_GL_ready_desc")
            Me.columnGL_ready_desc = Me.Columns("GL_ready_desc")
            Me.columnGL_journal_type_code = Me.Columns("GL_journal_type_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_GL_ready_desc = New DataColumn("id_GL_ready_desc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_ready_desc)
            Me.columnGL_ready_desc = New DataColumn("GL_ready_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_ready_desc)
            Me.columnGL_journal_type_code = New DataColumn("GL_journal_type_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_code)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_GL_ready_desc}, true))
            Me.columnid_GL_ready_desc.AllowDBNull = false
            Me.columnid_GL_ready_desc.Unique = true
        End Sub
        
        Public Function NewGL_ready_descriptionRow() As GL_ready_descriptionRow
            Return CType(Me.NewRow,GL_ready_descriptionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_ready_descriptionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_ready_descriptionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_ready_descriptionRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_ready_descriptionRowChanged(Me, New GL_ready_descriptionRowChangeEvent(CType(e.Row,GL_ready_descriptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_ready_descriptionRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_ready_descriptionRowChanging(Me, New GL_ready_descriptionRowChangeEvent(CType(e.Row,GL_ready_descriptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_ready_descriptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_ready_descriptionRowDeleted(Me, New GL_ready_descriptionRowChangeEvent(CType(e.Row,GL_ready_descriptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_ready_descriptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_ready_descriptionRowDeleting(Me, New GL_ready_descriptionRowChangeEvent(CType(e.Row,GL_ready_descriptionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_ready_descriptionRow(ByVal row As GL_ready_descriptionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_ready_descriptionRow
        Inherits DataRow
        
        Private tableGL_ready_description As GL_ready_descriptionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_ready_description = CType(Me.Table,GL_ready_descriptionDataTable)
        End Sub
        
        Public Property id_GL_ready_desc As Integer
            Get
                Return CType(Me(Me.tableGL_ready_description.id_GL_ready_descColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_ready_description.id_GL_ready_descColumn) = value
            End Set
        End Property
        
        Public Property GL_ready_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_ready_description.GL_ready_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_ready_description.GL_ready_descColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_ready_description.GL_journal_type_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_ready_description.GL_journal_type_codeColumn) = value
            End Set
        End Property
        
        Public Function IsGL_ready_descNull() As Boolean
            Return Me.IsNull(Me.tableGL_ready_description.GL_ready_descColumn)
        End Function
        
        Public Sub SetGL_ready_descNull()
            Me(Me.tableGL_ready_description.GL_ready_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_type_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_ready_description.GL_journal_type_codeColumn)
        End Function
        
        Public Sub SetGL_journal_type_codeNull()
            Me(Me.tableGL_ready_description.GL_journal_type_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_ready_descriptionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_ready_descriptionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_ready_descriptionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_ready_descriptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_type_journalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGL_journal_type_code As DataColumn
        
        Private columnGL_journal_type_desc As DataColumn
        
        Private columnGL_ready_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_type_journal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_codeColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_code
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_descColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_desc
            End Get
        End Property
        
        Friend ReadOnly Property GL_ready_descColumn As DataColumn
            Get
                Return Me.columnGL_ready_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_type_journalRow
            Get
                Return CType(Me.Rows(index),GL_type_journalRow)
            End Get
        End Property
        
        Public Event GL_type_journalRowChanged As GL_type_journalRowChangeEventHandler
        
        Public Event GL_type_journalRowChanging As GL_type_journalRowChangeEventHandler
        
        Public Event GL_type_journalRowDeleted As GL_type_journalRowChangeEventHandler
        
        Public Event GL_type_journalRowDeleting As GL_type_journalRowChangeEventHandler
        
        Public Overloads Sub AddGL_type_journalRow(ByVal row As GL_type_journalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_type_journalRow(ByVal GL_journal_type_code As String, ByVal GL_journal_type_desc As String, ByVal GL_ready_desc As String) As GL_type_journalRow
            Dim rowGL_type_journalRow As GL_type_journalRow = CType(Me.NewRow,GL_type_journalRow)
            rowGL_type_journalRow.ItemArray = New Object() {GL_journal_type_code, GL_journal_type_desc, GL_ready_desc}
            Me.Rows.Add(rowGL_type_journalRow)
            Return rowGL_type_journalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_type_journalDataTable = CType(MyBase.Clone,GL_type_journalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_type_journalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGL_journal_type_code = Me.Columns("GL_journal_type_code")
            Me.columnGL_journal_type_desc = Me.Columns("GL_journal_type_desc")
            Me.columnGL_ready_desc = Me.Columns("GL_ready_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnGL_journal_type_code = New DataColumn("GL_journal_type_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_code)
            Me.columnGL_journal_type_desc = New DataColumn("GL_journal_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_desc)
            Me.columnGL_ready_desc = New DataColumn("GL_ready_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_ready_desc)
            Me.columnGL_journal_type_code.AllowDBNull = false
        End Sub
        
        Public Function NewGL_type_journalRow() As GL_type_journalRow
            Return CType(Me.NewRow,GL_type_journalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_type_journalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_type_journalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_type_journalRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_type_journalRowChanged(Me, New GL_type_journalRowChangeEvent(CType(e.Row,GL_type_journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_type_journalRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_type_journalRowChanging(Me, New GL_type_journalRowChangeEvent(CType(e.Row,GL_type_journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_type_journalRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_type_journalRowDeleted(Me, New GL_type_journalRowChangeEvent(CType(e.Row,GL_type_journalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_type_journalRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_type_journalRowDeleting(Me, New GL_type_journalRowChangeEvent(CType(e.Row,GL_type_journalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_type_journalRow(ByVal row As GL_type_journalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_type_journalRow
        Inherits DataRow
        
        Private tableGL_type_journal As GL_type_journalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_type_journal = CType(Me.Table,GL_type_journalDataTable)
        End Sub
        
        Public Property GL_journal_type_code As String
            Get
                Return CType(Me(Me.tableGL_type_journal.GL_journal_type_codeColumn),String)
            End Get
            Set
                Me(Me.tableGL_type_journal.GL_journal_type_codeColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_type_journal.GL_journal_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_type_journal.GL_journal_type_descColumn) = value
            End Set
        End Property
        
        Public Property GL_ready_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_type_journal.GL_ready_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_type_journal.GL_ready_descColumn) = value
            End Set
        End Property
        
        Public Function IsGL_journal_type_descNull() As Boolean
            Return Me.IsNull(Me.tableGL_type_journal.GL_journal_type_descColumn)
        End Function
        
        Public Sub SetGL_journal_type_descNull()
            Me(Me.tableGL_type_journal.GL_journal_type_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_ready_descNull() As Boolean
            Return Me.IsNull(Me.tableGL_type_journal.GL_ready_descColumn)
        End Function
        
        Public Sub SetGL_ready_descNull()
            Me(Me.tableGL_type_journal.GL_ready_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_type_journalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_type_journalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_type_journalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_type_journalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GeneralJournalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_GL_journal As DataColumn
        
        Private columnGL_journal_date As DataColumn
        
        Private columnGL_journal_reference As DataColumn
        
        Private columnGL_journal_type_code As DataColumn
        
        Private columnGL_picture As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnGL_journal_amount_debit As DataColumn
        
        Private columnGL_journal_amount_credit As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnSumBed As DataColumn
        
        Private columnSumBes As DataColumn
        
        Friend Sub New()
            MyBase.New("GeneralJournal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_dateColumn As DataColumn
            Get
                Return Me.columnGL_journal_date
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_referenceColumn As DataColumn
            Get
                Return Me.columnGL_journal_reference
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_type_codeColumn As DataColumn
            Get
                Return Me.columnGL_journal_type_code
            End Get
        End Property
        
        Friend ReadOnly Property GL_pictureColumn As DataColumn
            Get
                Return Me.columnGL_picture
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_debitColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_debit
            End Get
        End Property
        
        Friend ReadOnly Property GL_journal_amount_creditColumn As DataColumn
            Get
                Return Me.columnGL_journal_amount_credit
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property SumBedColumn As DataColumn
            Get
                Return Me.columnSumBed
            End Get
        End Property
        
        Friend ReadOnly Property SumBesColumn As DataColumn
            Get
                Return Me.columnSumBes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GeneralJournalRow
            Get
                Return CType(Me.Rows(index),GeneralJournalRow)
            End Get
        End Property
        
        Public Event GeneralJournalRowChanged As GeneralJournalRowChangeEventHandler
        
        Public Event GeneralJournalRowChanging As GeneralJournalRowChangeEventHandler
        
        Public Event GeneralJournalRowDeleted As GeneralJournalRowChangeEventHandler
        
        Public Event GeneralJournalRowDeleting As GeneralJournalRowChangeEventHandler
        
        Public Overloads Sub AddGeneralJournalRow(ByVal row As GeneralJournalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGeneralJournalRow(ByVal GL_journal_date As String, ByVal GL_journal_reference As String, ByVal GL_journal_type_code As String, ByVal GL_picture() As Byte, ByVal radif As Short, ByVal GL_account As String, ByVal GL_journal_amount_debit As Decimal, ByVal GL_journal_amount_credit As Decimal, ByVal desc_GL_account As String, ByVal SumBed As Decimal, ByVal SumBes As Decimal) As GeneralJournalRow
            Dim rowGeneralJournalRow As GeneralJournalRow = CType(Me.NewRow,GeneralJournalRow)
            rowGeneralJournalRow.ItemArray = New Object() {Nothing, GL_journal_date, GL_journal_reference, GL_journal_type_code, GL_picture, radif, GL_account, GL_journal_amount_debit, GL_journal_amount_credit, desc_GL_account, SumBed, SumBes}
            Me.Rows.Add(rowGeneralJournalRow)
            Return rowGeneralJournalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GeneralJournalDataTable = CType(MyBase.Clone,GeneralJournalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GeneralJournalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnGL_journal_date = Me.Columns("GL_journal_date")
            Me.columnGL_journal_reference = Me.Columns("GL_journal_reference")
            Me.columnGL_journal_type_code = Me.Columns("GL_journal_type_code")
            Me.columnGL_picture = Me.Columns("GL_picture")
            Me.columnradif = Me.Columns("radif")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnGL_journal_amount_debit = Me.Columns("GL_journal_amount_debit")
            Me.columnGL_journal_amount_credit = Me.Columns("GL_journal_amount_credit")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnSumBed = Me.Columns("SumBed")
            Me.columnSumBes = Me.Columns("SumBes")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnGL_journal_date = New DataColumn("GL_journal_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_date)
            Me.columnGL_journal_reference = New DataColumn("GL_journal_reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_reference)
            Me.columnGL_journal_type_code = New DataColumn("GL_journal_type_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_type_code)
            Me.columnGL_picture = New DataColumn("GL_picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_picture)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnGL_journal_amount_debit = New DataColumn("GL_journal_amount_debit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_debit)
            Me.columnGL_journal_amount_credit = New DataColumn("GL_journal_amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_journal_amount_credit)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnSumBed = New DataColumn("SumBed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumBed)
            Me.columnSumBes = New DataColumn("SumBes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumBes)
            Me.columnid_GL_journal.AutoIncrement = true
            Me.columnid_GL_journal.AllowDBNull = false
            Me.columnid_GL_journal.ReadOnly = true
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function NewGeneralJournalRow() As GeneralJournalRow
            Return CType(Me.NewRow,GeneralJournalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GeneralJournalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GeneralJournalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GeneralJournalRowChangedEvent) Is Nothing) Then
                RaiseEvent GeneralJournalRowChanged(Me, New GeneralJournalRowChangeEvent(CType(e.Row,GeneralJournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GeneralJournalRowChangingEvent) Is Nothing) Then
                RaiseEvent GeneralJournalRowChanging(Me, New GeneralJournalRowChangeEvent(CType(e.Row,GeneralJournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GeneralJournalRowDeletedEvent) Is Nothing) Then
                RaiseEvent GeneralJournalRowDeleted(Me, New GeneralJournalRowChangeEvent(CType(e.Row,GeneralJournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GeneralJournalRowDeletingEvent) Is Nothing) Then
                RaiseEvent GeneralJournalRowDeleting(Me, New GeneralJournalRowChangeEvent(CType(e.Row,GeneralJournalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGeneralJournalRow(ByVal row As GeneralJournalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GeneralJournalRow
        Inherits DataRow
        
        Private tableGeneralJournal As GeneralJournalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGeneralJournal = CType(Me.Table,GeneralJournalDataTable)
        End Sub
        
        Public Property id_GL_journal As Integer
            Get
                Return CType(Me(Me.tableGeneralJournal.id_GL_journalColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournal.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_journal_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_journal_dateColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_reference As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_journal_referenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_journal_referenceColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_type_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_journal_type_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_journal_type_codeColumn) = value
            End Set
        End Property
        
        Public Property GL_picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_pictureColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableGeneralJournal.radifColumn),Short)
            End Get
            Set
                Me(Me.tableGeneralJournal.radifColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_debit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_journal_amount_debitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_journal_amount_debitColumn) = value
            End Set
        End Property
        
        Public Property GL_journal_amount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.GL_journal_amount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.GL_journal_amount_creditColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneralJournal.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneralJournal.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property SumBed As Decimal
            Get
                If Me.IsSumBedNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableGeneralJournal.SumBedColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableGeneralJournal.SumBedColumn) = value
            End Set
        End Property
        
        Public Property SumBes As Decimal
            Get
                If Me.IsSumBesNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableGeneralJournal.SumBesColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableGeneralJournal.SumBesColumn) = value
            End Set
        End Property
        
        Public Function IsGL_journal_dateNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_journal_dateColumn)
        End Function
        
        Public Sub SetGL_journal_dateNull()
            Me(Me.tableGeneralJournal.GL_journal_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_referenceNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_journal_referenceColumn)
        End Function
        
        Public Sub SetGL_journal_referenceNull()
            Me(Me.tableGeneralJournal.GL_journal_referenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_type_codeNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_journal_type_codeColumn)
        End Function
        
        Public Sub SetGL_journal_type_codeNull()
            Me(Me.tableGeneralJournal.GL_journal_type_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_pictureNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_pictureColumn)
        End Function
        
        Public Sub SetGL_pictureNull()
            Me(Me.tableGeneralJournal.GL_pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGeneralJournal.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_debitNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_journal_amount_debitColumn)
        End Function
        
        Public Sub SetGL_journal_amount_debitNull()
            Me(Me.tableGeneralJournal.GL_journal_amount_debitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_journal_amount_creditNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.GL_journal_amount_creditColumn)
        End Function
        
        Public Sub SetGL_journal_amount_creditNull()
            Me(Me.tableGeneralJournal.GL_journal_amount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGeneralJournal.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSumBedNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.SumBedColumn)
        End Function
        
        Public Sub SetSumBedNull()
            Me(Me.tableGeneralJournal.SumBedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSumBesNull() As Boolean
            Return Me.IsNull(Me.tableGeneralJournal.SumBesColumn)
        End Function
        
        Public Sub SetSumBesNull()
            Me(Me.tableGeneralJournal.SumBesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GeneralJournalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GeneralJournalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GeneralJournalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GeneralJournalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TarazKolDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndesc_GL_account As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnManA_Bed As DataColumn
        
        Private columnManA_Bes As DataColumn
        
        Private columnJari_bed As DataColumn
        
        Private columnJari_Bes As DataColumn
        
        Private columnJam_Bed As DataColumn
        
        Private columnJam_Bes As DataColumn
        
        Private columnMan_Bed As DataColumn
        
        Private columnMan_Bes As DataColumn
        
        Friend Sub New()
            MyBase.New("TarazKol")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property ManA_BedColumn As DataColumn
            Get
                Return Me.columnManA_Bed
            End Get
        End Property
        
        Friend ReadOnly Property ManA_BesColumn As DataColumn
            Get
                Return Me.columnManA_Bes
            End Get
        End Property
        
        Friend ReadOnly Property Jari_bedColumn As DataColumn
            Get
                Return Me.columnJari_bed
            End Get
        End Property
        
        Friend ReadOnly Property Jari_BesColumn As DataColumn
            Get
                Return Me.columnJari_Bes
            End Get
        End Property
        
        Friend ReadOnly Property Jam_BedColumn As DataColumn
            Get
                Return Me.columnJam_Bed
            End Get
        End Property
        
        Friend ReadOnly Property Jam_BesColumn As DataColumn
            Get
                Return Me.columnJam_Bes
            End Get
        End Property
        
        Friend ReadOnly Property Man_BedColumn As DataColumn
            Get
                Return Me.columnMan_Bed
            End Get
        End Property
        
        Friend ReadOnly Property Man_BesColumn As DataColumn
            Get
                Return Me.columnMan_Bes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TarazKolRow
            Get
                Return CType(Me.Rows(index),TarazKolRow)
            End Get
        End Property
        
        Public Event TarazKolRowChanged As TarazKolRowChangeEventHandler
        
        Public Event TarazKolRowChanging As TarazKolRowChangeEventHandler
        
        Public Event TarazKolRowDeleted As TarazKolRowChangeEventHandler
        
        Public Event TarazKolRowDeleting As TarazKolRowChangeEventHandler
        
        Public Overloads Sub AddTarazKolRow(ByVal row As TarazKolRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTarazKolRow(ByVal desc_GL_account As String, ByVal GL_account As String, ByVal ManA_Bed As Decimal, ByVal ManA_Bes As Decimal, ByVal Jari_bed As Decimal, ByVal Jari_Bes As Decimal, ByVal Jam_Bed As Decimal, ByVal Jam_Bes As Decimal, ByVal Man_Bed As Decimal, ByVal Man_Bes As Decimal) As TarazKolRow
            Dim rowTarazKolRow As TarazKolRow = CType(Me.NewRow,TarazKolRow)
            rowTarazKolRow.ItemArray = New Object() {desc_GL_account, GL_account, ManA_Bed, ManA_Bes, Jari_bed, Jari_Bes, Jam_Bed, Jam_Bes, Man_Bed, Man_Bes}
            Me.Rows.Add(rowTarazKolRow)
            Return rowTarazKolRow
        End Function
        
        Public Function FindByGL_account(ByVal GL_account As String) As TarazKolRow
            Return CType(Me.Rows.Find(New Object() {GL_account}),TarazKolRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TarazKolDataTable = CType(MyBase.Clone,TarazKolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TarazKolDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnManA_Bed = Me.Columns("ManA_Bed")
            Me.columnManA_Bes = Me.Columns("ManA_Bes")
            Me.columnJari_bed = Me.Columns("Jari_bed")
            Me.columnJari_Bes = Me.Columns("Jari_Bes")
            Me.columnJam_Bed = Me.Columns("Jam_Bed")
            Me.columnJam_Bes = Me.Columns("Jam_Bes")
            Me.columnMan_Bed = Me.Columns("Man_Bed")
            Me.columnMan_Bes = Me.Columns("Man_Bes")
        End Sub
        
        Private Sub InitClass()
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnManA_Bed = New DataColumn("ManA_Bed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManA_Bed)
            Me.columnManA_Bes = New DataColumn("ManA_Bes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManA_Bes)
            Me.columnJari_bed = New DataColumn("Jari_bed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJari_bed)
            Me.columnJari_Bes = New DataColumn("Jari_Bes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJari_Bes)
            Me.columnJam_Bed = New DataColumn("Jam_Bed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJam_Bed)
            Me.columnJam_Bes = New DataColumn("Jam_Bes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJam_Bes)
            Me.columnMan_Bed = New DataColumn("Man_Bed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMan_Bed)
            Me.columnMan_Bes = New DataColumn("Man_Bes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMan_Bes)
            Me.Constraints.Add(New UniqueConstraint("DSFrmJournalKey1", New DataColumn() {Me.columnGL_account}, true))
            Me.columndesc_GL_account.AllowDBNull = false
            Me.columnGL_account.AllowDBNull = false
            Me.columnGL_account.Unique = true
        End Sub
        
        Public Function NewTarazKolRow() As TarazKolRow
            Return CType(Me.NewRow,TarazKolRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TarazKolRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TarazKolRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TarazKolRowChangedEvent) Is Nothing) Then
                RaiseEvent TarazKolRowChanged(Me, New TarazKolRowChangeEvent(CType(e.Row,TarazKolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TarazKolRowChangingEvent) Is Nothing) Then
                RaiseEvent TarazKolRowChanging(Me, New TarazKolRowChangeEvent(CType(e.Row,TarazKolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TarazKolRowDeletedEvent) Is Nothing) Then
                RaiseEvent TarazKolRowDeleted(Me, New TarazKolRowChangeEvent(CType(e.Row,TarazKolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TarazKolRowDeletingEvent) Is Nothing) Then
                RaiseEvent TarazKolRowDeleting(Me, New TarazKolRowChangeEvent(CType(e.Row,TarazKolRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTarazKolRow(ByVal row As TarazKolRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TarazKolRow
        Inherits DataRow
        
        Private tableTarazKol As TarazKolDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTarazKol = CType(Me.Table,TarazKolDataTable)
        End Sub
        
        Public Property desc_GL_account As String
            Get
                Return CType(Me(Me.tableTarazKol.desc_GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableTarazKol.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Return CType(Me(Me.tableTarazKol.GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableTarazKol.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property ManA_Bed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.ManA_BedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.ManA_BedColumn) = value
            End Set
        End Property
        
        Public Property ManA_Bes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.ManA_BesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.ManA_BesColumn) = value
            End Set
        End Property
        
        Public Property Jari_bed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Jari_bedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Jari_bedColumn) = value
            End Set
        End Property
        
        Public Property Jari_Bes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Jari_BesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Jari_BesColumn) = value
            End Set
        End Property
        
        Public Property Jam_Bed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Jam_BedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Jam_BedColumn) = value
            End Set
        End Property
        
        Public Property Jam_Bes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Jam_BesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Jam_BesColumn) = value
            End Set
        End Property
        
        Public Property Man_Bed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Man_BedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Man_BedColumn) = value
            End Set
        End Property
        
        Public Property Man_Bes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTarazKol.Man_BesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTarazKol.Man_BesColumn) = value
            End Set
        End Property
        
        Public Function IsManA_BedNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.ManA_BedColumn)
        End Function
        
        Public Sub SetManA_BedNull()
            Me(Me.tableTarazKol.ManA_BedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManA_BesNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.ManA_BesColumn)
        End Function
        
        Public Sub SetManA_BesNull()
            Me(Me.tableTarazKol.ManA_BesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJari_bedNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Jari_bedColumn)
        End Function
        
        Public Sub SetJari_bedNull()
            Me(Me.tableTarazKol.Jari_bedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJari_BesNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Jari_BesColumn)
        End Function
        
        Public Sub SetJari_BesNull()
            Me(Me.tableTarazKol.Jari_BesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJam_BedNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Jam_BedColumn)
        End Function
        
        Public Sub SetJam_BedNull()
            Me(Me.tableTarazKol.Jam_BedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJam_BesNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Jam_BesColumn)
        End Function
        
        Public Sub SetJam_BesNull()
            Me(Me.tableTarazKol.Jam_BesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMan_BedNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Man_BedColumn)
        End Function
        
        Public Sub SetMan_BedNull()
            Me(Me.tableTarazKol.Man_BedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMan_BesNull() As Boolean
            Return Me.IsNull(Me.tableTarazKol.Man_BesColumn)
        End Function
        
        Public Sub SetMan_BesNull()
            Me(Me.tableTarazKol.Man_BesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TarazKolRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TarazKolRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TarazKolRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TarazKolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
