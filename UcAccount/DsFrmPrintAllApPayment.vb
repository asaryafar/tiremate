'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsFrmPrintAllApPayment
    Inherits DataSet
    
    Private tableAllDate As AllDateDataTable
    
    Private tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AllDate")) Is Nothing) Then
                Me.Tables.Add(New AllDateDataTable(ds.Tables("AllDate")))
            End If
            If (Not (ds.Tables("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl")) Is Nothing) Then
                Me.Tables.Add(New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable(ds.Tables("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllDate As AllDateDataTable
        Get
            Return Me.tableAllDate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
        Get
            Return Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsFrmPrintAllApPayment = CType(MyBase.Clone,DsFrmPrintAllApPayment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AllDate")) Is Nothing) Then
            Me.Tables.Add(New AllDateDataTable(ds.Tables("AllDate")))
        End If
        If (Not (ds.Tables("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl")) Is Nothing) Then
            Me.Tables.Add(New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable(ds.Tables("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAllDate = CType(Me.Tables("AllDate"),AllDateDataTable)
        If (Not (Me.tableAllDate) Is Nothing) Then
            Me.tableAllDate.InitVars
        End If
        Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl = CType(Me.Tables("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl"),View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable)
        If (Not (Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl) Is Nothing) Then
            Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsFrmPrintAllApPayment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsFrmPrintAllApPayment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAllDate = New AllDateDataTable
        Me.Tables.Add(Me.tableAllDate)
        Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl = New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
        Me.Tables.Add(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl)
    End Sub
    
    Private Function ShouldSerializeAllDate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AllDateRowChangeEventHandler(ByVal sender As Object, ByVal e As AllDateRowChangeEvent)
    
    Public Delegate Sub View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_prepare As DataColumn
        
        Friend Sub New()
            MyBase.New("AllDate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_prepareColumn As DataColumn
            Get
                Return Me.columndate_prepare
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllDateRow
            Get
                Return CType(Me.Rows(index),AllDateRow)
            End Get
        End Property
        
        Public Event AllDateRowChanged As AllDateRowChangeEventHandler
        
        Public Event AllDateRowChanging As AllDateRowChangeEventHandler
        
        Public Event AllDateRowDeleted As AllDateRowChangeEventHandler
        
        Public Event AllDateRowDeleting As AllDateRowChangeEventHandler
        
        Public Overloads Sub AddAllDateRow(ByVal row As AllDateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllDateRow(ByVal date_prepare As String) As AllDateRow
            Dim rowAllDateRow As AllDateRow = CType(Me.NewRow,AllDateRow)
            rowAllDateRow.ItemArray = New Object() {date_prepare}
            Me.Rows.Add(rowAllDateRow)
            Return rowAllDateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllDateDataTable = CType(MyBase.Clone,AllDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllDateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_prepare = Me.Columns("date_prepare")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_prepare = New DataColumn("date_prepare", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_prepare)
            Me.columndate_prepare.AllowDBNull = false
        End Sub
        
        Public Function NewAllDateRow() As AllDateRow
            Return CType(Me.NewRow,AllDateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllDateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllDateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllDateRowChangedEvent) Is Nothing) Then
                RaiseEvent AllDateRowChanged(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllDateRowChangingEvent) Is Nothing) Then
                RaiseEvent AllDateRowChanging(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllDateRowDeleted(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllDateRowDeleting(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllDateRow(ByVal row As AllDateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateRow
        Inherits DataRow
        
        Private tableAllDate As AllDateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllDate = CType(Me.Table,AllDateDataTable)
        End Sub
        
        Public Property date_prepare As String
            Get
                Return CType(Me(Me.tableAllDate.date_prepareColumn),String)
            End Get
            Set
                Me(Me.tableAllDate.date_prepareColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllDateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllDateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnvendorrefno As DataColumn
        
        Private columnpreparedate As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnamount_pay As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Private columnamount_check As DataColumn
        
        Private columndate_of_check As DataColumn
        
        Friend Sub New()
            MyBase.New("View_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property vendorrefnoColumn As DataColumn
            Get
                Return Me.columnvendorrefno
            End Get
        End Property
        
        Friend ReadOnly Property preparedateColumn As DataColumn
            Get
                Return Me.columnpreparedate
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property amount_payColumn As DataColumn
            Get
                Return Me.columnamount_pay
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property amount_checkColumn As DataColumn
            Get
                Return Me.columnamount_check
            End Get
        End Property
        
        Friend ReadOnly Property date_of_checkColumn As DataColumn
            Get
                Return Me.columndate_of_check
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
            Get
                Return CType(Me.Rows(index),View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
            End Get
        End Property
        
        Public Event View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChanged As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEventHandler
        
        Public Event View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChanging As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEventHandler
        
        Public Event View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeleted As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEventHandler
        
        Public Event View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeleting As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEventHandler
        
        Public Overloads Sub AddView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow(ByVal row As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow(ByVal vendorrefno As String, ByVal preparedate As String, ByVal due_date As String, ByVal cod_vendor As String, ByVal amount_pay As Decimal, ByVal sumoriginalamount As Decimal, ByVal sumpayment As Decimal, ByVal desc_vendor As String, ByVal DateTransaction As String, ByVal id_check As Integer, ByVal id_vendor_credit_head As Integer, ByVal name_bank As String, ByVal no_of_check As String, ByVal amount_check As Decimal, ByVal date_of_check As String) As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
            Dim rowView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow = CType(Me.NewRow,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
            rowView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow.ItemArray = New Object() {vendorrefno, preparedate, due_date, cod_vendor, amount_pay, sumoriginalamount, sumpayment, desc_vendor, DateTransaction, id_check, id_vendor_credit_head, name_bank, no_of_check, amount_check, date_of_check}
            Me.Rows.Add(rowView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
            Return rowView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable = CType(MyBase.Clone,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnvendorrefno = Me.Columns("vendorrefno")
            Me.columnpreparedate = Me.Columns("preparedate")
            Me.columndue_date = Me.Columns("due_date")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnamount_pay = Me.Columns("amount_pay")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columnamount_check = Me.Columns("amount_check")
            Me.columndate_of_check = Me.Columns("date_of_check")
        End Sub
        
        Private Sub InitClass()
            Me.columnvendorrefno = New DataColumn("vendorrefno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorrefno)
            Me.columnpreparedate = New DataColumn("preparedate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpreparedate)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnamount_pay = New DataColumn("amount_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_pay)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnamount_check = New DataColumn("amount_check", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_check)
            Me.columndate_of_check = New DataColumn("date_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_check)
            Me.columnpreparedate.AllowDBNull = false
            Me.columnamount_pay.AllowDBNull = false
        End Sub
        
        Public Function NewView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow() As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
            Return CType(Me.NewRow,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChanged(Me, New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent(CType(e.Row,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChanging(Me, New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent(CType(e.Row,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeleted(Me, New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent(CType(e.Row,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowDeleting(Me, New View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent(CType(e.Row,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow(ByVal row As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
        Inherits DataRow
        
        Private tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl = CType(Me.Table,View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlDataTable)
        End Sub
        
        Public Property vendorrefno As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.vendorrefnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.vendorrefnoColumn) = value
            End Set
        End Property
        
        Public Property preparedate As String
            Get
                Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.preparedateColumn),String)
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.preparedateColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property amount_pay As Decimal
            Get
                Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_payColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_payColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumoriginalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumpaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_checkColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.name_bankColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property amount_check As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_checkColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_checkColumn) = value
            End Set
        End Property
        
        Public Property date_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.date_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.date_of_checkColumn) = value
            End Set
        End Property
        
        Public Function IsvendorrefnoNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.vendorrefnoColumn)
        End Function
        
        Public Sub SetvendorrefnoNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.vendorrefnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumoriginalamountNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumoriginalamountColumn)
        End Function
        
        Public Sub SetsumoriginalamountNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumoriginalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumpaymentNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumpaymentColumn)
        End Function
        
        Public Sub SetsumpaymentNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.sumpaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_checkNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_checkColumn)
        End Function
        
        Public Sub Setamount_checkNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.amount_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_of_checkNull() As Boolean
            Return Me.IsNull(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.date_of_checkColumn)
        End Function
        
        Public Sub Setdate_of_checkNull()
            Me(Me.tableView_AllPreAndPaidGl_Ap_Bill_Dtl_Dtl.date_of_checkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_AllPreAndPaidGl_Ap_Bill_Dtl_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
