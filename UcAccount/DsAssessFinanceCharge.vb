'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsAssessFinanceCharge
    Inherits DataSet
    
    Private tableassess As assessDataTable
    
    Private tableBedehi As BedehiDataTable
    
    Private tableAssessDtl As AssessDtlDataTable
    
    Private tablePardakt As PardaktDataTable
    
    Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
    
    Private tableinv_vendor As inv_vendorDataTable
    
    Private tableAllDetail As AllDetailDataTable
    
    Private relationassessAssessDtl As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("assess")) Is Nothing) Then
                Me.Tables.Add(New assessDataTable(ds.Tables("assess")))
            End If
            If (Not (ds.Tables("Bedehi")) Is Nothing) Then
                Me.Tables.Add(New BedehiDataTable(ds.Tables("Bedehi")))
            End If
            If (Not (ds.Tables("AssessDtl")) Is Nothing) Then
                Me.Tables.Add(New AssessDtlDataTable(ds.Tables("AssessDtl")))
            End If
            If (Not (ds.Tables("Pardakt")) Is Nothing) Then
                Me.Tables.Add(New PardaktDataTable(ds.Tables("Pardakt")))
            End If
            If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
            End If
            If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
            End If
            If (Not (ds.Tables("AllDetail")) Is Nothing) Then
                Me.Tables.Add(New AllDetailDataTable(ds.Tables("AllDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property assess As assessDataTable
        Get
            Return Me.tableassess
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bedehi As BedehiDataTable
        Get
            Return Me.tableBedehi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssessDtl As AssessDtlDataTable
        Get
            Return Me.tableAssessDtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pardakt As PardaktDataTable
        Get
            Return Me.tablePardakt
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_head As GL_account_adjustment_headDataTable
        Get
            Return Me.tableGL_account_adjustment_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_vendor As inv_vendorDataTable
        Get
            Return Me.tableinv_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllDetail As AllDetailDataTable
        Get
            Return Me.tableAllDetail
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsAssessFinanceCharge = CType(MyBase.Clone,DsAssessFinanceCharge)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("assess")) Is Nothing) Then
            Me.Tables.Add(New assessDataTable(ds.Tables("assess")))
        End If
        If (Not (ds.Tables("Bedehi")) Is Nothing) Then
            Me.Tables.Add(New BedehiDataTable(ds.Tables("Bedehi")))
        End If
        If (Not (ds.Tables("AssessDtl")) Is Nothing) Then
            Me.Tables.Add(New AssessDtlDataTable(ds.Tables("AssessDtl")))
        End If
        If (Not (ds.Tables("Pardakt")) Is Nothing) Then
            Me.Tables.Add(New PardaktDataTable(ds.Tables("Pardakt")))
        End If
        If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
        End If
        If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
        End If
        If (Not (ds.Tables("AllDetail")) Is Nothing) Then
            Me.Tables.Add(New AllDetailDataTable(ds.Tables("AllDetail")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableassess = CType(Me.Tables("assess"),assessDataTable)
        If (Not (Me.tableassess) Is Nothing) Then
            Me.tableassess.InitVars
        End If
        Me.tableBedehi = CType(Me.Tables("Bedehi"),BedehiDataTable)
        If (Not (Me.tableBedehi) Is Nothing) Then
            Me.tableBedehi.InitVars
        End If
        Me.tableAssessDtl = CType(Me.Tables("AssessDtl"),AssessDtlDataTable)
        If (Not (Me.tableAssessDtl) Is Nothing) Then
            Me.tableAssessDtl.InitVars
        End If
        Me.tablePardakt = CType(Me.Tables("Pardakt"),PardaktDataTable)
        If (Not (Me.tablePardakt) Is Nothing) Then
            Me.tablePardakt.InitVars
        End If
        Me.tableGL_account_adjustment_head = CType(Me.Tables("GL_account_adjustment_head"),GL_account_adjustment_headDataTable)
        If (Not (Me.tableGL_account_adjustment_head) Is Nothing) Then
            Me.tableGL_account_adjustment_head.InitVars
        End If
        Me.tableinv_vendor = CType(Me.Tables("inv_vendor"),inv_vendorDataTable)
        If (Not (Me.tableinv_vendor) Is Nothing) Then
            Me.tableinv_vendor.InitVars
        End If
        Me.tableAllDetail = CType(Me.Tables("AllDetail"),AllDetailDataTable)
        If (Not (Me.tableAllDetail) Is Nothing) Then
            Me.tableAllDetail.InitVars
        End If
        Me.relationassessAssessDtl = Me.Relations("assessAssessDtl")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsAssessFinanceCharge"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsAssessFinanceCharge.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableassess = New assessDataTable
        Me.Tables.Add(Me.tableassess)
        Me.tableBedehi = New BedehiDataTable
        Me.Tables.Add(Me.tableBedehi)
        Me.tableAssessDtl = New AssessDtlDataTable
        Me.Tables.Add(Me.tableAssessDtl)
        Me.tablePardakt = New PardaktDataTable
        Me.Tables.Add(Me.tablePardakt)
        Me.tableGL_account_adjustment_head = New GL_account_adjustment_headDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_head)
        Me.tableinv_vendor = New inv_vendorDataTable
        Me.Tables.Add(Me.tableinv_vendor)
        Me.tableAllDetail = New AllDetailDataTable
        Me.Tables.Add(Me.tableAllDetail)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("assessAssessDtl", New DataColumn() {Me.tableassess.cod_customerColumn}, New DataColumn() {Me.tableAssessDtl.cod_customerColumn})
        Me.tableAssessDtl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationassessAssessDtl = New DataRelation("assessAssessDtl", New DataColumn() {Me.tableassess.cod_customerColumn}, New DataColumn() {Me.tableAssessDtl.cod_customerColumn}, false)
        Me.Relations.Add(Me.relationassessAssessDtl)
    End Sub
    
    Private Function ShouldSerializeassess() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBedehi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAssessDtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePardakt() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_adjustment_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAllDetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub assessRowChangeEventHandler(ByVal sender As Object, ByVal e As assessRowChangeEvent)
    
    Public Delegate Sub BedehiRowChangeEventHandler(ByVal sender As Object, ByVal e As BedehiRowChangeEvent)
    
    Public Delegate Sub AssessDtlRowChangeEventHandler(ByVal sender As Object, ByVal e As AssessDtlRowChangeEvent)
    
    Public Delegate Sub PardaktRowChangeEventHandler(ByVal sender As Object, ByVal e As PardaktRowChangeEvent)
    
    Public Delegate Sub GL_account_adjustment_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_headRowChangeEvent)
    
    Public Delegate Sub inv_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_vendorRowChangeEvent)
    
    Public Delegate Sub AllDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AllDetailRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class assessDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssess As DataColumn
        
        Private columnLastFinanceCharge As DataColumn
        
        Private columnCustomerName As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnPastDueAmount As DataColumn
        
        Private columnFinanceCharge As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnFinanceChargeDay As DataColumn
        
        Friend Sub New()
            MyBase.New("assess")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AssessColumn As DataColumn
            Get
                Return Me.columnAssess
            End Get
        End Property
        
        Friend ReadOnly Property LastFinanceChargeColumn As DataColumn
            Get
                Return Me.columnLastFinanceCharge
            End Get
        End Property
        
        Friend ReadOnly Property CustomerNameColumn As DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property PastDueAmountColumn As DataColumn
            Get
                Return Me.columnPastDueAmount
            End Get
        End Property
        
        Friend ReadOnly Property FinanceChargeColumn As DataColumn
            Get
                Return Me.columnFinanceCharge
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property FinanceChargeDayColumn As DataColumn
            Get
                Return Me.columnFinanceChargeDay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As assessRow
            Get
                Return CType(Me.Rows(index),assessRow)
            End Get
        End Property
        
        Public Event assessRowChanged As assessRowChangeEventHandler
        
        Public Event assessRowChanging As assessRowChangeEventHandler
        
        Public Event assessRowDeleted As assessRowChangeEventHandler
        
        Public Event assessRowDeleting As assessRowChangeEventHandler
        
        Public Overloads Sub AddassessRow(ByVal row As assessRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddassessRow(ByVal Assess As Boolean, ByVal LastFinanceCharge As String, ByVal CustomerName As String, ByVal Company As String, ByVal PastDueAmount As Decimal, ByVal FinanceCharge As Double, ByVal cod_customer As String, ByVal FinanceChargeDay As Long) As assessRow
            Dim rowassessRow As assessRow = CType(Me.NewRow,assessRow)
            rowassessRow.ItemArray = New Object() {Assess, LastFinanceCharge, CustomerName, Company, PastDueAmount, FinanceCharge, cod_customer, FinanceChargeDay}
            Me.Rows.Add(rowassessRow)
            Return rowassessRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As assessRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),assessRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As assessDataTable = CType(MyBase.Clone,assessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New assessDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAssess = Me.Columns("Assess")
            Me.columnLastFinanceCharge = Me.Columns("LastFinanceCharge")
            Me.columnCustomerName = Me.Columns("CustomerName")
            Me.columnCompany = Me.Columns("Company")
            Me.columnPastDueAmount = Me.Columns("PastDueAmount")
            Me.columnFinanceCharge = Me.Columns("FinanceCharge")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnFinanceChargeDay = Me.Columns("FinanceChargeDay")
        End Sub
        
        Private Sub InitClass()
            Me.columnAssess = New DataColumn("Assess", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssess)
            Me.columnLastFinanceCharge = New DataColumn("LastFinanceCharge", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastFinanceCharge)
            Me.columnCustomerName = New DataColumn("CustomerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerName)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnPastDueAmount = New DataColumn("PastDueAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPastDueAmount)
            Me.columnFinanceCharge = New DataColumn("FinanceCharge", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFinanceCharge)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnFinanceChargeDay = New DataColumn("FinanceChargeDay", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFinanceChargeDay)
            Me.Constraints.Add(New UniqueConstraint("DsAssessFinanceChargeKey3", New DataColumn() {Me.columncod_customer}, true))
            Me.columnAssess.DefaultValue = true
            Me.columnLastFinanceCharge.AllowDBNull = false
            Me.columnCustomerName.AllowDBNull = false
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function NewassessRow() As assessRow
            Return CType(Me.NewRow,assessRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New assessRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(assessRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.assessRowChangedEvent) Is Nothing) Then
                RaiseEvent assessRowChanged(Me, New assessRowChangeEvent(CType(e.Row,assessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.assessRowChangingEvent) Is Nothing) Then
                RaiseEvent assessRowChanging(Me, New assessRowChangeEvent(CType(e.Row,assessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.assessRowDeletedEvent) Is Nothing) Then
                RaiseEvent assessRowDeleted(Me, New assessRowChangeEvent(CType(e.Row,assessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.assessRowDeletingEvent) Is Nothing) Then
                RaiseEvent assessRowDeleting(Me, New assessRowChangeEvent(CType(e.Row,assessRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveassessRow(ByVal row As assessRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class assessRow
        Inherits DataRow
        
        Private tableassess As assessDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableassess = CType(Me.Table,assessDataTable)
        End Sub
        
        Public Property Assess As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableassess.AssessColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassess.AssessColumn) = value
            End Set
        End Property
        
        Public Property LastFinanceCharge As String
            Get
                Return CType(Me(Me.tableassess.LastFinanceChargeColumn),String)
            End Get
            Set
                Me(Me.tableassess.LastFinanceChargeColumn) = value
            End Set
        End Property
        
        Public Property CustomerName As String
            Get
                Return CType(Me(Me.tableassess.CustomerNameColumn),String)
            End Get
            Set
                Me(Me.tableassess.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableassess.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassess.CompanyColumn) = value
            End Set
        End Property
        
        Public Property PastDueAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableassess.PastDueAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassess.PastDueAmountColumn) = value
            End Set
        End Property
        
        Public Property FinanceCharge As Double
            Get
                Try 
                    Return CType(Me(Me.tableassess.FinanceChargeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassess.FinanceChargeColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableassess.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableassess.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property FinanceChargeDay As Long
            Get
                Try 
                    Return CType(Me(Me.tableassess.FinanceChargeDayColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassess.FinanceChargeDayColumn) = value
            End Set
        End Property
        
        Public Function IsAssessNull() As Boolean
            Return Me.IsNull(Me.tableassess.AssessColumn)
        End Function
        
        Public Sub SetAssessNull()
            Me(Me.tableassess.AssessColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableassess.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableassess.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPastDueAmountNull() As Boolean
            Return Me.IsNull(Me.tableassess.PastDueAmountColumn)
        End Function
        
        Public Sub SetPastDueAmountNull()
            Me(Me.tableassess.PastDueAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFinanceChargeNull() As Boolean
            Return Me.IsNull(Me.tableassess.FinanceChargeColumn)
        End Function
        
        Public Sub SetFinanceChargeNull()
            Me(Me.tableassess.FinanceChargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFinanceChargeDayNull() As Boolean
            Return Me.IsNull(Me.tableassess.FinanceChargeDayColumn)
        End Function
        
        Public Sub SetFinanceChargeDayNull()
            Me(Me.tableassess.FinanceChargeDayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAssessDtlRows() As AssessDtlRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("assessAssessDtl")),AssessDtlRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class assessRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As assessRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As assessRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As assessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BedehiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpayment_amount As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnCustomerName As DataColumn
        
        Private columnCompany As DataColumn
        
        Friend Sub New()
            MyBase.New("Bedehi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property CustomerNameColumn As DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BedehiRow
            Get
                Return CType(Me.Rows(index),BedehiRow)
            End Get
        End Property
        
        Public Event BedehiRowChanged As BedehiRowChangeEventHandler
        
        Public Event BedehiRowChanging As BedehiRowChangeEventHandler
        
        Public Event BedehiRowDeleted As BedehiRowChangeEventHandler
        
        Public Event BedehiRowDeleting As BedehiRowChangeEventHandler
        
        Public Overloads Sub AddBedehiRow(ByVal row As BedehiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBedehiRow(ByVal payment_amount As Decimal, ByVal AR_due_date As String, ByVal cod_customer As String, ByVal id_service_center As String, ByVal payment_type As String, ByVal CustomerName As String, ByVal Company As String) As BedehiRow
            Dim rowBedehiRow As BedehiRow = CType(Me.NewRow,BedehiRow)
            rowBedehiRow.ItemArray = New Object() {payment_amount, AR_due_date, cod_customer, id_service_center, Nothing, payment_type, CustomerName, Company}
            Me.Rows.Add(rowBedehiRow)
            Return rowBedehiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BedehiDataTable = CType(MyBase.Clone,BedehiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BedehiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnCustomerName = Me.Columns("CustomerName")
            Me.columnCompany = Me.Columns("Company")
        End Sub
        
        Private Sub InitClass()
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnCustomerName = New DataColumn("CustomerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerName)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.ReadOnly = true
        End Sub
        
        Public Function NewBedehiRow() As BedehiRow
            Return CType(Me.NewRow,BedehiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BedehiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BedehiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BedehiRowChangedEvent) Is Nothing) Then
                RaiseEvent BedehiRowChanged(Me, New BedehiRowChangeEvent(CType(e.Row,BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BedehiRowChangingEvent) Is Nothing) Then
                RaiseEvent BedehiRowChanging(Me, New BedehiRowChangeEvent(CType(e.Row,BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BedehiRowDeletedEvent) Is Nothing) Then
                RaiseEvent BedehiRowDeleted(Me, New BedehiRowChangeEvent(CType(e.Row,BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BedehiRowDeletingEvent) Is Nothing) Then
                RaiseEvent BedehiRowDeleting(Me, New BedehiRowChangeEvent(CType(e.Row,BedehiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBedehiRow(ByVal row As BedehiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BedehiRow
        Inherits DataRow
        
        Private tableBedehi As BedehiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBedehi = CType(Me.Table,BedehiDataTable)
        End Sub
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property CustomerName As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.CustomerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.CustomerNameColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableBedehi.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBedehi.CompanyColumn) = value
            End Set
        End Property
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableBedehi.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableBedehi.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableBedehi.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableBedehi.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableBedehi.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableBedehi.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.CustomerNameColumn)
        End Function
        
        Public Sub SetCustomerNameNull()
            Me(Me.tableBedehi.CustomerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableBedehi.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableBedehi.CompanyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BedehiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BedehiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BedehiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BedehiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssessDtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFinanceCharge As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Friend Sub New()
            MyBase.New("AssessDtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FinanceChargeColumn As DataColumn
            Get
                Return Me.columnFinanceCharge
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssessDtlRow
            Get
                Return CType(Me.Rows(index),AssessDtlRow)
            End Get
        End Property
        
        Public Event AssessDtlRowChanged As AssessDtlRowChangeEventHandler
        
        Public Event AssessDtlRowChanging As AssessDtlRowChangeEventHandler
        
        Public Event AssessDtlRowDeleted As AssessDtlRowChangeEventHandler
        
        Public Event AssessDtlRowDeleting As AssessDtlRowChangeEventHandler
        
        Public Overloads Sub AddAssessDtlRow(ByVal row As AssessDtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAssessDtlRow(ByVal FinanceCharge As Decimal, ByVal parentassessRowByassessAssessDtl As assessRow, ByVal id_service_center As String) As AssessDtlRow
            Dim rowAssessDtlRow As AssessDtlRow = CType(Me.NewRow,AssessDtlRow)
            rowAssessDtlRow.ItemArray = New Object() {FinanceCharge, parentassessRowByassessAssessDtl(6), id_service_center}
            Me.Rows.Add(rowAssessDtlRow)
            Return rowAssessDtlRow
        End Function
        
        Public Function FindBycod_customerid_service_center(ByVal cod_customer As String, ByVal id_service_center As String) As AssessDtlRow
            Return CType(Me.Rows.Find(New Object() {cod_customer, id_service_center}),AssessDtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AssessDtlDataTable = CType(MyBase.Clone,AssessDtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AssessDtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFinanceCharge = Me.Columns("FinanceCharge")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnid_service_center = Me.Columns("id_service_center")
        End Sub
        
        Private Sub InitClass()
            Me.columnFinanceCharge = New DataColumn("FinanceCharge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFinanceCharge)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.Constraints.Add(New UniqueConstraint("DsAssessFinanceChargeKey4", New DataColumn() {Me.columncod_customer, Me.columnid_service_center}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewAssessDtlRow() As AssessDtlRow
            Return CType(Me.NewRow,AssessDtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AssessDtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssessDtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssessDtlRowChangedEvent) Is Nothing) Then
                RaiseEvent AssessDtlRowChanged(Me, New AssessDtlRowChangeEvent(CType(e.Row,AssessDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssessDtlRowChangingEvent) Is Nothing) Then
                RaiseEvent AssessDtlRowChanging(Me, New AssessDtlRowChangeEvent(CType(e.Row,AssessDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssessDtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssessDtlRowDeleted(Me, New AssessDtlRowChangeEvent(CType(e.Row,AssessDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssessDtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssessDtlRowDeleting(Me, New AssessDtlRowChangeEvent(CType(e.Row,AssessDtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAssessDtlRow(ByVal row As AssessDtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssessDtlRow
        Inherits DataRow
        
        Private tableAssessDtl As AssessDtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssessDtl = CType(Me.Table,AssessDtlDataTable)
        End Sub
        
        Public Property FinanceCharge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAssessDtl.FinanceChargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssessDtl.FinanceChargeColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableAssessDtl.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableAssessDtl.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableAssessDtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableAssessDtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property assessRow As assessRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("assessAssessDtl")),assessRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("assessAssessDtl"))
            End Set
        End Property
        
        Public Function IsFinanceChargeNull() As Boolean
            Return Me.IsNull(Me.tableAssessDtl.FinanceChargeColumn)
        End Function
        
        Public Sub SetFinanceChargeNull()
            Me(Me.tableAssessDtl.FinanceChargeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssessDtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AssessDtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AssessDtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AssessDtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PardaktDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndatepardakht As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnID_payment_due As DataColumn
        
        Private columnID_payment_Paid As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columncod_customer As DataColumn
        
        Friend Sub New()
            MyBase.New("Pardakt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property datepardakhtColumn As DataColumn
            Get
                Return Me.columndatepardakht
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property ID_payment_dueColumn As DataColumn
            Get
                Return Me.columnID_payment_due
            End Get
        End Property
        
        Friend ReadOnly Property ID_payment_PaidColumn As DataColumn
            Get
                Return Me.columnID_payment_Paid
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PardaktRow
            Get
                Return CType(Me.Rows(index),PardaktRow)
            End Get
        End Property
        
        Public Event PardaktRowChanged As PardaktRowChangeEventHandler
        
        Public Event PardaktRowChanging As PardaktRowChangeEventHandler
        
        Public Event PardaktRowDeleted As PardaktRowChangeEventHandler
        
        Public Event PardaktRowDeleting As PardaktRowChangeEventHandler
        
        Public Overloads Sub AddPardaktRow(ByVal row As PardaktRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPardaktRow(ByVal datepardakht As String, ByVal refrence_no As String, ByVal id_service_center As String, ByVal ID_payment_due As Integer, ByVal ID_payment_Paid As Integer, ByVal payment_amount As Decimal, ByVal cod_customer As String) As PardaktRow
            Dim rowPardaktRow As PardaktRow = CType(Me.NewRow,PardaktRow)
            rowPardaktRow.ItemArray = New Object() {datepardakht, refrence_no, id_service_center, ID_payment_due, ID_payment_Paid, payment_amount, cod_customer}
            Me.Rows.Add(rowPardaktRow)
            Return rowPardaktRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PardaktDataTable = CType(MyBase.Clone,PardaktDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PardaktDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndatepardakht = Me.Columns("datepardakht")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnID_payment_due = Me.Columns("ID_payment_due")
            Me.columnID_payment_Paid = Me.Columns("ID_payment_Paid")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columncod_customer = Me.Columns("cod_customer")
        End Sub
        
        Private Sub InitClass()
            Me.columndatepardakht = New DataColumn("datepardakht", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndatepardakht)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnID_payment_due = New DataColumn("ID_payment_due", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment_due)
            Me.columnID_payment_Paid = New DataColumn("ID_payment_Paid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment_Paid)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnID_payment_due.AllowDBNull = false
            Me.columnID_payment_Paid.AllowDBNull = false
            Me.columncod_customer.AllowDBNull = false
        End Sub
        
        Public Function NewPardaktRow() As PardaktRow
            Return CType(Me.NewRow,PardaktRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PardaktRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PardaktRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PardaktRowChangedEvent) Is Nothing) Then
                RaiseEvent PardaktRowChanged(Me, New PardaktRowChangeEvent(CType(e.Row,PardaktRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PardaktRowChangingEvent) Is Nothing) Then
                RaiseEvent PardaktRowChanging(Me, New PardaktRowChangeEvent(CType(e.Row,PardaktRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PardaktRowDeletedEvent) Is Nothing) Then
                RaiseEvent PardaktRowDeleted(Me, New PardaktRowChangeEvent(CType(e.Row,PardaktRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PardaktRowDeletingEvent) Is Nothing) Then
                RaiseEvent PardaktRowDeleting(Me, New PardaktRowChangeEvent(CType(e.Row,PardaktRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePardaktRow(ByVal row As PardaktRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PardaktRow
        Inherits DataRow
        
        Private tablePardakt As PardaktDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePardakt = CType(Me.Table,PardaktDataTable)
        End Sub
        
        Public Property datepardakht As String
            Get
                Try 
                    Return CType(Me(Me.tablePardakt.datepardakhtColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePardakt.datepardakhtColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tablePardakt.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePardakt.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tablePardakt.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePardakt.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property ID_payment_due As Integer
            Get
                Return CType(Me(Me.tablePardakt.ID_payment_dueColumn),Integer)
            End Get
            Set
                Me(Me.tablePardakt.ID_payment_dueColumn) = value
            End Set
        End Property
        
        Public Property ID_payment_Paid As Integer
            Get
                Return CType(Me(Me.tablePardakt.ID_payment_PaidColumn),Integer)
            End Get
            Set
                Me(Me.tablePardakt.ID_payment_PaidColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePardakt.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePardakt.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablePardakt.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablePardakt.cod_customerColumn) = value
            End Set
        End Property
        
        Public Function IsdatepardakhtNull() As Boolean
            Return Me.IsNull(Me.tablePardakt.datepardakhtColumn)
        End Function
        
        Public Sub SetdatepardakhtNull()
            Me(Me.tablePardakt.datepardakhtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tablePardakt.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tablePardakt.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tablePardakt.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tablePardakt.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tablePardakt.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tablePardakt.payment_amountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PardaktRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PardaktRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PardaktRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PardaktRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnSumamount_adjustment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property Sumamount_adjustmentColumn As DataColumn
            Get
                Return Me.columnSumamount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_headRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_headRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_headRowChanged As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowChanging As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleted As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleting As GL_account_adjustment_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_headRow(ByVal cod_customer As String, ByVal Sumamount_adjustment As Decimal, ByVal id_service_center As String) As GL_account_adjustment_headRow
            Dim rowGL_account_adjustment_headRow As GL_account_adjustment_headRow = CType(Me.NewRow,GL_account_adjustment_headRow)
            rowGL_account_adjustment_headRow.ItemArray = New Object() {cod_customer, Sumamount_adjustment, id_service_center}
            Me.Rows.Add(rowGL_account_adjustment_headRow)
            Return rowGL_account_adjustment_headRow
        End Function
        
        Public Function FindBycod_customerid_service_center(ByVal cod_customer As String, ByVal id_service_center As String) As GL_account_adjustment_headRow
            Return CType(Me.Rows.Find(New Object() {cod_customer, id_service_center}),GL_account_adjustment_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_headDataTable = CType(MyBase.Clone,GL_account_adjustment_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnSumamount_adjustment = Me.Columns("Sumamount_adjustment")
            Me.columnid_service_center = Me.Columns("id_service_center")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnSumamount_adjustment = New DataColumn("Sumamount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumamount_adjustment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.Constraints.Add(New UniqueConstraint("DsAssessFinanceChargeKey1", New DataColumn() {Me.columncod_customer, Me.columnid_service_center}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columnSumamount_adjustment.ReadOnly = true
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewGL_account_adjustment_headRow() As GL_account_adjustment_headRow
            Return CType(Me.NewRow,GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanged(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanging(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleted(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleting(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_head = CType(Me.Table,GL_account_adjustment_headDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_head.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property Sumamount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.Sumamount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.Sumamount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_head.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Function IsSumamount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.Sumamount_adjustmentColumn)
        End Function
        
        Public Sub SetSumamount_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.Sumamount_adjustmentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_vendorRow
            Get
                Return CType(Me.Rows(index),inv_vendorRow)
            End Get
        End Property
        
        Public Event inv_vendorRowChanged As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowChanging As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleted As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleting As inv_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_vendorRow(ByVal selected As Boolean, ByVal cod_vendor As String, ByVal desc_vendor As String) As inv_vendorRow
            Dim rowinv_vendorRow As inv_vendorRow = CType(Me.NewRow,inv_vendorRow)
            rowinv_vendorRow.ItemArray = New Object() {selected, cod_vendor, desc_vendor}
            Me.Rows.Add(rowinv_vendorRow)
            Return rowinv_vendorRow
        End Function
        
        Public Function FindBycod_vendor(ByVal cod_vendor As String) As inv_vendorRow
            Return CType(Me.Rows.Find(New Object() {cod_vendor}),inv_vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_vendorDataTable = CType(MyBase.Clone,inv_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vendor}, true))
            Me.columnselected.ReadOnly = true
            Me.columncod_vendor.AllowDBNull = false
            Me.columncod_vendor.Unique = true
        End Sub
        
        Public Function Newinv_vendorRow() As inv_vendorRow
            Return CType(Me.NewRow,inv_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanged(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanging(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleted(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleting(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRow
        Inherits DataRow
        
        Private tableinv_vendor As inv_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_vendor = CType(Me.Table,inv_vendorDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.selectedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableinv_vendor.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableinv_vendor.desc_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Friend Sub New()
            MyBase.New("AllDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllDetailRow
            Get
                Return CType(Me.Rows(index),AllDetailRow)
            End Get
        End Property
        
        Public Event AllDetailRowChanged As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowChanging As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowDeleted As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowDeleting As AllDetailRowChangeEventHandler
        
        Public Overloads Sub AddAllDetailRow(ByVal row As AllDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllDetailRow(ByVal cod_vendor As String, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit_head As Integer) As AllDetailRow
            Dim rowAllDetailRow As AllDetailRow = CType(Me.NewRow,AllDetailRow)
            rowAllDetailRow.ItemArray = New Object() {cod_vendor, ID_AP_payment, id_vendor_credit_head}
            Me.Rows.Add(rowAllDetailRow)
            Return rowAllDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllDetailDataTable = CType(MyBase.Clone,AllDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnID_AP_payment.AllowDBNull = false
        End Sub
        
        Public Function NewAllDetailRow() As AllDetailRow
            Return CType(Me.NewRow,AllDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AllDetailRowChanged(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AllDetailRowChanging(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllDetailRowDeleted(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllDetailRowDeleting(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllDetailRow(ByVal row As AllDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailRow
        Inherits DataRow
        
        Private tableAllDetail As AllDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllDetail = CType(Me.Table,AllDetailDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableAllDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableAllDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Return CType(Me(Me.tableAllDetail.ID_AP_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableAllDetail.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllDetail.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllDetail.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableAllDetail.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableAllDetail.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
