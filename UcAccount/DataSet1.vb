'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableservice_out_purchases As service_out_purchasesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
                Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_out_purchases As service_out_purchasesDataTable
        Get
            Return Me.tableservice_out_purchases
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
            Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableservice_out_purchases = CType(Me.Tables("service_out_purchases"),service_out_purchasesDataTable)
        If (Not (Me.tableservice_out_purchases) Is Nothing) Then
            Me.tableservice_out_purchases.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableservice_out_purchases = New service_out_purchasesDataTable
        Me.Tables.Add(Me.tableservice_out_purchases)
    End Sub
    
    Private Function ShouldSerializeservice_out_purchases() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub service_out_purchasesRowChangeEventHandler(ByVal sender As Object, ByVal e As service_out_purchasesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnDue_Date As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnvendorrefno As DataColumn
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("service_out_purchases")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property vendorrefnoColumn As DataColumn
            Get
                Return Me.columnvendorrefno
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_out_purchasesRow
            Get
                Return CType(Me.Rows(index),service_out_purchasesRow)
            End Get
        End Property
        
        Public Event service_out_purchasesRowChanged As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowChanging As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleted As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleting As service_out_purchasesRowChangeEventHandler
        
        Public Overloads Sub Addservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_out_purchasesRow(ByVal radif As Short, ByVal amount As Decimal, ByVal Due_Date As String, ByVal id_service_center As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Double, ByVal sumpayment As Decimal, ByVal vendorrefno As String, ByVal IDService_out_purchases_dtl As Decimal) As service_out_purchasesRow
            Dim rowservice_out_purchasesRow As service_out_purchasesRow = CType(Me.NewRow,service_out_purchasesRow)
            rowservice_out_purchasesRow.ItemArray = New Object() {radif, amount, Due_Date, id_service_center, DateTransaction, sumoriginalamount, sumpayment, vendorrefno, IDService_out_purchases_dtl}
            Me.Rows.Add(rowservice_out_purchasesRow)
            Return rowservice_out_purchasesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_out_purchasesDataTable = CType(MyBase.Clone,service_out_purchasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_out_purchasesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnamount = Me.Columns("amount")
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnvendorrefno = Me.Columns("vendorrefno")
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnvendorrefno = New DataColumn("vendorrefno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorrefno)
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.columnradif.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnDue_Date.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
            Me.columnIDService_out_purchases_dtl.AllowDBNull = false
        End Sub
        
        Public Function Newservice_out_purchasesRow() As service_out_purchasesRow
            Return CType(Me.NewRow,service_out_purchasesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_out_purchasesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_out_purchasesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_out_purchasesRowChangedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanged(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_out_purchasesRowChangingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanging(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_out_purchasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleted(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_out_purchasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleting(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRow
        Inherits DataRow
        
        Private tableservice_out_purchases As service_out_purchasesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_out_purchases = CType(Me.Table,service_out_purchasesDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_out_purchases.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_out_purchases.radifColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.amountColumn) = value
            End Set
        End Property
        
        Public Property Due_Date As String
            Get
                Return CType(Me(Me.tableservice_out_purchases.Due_DateColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_out_purchases.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.sumoriginalamountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property vendorrefno As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.vendorrefnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.vendorrefnoColumn) = value
            End Set
        End Property
        
        Public Property IDService_out_purchases_dtl As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.IDService_out_purchases_dtlColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableservice_out_purchases.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumoriginalamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.sumoriginalamountColumn)
        End Function
        
        Public Sub SetsumoriginalamountNull()
            Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorrefnoNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.vendorrefnoColumn)
        End Function
        
        Public Sub SetvendorrefnoNull()
            Me(Me.tableservice_out_purchases.vendorrefnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_out_purchasesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_out_purchasesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_out_purchasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
