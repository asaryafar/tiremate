'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmAllPaymentDelete
    Inherits DataSet
    
    Private tableGL_AP_payment As GL_AP_paymentDataTable
    
    Private tableAllDate As AllDateDataTable
    
    Private tableAllDetail As AllDetailDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_AP_payment")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_paymentDataTable(ds.Tables("GL_AP_payment")))
            End If
            If (Not (ds.Tables("AllDate")) Is Nothing) Then
                Me.Tables.Add(New AllDateDataTable(ds.Tables("AllDate")))
            End If
            If (Not (ds.Tables("AllDetail")) Is Nothing) Then
                Me.Tables.Add(New AllDetailDataTable(ds.Tables("AllDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_payment As GL_AP_paymentDataTable
        Get
            Return Me.tableGL_AP_payment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllDate As AllDateDataTable
        Get
            Return Me.tableAllDate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllDetail As AllDetailDataTable
        Get
            Return Me.tableAllDetail
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmAllPaymentDelete = CType(MyBase.Clone,DSFrmAllPaymentDelete)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_AP_payment")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_paymentDataTable(ds.Tables("GL_AP_payment")))
        End If
        If (Not (ds.Tables("AllDate")) Is Nothing) Then
            Me.Tables.Add(New AllDateDataTable(ds.Tables("AllDate")))
        End If
        If (Not (ds.Tables("AllDetail")) Is Nothing) Then
            Me.Tables.Add(New AllDetailDataTable(ds.Tables("AllDetail")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_AP_payment = CType(Me.Tables("GL_AP_payment"),GL_AP_paymentDataTable)
        If (Not (Me.tableGL_AP_payment) Is Nothing) Then
            Me.tableGL_AP_payment.InitVars
        End If
        Me.tableAllDate = CType(Me.Tables("AllDate"),AllDateDataTable)
        If (Not (Me.tableAllDate) Is Nothing) Then
            Me.tableAllDate.InitVars
        End If
        Me.tableAllDetail = CType(Me.Tables("AllDetail"),AllDetailDataTable)
        If (Not (Me.tableAllDetail) Is Nothing) Then
            Me.tableAllDetail.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmAllPaymentDelete"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmAllPaymentDelete.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_AP_payment = New GL_AP_paymentDataTable
        Me.Tables.Add(Me.tableGL_AP_payment)
        Me.tableAllDate = New AllDateDataTable
        Me.Tables.Add(Me.tableAllDate)
        Me.tableAllDetail = New AllDetailDataTable
        Me.Tables.Add(Me.tableAllDetail)
    End Sub
    
    Private Function ShouldSerializeGL_AP_payment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAllDate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAllDetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_AP_paymentRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_paymentRowChangeEvent)
    
    Public Delegate Sub AllDateRowChangeEventHandler(ByVal sender As Object, ByVal e As AllDateRowChangeEvent)
    
    Public Delegate Sub AllDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AllDetailRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnsumpay As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_payment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property sumpayColumn As DataColumn
            Get
                Return Me.columnsumpay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_paymentRow
            Get
                Return CType(Me.Rows(index),GL_AP_paymentRow)
            End Get
        End Property
        
        Public Event GL_AP_paymentRowChanged As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowChanging As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowDeleted As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowDeleting As GL_AP_paymentRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_paymentRow(ByVal row As GL_AP_paymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_paymentRow(ByVal selected As Boolean, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal sumpay As Decimal) As GL_AP_paymentRow
            Dim rowGL_AP_paymentRow As GL_AP_paymentRow = CType(Me.NewRow,GL_AP_paymentRow)
            rowGL_AP_paymentRow.ItemArray = New Object() {selected, cod_vendor, desc_vendor, sumpay}
            Me.Rows.Add(rowGL_AP_paymentRow)
            Return rowGL_AP_paymentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_paymentDataTable = CType(MyBase.Clone,GL_AP_paymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_paymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnsumpay = Me.Columns("sumpay")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnsumpay = New DataColumn("sumpay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpay)
            Me.columnselected.DefaultValue = false
            Me.columncod_vendor.AllowDBNull = false
            Me.columnsumpay.ReadOnly = true
        End Sub
        
        Public Function NewGL_AP_paymentRow() As GL_AP_paymentRow
            Return CType(Me.NewRow,GL_AP_paymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_paymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_paymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_paymentRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowChanged(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_paymentRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowChanging(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_paymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowDeleted(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_paymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowDeleting(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_paymentRow(ByVal row As GL_AP_paymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentRow
        Inherits DataRow
        
        Private tableGL_AP_payment As GL_AP_paymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_payment = CType(Me.Table,GL_AP_paymentDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.selectedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableGL_AP_payment.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableGL_AP_payment.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property sumpay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.sumpayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.sumpayColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableGL_AP_payment.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableGL_AP_payment.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumpayNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.sumpayColumn)
        End Function
        
        Public Sub SetsumpayNull()
            Me(Me.tableGL_AP_payment.sumpayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_paymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_paymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_paymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_prepare As DataColumn
        
        Friend Sub New()
            MyBase.New("AllDate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_prepareColumn As DataColumn
            Get
                Return Me.columndate_prepare
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllDateRow
            Get
                Return CType(Me.Rows(index),AllDateRow)
            End Get
        End Property
        
        Public Event AllDateRowChanged As AllDateRowChangeEventHandler
        
        Public Event AllDateRowChanging As AllDateRowChangeEventHandler
        
        Public Event AllDateRowDeleted As AllDateRowChangeEventHandler
        
        Public Event AllDateRowDeleting As AllDateRowChangeEventHandler
        
        Public Overloads Sub AddAllDateRow(ByVal row As AllDateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllDateRow(ByVal date_prepare As String) As AllDateRow
            Dim rowAllDateRow As AllDateRow = CType(Me.NewRow,AllDateRow)
            rowAllDateRow.ItemArray = New Object() {date_prepare}
            Me.Rows.Add(rowAllDateRow)
            Return rowAllDateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllDateDataTable = CType(MyBase.Clone,AllDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllDateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_prepare = Me.Columns("date_prepare")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_prepare = New DataColumn("date_prepare", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_prepare)
            Me.columndate_prepare.AllowDBNull = false
        End Sub
        
        Public Function NewAllDateRow() As AllDateRow
            Return CType(Me.NewRow,AllDateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllDateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllDateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllDateRowChangedEvent) Is Nothing) Then
                RaiseEvent AllDateRowChanged(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllDateRowChangingEvent) Is Nothing) Then
                RaiseEvent AllDateRowChanging(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllDateRowDeleted(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllDateRowDeleting(Me, New AllDateRowChangeEvent(CType(e.Row,AllDateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllDateRow(ByVal row As AllDateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateRow
        Inherits DataRow
        
        Private tableAllDate As AllDateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllDate = CType(Me.Table,AllDateDataTable)
        End Sub
        
        Public Property date_prepare As String
            Get
                Return CType(Me(Me.tableAllDate.date_prepareColumn),String)
            End Get
            Set
                Me(Me.tableAllDate.date_prepareColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllDateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllDateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Friend Sub New()
            MyBase.New("AllDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllDetailRow
            Get
                Return CType(Me.Rows(index),AllDetailRow)
            End Get
        End Property
        
        Public Event AllDetailRowChanged As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowChanging As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowDeleted As AllDetailRowChangeEventHandler
        
        Public Event AllDetailRowDeleting As AllDetailRowChangeEventHandler
        
        Public Overloads Sub AddAllDetailRow(ByVal row As AllDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllDetailRow(ByVal cod_vendor As String, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit_head As Integer) As AllDetailRow
            Dim rowAllDetailRow As AllDetailRow = CType(Me.NewRow,AllDetailRow)
            rowAllDetailRow.ItemArray = New Object() {cod_vendor, ID_AP_payment, id_vendor_credit_head}
            Me.Rows.Add(rowAllDetailRow)
            Return rowAllDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllDetailDataTable = CType(MyBase.Clone,AllDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnID_AP_payment.AllowDBNull = false
        End Sub
        
        Public Function NewAllDetailRow() As AllDetailRow
            Return CType(Me.NewRow,AllDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AllDetailRowChanged(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AllDetailRowChanging(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllDetailRowDeleted(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllDetailRowDeleting(Me, New AllDetailRowChangeEvent(CType(e.Row,AllDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllDetailRow(ByVal row As AllDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailRow
        Inherits DataRow
        
        Private tableAllDetail As AllDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllDetail = CType(Me.Table,AllDetailDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableAllDetail.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableAllDetail.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Return CType(Me(Me.tableAllDetail.ID_AP_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableAllDetail.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllDetail.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllDetail.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableAllDetail.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableAllDetail.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
