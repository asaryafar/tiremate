'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2443
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmBankRegister
    Inherits DataSet
    
    Private tablebas_banks As bas_banksDataTable
    
    Private tableBankRegister As BankRegisterDataTable
    
    Private tablebank_check As bank_checkDataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tablebank_check_dtl As bank_check_dtlDataTable
    
    Private tablebank_ATM As bank_ATMDataTable
    
    Private tablebank_ATM_dtl As bank_ATM_dtlDataTable
    
    Private tableGL_debit_deposit As GL_debit_depositDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_banks")) Is Nothing) Then
                Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
            End If
            If (Not (ds.Tables("BankRegister")) Is Nothing) Then
                Me.Tables.Add(New BankRegisterDataTable(ds.Tables("BankRegister")))
            End If
            If (Not (ds.Tables("bank_check")) Is Nothing) Then
                Me.Tables.Add(New bank_checkDataTable(ds.Tables("bank_check")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("bank_check_dtl")) Is Nothing) Then
                Me.Tables.Add(New bank_check_dtlDataTable(ds.Tables("bank_check_dtl")))
            End If
            If (Not (ds.Tables("bank_ATM")) Is Nothing) Then
                Me.Tables.Add(New bank_ATMDataTable(ds.Tables("bank_ATM")))
            End If
            If (Not (ds.Tables("bank_ATM_dtl")) Is Nothing) Then
                Me.Tables.Add(New bank_ATM_dtlDataTable(ds.Tables("bank_ATM_dtl")))
            End If
            If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_banks As bas_banksDataTable
        Get
            Return Me.tablebas_banks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BankRegister As BankRegisterDataTable
        Get
            Return Me.tableBankRegister
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_check As bank_checkDataTable
        Get
            Return Me.tablebank_check
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_check_dtl As bank_check_dtlDataTable
        Get
            Return Me.tablebank_check_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_ATM As bank_ATMDataTable
        Get
            Return Me.tablebank_ATM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_ATM_dtl As bank_ATM_dtlDataTable
        Get
            Return Me.tablebank_ATM_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit As GL_debit_depositDataTable
        Get
            Return Me.tableGL_debit_deposit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmBankRegister = CType(MyBase.Clone,DSFrmBankRegister)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_banks")) Is Nothing) Then
            Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
        End If
        If (Not (ds.Tables("BankRegister")) Is Nothing) Then
            Me.Tables.Add(New BankRegisterDataTable(ds.Tables("BankRegister")))
        End If
        If (Not (ds.Tables("bank_check")) Is Nothing) Then
            Me.Tables.Add(New bank_checkDataTable(ds.Tables("bank_check")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("bank_check_dtl")) Is Nothing) Then
            Me.Tables.Add(New bank_check_dtlDataTable(ds.Tables("bank_check_dtl")))
        End If
        If (Not (ds.Tables("bank_ATM")) Is Nothing) Then
            Me.Tables.Add(New bank_ATMDataTable(ds.Tables("bank_ATM")))
        End If
        If (Not (ds.Tables("bank_ATM_dtl")) Is Nothing) Then
            Me.Tables.Add(New bank_ATM_dtlDataTable(ds.Tables("bank_ATM_dtl")))
        End If
        If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_banks = CType(Me.Tables("bas_banks"),bas_banksDataTable)
        If (Not (Me.tablebas_banks) Is Nothing) Then
            Me.tablebas_banks.InitVars
        End If
        Me.tableBankRegister = CType(Me.Tables("BankRegister"),BankRegisterDataTable)
        If (Not (Me.tableBankRegister) Is Nothing) Then
            Me.tableBankRegister.InitVars
        End If
        Me.tablebank_check = CType(Me.Tables("bank_check"),bank_checkDataTable)
        If (Not (Me.tablebank_check) Is Nothing) Then
            Me.tablebank_check.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tablebank_check_dtl = CType(Me.Tables("bank_check_dtl"),bank_check_dtlDataTable)
        If (Not (Me.tablebank_check_dtl) Is Nothing) Then
            Me.tablebank_check_dtl.InitVars
        End If
        Me.tablebank_ATM = CType(Me.Tables("bank_ATM"),bank_ATMDataTable)
        If (Not (Me.tablebank_ATM) Is Nothing) Then
            Me.tablebank_ATM.InitVars
        End If
        Me.tablebank_ATM_dtl = CType(Me.Tables("bank_ATM_dtl"),bank_ATM_dtlDataTable)
        If (Not (Me.tablebank_ATM_dtl) Is Nothing) Then
            Me.tablebank_ATM_dtl.InitVars
        End If
        Me.tableGL_debit_deposit = CType(Me.Tables("GL_debit_deposit"),GL_debit_depositDataTable)
        If (Not (Me.tableGL_debit_deposit) Is Nothing) Then
            Me.tableGL_debit_deposit.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmBankRegister"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmBankRegister.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_banks = New bas_banksDataTable
        Me.Tables.Add(Me.tablebas_banks)
        Me.tableBankRegister = New BankRegisterDataTable
        Me.Tables.Add(Me.tableBankRegister)
        Me.tablebank_check = New bank_checkDataTable
        Me.Tables.Add(Me.tablebank_check)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tablebank_check_dtl = New bank_check_dtlDataTable
        Me.Tables.Add(Me.tablebank_check_dtl)
        Me.tablebank_ATM = New bank_ATMDataTable
        Me.Tables.Add(Me.tablebank_ATM)
        Me.tablebank_ATM_dtl = New bank_ATM_dtlDataTable
        Me.Tables.Add(Me.tablebank_ATM_dtl)
        Me.tableGL_debit_deposit = New GL_debit_depositDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit)
    End Sub
    
    Private Function ShouldSerializebas_banks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBankRegister() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebank_check() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebank_check_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebank_ATM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebank_ATM_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_deposit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_banksRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_banksRowChangeEvent)
    
    Public Delegate Sub BankRegisterRowChangeEventHandler(ByVal sender As Object, ByVal e As BankRegisterRowChangeEvent)
    
    Public Delegate Sub bank_checkRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_checkRowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub bank_check_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_check_dtlRowChangeEvent)
    
    Public Delegate Sub bank_ATMRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_ATMRowChangeEvent)
    
    Public Delegate Sub bank_ATM_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_ATM_dtlRowChangeEvent)
    
    Public Delegate Sub GL_debit_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_depositRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnshare_all_store As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnaccount_no As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columnemail As DataColumn
        
        Private columncontact_name As DataColumn
        
        Private columnGL_Account As DataColumn
        
        Private columnstart_check_no As DataColumn
        
        Private columnnext_check_no As DataColumn
        
        Private columndefault_bank As DataColumn
        
        Private columninactive As DataColumn
        
        Private columncod_account_type As DataColumn
        
        Private columnrouting_numbers As DataColumn
        
        Private columnBank_ID As DataColumn
        
        Private columnWeb_Page As DataColumn
        
        Private columnUser_ID As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnSecurity_code As DataColumn
        
        Private columnonline_banking As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_banks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property share_all_storeColumn As DataColumn
            Get
                Return Me.columnshare_all_store
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property account_noColumn As DataColumn
            Get
                Return Me.columnaccount_no
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property contact_nameColumn As DataColumn
            Get
                Return Me.columncontact_name
            End Get
        End Property
        
        Friend ReadOnly Property GL_AccountColumn As DataColumn
            Get
                Return Me.columnGL_Account
            End Get
        End Property
        
        Friend ReadOnly Property start_check_noColumn As DataColumn
            Get
                Return Me.columnstart_check_no
            End Get
        End Property
        
        Friend ReadOnly Property next_check_noColumn As DataColumn
            Get
                Return Me.columnnext_check_no
            End Get
        End Property
        
        Friend ReadOnly Property default_bankColumn As DataColumn
            Get
                Return Me.columndefault_bank
            End Get
        End Property
        
        Friend ReadOnly Property inactiveColumn As DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        Friend ReadOnly Property cod_account_typeColumn As DataColumn
            Get
                Return Me.columncod_account_type
            End Get
        End Property
        
        Friend ReadOnly Property routing_numbersColumn As DataColumn
            Get
                Return Me.columnrouting_numbers
            End Get
        End Property
        
        Friend ReadOnly Property Bank_IDColumn As DataColumn
            Get
                Return Me.columnBank_ID
            End Get
        End Property
        
        Friend ReadOnly Property Web_PageColumn As DataColumn
            Get
                Return Me.columnWeb_Page
            End Get
        End Property
        
        Friend ReadOnly Property User_IDColumn As DataColumn
            Get
                Return Me.columnUser_ID
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property Security_codeColumn As DataColumn
            Get
                Return Me.columnSecurity_code
            End Get
        End Property
        
        Friend ReadOnly Property online_bankingColumn As DataColumn
            Get
                Return Me.columnonline_banking
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_banksRow
            Get
                Return CType(Me.Rows(index),bas_banksRow)
            End Get
        End Property
        
        Public Event bas_banksRowChanged As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowChanging As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleted As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleting As bas_banksRowChangeEventHandler
        
        Public Overloads Sub Addbas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_banksRow( _
                    ByVal name_bank As String,  _
                    ByVal share_all_store As Boolean,  _
                    ByVal store_no As String,  _
                    ByVal account_no As String,  _
                    ByVal address As String,  _
                    ByVal zip As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal email As String,  _
                    ByVal contact_name As String,  _
                    ByVal GL_Account As String,  _
                    ByVal start_check_no As String,  _
                    ByVal next_check_no As String,  _
                    ByVal default_bank As Boolean,  _
                    ByVal inactive As Boolean,  _
                    ByVal cod_account_type As String,  _
                    ByVal routing_numbers As String,  _
                    ByVal Bank_ID As String,  _
                    ByVal Web_Page As String,  _
                    ByVal User_ID As String,  _
                    ByVal Password As String,  _
                    ByVal Security_code As String,  _
                    ByVal online_banking As Boolean) As bas_banksRow
            Dim rowbas_banksRow As bas_banksRow = CType(Me.NewRow,bas_banksRow)
            rowbas_banksRow.ItemArray = New Object() {Nothing, name_bank, share_all_store, store_no, account_no, address, zip, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, email, contact_name, GL_Account, start_check_no, next_check_no, default_bank, inactive, cod_account_type, routing_numbers, Bank_ID, Web_Page, User_ID, Password, Security_code, online_banking}
            Me.Rows.Add(rowbas_banksRow)
            Return rowbas_banksRow
        End Function
        
        Public Function FindByid_bank(ByVal id_bank As Short) As bas_banksRow
            Return CType(Me.Rows.Find(New Object() {id_bank}),bas_banksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_banksDataTable = CType(MyBase.Clone,bas_banksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_banksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnshare_all_store = Me.Columns("share_all_store")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnaccount_no = Me.Columns("account_no")
            Me.columnaddress = Me.Columns("address")
            Me.columnzip = Me.Columns("zip")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columnemail = Me.Columns("email")
            Me.columncontact_name = Me.Columns("contact_name")
            Me.columnGL_Account = Me.Columns("GL_Account")
            Me.columnstart_check_no = Me.Columns("start_check_no")
            Me.columnnext_check_no = Me.Columns("next_check_no")
            Me.columndefault_bank = Me.Columns("default_bank")
            Me.columninactive = Me.Columns("inactive")
            Me.columncod_account_type = Me.Columns("cod_account_type")
            Me.columnrouting_numbers = Me.Columns("routing_numbers")
            Me.columnBank_ID = Me.Columns("Bank_ID")
            Me.columnWeb_Page = Me.Columns("Web_Page")
            Me.columnUser_ID = Me.Columns("User_ID")
            Me.columnPassword = Me.Columns("Password")
            Me.columnSecurity_code = Me.Columns("Security_code")
            Me.columnonline_banking = Me.Columns("online_banking")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnshare_all_store = New DataColumn("share_all_store", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshare_all_store)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnaccount_no = New DataColumn("account_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaccount_no)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncontact_name = New DataColumn("contact_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontact_name)
            Me.columnGL_Account = New DataColumn("GL_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_Account)
            Me.columnstart_check_no = New DataColumn("start_check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_check_no)
            Me.columnnext_check_no = New DataColumn("next_check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnext_check_no)
            Me.columndefault_bank = New DataColumn("default_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndefault_bank)
            Me.columninactive = New DataColumn("inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninactive)
            Me.columncod_account_type = New DataColumn("cod_account_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_account_type)
            Me.columnrouting_numbers = New DataColumn("routing_numbers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrouting_numbers)
            Me.columnBank_ID = New DataColumn("Bank_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBank_ID)
            Me.columnWeb_Page = New DataColumn("Web_Page", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeb_Page)
            Me.columnUser_ID = New DataColumn("User_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUser_ID)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnSecurity_code = New DataColumn("Security_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSecurity_code)
            Me.columnonline_banking = New DataColumn("online_banking", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnonline_banking)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_bank}, true))
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnid_bank.Unique = true
        End Sub
        
        Public Function Newbas_banksRow() As bas_banksRow
            Return CType(Me.NewRow,bas_banksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_banksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_banksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_banksRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanged(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_banksRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanging(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_banksRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleted(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_banksRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleting(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRow
        Inherits DataRow
        
        Private tablebas_banks As bas_banksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_banks = CType(Me.Table,bas_banksDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tablebas_banks.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tablebas_banks.id_bankColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.name_bankColumn) = value
            End Set
        End Property
        
        Public Property share_all_store As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.share_all_storeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.share_all_storeColumn) = value
            End Set
        End Property
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.store_noColumn) = value
            End Set
        End Property
        
        Public Property account_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.account_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.account_noColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.addressColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.zipColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.emailColumn) = value
            End Set
        End Property
        
        Public Property contact_name As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.contact_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.contact_nameColumn) = value
            End Set
        End Property
        
        Public Property GL_Account As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.GL_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.GL_AccountColumn) = value
            End Set
        End Property
        
        Public Property start_check_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.start_check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.start_check_noColumn) = value
            End Set
        End Property
        
        Public Property next_check_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.next_check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.next_check_noColumn) = value
            End Set
        End Property
        
        Public Property default_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.default_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.default_bankColumn) = value
            End Set
        End Property
        
        Public Property inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.inactiveColumn) = value
            End Set
        End Property
        
        Public Property cod_account_type As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.cod_account_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.cod_account_typeColumn) = value
            End Set
        End Property
        
        Public Property routing_numbers As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.routing_numbersColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.routing_numbersColumn) = value
            End Set
        End Property
        
        Public Property Bank_ID As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Bank_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Bank_IDColumn) = value
            End Set
        End Property
        
        Public Property Web_Page As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Web_PageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Web_PageColumn) = value
            End Set
        End Property
        
        Public Property User_ID As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.User_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.User_IDColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.PasswordColumn) = value
            End Set
        End Property
        
        Public Property Security_code As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Security_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Security_codeColumn) = value
            End Set
        End Property
        
        Public Property online_banking As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.online_bankingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.online_bankingColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebas_banks.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshare_all_storeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.share_all_storeColumn)
        End Function
        
        Public Sub Setshare_all_storeNull()
            Me(Me.tablebas_banks.share_all_storeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tablebas_banks.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaccount_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.account_noColumn)
        End Function
        
        Public Sub Setaccount_noNull()
            Me(Me.tablebas_banks.account_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablebas_banks.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablebas_banks.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablebas_banks.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablebas_banks.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablebas_banks.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablebas_banks.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablebas_banks.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablebas_banks.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablebas_banks.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablebas_banks.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablebas_banks.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablebas_banks.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablebas_banks.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablebas_banks.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablebas_banks.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablebas_banks.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablebas_banks.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablebas_banks.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablebas_banks.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablebas_banks.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablebas_banks.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablebas_banks.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablebas_banks.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscontact_nameNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.contact_nameColumn)
        End Function
        
        Public Sub Setcontact_nameNull()
            Me(Me.tablebas_banks.contact_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_AccountNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.GL_AccountColumn)
        End Function
        
        Public Sub SetGL_AccountNull()
            Me(Me.tablebas_banks.GL_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstart_check_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.start_check_noColumn)
        End Function
        
        Public Sub Setstart_check_noNull()
            Me(Me.tablebas_banks.start_check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnext_check_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.next_check_noColumn)
        End Function
        
        Public Sub Setnext_check_noNull()
            Me(Me.tablebas_banks.next_check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdefault_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.default_bankColumn)
        End Function
        
        Public Sub Setdefault_bankNull()
            Me(Me.tablebas_banks.default_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.inactiveColumn)
        End Function
        
        Public Sub SetinactiveNull()
            Me(Me.tablebas_banks.inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_account_typeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.cod_account_typeColumn)
        End Function
        
        Public Sub Setcod_account_typeNull()
            Me(Me.tablebas_banks.cod_account_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrouting_numbersNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.routing_numbersColumn)
        End Function
        
        Public Sub Setrouting_numbersNull()
            Me(Me.tablebas_banks.routing_numbersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBank_IDNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Bank_IDColumn)
        End Function
        
        Public Sub SetBank_IDNull()
            Me(Me.tablebas_banks.Bank_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeb_PageNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Web_PageColumn)
        End Function
        
        Public Sub SetWeb_PageNull()
            Me(Me.tablebas_banks.Web_PageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUser_IDNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.User_IDColumn)
        End Function
        
        Public Sub SetUser_IDNull()
            Me(Me.tablebas_banks.User_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tablebas_banks.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSecurity_codeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Security_codeColumn)
        End Function
        
        Public Sub SetSecurity_codeNull()
            Me(Me.tablebas_banks.Security_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isonline_bankingNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.online_bankingColumn)
        End Function
        
        Public Sub Setonline_bankingNull()
            Me(Me.tablebas_banks.online_bankingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_banksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_banksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_banksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BankRegisterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDate1 As DataColumn
        
        Private columnType As DataColumn
        
        Private columnNumber As DataColumn
        
        Private columnPayee As DataColumn
        
        Private columnGl_Account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columnCleared_bank As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnBalance As DataColumn
        
        Private columnMemo As DataColumn
        
        Private columnCustomerVendorEmployeeOther As DataColumn
        
        Private columnCheckBankDepositBankTransaction As DataColumn
        
        Private columnId_Check As DataColumn
        
        Private columnId_Atm As DataColumn
        
        Private columnid_adjustment_no As DataColumn
        
        Private columnid_transfer As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Friend Sub New()
            MyBase.New("BankRegister")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Date1Column As DataColumn
            Get
                Return Me.columnDate1
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property NumberColumn As DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        Friend ReadOnly Property PayeeColumn As DataColumn
            Get
                Return Me.columnPayee
            End Get
        End Property
        
        Friend ReadOnly Property Gl_AccountColumn As DataColumn
            Get
                Return Me.columnGl_Account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property Cleared_bankColumn As DataColumn
            Get
                Return Me.columnCleared_bank
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property BalanceColumn As DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Friend ReadOnly Property CustomerVendorEmployeeOtherColumn As DataColumn
            Get
                Return Me.columnCustomerVendorEmployeeOther
            End Get
        End Property
        
        Friend ReadOnly Property CheckBankDepositBankTransactionColumn As DataColumn
            Get
                Return Me.columnCheckBankDepositBankTransaction
            End Get
        End Property
        
        Friend ReadOnly Property Id_CheckColumn As DataColumn
            Get
                Return Me.columnId_Check
            End Get
        End Property
        
        Friend ReadOnly Property Id_AtmColumn As DataColumn
            Get
                Return Me.columnId_Atm
            End Get
        End Property
        
        Friend ReadOnly Property id_adjustment_noColumn As DataColumn
            Get
                Return Me.columnid_adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property id_transferColumn As DataColumn
            Get
                Return Me.columnid_transfer
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BankRegisterRow
            Get
                Return CType(Me.Rows(index),BankRegisterRow)
            End Get
        End Property
        
        Public Event BankRegisterRowChanged As BankRegisterRowChangeEventHandler
        
        Public Event BankRegisterRowChanging As BankRegisterRowChangeEventHandler
        
        Public Event BankRegisterRowDeleted As BankRegisterRowChangeEventHandler
        
        Public Event BankRegisterRowDeleting As BankRegisterRowChangeEventHandler
        
        Public Overloads Sub AddBankRegisterRow(ByVal row As BankRegisterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBankRegisterRow( _
                    ByVal Date1 As Date,  _
                    ByVal Type As String,  _
                    ByVal Number As String,  _
                    ByVal Payee As String,  _
                    ByVal Gl_Account As String,  _
                    ByVal desc_GL_account As String,  _
                    ByVal debit_amount As Decimal,  _
                    ByVal Cleared_bank As Boolean,  _
                    ByVal deposit_amount As Decimal,  _
                    ByVal Balance As Decimal,  _
                    ByVal Memo As String,  _
                    ByVal CustomerVendorEmployeeOther As Integer,  _
                    ByVal CheckBankDepositBankTransaction As Integer,  _
                    ByVal Id_Check As Integer,  _
                    ByVal Id_Atm As Integer,  _
                    ByVal id_adjustment_no As Integer,  _
                    ByVal id_transfer As Integer,  _
                    ByVal id_debit_deposit_head As Integer) As BankRegisterRow
            Dim rowBankRegisterRow As BankRegisterRow = CType(Me.NewRow,BankRegisterRow)
            rowBankRegisterRow.ItemArray = New Object() {Date1, Type, Number, Payee, Gl_Account, desc_GL_account, debit_amount, Cleared_bank, deposit_amount, Balance, Memo, CustomerVendorEmployeeOther, CheckBankDepositBankTransaction, Id_Check, Id_Atm, id_adjustment_no, id_transfer, id_debit_deposit_head}
            Me.Rows.Add(rowBankRegisterRow)
            Return rowBankRegisterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BankRegisterDataTable = CType(MyBase.Clone,BankRegisterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BankRegisterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDate1 = Me.Columns("Date1")
            Me.columnType = Me.Columns("Type")
            Me.columnNumber = Me.Columns("Number")
            Me.columnPayee = Me.Columns("Payee")
            Me.columnGl_Account = Me.Columns("Gl_Account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columnCleared_bank = Me.Columns("Cleared_bank")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnBalance = Me.Columns("Balance")
            Me.columnMemo = Me.Columns("Memo")
            Me.columnCustomerVendorEmployeeOther = Me.Columns("CustomerVendorEmployeeOther")
            Me.columnCheckBankDepositBankTransaction = Me.Columns("CheckBankDepositBankTransaction")
            Me.columnId_Check = Me.Columns("Id_Check")
            Me.columnId_Atm = Me.Columns("Id_Atm")
            Me.columnid_adjustment_no = Me.Columns("id_adjustment_no")
            Me.columnid_transfer = Me.Columns("id_transfer")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
        End Sub
        
        Private Sub InitClass()
            Me.columnDate1 = New DataColumn("Date1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDate1)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnNumber = New DataColumn("Number", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumber)
            Me.columnPayee = New DataColumn("Payee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayee)
            Me.columnGl_Account = New DataColumn("Gl_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_Account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columnCleared_bank = New DataColumn("Cleared_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCleared_bank)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnBalance = New DataColumn("Balance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalance)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.columnCustomerVendorEmployeeOther = New DataColumn("CustomerVendorEmployeeOther", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerVendorEmployeeOther)
            Me.columnCheckBankDepositBankTransaction = New DataColumn("CheckBankDepositBankTransaction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckBankDepositBankTransaction)
            Me.columnId_Check = New DataColumn("Id_Check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Check)
            Me.columnId_Atm = New DataColumn("Id_Atm", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Atm)
            Me.columnid_adjustment_no = New DataColumn("id_adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_adjustment_no)
            Me.columnid_transfer = New DataColumn("id_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_transfer)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
        End Sub
        
        Public Function NewBankRegisterRow() As BankRegisterRow
            Return CType(Me.NewRow,BankRegisterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BankRegisterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BankRegisterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BankRegisterRowChangedEvent) Is Nothing) Then
                RaiseEvent BankRegisterRowChanged(Me, New BankRegisterRowChangeEvent(CType(e.Row,BankRegisterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BankRegisterRowChangingEvent) Is Nothing) Then
                RaiseEvent BankRegisterRowChanging(Me, New BankRegisterRowChangeEvent(CType(e.Row,BankRegisterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BankRegisterRowDeletedEvent) Is Nothing) Then
                RaiseEvent BankRegisterRowDeleted(Me, New BankRegisterRowChangeEvent(CType(e.Row,BankRegisterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BankRegisterRowDeletingEvent) Is Nothing) Then
                RaiseEvent BankRegisterRowDeleting(Me, New BankRegisterRowChangeEvent(CType(e.Row,BankRegisterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBankRegisterRow(ByVal row As BankRegisterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BankRegisterRow
        Inherits DataRow
        
        Private tableBankRegister As BankRegisterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBankRegister = CType(Me.Table,BankRegisterDataTable)
        End Sub
        
        Public Property Date1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.Date1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.Date1Column) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.TypeColumn) = value
            End Set
        End Property
        
        Public Property Number As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.NumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.NumberColumn) = value
            End Set
        End Property
        
        Public Property Payee As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.PayeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.PayeeColumn) = value
            End Set
        End Property
        
        Public Property Gl_Account As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.Gl_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.Gl_AccountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.debit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property Cleared_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.Cleared_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.Cleared_bankColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property Balance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.BalanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.BalanceColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.MemoColumn) = value
            End Set
        End Property
        
        Public Property CustomerVendorEmployeeOther As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.CustomerVendorEmployeeOtherColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.CustomerVendorEmployeeOtherColumn) = value
            End Set
        End Property
        
        Public Property CheckBankDepositBankTransaction As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.CheckBankDepositBankTransactionColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.CheckBankDepositBankTransactionColumn) = value
            End Set
        End Property
        
        Public Property Id_Check As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.Id_CheckColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.Id_CheckColumn) = value
            End Set
        End Property
        
        Public Property Id_Atm As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.Id_AtmColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.Id_AtmColumn) = value
            End Set
        End Property
        
        Public Property id_adjustment_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.id_adjustment_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.id_adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property id_transfer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.id_transferColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.id_transferColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBankRegister.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBankRegister.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Function IsDate1Null() As Boolean
            Return Me.IsNull(Me.tableBankRegister.Date1Column)
        End Function
        
        Public Sub SetDate1Null()
            Me(Me.tableBankRegister.Date1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableBankRegister.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.NumberColumn)
        End Function
        
        Public Sub SetNumberNull()
            Me(Me.tableBankRegister.NumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayeeNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.PayeeColumn)
        End Function
        
        Public Sub SetPayeeNull()
            Me(Me.tableBankRegister.PayeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_AccountNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.Gl_AccountColumn)
        End Function
        
        Public Sub SetGl_AccountNull()
            Me(Me.tableBankRegister.Gl_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableBankRegister.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdebit_amountNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.debit_amountColumn)
        End Function
        
        Public Sub Setdebit_amountNull()
            Me(Me.tableBankRegister.debit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCleared_bankNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.Cleared_bankColumn)
        End Function
        
        Public Sub SetCleared_bankNull()
            Me(Me.tableBankRegister.Cleared_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableBankRegister.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.BalanceColumn)
        End Function
        
        Public Sub SetBalanceNull()
            Me(Me.tableBankRegister.BalanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableBankRegister.MemoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerVendorEmployeeOtherNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.CustomerVendorEmployeeOtherColumn)
        End Function
        
        Public Sub SetCustomerVendorEmployeeOtherNull()
            Me(Me.tableBankRegister.CustomerVendorEmployeeOtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckBankDepositBankTransactionNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.CheckBankDepositBankTransactionColumn)
        End Function
        
        Public Sub SetCheckBankDepositBankTransactionNull()
            Me(Me.tableBankRegister.CheckBankDepositBankTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_CheckNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.Id_CheckColumn)
        End Function
        
        Public Sub SetId_CheckNull()
            Me(Me.tableBankRegister.Id_CheckColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_AtmNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.Id_AtmColumn)
        End Function
        
        Public Sub SetId_AtmNull()
            Me(Me.tableBankRegister.Id_AtmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_adjustment_noNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.id_adjustment_noColumn)
        End Function
        
        Public Sub Setid_adjustment_noNull()
            Me(Me.tableBankRegister.id_adjustment_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_transferNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.id_transferColumn)
        End Function
        
        Public Sub Setid_transferNull()
            Me(Me.tableBankRegister.id_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableBankRegister.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tableBankRegister.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BankRegisterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BankRegisterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BankRegisterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BankRegisterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_check As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columnno_of_check As DataColumn
        
        Private columnamount_check As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnmemo_check As DataColumn
        
        Private columninvoice_no As DataColumn
        
        Private columncheck_status As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnl_name As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_check")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property no_of_checkColumn As DataColumn
            Get
                Return Me.columnno_of_check
            End Get
        End Property
        
        Friend ReadOnly Property amount_checkColumn As DataColumn
            Get
                Return Me.columnamount_check
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property memo_checkColumn As DataColumn
            Get
                Return Me.columnmemo_check
            End Get
        End Property
        
        Friend ReadOnly Property invoice_noColumn As DataColumn
            Get
                Return Me.columninvoice_no
            End Get
        End Property
        
        Friend ReadOnly Property check_statusColumn As DataColumn
            Get
                Return Me.columncheck_status
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_checkRow
            Get
                Return CType(Me.Rows(index),bank_checkRow)
            End Get
        End Property
        
        Public Event bank_checkRowChanged As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowChanging As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowDeleted As bank_checkRowChangeEventHandler
        
        Public Event bank_checkRowDeleting As bank_checkRowChangeEventHandler
        
        Public Overloads Sub Addbank_checkRow(ByVal row As bank_checkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_checkRow(ByVal id_bank As Short, ByVal no_of_check As String, ByVal amount_check As Decimal, ByVal cod_vendor As String, ByVal employee_code As String, ByVal memo_check As String, ByVal invoice_no As String, ByVal check_status As String, ByVal desc_vendor As String, ByVal l_name As String) As bank_checkRow
            Dim rowbank_checkRow As bank_checkRow = CType(Me.NewRow,bank_checkRow)
            rowbank_checkRow.ItemArray = New Object() {Nothing, id_bank, no_of_check, amount_check, cod_vendor, employee_code, memo_check, invoice_no, check_status, desc_vendor, l_name}
            Me.Rows.Add(rowbank_checkRow)
            Return rowbank_checkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_checkDataTable = CType(MyBase.Clone,bank_checkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_checkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_check = Me.Columns("id_check")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnno_of_check = Me.Columns("no_of_check")
            Me.columnamount_check = Me.Columns("amount_check")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnmemo_check = Me.Columns("memo_check")
            Me.columninvoice_no = Me.Columns("invoice_no")
            Me.columncheck_status = Me.Columns("check_status")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnl_name = Me.Columns("l_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnno_of_check = New DataColumn("no_of_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnno_of_check)
            Me.columnamount_check = New DataColumn("amount_check", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_check)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnmemo_check = New DataColumn("memo_check", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_check)
            Me.columninvoice_no = New DataColumn("invoice_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvoice_no)
            Me.columncheck_status = New DataColumn("check_status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_status)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnid_check.AutoIncrement = true
            Me.columnid_check.AllowDBNull = false
            Me.columnid_check.ReadOnly = true
        End Sub
        
        Public Function Newbank_checkRow() As bank_checkRow
            Return CType(Me.NewRow,bank_checkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_checkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_checkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_checkRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_checkRowChanged(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_checkRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_checkRowChanging(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_checkRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_checkRowDeleted(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_checkRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_checkRowDeleting(Me, New bank_checkRowChangeEvent(CType(e.Row,bank_checkRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_checkRow(ByVal row As bank_checkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkRow
        Inherits DataRow
        
        Private tablebank_check As bank_checkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_check = CType(Me.Table,bank_checkDataTable)
        End Sub
        
        Public Property id_check As Integer
            Get
                Return CType(Me(Me.tablebank_check.id_checkColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_check.id_checkColumn) = value
            End Set
        End Property
        
        Public Property id_bank As Short
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.id_bankColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.id_bankColumn) = value
            End Set
        End Property
        
        Public Property no_of_check As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.no_of_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.no_of_checkColumn) = value
            End Set
        End Property
        
        Public Property amount_check As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.amount_checkColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.amount_checkColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property memo_check As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.memo_checkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.memo_checkColumn) = value
            End Set
        End Property
        
        Public Property invoice_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.invoice_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.invoice_noColumn) = value
            End Set
        End Property
        
        Public Property check_status As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.check_statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.check_statusColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check.l_nameColumn) = value
            End Set
        End Property
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tablebank_check.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isno_of_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.no_of_checkColumn)
        End Function
        
        Public Sub Setno_of_checkNull()
            Me(Me.tablebank_check.no_of_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.amount_checkColumn)
        End Function
        
        Public Sub Setamount_checkNull()
            Me(Me.tablebank_check.amount_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tablebank_check.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablebank_check.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_checkNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.memo_checkColumn)
        End Function
        
        Public Sub Setmemo_checkNull()
            Me(Me.tablebank_check.memo_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isinvoice_noNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.invoice_noColumn)
        End Function
        
        Public Sub Setinvoice_noNull()
            Me(Me.tablebank_check.invoice_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_statusNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.check_statusColumn)
        End Function
        
        Public Sub Setcheck_statusNull()
            Me(Me.tablebank_check.check_statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tablebank_check.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablebank_check.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablebank_check.l_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_checkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_checkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_checkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_checkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow(ByVal id_service_center As String, ByVal refrence_no As String, ByVal refer_type As String, ByVal payment_type As String, ByVal payment_amount As Decimal, ByVal flag_deposit_bank As Boolean) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {Nothing, id_service_center, refrence_no, refer_type, payment_type, payment_amount, flag_deposit_bank}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function FindByID_payment(ByVal ID_payment As Integer) As GL_payment_depositRow
            Return CType(Me.Rows.Find(New Object() {ID_payment}),GL_payment_depositRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_payment}, true))
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnID_payment.Unique = true
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_check_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_check As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnGL_Account As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnmemo_dtl As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_check_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property GL_AccountColumn As DataColumn
            Get
                Return Me.columnGL_Account
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property memo_dtlColumn As DataColumn
            Get
                Return Me.columnmemo_dtl
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_check_dtlRow
            Get
                Return CType(Me.Rows(index),bank_check_dtlRow)
            End Get
        End Property
        
        Public Event bank_check_dtlRowChanged As bank_check_dtlRowChangeEventHandler
        
        Public Event bank_check_dtlRowChanging As bank_check_dtlRowChangeEventHandler
        
        Public Event bank_check_dtlRowDeleted As bank_check_dtlRowChangeEventHandler
        
        Public Event bank_check_dtlRowDeleting As bank_check_dtlRowChangeEventHandler
        
        Public Overloads Sub Addbank_check_dtlRow(ByVal row As bank_check_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_check_dtlRow(ByVal id_check As Integer, ByVal radif As Short, ByVal GL_Account As String, ByVal amount As Decimal, ByVal memo_dtl As String, ByVal desc_GL_account As String) As bank_check_dtlRow
            Dim rowbank_check_dtlRow As bank_check_dtlRow = CType(Me.NewRow,bank_check_dtlRow)
            rowbank_check_dtlRow.ItemArray = New Object() {id_check, radif, GL_Account, amount, memo_dtl, desc_GL_account}
            Me.Rows.Add(rowbank_check_dtlRow)
            Return rowbank_check_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_check_dtlDataTable = CType(MyBase.Clone,bank_check_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_check_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_check = Me.Columns("id_check")
            Me.columnradif = Me.Columns("radif")
            Me.columnGL_Account = Me.Columns("GL_Account")
            Me.columnamount = Me.Columns("amount")
            Me.columnmemo_dtl = Me.Columns("memo_dtl")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnGL_Account = New DataColumn("GL_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_Account)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnmemo_dtl = New DataColumn("memo_dtl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_dtl)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnid_check.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function Newbank_check_dtlRow() As bank_check_dtlRow
            Return CType(Me.NewRow,bank_check_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_check_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_check_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_check_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_check_dtlRowChanged(Me, New bank_check_dtlRowChangeEvent(CType(e.Row,bank_check_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_check_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_check_dtlRowChanging(Me, New bank_check_dtlRowChangeEvent(CType(e.Row,bank_check_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_check_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_check_dtlRowDeleted(Me, New bank_check_dtlRowChangeEvent(CType(e.Row,bank_check_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_check_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_check_dtlRowDeleting(Me, New bank_check_dtlRowChangeEvent(CType(e.Row,bank_check_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_check_dtlRow(ByVal row As bank_check_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_check_dtlRow
        Inherits DataRow
        
        Private tablebank_check_dtl As bank_check_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_check_dtl = CType(Me.Table,bank_check_dtlDataTable)
        End Sub
        
        Public Property id_check As Integer
            Get
                Return CType(Me(Me.tablebank_check_dtl.id_checkColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_check_dtl.id_checkColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablebank_check_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablebank_check_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property GL_Account As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check_dtl.GL_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check_dtl.GL_AccountColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_check_dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check_dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property memo_dtl As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check_dtl.memo_dtlColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check_dtl.memo_dtlColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_check_dtl.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_check_dtl.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function IsGL_AccountNull() As Boolean
            Return Me.IsNull(Me.tablebank_check_dtl.GL_AccountColumn)
        End Function
        
        Public Sub SetGL_AccountNull()
            Me(Me.tablebank_check_dtl.GL_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablebank_check_dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablebank_check_dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_dtlNull() As Boolean
            Return Me.IsNull(Me.tablebank_check_dtl.memo_dtlColumn)
        End Function
        
        Public Sub Setmemo_dtlNull()
            Me(Me.tablebank_check_dtl.memo_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tablebank_check_dtl.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tablebank_check_dtl.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_check_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_check_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_check_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_check_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_ATM As DataColumn
        
        Private columnid_bank As DataColumn
        
        Private columndate_transaction As DataColumn
        
        Private columnamount_ATM As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnmemo_address As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnChargeCredit As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_ATM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property date_transactionColumn As DataColumn
            Get
                Return Me.columndate_transaction
            End Get
        End Property
        
        Friend ReadOnly Property amount_ATMColumn As DataColumn
            Get
                Return Me.columnamount_ATM
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property memo_addressColumn As DataColumn
            Get
                Return Me.columnmemo_address
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property ChargeCreditColumn As DataColumn
            Get
                Return Me.columnChargeCredit
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_ATMRow
            Get
                Return CType(Me.Rows(index),bank_ATMRow)
            End Get
        End Property
        
        Public Event bank_ATMRowChanged As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowChanging As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowDeleted As bank_ATMRowChangeEventHandler
        
        Public Event bank_ATMRowDeleting As bank_ATMRowChangeEventHandler
        
        Public Overloads Sub Addbank_ATMRow(ByVal row As bank_ATMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_ATMRow(ByVal id_bank As Short, ByVal date_transaction As String, ByVal amount_ATM As Decimal, ByVal cod_vendor As String, ByVal memo_address As String, ByVal id_debit_deposit_head As Integer, ByVal ChargeCredit As String, ByVal desc_vendor As String) As bank_ATMRow
            Dim rowbank_ATMRow As bank_ATMRow = CType(Me.NewRow,bank_ATMRow)
            rowbank_ATMRow.ItemArray = New Object() {Nothing, id_bank, date_transaction, amount_ATM, cod_vendor, memo_address, id_debit_deposit_head, ChargeCredit, desc_vendor}
            Me.Rows.Add(rowbank_ATMRow)
            Return rowbank_ATMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_ATMDataTable = CType(MyBase.Clone,bank_ATMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_ATMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columndate_transaction = Me.Columns("date_transaction")
            Me.columnamount_ATM = Me.Columns("amount_ATM")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnmemo_address = Me.Columns("memo_address")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnChargeCredit = Me.Columns("ChargeCredit")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columndate_transaction = New DataColumn("date_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_transaction)
            Me.columnamount_ATM = New DataColumn("amount_ATM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_ATM)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnmemo_address = New DataColumn("memo_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_address)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnChargeCredit = New DataColumn("ChargeCredit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChargeCredit)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnid_ATM.AutoIncrement = true
            Me.columnid_ATM.AllowDBNull = false
            Me.columnid_ATM.ReadOnly = true
        End Sub
        
        Public Function Newbank_ATMRow() As bank_ATMRow
            Return CType(Me.NewRow,bank_ATMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_ATMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_ATMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_ATMRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowChanged(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_ATMRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowChanging(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_ATMRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowDeleted(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_ATMRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_ATMRowDeleting(Me, New bank_ATMRowChangeEvent(CType(e.Row,bank_ATMRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_ATMRow(ByVal row As bank_ATMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMRow
        Inherits DataRow
        
        Private tablebank_ATM As bank_ATMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_ATM = CType(Me.Table,bank_ATMDataTable)
        End Sub
        
        Public Property id_ATM As Integer
            Get
                Return CType(Me(Me.tablebank_ATM.id_ATMColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_ATM.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property id_bank As Short
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.id_bankColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.id_bankColumn) = value
            End Set
        End Property
        
        Public Property date_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.date_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.date_transactionColumn) = value
            End Set
        End Property
        
        Public Property amount_ATM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.amount_ATMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.amount_ATMColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property memo_address As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.memo_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.memo_addressColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property ChargeCredit As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.ChargeCreditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.ChargeCreditColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tablebank_ATM.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_transactionNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.date_transactionColumn)
        End Function
        
        Public Sub Setdate_transactionNull()
            Me(Me.tablebank_ATM.date_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_ATMNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.amount_ATMColumn)
        End Function
        
        Public Sub Setamount_ATMNull()
            Me(Me.tablebank_ATM.amount_ATMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tablebank_ATM.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_addressNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.memo_addressColumn)
        End Function
        
        Public Sub Setmemo_addressNull()
            Me(Me.tablebank_ATM.memo_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tablebank_ATM.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargeCreditNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.ChargeCreditColumn)
        End Function
        
        Public Sub SetChargeCreditNull()
            Me(Me.tablebank_ATM.ChargeCreditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tablebank_ATM.desc_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_ATMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_ATMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_ATMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATM_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_ATM As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnmemo_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_ATM_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property memo_dtlColumn As DataColumn
            Get
                Return Me.columnmemo_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_ATM_dtlRow
            Get
                Return CType(Me.Rows(index),bank_ATM_dtlRow)
            End Get
        End Property
        
        Public Event bank_ATM_dtlRowChanged As bank_ATM_dtlRowChangeEventHandler
        
        Public Event bank_ATM_dtlRowChanging As bank_ATM_dtlRowChangeEventHandler
        
        Public Event bank_ATM_dtlRowDeleted As bank_ATM_dtlRowChangeEventHandler
        
        Public Event bank_ATM_dtlRowDeleting As bank_ATM_dtlRowChangeEventHandler
        
        Public Overloads Sub Addbank_ATM_dtlRow(ByVal row As bank_ATM_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_ATM_dtlRow(ByVal id_ATM As Integer, ByVal radif As Short, ByVal GL_account As String, ByVal amount As Decimal, ByVal memo_dtl As String) As bank_ATM_dtlRow
            Dim rowbank_ATM_dtlRow As bank_ATM_dtlRow = CType(Me.NewRow,bank_ATM_dtlRow)
            rowbank_ATM_dtlRow.ItemArray = New Object() {id_ATM, radif, GL_account, amount, memo_dtl}
            Me.Rows.Add(rowbank_ATM_dtlRow)
            Return rowbank_ATM_dtlRow
        End Function
        
        Public Function FindByid_ATMradif(ByVal id_ATM As Integer, ByVal radif As Short) As bank_ATM_dtlRow
            Return CType(Me.Rows.Find(New Object() {id_ATM, radif}),bank_ATM_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_ATM_dtlDataTable = CType(MyBase.Clone,bank_ATM_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_ATM_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columnradif = Me.Columns("radif")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnamount = Me.Columns("amount")
            Me.columnmemo_dtl = Me.Columns("memo_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnmemo_dtl = New DataColumn("memo_dtl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo_dtl)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_ATM, Me.columnradif}, true))
            Me.columnid_ATM.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function Newbank_ATM_dtlRow() As bank_ATM_dtlRow
            Return CType(Me.NewRow,bank_ATM_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_ATM_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_ATM_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_ATM_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_ATM_dtlRowChanged(Me, New bank_ATM_dtlRowChangeEvent(CType(e.Row,bank_ATM_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_ATM_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_ATM_dtlRowChanging(Me, New bank_ATM_dtlRowChangeEvent(CType(e.Row,bank_ATM_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_ATM_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_ATM_dtlRowDeleted(Me, New bank_ATM_dtlRowChangeEvent(CType(e.Row,bank_ATM_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_ATM_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_ATM_dtlRowDeleting(Me, New bank_ATM_dtlRowChangeEvent(CType(e.Row,bank_ATM_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_ATM_dtlRow(ByVal row As bank_ATM_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATM_dtlRow
        Inherits DataRow
        
        Private tablebank_ATM_dtl As bank_ATM_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_ATM_dtl = CType(Me.Table,bank_ATM_dtlDataTable)
        End Sub
        
        Public Property id_ATM As Integer
            Get
                Return CType(Me(Me.tablebank_ATM_dtl.id_ATMColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_ATM_dtl.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tablebank_ATM_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tablebank_ATM_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM_dtl.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM_dtl.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM_dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM_dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property memo_dtl As String
            Get
                Try 
                    Return CType(Me(Me.tablebank_ATM_dtl.memo_dtlColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_ATM_dtl.memo_dtlColumn) = value
            End Set
        End Property
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM_dtl.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tablebank_ATM_dtl.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM_dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablebank_ATM_dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo_dtlNull() As Boolean
            Return Me.IsNull(Me.tablebank_ATM_dtl.memo_dtlColumn)
        End Function
        
        Public Sub Setmemo_dtlNull()
            Me(Me.tablebank_ATM_dtl.memo_dtlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_ATM_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_ATM_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_ATM_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_ATM_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columndate_doc As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnmemo As DataColumn
        
        Private columnmemo2 As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property date_docColumn As DataColumn
            Get
                Return Me.columndate_doc
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property memoColumn As DataColumn
            Get
                Return Me.columnmemo
            End Get
        End Property
        
        Friend ReadOnly Property memo2Column As DataColumn
            Get
                Return Me.columnmemo2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_depositRow
            Get
                Return CType(Me.Rows(index),GL_debit_depositRow)
            End Get
        End Property
        
        Public Event GL_debit_depositRowChanged As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowChanging As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleted As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleting As GL_debit_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_depositRow(ByVal id_bank As Short, ByVal date_doc As String, ByVal debit_amount As Decimal, ByVal deposit_amount As Decimal, ByVal GL_account As String, ByVal desc_GL_account As String, ByVal memo As String, ByVal memo2 As String) As GL_debit_depositRow
            Dim rowGL_debit_depositRow As GL_debit_depositRow = CType(Me.NewRow,GL_debit_depositRow)
            rowGL_debit_depositRow.ItemArray = New Object() {id_bank, date_doc, debit_amount, deposit_amount, GL_account, desc_GL_account, Nothing, memo, memo2}
            Me.Rows.Add(rowGL_debit_depositRow)
            Return rowGL_debit_depositRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_depositDataTable = CType(MyBase.Clone,GL_debit_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columndate_doc = Me.Columns("date_doc")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnmemo = Me.Columns("memo")
            Me.columnmemo2 = Me.Columns("memo2")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columndate_doc = New DataColumn("date_doc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_doc)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnmemo = New DataColumn("memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo)
            Me.columnmemo2 = New DataColumn("memo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo2)
            Me.columndebit_amount.ReadOnly = true
            Me.columndeposit_amount.ReadOnly = true
            Me.columnid_debit_deposit_head.AutoIncrement = true
            Me.columnid_debit_deposit_head.AllowDBNull = false
            Me.columnid_debit_deposit_head.ReadOnly = true
        End Sub
        
        Public Function NewGL_debit_depositRow() As GL_debit_depositRow
            Return CType(Me.NewRow,GL_debit_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanged(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanging(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleted(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleting(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRow
        Inherits DataRow
        
        Private tableGL_debit_deposit As GL_debit_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit = CType(Me.Table,GL_debit_depositDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_bankColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_bankColumn) = value
            End Set
        End Property
        
        Public Property date_doc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.date_docColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.date_docColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.debit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Return CType(Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.memoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.memoColumn) = value
            End Set
        End Property
        
        Public Property memo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.memo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.memo2Column) = value
            End Set
        End Property
        
        Public Function Isid_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_bankColumn)
        End Function
        
        Public Sub Setid_bankNull()
            Me(Me.tableGL_debit_deposit.id_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_docNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.date_docColumn)
        End Function
        
        Public Sub Setdate_docNull()
            Me(Me.tableGL_debit_deposit.date_docColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdebit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.debit_amountColumn)
        End Function
        
        Public Sub Setdebit_amountNull()
            Me(Me.tableGL_debit_deposit.debit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableGL_debit_deposit.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_debit_deposit.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableGL_debit_deposit.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.memoColumn)
        End Function
        
        Public Sub SetmemoNull()
            Me(Me.tableGL_debit_deposit.memoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemo2Null() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.memo2Column)
        End Function
        
        Public Sub Setmemo2Null()
            Me(Me.tableGL_debit_deposit.memo2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
