'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsFrmBankAdjusment
    Inherits DataSet
    
    Private tablebas_banks As bas_banksDataTable
    
    Private tableBank_Adjustment_dtl As Bank_Adjustment_dtlDataTable
    
    Private tablebank_adjustment_head As bank_adjustment_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_banks")) Is Nothing) Then
                Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
            End If
            If (Not (ds.Tables("Bank_Adjustment_dtl")) Is Nothing) Then
                Me.Tables.Add(New Bank_Adjustment_dtlDataTable(ds.Tables("Bank_Adjustment_dtl")))
            End If
            If (Not (ds.Tables("bank_adjustment_head")) Is Nothing) Then
                Me.Tables.Add(New bank_adjustment_headDataTable(ds.Tables("bank_adjustment_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_banks As bas_banksDataTable
        Get
            Return Me.tablebas_banks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bank_Adjustment_dtl As Bank_Adjustment_dtlDataTable
        Get
            Return Me.tableBank_Adjustment_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bank_adjustment_head As bank_adjustment_headDataTable
        Get
            Return Me.tablebank_adjustment_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsFrmBankAdjusment = CType(MyBase.Clone,DsFrmBankAdjusment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_banks")) Is Nothing) Then
            Me.Tables.Add(New bas_banksDataTable(ds.Tables("bas_banks")))
        End If
        If (Not (ds.Tables("Bank_Adjustment_dtl")) Is Nothing) Then
            Me.Tables.Add(New Bank_Adjustment_dtlDataTable(ds.Tables("Bank_Adjustment_dtl")))
        End If
        If (Not (ds.Tables("bank_adjustment_head")) Is Nothing) Then
            Me.Tables.Add(New bank_adjustment_headDataTable(ds.Tables("bank_adjustment_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_banks = CType(Me.Tables("bas_banks"),bas_banksDataTable)
        If (Not (Me.tablebas_banks) Is Nothing) Then
            Me.tablebas_banks.InitVars
        End If
        Me.tableBank_Adjustment_dtl = CType(Me.Tables("Bank_Adjustment_dtl"),Bank_Adjustment_dtlDataTable)
        If (Not (Me.tableBank_Adjustment_dtl) Is Nothing) Then
            Me.tableBank_Adjustment_dtl.InitVars
        End If
        Me.tablebank_adjustment_head = CType(Me.Tables("bank_adjustment_head"),bank_adjustment_headDataTable)
        If (Not (Me.tablebank_adjustment_head) Is Nothing) Then
            Me.tablebank_adjustment_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsFrmBankAdjusment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsFrmBankAdjusment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_banks = New bas_banksDataTable
        Me.Tables.Add(Me.tablebas_banks)
        Me.tableBank_Adjustment_dtl = New Bank_Adjustment_dtlDataTable
        Me.Tables.Add(Me.tableBank_Adjustment_dtl)
        Me.tablebank_adjustment_head = New bank_adjustment_headDataTable
        Me.Tables.Add(Me.tablebank_adjustment_head)
    End Sub
    
    Private Function ShouldSerializebas_banks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBank_Adjustment_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebank_adjustment_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_banksRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_banksRowChangeEvent)
    
    Public Delegate Sub Bank_Adjustment_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Bank_Adjustment_dtlRowChangeEvent)
    
    Public Delegate Sub bank_adjustment_headRowChangeEventHandler(ByVal sender As Object, ByVal e As bank_adjustment_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_bank As DataColumn
        
        Private columnname_bank As DataColumn
        
        Private columnshare_all_store As DataColumn
        
        Private columnstore_no As DataColumn
        
        Private columnaccount_no As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columnemail As DataColumn
        
        Private columncontact_name As DataColumn
        
        Private columnGL_Account As DataColumn
        
        Private columnstart_check_no As DataColumn
        
        Private columnnext_check_no As DataColumn
        
        Private columndefault_bank As DataColumn
        
        Private columninactive As DataColumn
        
        Private columncod_account_type As DataColumn
        
        Private columnrouting_numbers As DataColumn
        
        Private columnBank_ID As DataColumn
        
        Private columnWeb_Page As DataColumn
        
        Private columnUser_ID As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnSecurity_code As DataColumn
        
        Private columnonline_banking As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_banks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_bankColumn As DataColumn
            Get
                Return Me.columnid_bank
            End Get
        End Property
        
        Friend ReadOnly Property name_bankColumn As DataColumn
            Get
                Return Me.columnname_bank
            End Get
        End Property
        
        Friend ReadOnly Property share_all_storeColumn As DataColumn
            Get
                Return Me.columnshare_all_store
            End Get
        End Property
        
        Friend ReadOnly Property store_noColumn As DataColumn
            Get
                Return Me.columnstore_no
            End Get
        End Property
        
        Friend ReadOnly Property account_noColumn As DataColumn
            Get
                Return Me.columnaccount_no
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property contact_nameColumn As DataColumn
            Get
                Return Me.columncontact_name
            End Get
        End Property
        
        Friend ReadOnly Property GL_AccountColumn As DataColumn
            Get
                Return Me.columnGL_Account
            End Get
        End Property
        
        Friend ReadOnly Property start_check_noColumn As DataColumn
            Get
                Return Me.columnstart_check_no
            End Get
        End Property
        
        Friend ReadOnly Property next_check_noColumn As DataColumn
            Get
                Return Me.columnnext_check_no
            End Get
        End Property
        
        Friend ReadOnly Property default_bankColumn As DataColumn
            Get
                Return Me.columndefault_bank
            End Get
        End Property
        
        Friend ReadOnly Property inactiveColumn As DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        Friend ReadOnly Property cod_account_typeColumn As DataColumn
            Get
                Return Me.columncod_account_type
            End Get
        End Property
        
        Friend ReadOnly Property routing_numbersColumn As DataColumn
            Get
                Return Me.columnrouting_numbers
            End Get
        End Property
        
        Friend ReadOnly Property Bank_IDColumn As DataColumn
            Get
                Return Me.columnBank_ID
            End Get
        End Property
        
        Friend ReadOnly Property Web_PageColumn As DataColumn
            Get
                Return Me.columnWeb_Page
            End Get
        End Property
        
        Friend ReadOnly Property User_IDColumn As DataColumn
            Get
                Return Me.columnUser_ID
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property Security_codeColumn As DataColumn
            Get
                Return Me.columnSecurity_code
            End Get
        End Property
        
        Friend ReadOnly Property online_bankingColumn As DataColumn
            Get
                Return Me.columnonline_banking
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_banksRow
            Get
                Return CType(Me.Rows(index),bas_banksRow)
            End Get
        End Property
        
        Public Event bas_banksRowChanged As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowChanging As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleted As bas_banksRowChangeEventHandler
        
        Public Event bas_banksRowDeleting As bas_banksRowChangeEventHandler
        
        Public Overloads Sub Addbas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_banksRow( _
                    ByVal name_bank As String,  _
                    ByVal share_all_store As Boolean,  _
                    ByVal store_no As String,  _
                    ByVal account_no As String,  _
                    ByVal address As String,  _
                    ByVal zip As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal email As String,  _
                    ByVal contact_name As String,  _
                    ByVal GL_Account As String,  _
                    ByVal start_check_no As String,  _
                    ByVal next_check_no As String,  _
                    ByVal default_bank As Boolean,  _
                    ByVal inactive As Boolean,  _
                    ByVal cod_account_type As String,  _
                    ByVal routing_numbers As String,  _
                    ByVal Bank_ID As String,  _
                    ByVal Web_Page As String,  _
                    ByVal User_ID As String,  _
                    ByVal Password As String,  _
                    ByVal Security_code As String,  _
                    ByVal online_banking As Boolean) As bas_banksRow
            Dim rowbas_banksRow As bas_banksRow = CType(Me.NewRow,bas_banksRow)
            rowbas_banksRow.ItemArray = New Object() {Nothing, name_bank, share_all_store, store_no, account_no, address, zip, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, email, contact_name, GL_Account, start_check_no, next_check_no, default_bank, inactive, cod_account_type, routing_numbers, Bank_ID, Web_Page, User_ID, Password, Security_code, online_banking}
            Me.Rows.Add(rowbas_banksRow)
            Return rowbas_banksRow
        End Function
        
        Public Function FindByid_bank(ByVal id_bank As Short) As bas_banksRow
            Return CType(Me.Rows.Find(New Object() {id_bank}),bas_banksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_banksDataTable = CType(MyBase.Clone,bas_banksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_banksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_bank = Me.Columns("id_bank")
            Me.columnname_bank = Me.Columns("name_bank")
            Me.columnshare_all_store = Me.Columns("share_all_store")
            Me.columnstore_no = Me.Columns("store_no")
            Me.columnaccount_no = Me.Columns("account_no")
            Me.columnaddress = Me.Columns("address")
            Me.columnzip = Me.Columns("zip")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columnemail = Me.Columns("email")
            Me.columncontact_name = Me.Columns("contact_name")
            Me.columnGL_Account = Me.Columns("GL_Account")
            Me.columnstart_check_no = Me.Columns("start_check_no")
            Me.columnnext_check_no = Me.Columns("next_check_no")
            Me.columndefault_bank = Me.Columns("default_bank")
            Me.columninactive = Me.Columns("inactive")
            Me.columncod_account_type = Me.Columns("cod_account_type")
            Me.columnrouting_numbers = Me.Columns("routing_numbers")
            Me.columnBank_ID = Me.Columns("Bank_ID")
            Me.columnWeb_Page = Me.Columns("Web_Page")
            Me.columnUser_ID = Me.Columns("User_ID")
            Me.columnPassword = Me.Columns("Password")
            Me.columnSecurity_code = Me.Columns("Security_code")
            Me.columnonline_banking = Me.Columns("online_banking")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_bank = New DataColumn("id_bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_bank)
            Me.columnname_bank = New DataColumn("name_bank", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname_bank)
            Me.columnshare_all_store = New DataColumn("share_all_store", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshare_all_store)
            Me.columnstore_no = New DataColumn("store_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstore_no)
            Me.columnaccount_no = New DataColumn("account_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaccount_no)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncontact_name = New DataColumn("contact_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontact_name)
            Me.columnGL_Account = New DataColumn("GL_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_Account)
            Me.columnstart_check_no = New DataColumn("start_check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_check_no)
            Me.columnnext_check_no = New DataColumn("next_check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnext_check_no)
            Me.columndefault_bank = New DataColumn("default_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndefault_bank)
            Me.columninactive = New DataColumn("inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninactive)
            Me.columncod_account_type = New DataColumn("cod_account_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_account_type)
            Me.columnrouting_numbers = New DataColumn("routing_numbers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrouting_numbers)
            Me.columnBank_ID = New DataColumn("Bank_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBank_ID)
            Me.columnWeb_Page = New DataColumn("Web_Page", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeb_Page)
            Me.columnUser_ID = New DataColumn("User_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUser_ID)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnSecurity_code = New DataColumn("Security_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSecurity_code)
            Me.columnonline_banking = New DataColumn("online_banking", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnonline_banking)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_bank}, true))
            Me.columnid_bank.AutoIncrement = true
            Me.columnid_bank.AllowDBNull = false
            Me.columnid_bank.ReadOnly = true
            Me.columnid_bank.Unique = true
        End Sub
        
        Public Function Newbas_banksRow() As bas_banksRow
            Return CType(Me.NewRow,bas_banksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_banksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_banksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_banksRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanged(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_banksRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowChanging(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_banksRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleted(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_banksRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_banksRowDeleting(Me, New bas_banksRowChangeEvent(CType(e.Row,bas_banksRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_banksRow(ByVal row As bas_banksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRow
        Inherits DataRow
        
        Private tablebas_banks As bas_banksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_banks = CType(Me.Table,bas_banksDataTable)
        End Sub
        
        Public Property id_bank As Short
            Get
                Return CType(Me(Me.tablebas_banks.id_bankColumn),Short)
            End Get
            Set
                Me(Me.tablebas_banks.id_bankColumn) = value
            End Set
        End Property
        
        Public Property name_bank As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.name_bankColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.name_bankColumn) = value
            End Set
        End Property
        
        Public Property share_all_store As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.share_all_storeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.share_all_storeColumn) = value
            End Set
        End Property
        
        Public Property store_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.store_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.store_noColumn) = value
            End Set
        End Property
        
        Public Property account_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.account_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.account_noColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.addressColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.zipColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.emailColumn) = value
            End Set
        End Property
        
        Public Property contact_name As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.contact_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.contact_nameColumn) = value
            End Set
        End Property
        
        Public Property GL_Account As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.GL_AccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.GL_AccountColumn) = value
            End Set
        End Property
        
        Public Property start_check_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.start_check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.start_check_noColumn) = value
            End Set
        End Property
        
        Public Property next_check_no As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.next_check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.next_check_noColumn) = value
            End Set
        End Property
        
        Public Property default_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.default_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.default_bankColumn) = value
            End Set
        End Property
        
        Public Property inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.inactiveColumn) = value
            End Set
        End Property
        
        Public Property cod_account_type As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.cod_account_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.cod_account_typeColumn) = value
            End Set
        End Property
        
        Public Property routing_numbers As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.routing_numbersColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.routing_numbersColumn) = value
            End Set
        End Property
        
        Public Property Bank_ID As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Bank_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Bank_IDColumn) = value
            End Set
        End Property
        
        Public Property Web_Page As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Web_PageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Web_PageColumn) = value
            End Set
        End Property
        
        Public Property User_ID As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.User_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.User_IDColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.PasswordColumn) = value
            End Set
        End Property
        
        Public Property Security_code As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.Security_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.Security_codeColumn) = value
            End Set
        End Property
        
        Public Property online_banking As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebas_banks.online_bankingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_banks.online_bankingColumn) = value
            End Set
        End Property
        
        Public Function Isname_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.name_bankColumn)
        End Function
        
        Public Sub Setname_bankNull()
            Me(Me.tablebas_banks.name_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isshare_all_storeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.share_all_storeColumn)
        End Function
        
        Public Sub Setshare_all_storeNull()
            Me(Me.tablebas_banks.share_all_storeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstore_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.store_noColumn)
        End Function
        
        Public Sub Setstore_noNull()
            Me(Me.tablebas_banks.store_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaccount_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.account_noColumn)
        End Function
        
        Public Sub Setaccount_noNull()
            Me(Me.tablebas_banks.account_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablebas_banks.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablebas_banks.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablebas_banks.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablebas_banks.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablebas_banks.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablebas_banks.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablebas_banks.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablebas_banks.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablebas_banks.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablebas_banks.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablebas_banks.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablebas_banks.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablebas_banks.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablebas_banks.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablebas_banks.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablebas_banks.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablebas_banks.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablebas_banks.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablebas_banks.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablebas_banks.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablebas_banks.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablebas_banks.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablebas_banks.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablebas_banks.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscontact_nameNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.contact_nameColumn)
        End Function
        
        Public Sub Setcontact_nameNull()
            Me(Me.tablebas_banks.contact_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_AccountNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.GL_AccountColumn)
        End Function
        
        Public Sub SetGL_AccountNull()
            Me(Me.tablebas_banks.GL_AccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstart_check_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.start_check_noColumn)
        End Function
        
        Public Sub Setstart_check_noNull()
            Me(Me.tablebas_banks.start_check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnext_check_noNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.next_check_noColumn)
        End Function
        
        Public Sub Setnext_check_noNull()
            Me(Me.tablebas_banks.next_check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdefault_bankNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.default_bankColumn)
        End Function
        
        Public Sub Setdefault_bankNull()
            Me(Me.tablebas_banks.default_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.inactiveColumn)
        End Function
        
        Public Sub SetinactiveNull()
            Me(Me.tablebas_banks.inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_account_typeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.cod_account_typeColumn)
        End Function
        
        Public Sub Setcod_account_typeNull()
            Me(Me.tablebas_banks.cod_account_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrouting_numbersNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.routing_numbersColumn)
        End Function
        
        Public Sub Setrouting_numbersNull()
            Me(Me.tablebas_banks.routing_numbersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBank_IDNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Bank_IDColumn)
        End Function
        
        Public Sub SetBank_IDNull()
            Me(Me.tablebas_banks.Bank_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeb_PageNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Web_PageColumn)
        End Function
        
        Public Sub SetWeb_PageNull()
            Me(Me.tablebas_banks.Web_PageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUser_IDNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.User_IDColumn)
        End Function
        
        Public Sub SetUser_IDNull()
            Me(Me.tablebas_banks.User_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tablebas_banks.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSecurity_codeNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.Security_codeColumn)
        End Function
        
        Public Sub SetSecurity_codeNull()
            Me(Me.tablebas_banks.Security_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isonline_bankingNull() As Boolean
            Return Me.IsNull(Me.tablebas_banks.online_bankingColumn)
        End Function
        
        Public Sub Setonline_bankingNull()
            Me(Me.tablebas_banks.online_bankingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_banksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_banksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_banksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_banksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bank_Adjustment_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Adjustment_no As DataColumn
        
        Private columnRadif As DataColumn
        
        Private columnGl_Account As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnMemo_Dtl As DataColumn
        
        Private columndesc_GL_account As DataColumn
        
        Friend Sub New()
            MyBase.New("Bank_Adjustment_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_Adjustment_noColumn As DataColumn
            Get
                Return Me.columnId_Adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property RadifColumn As DataColumn
            Get
                Return Me.columnRadif
            End Get
        End Property
        
        Friend ReadOnly Property Gl_AccountColumn As DataColumn
            Get
                Return Me.columnGl_Account
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property Memo_DtlColumn As DataColumn
            Get
                Return Me.columnMemo_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property desc_GL_accountColumn As DataColumn
            Get
                Return Me.columndesc_GL_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Bank_Adjustment_dtlRow
            Get
                Return CType(Me.Rows(index),Bank_Adjustment_dtlRow)
            End Get
        End Property
        
        Public Event Bank_Adjustment_dtlRowChanged As Bank_Adjustment_dtlRowChangeEventHandler
        
        Public Event Bank_Adjustment_dtlRowChanging As Bank_Adjustment_dtlRowChangeEventHandler
        
        Public Event Bank_Adjustment_dtlRowDeleted As Bank_Adjustment_dtlRowChangeEventHandler
        
        Public Event Bank_Adjustment_dtlRowDeleting As Bank_Adjustment_dtlRowChangeEventHandler
        
        Public Overloads Sub AddBank_Adjustment_dtlRow(ByVal row As Bank_Adjustment_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBank_Adjustment_dtlRow(ByVal Id_Adjustment_no As Integer, ByVal Radif As Short, ByVal Gl_Account As String, ByVal debit_amount As Decimal, ByVal deposit_amount As Decimal, ByVal Memo_Dtl As String, ByVal desc_GL_account As String) As Bank_Adjustment_dtlRow
            Dim rowBank_Adjustment_dtlRow As Bank_Adjustment_dtlRow = CType(Me.NewRow,Bank_Adjustment_dtlRow)
            rowBank_Adjustment_dtlRow.ItemArray = New Object() {Id_Adjustment_no, Radif, Gl_Account, debit_amount, deposit_amount, Memo_Dtl, desc_GL_account}
            Me.Rows.Add(rowBank_Adjustment_dtlRow)
            Return rowBank_Adjustment_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Bank_Adjustment_dtlDataTable = CType(MyBase.Clone,Bank_Adjustment_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Bank_Adjustment_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Adjustment_no = Me.Columns("Id_Adjustment_no")
            Me.columnRadif = Me.Columns("Radif")
            Me.columnGl_Account = Me.Columns("Gl_Account")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnMemo_Dtl = Me.Columns("Memo_Dtl")
            Me.columndesc_GL_account = Me.Columns("desc_GL_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Adjustment_no = New DataColumn("Id_Adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Adjustment_no)
            Me.columnRadif = New DataColumn("Radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRadif)
            Me.columnGl_Account = New DataColumn("Gl_Account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_Account)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnMemo_Dtl = New DataColumn("Memo_Dtl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo_Dtl)
            Me.columndesc_GL_account = New DataColumn("desc_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_GL_account)
            Me.columnId_Adjustment_no.AllowDBNull = false
            Me.columnRadif.AllowDBNull = false
            Me.columnGl_Account.AllowDBNull = false
            Me.columndebit_amount.AllowDBNull = false
            Me.columndeposit_amount.AllowDBNull = false
        End Sub
        
        Public Function NewBank_Adjustment_dtlRow() As Bank_Adjustment_dtlRow
            Return CType(Me.NewRow,Bank_Adjustment_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Bank_Adjustment_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Bank_Adjustment_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Bank_Adjustment_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Bank_Adjustment_dtlRowChanged(Me, New Bank_Adjustment_dtlRowChangeEvent(CType(e.Row,Bank_Adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Bank_Adjustment_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Bank_Adjustment_dtlRowChanging(Me, New Bank_Adjustment_dtlRowChangeEvent(CType(e.Row,Bank_Adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Bank_Adjustment_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Bank_Adjustment_dtlRowDeleted(Me, New Bank_Adjustment_dtlRowChangeEvent(CType(e.Row,Bank_Adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Bank_Adjustment_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Bank_Adjustment_dtlRowDeleting(Me, New Bank_Adjustment_dtlRowChangeEvent(CType(e.Row,Bank_Adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBank_Adjustment_dtlRow(ByVal row As Bank_Adjustment_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bank_Adjustment_dtlRow
        Inherits DataRow
        
        Private tableBank_Adjustment_dtl As Bank_Adjustment_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBank_Adjustment_dtl = CType(Me.Table,Bank_Adjustment_dtlDataTable)
        End Sub
        
        Public Property Id_Adjustment_no As Integer
            Get
                Return CType(Me(Me.tableBank_Adjustment_dtl.Id_Adjustment_noColumn),Integer)
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.Id_Adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property Radif As Short
            Get
                Return CType(Me(Me.tableBank_Adjustment_dtl.RadifColumn),Short)
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.RadifColumn) = value
            End Set
        End Property
        
        Public Property Gl_Account As String
            Get
                Return CType(Me(Me.tableBank_Adjustment_dtl.Gl_AccountColumn),String)
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.Gl_AccountColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Return CType(Me(Me.tableBank_Adjustment_dtl.debit_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Return CType(Me(Me.tableBank_Adjustment_dtl.deposit_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property Memo_Dtl As String
            Get
                Try 
                    Return CType(Me(Me.tableBank_Adjustment_dtl.Memo_DtlColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.Memo_DtlColumn) = value
            End Set
        End Property
        
        Public Property desc_GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableBank_Adjustment_dtl.desc_GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBank_Adjustment_dtl.desc_GL_accountColumn) = value
            End Set
        End Property
        
        Public Function IsMemo_DtlNull() As Boolean
            Return Me.IsNull(Me.tableBank_Adjustment_dtl.Memo_DtlColumn)
        End Function
        
        Public Sub SetMemo_DtlNull()
            Me(Me.tableBank_Adjustment_dtl.Memo_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_GL_accountNull() As Boolean
            Return Me.IsNull(Me.tableBank_Adjustment_dtl.desc_GL_accountColumn)
        End Function
        
        Public Sub Setdesc_GL_accountNull()
            Me(Me.tableBank_Adjustment_dtl.desc_GL_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bank_Adjustment_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Bank_Adjustment_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Bank_Adjustment_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Bank_Adjustment_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_adjustment_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Adjustment_no As DataColumn
        
        Private columnadjustment_date As DataColumn
        
        Private columnemployee_cod As DataColumn
        
        Private columnid_Bank As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Friend Sub New()
            MyBase.New("bank_adjustment_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_Adjustment_noColumn As DataColumn
            Get
                Return Me.columnId_Adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property adjustment_dateColumn As DataColumn
            Get
                Return Me.columnadjustment_date
            End Get
        End Property
        
        Friend ReadOnly Property employee_codColumn As DataColumn
            Get
                Return Me.columnemployee_cod
            End Get
        End Property
        
        Friend ReadOnly Property id_BankColumn As DataColumn
            Get
                Return Me.columnid_Bank
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bank_adjustment_headRow
            Get
                Return CType(Me.Rows(index),bank_adjustment_headRow)
            End Get
        End Property
        
        Public Event bank_adjustment_headRowChanged As bank_adjustment_headRowChangeEventHandler
        
        Public Event bank_adjustment_headRowChanging As bank_adjustment_headRowChangeEventHandler
        
        Public Event bank_adjustment_headRowDeleted As bank_adjustment_headRowChangeEventHandler
        
        Public Event bank_adjustment_headRowDeleting As bank_adjustment_headRowChangeEventHandler
        
        Public Overloads Sub Addbank_adjustment_headRow(ByVal row As bank_adjustment_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbank_adjustment_headRow(ByVal adjustment_date As String, ByVal employee_cod As String, ByVal id_Bank As Short, ByVal id_debit_deposit_head As Integer, ByVal id_GL_journal As Integer) As bank_adjustment_headRow
            Dim rowbank_adjustment_headRow As bank_adjustment_headRow = CType(Me.NewRow,bank_adjustment_headRow)
            rowbank_adjustment_headRow.ItemArray = New Object() {Nothing, adjustment_date, employee_cod, id_Bank, id_debit_deposit_head, id_GL_journal}
            Me.Rows.Add(rowbank_adjustment_headRow)
            Return rowbank_adjustment_headRow
        End Function
        
        Public Function FindById_Adjustment_no(ByVal Id_Adjustment_no As Integer) As bank_adjustment_headRow
            Return CType(Me.Rows.Find(New Object() {Id_Adjustment_no}),bank_adjustment_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bank_adjustment_headDataTable = CType(MyBase.Clone,bank_adjustment_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bank_adjustment_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Adjustment_no = Me.Columns("Id_Adjustment_no")
            Me.columnadjustment_date = Me.Columns("adjustment_date")
            Me.columnemployee_cod = Me.Columns("employee_cod")
            Me.columnid_Bank = Me.Columns("id_Bank")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Adjustment_no = New DataColumn("Id_Adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Adjustment_no)
            Me.columnadjustment_date = New DataColumn("adjustment_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment_date)
            Me.columnemployee_cod = New DataColumn("employee_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_cod)
            Me.columnid_Bank = New DataColumn("id_Bank", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_Bank)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Adjustment_no}, true))
            Me.columnId_Adjustment_no.AutoIncrement = true
            Me.columnId_Adjustment_no.AllowDBNull = false
            Me.columnId_Adjustment_no.ReadOnly = true
            Me.columnId_Adjustment_no.Unique = true
            Me.columnadjustment_date.AllowDBNull = false
            Me.columnemployee_cod.AllowDBNull = false
            Me.columnid_Bank.AllowDBNull = false
        End Sub
        
        Public Function Newbank_adjustment_headRow() As bank_adjustment_headRow
            Return CType(Me.NewRow,bank_adjustment_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bank_adjustment_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bank_adjustment_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bank_adjustment_headRowChangedEvent) Is Nothing) Then
                RaiseEvent bank_adjustment_headRowChanged(Me, New bank_adjustment_headRowChangeEvent(CType(e.Row,bank_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bank_adjustment_headRowChangingEvent) Is Nothing) Then
                RaiseEvent bank_adjustment_headRowChanging(Me, New bank_adjustment_headRowChangeEvent(CType(e.Row,bank_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bank_adjustment_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent bank_adjustment_headRowDeleted(Me, New bank_adjustment_headRowChangeEvent(CType(e.Row,bank_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bank_adjustment_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent bank_adjustment_headRowDeleting(Me, New bank_adjustment_headRowChangeEvent(CType(e.Row,bank_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebank_adjustment_headRow(ByVal row As bank_adjustment_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_adjustment_headRow
        Inherits DataRow
        
        Private tablebank_adjustment_head As bank_adjustment_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebank_adjustment_head = CType(Me.Table,bank_adjustment_headDataTable)
        End Sub
        
        Public Property Id_Adjustment_no As Integer
            Get
                Return CType(Me(Me.tablebank_adjustment_head.Id_Adjustment_noColumn),Integer)
            End Get
            Set
                Me(Me.tablebank_adjustment_head.Id_Adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property adjustment_date As String
            Get
                Return CType(Me(Me.tablebank_adjustment_head.adjustment_dateColumn),String)
            End Get
            Set
                Me(Me.tablebank_adjustment_head.adjustment_dateColumn) = value
            End Set
        End Property
        
        Public Property employee_cod As String
            Get
                Return CType(Me(Me.tablebank_adjustment_head.employee_codColumn),String)
            End Get
            Set
                Me(Me.tablebank_adjustment_head.employee_codColumn) = value
            End Set
        End Property
        
        Public Property id_Bank As Short
            Get
                Return CType(Me(Me.tablebank_adjustment_head.id_BankColumn),Short)
            End Get
            Set
                Me(Me.tablebank_adjustment_head.id_BankColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebank_adjustment_head.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_adjustment_head.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebank_adjustment_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebank_adjustment_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tablebank_adjustment_head.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tablebank_adjustment_head.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tablebank_adjustment_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tablebank_adjustment_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bank_adjustment_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bank_adjustment_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bank_adjustment_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bank_adjustment_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
