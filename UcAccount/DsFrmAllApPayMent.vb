'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsFrmAllApPayMent
    Inherits DataSet
    
    Private tableView_AllVendorCreadit As View_AllVendorCreaditDataTable
    
    Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
    
    Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
    
    Private tableservice_out_purchases As service_out_purchasesDataTable
    
    Private tableView_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
    
    Private tableGridRecord As GridRecordDataTable
    
    Private tableGL_vendor_credit As GL_vendor_creditDataTable
    
    Private tablecredit_debit As credit_debitDataTable
    
    Private tableinv_vendor As inv_vendorDataTable
    
    Private tableclas As clasDataTable
    
    Private tableservice_out_purchases1 As service_out_purchases1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("View_AllVendorCreadit")) Is Nothing) Then
                Me.Tables.Add(New View_AllVendorCreaditDataTable(ds.Tables("View_AllVendorCreadit")))
            End If
            If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
            End If
            If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
            End If
            If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
                Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
            End If
            If (Not (ds.Tables("View_GL_vendor_creditReminder")) Is Nothing) Then
                Me.Tables.Add(New View_GL_vendor_creditReminderDataTable(ds.Tables("View_GL_vendor_creditReminder")))
            End If
            If (Not (ds.Tables("GridRecord")) Is Nothing) Then
                Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
            End If
            If (Not (ds.Tables("GL_vendor_credit")) Is Nothing) Then
                Me.Tables.Add(New GL_vendor_creditDataTable(ds.Tables("GL_vendor_credit")))
            End If
            If (Not (ds.Tables("credit_debit")) Is Nothing) Then
                Me.Tables.Add(New credit_debitDataTable(ds.Tables("credit_debit")))
            End If
            If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
            End If
            If (Not (ds.Tables("clas")) Is Nothing) Then
                Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
            End If
            If (Not (ds.Tables("service_out_purchases1")) Is Nothing) Then
                Me.Tables.Add(New service_out_purchases1DataTable(ds.Tables("service_out_purchases1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_AllVendorCreadit As View_AllVendorCreaditDataTable
        Get
            Return Me.tableView_AllVendorCreadit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        Get
            Return Me.tableGL_AP_bill_Dtl_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        Get
            Return Me.tableInv_Receive_product_Ap_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_out_purchases As service_out_purchasesDataTable
        Get
            Return Me.tableservice_out_purchases
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
        Get
            Return Me.tableView_GL_vendor_creditReminder
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GridRecord As GridRecordDataTable
        Get
            Return Me.tableGridRecord
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_vendor_credit As GL_vendor_creditDataTable
        Get
            Return Me.tableGL_vendor_credit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property credit_debit As credit_debitDataTable
        Get
            Return Me.tablecredit_debit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_vendor As inv_vendorDataTable
        Get
            Return Me.tableinv_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property clas As clasDataTable
        Get
            Return Me.tableclas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_out_purchases1 As service_out_purchases1DataTable
        Get
            Return Me.tableservice_out_purchases1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsFrmAllApPayMent = CType(MyBase.Clone,DsFrmAllApPayMent)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("View_AllVendorCreadit")) Is Nothing) Then
            Me.Tables.Add(New View_AllVendorCreaditDataTable(ds.Tables("View_AllVendorCreadit")))
        End If
        If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
        End If
        If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
        End If
        If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
            Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
        End If
        If (Not (ds.Tables("View_GL_vendor_creditReminder")) Is Nothing) Then
            Me.Tables.Add(New View_GL_vendor_creditReminderDataTable(ds.Tables("View_GL_vendor_creditReminder")))
        End If
        If (Not (ds.Tables("GridRecord")) Is Nothing) Then
            Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
        End If
        If (Not (ds.Tables("GL_vendor_credit")) Is Nothing) Then
            Me.Tables.Add(New GL_vendor_creditDataTable(ds.Tables("GL_vendor_credit")))
        End If
        If (Not (ds.Tables("credit_debit")) Is Nothing) Then
            Me.Tables.Add(New credit_debitDataTable(ds.Tables("credit_debit")))
        End If
        If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
        End If
        If (Not (ds.Tables("clas")) Is Nothing) Then
            Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
        End If
        If (Not (ds.Tables("service_out_purchases1")) Is Nothing) Then
            Me.Tables.Add(New service_out_purchases1DataTable(ds.Tables("service_out_purchases1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableView_AllVendorCreadit = CType(Me.Tables("View_AllVendorCreadit"),View_AllVendorCreaditDataTable)
        If (Not (Me.tableView_AllVendorCreadit) Is Nothing) Then
            Me.tableView_AllVendorCreadit.InitVars
        End If
        Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Tables("GL_AP_bill_Dtl_Dtl"),GL_AP_bill_Dtl_DtlDataTable)
        If (Not (Me.tableGL_AP_bill_Dtl_Dtl) Is Nothing) Then
            Me.tableGL_AP_bill_Dtl_Dtl.InitVars
        End If
        Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Tables("Inv_Receive_product_Ap_Dtl"),Inv_Receive_product_Ap_DtlDataTable)
        If (Not (Me.tableInv_Receive_product_Ap_Dtl) Is Nothing) Then
            Me.tableInv_Receive_product_Ap_Dtl.InitVars
        End If
        Me.tableservice_out_purchases = CType(Me.Tables("service_out_purchases"),service_out_purchasesDataTable)
        If (Not (Me.tableservice_out_purchases) Is Nothing) Then
            Me.tableservice_out_purchases.InitVars
        End If
        Me.tableView_GL_vendor_creditReminder = CType(Me.Tables("View_GL_vendor_creditReminder"),View_GL_vendor_creditReminderDataTable)
        If (Not (Me.tableView_GL_vendor_creditReminder) Is Nothing) Then
            Me.tableView_GL_vendor_creditReminder.InitVars
        End If
        Me.tableGridRecord = CType(Me.Tables("GridRecord"),GridRecordDataTable)
        If (Not (Me.tableGridRecord) Is Nothing) Then
            Me.tableGridRecord.InitVars
        End If
        Me.tableGL_vendor_credit = CType(Me.Tables("GL_vendor_credit"),GL_vendor_creditDataTable)
        If (Not (Me.tableGL_vendor_credit) Is Nothing) Then
            Me.tableGL_vendor_credit.InitVars
        End If
        Me.tablecredit_debit = CType(Me.Tables("credit_debit"),credit_debitDataTable)
        If (Not (Me.tablecredit_debit) Is Nothing) Then
            Me.tablecredit_debit.InitVars
        End If
        Me.tableinv_vendor = CType(Me.Tables("inv_vendor"),inv_vendorDataTable)
        If (Not (Me.tableinv_vendor) Is Nothing) Then
            Me.tableinv_vendor.InitVars
        End If
        Me.tableclas = CType(Me.Tables("clas"),clasDataTable)
        If (Not (Me.tableclas) Is Nothing) Then
            Me.tableclas.InitVars
        End If
        Me.tableservice_out_purchases1 = CType(Me.Tables("service_out_purchases1"),service_out_purchases1DataTable)
        If (Not (Me.tableservice_out_purchases1) Is Nothing) Then
            Me.tableservice_out_purchases1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsFrmAllApPayMent"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsFrmAllApPayMent.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableView_AllVendorCreadit = New View_AllVendorCreaditDataTable
        Me.Tables.Add(Me.tableView_AllVendorCreadit)
        Me.tableGL_AP_bill_Dtl_Dtl = New GL_AP_bill_Dtl_DtlDataTable
        Me.Tables.Add(Me.tableGL_AP_bill_Dtl_Dtl)
        Me.tableInv_Receive_product_Ap_Dtl = New Inv_Receive_product_Ap_DtlDataTable
        Me.Tables.Add(Me.tableInv_Receive_product_Ap_Dtl)
        Me.tableservice_out_purchases = New service_out_purchasesDataTable
        Me.Tables.Add(Me.tableservice_out_purchases)
        Me.tableView_GL_vendor_creditReminder = New View_GL_vendor_creditReminderDataTable
        Me.Tables.Add(Me.tableView_GL_vendor_creditReminder)
        Me.tableGridRecord = New GridRecordDataTable
        Me.Tables.Add(Me.tableGridRecord)
        Me.tableGL_vendor_credit = New GL_vendor_creditDataTable
        Me.Tables.Add(Me.tableGL_vendor_credit)
        Me.tablecredit_debit = New credit_debitDataTable
        Me.Tables.Add(Me.tablecredit_debit)
        Me.tableinv_vendor = New inv_vendorDataTable
        Me.Tables.Add(Me.tableinv_vendor)
        Me.tableclas = New clasDataTable
        Me.Tables.Add(Me.tableclas)
        Me.tableservice_out_purchases1 = New service_out_purchases1DataTable
        Me.Tables.Add(Me.tableservice_out_purchases1)
    End Sub
    
    Private Function ShouldSerializeView_AllVendorCreadit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_AP_bill_Dtl_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Receive_product_Ap_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_out_purchases() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_GL_vendor_creditReminder() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGridRecord() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_vendor_credit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecredit_debit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeclas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_out_purchases1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub View_AllVendorCreaditRowChangeEventHandler(ByVal sender As Object, ByVal e As View_AllVendorCreaditRowChangeEvent)
    
    Public Delegate Sub GL_AP_bill_Dtl_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_bill_Dtl_DtlRowChangeEvent)
    
    Public Delegate Sub Inv_Receive_product_Ap_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_product_Ap_DtlRowChangeEvent)
    
    Public Delegate Sub service_out_purchasesRowChangeEventHandler(ByVal sender As Object, ByVal e As service_out_purchasesRowChangeEvent)
    
    Public Delegate Sub View_GL_vendor_creditReminderRowChangeEventHandler(ByVal sender As Object, ByVal e As View_GL_vendor_creditReminderRowChangeEvent)
    
    Public Delegate Sub GridRecordRowChangeEventHandler(ByVal sender As Object, ByVal e As GridRecordRowChangeEvent)
    
    Public Delegate Sub GL_vendor_creditRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_vendor_creditRowChangeEvent)
    
    Public Delegate Sub credit_debitRowChangeEventHandler(ByVal sender As Object, ByVal e As credit_debitRowChangeEvent)
    
    Public Delegate Sub inv_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_vendorRowChangeEvent)
    
    Public Delegate Sub clasRowChangeEventHandler(ByVal sender As Object, ByVal e As clasRowChangeEvent)
    
    Public Delegate Sub service_out_purchases1RowChangeEventHandler(ByVal sender As Object, ByVal e As service_out_purchases1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllVendorCreaditDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnsumamount_credit As DataColumn
        
        Private columnclass_vendor As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("View_AllVendorCreadit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property sumamount_creditColumn As DataColumn
            Get
                Return Me.columnsumamount_credit
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_AllVendorCreaditRow
            Get
                Return CType(Me.Rows(index),View_AllVendorCreaditRow)
            End Get
        End Property
        
        Public Event View_AllVendorCreaditRowChanged As View_AllVendorCreaditRowChangeEventHandler
        
        Public Event View_AllVendorCreaditRowChanging As View_AllVendorCreaditRowChangeEventHandler
        
        Public Event View_AllVendorCreaditRowDeleted As View_AllVendorCreaditRowChangeEventHandler
        
        Public Event View_AllVendorCreaditRowDeleting As View_AllVendorCreaditRowChangeEventHandler
        
        Public Overloads Sub AddView_AllVendorCreaditRow(ByVal row As View_AllVendorCreaditRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_AllVendorCreaditRow(ByVal selected As Boolean, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal sumamount_credit As Decimal, ByVal class_vendor As String, ByVal desc_class As String) As View_AllVendorCreaditRow
            Dim rowView_AllVendorCreaditRow As View_AllVendorCreaditRow = CType(Me.NewRow,View_AllVendorCreaditRow)
            rowView_AllVendorCreaditRow.ItemArray = New Object() {selected, cod_vendor, desc_vendor, sumamount_credit, class_vendor, desc_class}
            Me.Rows.Add(rowView_AllVendorCreaditRow)
            Return rowView_AllVendorCreaditRow
        End Function
        
        Public Function FindBycod_vendor(ByVal cod_vendor As String) As View_AllVendorCreaditRow
            Return CType(Me.Rows.Find(New Object() {cod_vendor}),View_AllVendorCreaditRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_AllVendorCreaditDataTable = CType(MyBase.Clone,View_AllVendorCreaditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_AllVendorCreaditDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnsumamount_credit = Me.Columns("sumamount_credit")
            Me.columnclass_vendor = Me.Columns("class_vendor")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnsumamount_credit = New DataColumn("sumamount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumamount_credit)
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("DsFrmAllApPayMentKey1", New DataColumn() {Me.columncod_vendor}, true))
            Me.columnselected.AllowDBNull = false
            Me.columnselected.DefaultValue = false
            Me.columncod_vendor.AllowDBNull = false
            Me.columncod_vendor.Unique = true
        End Sub
        
        Public Function NewView_AllVendorCreaditRow() As View_AllVendorCreaditRow
            Return CType(Me.NewRow,View_AllVendorCreaditRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_AllVendorCreaditRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_AllVendorCreaditRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_AllVendorCreaditRowChangedEvent) Is Nothing) Then
                RaiseEvent View_AllVendorCreaditRowChanged(Me, New View_AllVendorCreaditRowChangeEvent(CType(e.Row,View_AllVendorCreaditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_AllVendorCreaditRowChangingEvent) Is Nothing) Then
                RaiseEvent View_AllVendorCreaditRowChanging(Me, New View_AllVendorCreaditRowChangeEvent(CType(e.Row,View_AllVendorCreaditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_AllVendorCreaditRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_AllVendorCreaditRowDeleted(Me, New View_AllVendorCreaditRowChangeEvent(CType(e.Row,View_AllVendorCreaditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_AllVendorCreaditRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_AllVendorCreaditRowDeleting(Me, New View_AllVendorCreaditRowChangeEvent(CType(e.Row,View_AllVendorCreaditRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_AllVendorCreaditRow(ByVal row As View_AllVendorCreaditRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllVendorCreaditRow
        Inherits DataRow
        
        Private tableView_AllVendorCreadit As View_AllVendorCreaditDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_AllVendorCreadit = CType(Me.Table,View_AllVendorCreaditDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                Return CType(Me(Me.tableView_AllVendorCreadit.selectedColumn),Boolean)
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableView_AllVendorCreadit.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllVendorCreadit.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property sumamount_credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_AllVendorCreadit.sumamount_creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.sumamount_creditColumn) = value
            End Set
        End Property
        
        Public Property class_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllVendorCreadit.class_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.class_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableView_AllVendorCreadit.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_AllVendorCreadit.desc_classColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableView_AllVendorCreadit.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableView_AllVendorCreadit.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issumamount_creditNull() As Boolean
            Return Me.IsNull(Me.tableView_AllVendorCreadit.sumamount_creditColumn)
        End Function
        
        Public Sub Setsumamount_creditNull()
            Me(Me.tableView_AllVendorCreadit.sumamount_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isclass_vendorNull() As Boolean
            Return Me.IsNull(Me.tableView_AllVendorCreadit.class_vendorColumn)
        End Function
        
        Public Sub Setclass_vendorNull()
            Me(Me.tableView_AllVendorCreadit.class_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableView_AllVendorCreadit.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableView_AllVendorCreadit.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_AllVendorCreaditRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_AllVendorCreaditRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_AllVendorCreaditRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_AllVendorCreaditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_AP_bill_dtl_dtl As DataColumn
        
        Private columnId_AP_bill_dtl As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnId_AP_bill_Head As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Private columndiscount As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_bill_Dtl_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtl_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl_dtl
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_HeadColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_Head
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_bill_Dtl_DtlRow
            Get
                Return CType(Me.Rows(index),GL_AP_bill_Dtl_DtlRow)
            End Get
        End Property
        
        Public Event GL_AP_bill_Dtl_DtlRowChanged As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowChanging As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleted As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleting As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_bill_Dtl_DtlRow(ByVal Id_AP_bill_dtl As Integer, ByVal amount As Decimal, ByVal due_date As String, ByVal DateTransaction As String, ByVal Id_AP_bill_Head As String, ByVal sumpayment As Decimal, ByVal sumoriginalamount As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer, ByVal discount As Decimal) As GL_AP_bill_Dtl_DtlRow
            Dim rowGL_AP_bill_Dtl_DtlRow As GL_AP_bill_Dtl_DtlRow = CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
            rowGL_AP_bill_Dtl_DtlRow.ItemArray = New Object() {Nothing, Id_AP_bill_dtl, amount, due_date, DateTransaction, Id_AP_bill_Head, sumpayment, sumoriginalamount, ID_AP_payment, id_vendor_credit, discount}
            Me.Rows.Add(rowGL_AP_bill_Dtl_DtlRow)
            Return rowGL_AP_bill_Dtl_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_bill_Dtl_DtlDataTable = CType(MyBase.Clone,GL_AP_bill_Dtl_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_bill_Dtl_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_AP_bill_dtl_dtl = Me.Columns("Id_AP_bill_dtl_dtl")
            Me.columnId_AP_bill_dtl = Me.Columns("Id_AP_bill_dtl")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnId_AP_bill_Head = Me.Columns("Id_AP_bill_Head")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columndiscount = Me.Columns("discount")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_AP_bill_dtl_dtl = New DataColumn("Id_AP_bill_dtl_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl_dtl)
            Me.columnId_AP_bill_dtl = New DataColumn("Id_AP_bill_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnId_AP_bill_Head = New DataColumn("Id_AP_bill_Head", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_Head)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columnId_AP_bill_dtl_dtl.AutoIncrement = true
            Me.columnId_AP_bill_dtl_dtl.AllowDBNull = false
            Me.columnId_AP_bill_dtl_dtl.ReadOnly = true
            Me.columnId_AP_bill_Head.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
            Me.columnsumoriginalamount.AllowDBNull = false
        End Sub
        
        Public Function NewGL_AP_bill_Dtl_DtlRow() As GL_AP_bill_Dtl_DtlRow
            Return CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_bill_Dtl_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanged(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanging(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleted(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleting(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRow
        Inherits DataRow
        
        Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Table,GL_AP_bill_Dtl_DtlDataTable)
        End Sub
        
        Public Property Id_AP_bill_dtl_dtl As Integer
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtl_dtlColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtl_dtlColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_Head As String
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_HeadColumn),String)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_HeadColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Decimal
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.sumoriginalamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.discountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.discountColumn) = value
            End Set
        End Property
        
        Public Function IsId_AP_bill_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtlNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.discountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_bill_Dtl_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_bill_Dtl_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_bill_Dtl_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnid_receive_ref As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_product_Ap_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_product_Ap_DtlRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_product_Ap_DtlRow)
            End Get
        End Property
        
        Public Event Inv_Receive_product_Ap_DtlRowChanged As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowChanging As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleted As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleting As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_product_Ap_DtlRow(ByVal id_receive_ref As String, ByVal amount As Decimal, ByVal due_date As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Decimal, ByVal sumpayment As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer) As Inv_Receive_product_Ap_DtlRow
            Dim rowInv_Receive_product_Ap_DtlRow As Inv_Receive_product_Ap_DtlRow = CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
            rowInv_Receive_product_Ap_DtlRow.ItemArray = New Object() {Nothing, id_receive_ref, amount, due_date, DateTransaction, sumoriginalamount, sumpayment, ID_AP_payment, id_vendor_credit}
            Me.Rows.Add(rowInv_Receive_product_Ap_DtlRow)
            Return rowInv_Receive_product_Ap_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_product_Ap_DtlDataTable = CType(MyBase.Clone,Inv_Receive_product_Ap_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_product_Ap_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnID_Inv_Receive_product_Ap_Dtl.AutoIncrement = true
            Me.columnID_Inv_Receive_product_Ap_Dtl.AllowDBNull = false
            Me.columnID_Inv_Receive_product_Ap_Dtl.ReadOnly = true
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columndue_date.AllowDBNull = false
            Me.columnsumoriginalamount.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
        End Sub
        
        Public Function NewInv_Receive_product_Ap_DtlRow() As Inv_Receive_product_Ap_DtlRow
            Return CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_product_Ap_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanged(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanging(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleted(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleting(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRow
        Inherits DataRow
        
        Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Table,Inv_Receive_product_Ap_DtlDataTable)
        End Sub
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.sumoriginalamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_product_Ap_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_product_Ap_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_product_Ap_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Private columnvendorrefno As DataColumn
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("service_out_purchases")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property vendorrefnoColumn As DataColumn
            Get
                Return Me.columnvendorrefno
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_out_purchasesRow
            Get
                Return CType(Me.Rows(index),service_out_purchasesRow)
            End Get
        End Property
        
        Public Event service_out_purchasesRowChanged As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowChanging As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleted As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleting As service_out_purchasesRowChangeEventHandler
        
        Public Overloads Sub Addservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_out_purchasesRow(ByVal radif As Short, ByVal amount As Decimal, ByVal due_date As String, ByVal id_service_center As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Double, ByVal sumpayment As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer, ByVal vendorrefno As String, ByVal IDService_out_purchases_dtl As Decimal) As service_out_purchasesRow
            Dim rowservice_out_purchasesRow As service_out_purchasesRow = CType(Me.NewRow,service_out_purchasesRow)
            rowservice_out_purchasesRow.ItemArray = New Object() {radif, amount, due_date, id_service_center, DateTransaction, sumoriginalamount, sumpayment, ID_AP_payment, id_vendor_credit, vendorrefno, IDService_out_purchases_dtl}
            Me.Rows.Add(rowservice_out_purchasesRow)
            Return rowservice_out_purchasesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_out_purchasesDataTable = CType(MyBase.Clone,service_out_purchasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_out_purchasesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columnvendorrefno = Me.Columns("vendorrefno")
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnvendorrefno = New DataColumn("vendorrefno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorrefno)
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.columnradif.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
            Me.columnIDService_out_purchases_dtl.AllowDBNull = false
        End Sub
        
        Public Function Newservice_out_purchasesRow() As service_out_purchasesRow
            Return CType(Me.NewRow,service_out_purchasesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_out_purchasesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_out_purchasesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_out_purchasesRowChangedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanged(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_out_purchasesRowChangingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanging(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_out_purchasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleted(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_out_purchasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleting(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRow
        Inherits DataRow
        
        Private tableservice_out_purchases As service_out_purchasesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_out_purchases = CType(Me.Table,service_out_purchasesDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_out_purchases.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_out_purchases.radifColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.due_dateColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_out_purchases.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.sumoriginalamountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property vendorrefno As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.vendorrefnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.vendorrefnoColumn) = value
            End Set
        End Property
        
        Public Property IDService_out_purchases_dtl As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.IDService_out_purchases_dtlColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableservice_out_purchases.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableservice_out_purchases.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableservice_out_purchases.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumoriginalamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.sumoriginalamountColumn)
        End Function
        
        Public Sub SetsumoriginalamountNull()
            Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableservice_out_purchases.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableservice_out_purchases.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorrefnoNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.vendorrefnoColumn)
        End Function
        
        Public Sub SetvendorrefnoNull()
            Me(Me.tableservice_out_purchases.vendorrefnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_out_purchasesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_out_purchasesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_out_purchasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columnSumCreadit As DataColumn
        
        Private columnSumPayment As DataColumn
        
        Private columnReminder As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("View_GL_vendor_creditReminder")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property SumCreaditColumn As DataColumn
            Get
                Return Me.columnSumCreadit
            End Get
        End Property
        
        Friend ReadOnly Property SumPaymentColumn As DataColumn
            Get
                Return Me.columnSumPayment
            End Get
        End Property
        
        Friend ReadOnly Property ReminderColumn As DataColumn
            Get
                Return Me.columnReminder
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_GL_vendor_creditReminderRow
            Get
                Return CType(Me.Rows(index),View_GL_vendor_creditReminderRow)
            End Get
        End Property
        
        Public Event View_GL_vendor_creditReminderRowChanged As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowChanging As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowDeleted As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowDeleting As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Overloads Sub AddView_GL_vendor_creditReminderRow(ByVal row As View_GL_vendor_creditReminderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_GL_vendor_creditReminderRow(ByVal cod_vendor As String, ByVal SumCreadit As Decimal, ByVal SumPayment As Decimal, ByVal Reminder As Decimal, ByVal id_vendor_credit As Integer) As View_GL_vendor_creditReminderRow
            Dim rowView_GL_vendor_creditReminderRow As View_GL_vendor_creditReminderRow = CType(Me.NewRow,View_GL_vendor_creditReminderRow)
            rowView_GL_vendor_creditReminderRow.ItemArray = New Object() {cod_vendor, SumCreadit, SumPayment, Reminder, id_vendor_credit}
            Me.Rows.Add(rowView_GL_vendor_creditReminderRow)
            Return rowView_GL_vendor_creditReminderRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_GL_vendor_creditReminderDataTable = CType(MyBase.Clone,View_GL_vendor_creditReminderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_GL_vendor_creditReminderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnSumCreadit = Me.Columns("SumCreadit")
            Me.columnSumPayment = Me.Columns("SumPayment")
            Me.columnReminder = Me.Columns("Reminder")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnSumCreadit = New DataColumn("SumCreadit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumCreadit)
            Me.columnSumPayment = New DataColumn("SumPayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumPayment)
            Me.columnReminder = New DataColumn("Reminder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReminder)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnSumCreadit.AllowDBNull = false
            Me.columnSumPayment.AllowDBNull = false
            Me.columnid_vendor_credit.AllowDBNull = false
        End Sub
        
        Public Function NewView_GL_vendor_creditReminderRow() As View_GL_vendor_creditReminderRow
            Return CType(Me.NewRow,View_GL_vendor_creditReminderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_GL_vendor_creditReminderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_GL_vendor_creditReminderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_GL_vendor_creditReminderRowChangedEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowChanged(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_GL_vendor_creditReminderRowChangingEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowChanging(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_GL_vendor_creditReminderRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowDeleted(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_GL_vendor_creditReminderRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowDeleting(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_GL_vendor_creditReminderRow(ByVal row As View_GL_vendor_creditReminderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderRow
        Inherits DataRow
        
        Private tableView_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_GL_vendor_creditReminder = CType(Me.Table,View_GL_vendor_creditReminderDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property SumCreadit As Decimal
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.SumCreaditColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.SumCreaditColumn) = value
            End Set
        End Property
        
        Public Property SumPayment As Decimal
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.SumPaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.SumPaymentColumn) = value
            End Set
        End Property
        
        Public Property Reminder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsReminderNull() As Boolean
            Return Me.IsNull(Me.tableView_GL_vendor_creditReminder.ReminderColumn)
        End Function
        
        Public Sub SetReminderNull()
            Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_GL_vendor_creditReminderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_GL_vendor_creditReminderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_GL_vendor_creditReminderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_AP_payment As DataColumn
        
        Private column_Date As DataColumn
        
        Private columnRefrenceno As DataColumn
        
        Private columnRadif As DataColumn
        
        Private columnRefrenceType As DataColumn
        
        Private columnPaiedBefore As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnAmountPay As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Private columnDueDate As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnId_AP_bill_dtl_dtl As DataColumn
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnID_AP_paymentEdit As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Private columnPaiedBefore2 As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Private columnpassbefor As DataColumn
        
        Private columnvendorrefno As DataColumn
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("GridRecord")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property RefrencenoColumn As DataColumn
            Get
                Return Me.columnRefrenceno
            End Get
        End Property
        
        Friend ReadOnly Property RadifColumn As DataColumn
            Get
                Return Me.columnRadif
            End Get
        End Property
        
        Friend ReadOnly Property RefrenceTypeColumn As DataColumn
            Get
                Return Me.columnRefrenceType
            End Get
        End Property
        
        Friend ReadOnly Property PaiedBeforeColumn As DataColumn
            Get
                Return Me.columnPaiedBefore
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property AmountPayColumn As DataColumn
            Get
                Return Me.columnAmountPay
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Friend ReadOnly Property DueDateColumn As DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtl_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl_dtl
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentEditColumn As DataColumn
            Get
                Return Me.columnID_AP_paymentEdit
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property PaiedBefore2Column As DataColumn
            Get
                Return Me.columnPaiedBefore2
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Friend ReadOnly Property passbeforColumn As DataColumn
            Get
                Return Me.columnpassbefor
            End Get
        End Property
        
        Friend ReadOnly Property vendorrefnoColumn As DataColumn
            Get
                Return Me.columnvendorrefno
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GridRecordRow
            Get
                Return CType(Me.Rows(index),GridRecordRow)
            End Get
        End Property
        
        Public Event GridRecordRowChanged As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowChanging As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleted As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleting As GridRecordRowChangeEventHandler
        
        Public Overloads Sub AddGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGridRecordRow( _
                    ByVal _Date As String,  _
                    ByVal Refrenceno As String,  _
                    ByVal Radif As Short,  _
                    ByVal RefrenceType As String,  _
                    ByVal PaiedBefore As Decimal,  _
                    ByVal OriginalAmount As Decimal,  _
                    ByVal AmountDue As Decimal,  _
                    ByVal AmountPay As Decimal,  _
                    ByVal CheckFlag As Boolean,  _
                    ByVal DueDate As String,  _
                    ByVal Remark As String,  _
                    ByVal Id_AP_bill_dtl_dtl As Integer,  _
                    ByVal ID_Inv_Receive_product_Ap_Dtl As Integer,  _
                    ByVal ID_AP_paymentEdit As Integer,  _
                    ByVal id_vendor_credit As Integer,  _
                    ByVal PaiedBefore2 As Decimal,  _
                    ByVal cod_vendor As String,  _
                    ByVal id_vendor_credit_head As Integer,  _
                    ByVal passbefor As Boolean,  _
                    ByVal vendorrefno As String,  _
                    ByVal IDService_out_purchases_dtl As Integer) As GridRecordRow
            Dim rowGridRecordRow As GridRecordRow = CType(Me.NewRow,GridRecordRow)
            rowGridRecordRow.ItemArray = New Object() {Nothing, _Date, Refrenceno, Radif, RefrenceType, PaiedBefore, OriginalAmount, AmountDue, AmountPay, CheckFlag, DueDate, Remark, Id_AP_bill_dtl_dtl, ID_Inv_Receive_product_Ap_Dtl, ID_AP_paymentEdit, id_vendor_credit, PaiedBefore2, cod_vendor, id_vendor_credit_head, passbefor, vendorrefno, IDService_out_purchases_dtl}
            Me.Rows.Add(rowGridRecordRow)
            Return rowGridRecordRow
        End Function
        
        Public Function FindByID_AP_payment(ByVal ID_AP_payment As Integer) As GridRecordRow
            Return CType(Me.Rows.Find(New Object() {ID_AP_payment}),GridRecordRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GridRecordDataTable = CType(MyBase.Clone,GridRecordDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GridRecordDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.column_Date = Me.Columns("Date")
            Me.columnRefrenceno = Me.Columns("Refrenceno")
            Me.columnRadif = Me.Columns("Radif")
            Me.columnRefrenceType = Me.Columns("RefrenceType")
            Me.columnPaiedBefore = Me.Columns("PaiedBefore")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnAmountPay = Me.Columns("AmountPay")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
            Me.columnDueDate = Me.Columns("DueDate")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnId_AP_bill_dtl_dtl = Me.Columns("Id_AP_bill_dtl_dtl")
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnID_AP_paymentEdit = Me.Columns("ID_AP_paymentEdit")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columnPaiedBefore2 = Me.Columns("PaiedBefore2")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
            Me.columnpassbefor = Me.Columns("passbefor")
            Me.columnvendorrefno = Me.Columns("vendorrefno")
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.column_Date = New DataColumn("Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnRefrenceno = New DataColumn("Refrenceno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrenceno)
            Me.columnRadif = New DataColumn("Radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRadif)
            Me.columnRefrenceType = New DataColumn("RefrenceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrenceType)
            Me.columnPaiedBefore = New DataColumn("PaiedBefore", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaiedBefore)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnAmountPay = New DataColumn("AmountPay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountPay)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnDueDate = New DataColumn("DueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDueDate)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnId_AP_bill_dtl_dtl = New DataColumn("Id_AP_bill_dtl_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl_dtl)
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnID_AP_paymentEdit = New DataColumn("ID_AP_paymentEdit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_paymentEdit)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnPaiedBefore2 = New DataColumn("PaiedBefore2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaiedBefore2)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columnpassbefor = New DataColumn("passbefor", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpassbefor)
            Me.columnvendorrefno = New DataColumn("vendorrefno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorrefno)
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.Constraints.Add(New UniqueConstraint("DsFrmAllApPayMentKey2", New DataColumn() {Me.columnID_AP_payment}, true))
            Me.columnID_AP_payment.AutoIncrement = true
            Me.columnID_AP_payment.AllowDBNull = false
            Me.columnID_AP_payment.Unique = true
            Me.columnAmountDue.DefaultValue = 0
            Me.columnAmountPay.DefaultValue = 0
            Me.columnpassbefor.DefaultValue = false
        End Sub
        
        Public Function NewGridRecordRow() As GridRecordRow
            Return CType(Me.NewRow,GridRecordRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GridRecordRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GridRecordRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GridRecordRowChangedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanged(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GridRecordRowChangingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanging(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GridRecordRowDeletedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleted(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GridRecordRowDeletingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleting(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRow
        Inherits DataRow
        
        Private tableGridRecord As GridRecordDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGridRecord = CType(Me.Table,GridRecordDataTable)
        End Sub
        
        Public Property ID_AP_payment As Integer
            Get
                Return CType(Me(Me.tableGridRecord.ID_AP_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGridRecord.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property _Date As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord._DateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord._DateColumn) = value
            End Set
        End Property
        
        Public Property Refrenceno As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RefrencenoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RefrencenoColumn) = value
            End Set
        End Property
        
        Public Property Radif As Short
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RadifColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RadifColumn) = value
            End Set
        End Property
        
        Public Property RefrenceType As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RefrenceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RefrenceTypeColumn) = value
            End Set
        End Property
        
        Public Property PaiedBefore As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.PaiedBeforeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.PaiedBeforeColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AmountDueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property AmountPay As Decimal
            Get
                If Me.IsAmountPayNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableGridRecord.AmountPayColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableGridRecord.AmountPayColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.CheckFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Property DueDate As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.DueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.DueDateColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RemarkColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn) = value
            End Set
        End Property
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_paymentEdit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.ID_AP_paymentEditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.ID_AP_paymentEditColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property PaiedBefore2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.PaiedBefore2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.PaiedBefore2Column) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Property passbefor As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.passbeforColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.passbeforColumn) = value
            End Set
        End Property
        
        Public Property vendorrefno As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.vendorrefnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.vendorrefnoColumn) = value
            End Set
        End Property
        
        Public Property IDService_out_purchases_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.IDService_out_purchases_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord._DateColumn)
        End Function
        
        Public Sub Set_DateNull()
            Me(Me.tableGridRecord._DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrencenoNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RefrencenoColumn)
        End Function
        
        Public Sub SetRefrencenoNull()
            Me(Me.tableGridRecord.RefrencenoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRadifNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RadifColumn)
        End Function
        
        Public Sub SetRadifNull()
            Me(Me.tableGridRecord.RadifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrenceTypeNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RefrenceTypeColumn)
        End Function
        
        Public Sub SetRefrenceTypeNull()
            Me(Me.tableGridRecord.RefrenceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaiedBeforeNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.PaiedBeforeColumn)
        End Function
        
        Public Sub SetPaiedBeforeNull()
            Me(Me.tableGridRecord.PaiedBeforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableGridRecord.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableGridRecord.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountPayNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AmountPayColumn)
        End Function
        
        Public Sub SetAmountPayNull()
            Me(Me.tableGridRecord.AmountPayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableGridRecord.CheckFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.DueDateColumn)
        End Function
        
        Public Sub SetDueDateNull()
            Me(Me.tableGridRecord.DueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGridRecord.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_AP_bill_dtl_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtl_dtlNull()
            Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_Inv_Receive_product_Ap_DtlNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn)
        End Function
        
        Public Sub SetID_Inv_Receive_product_Ap_DtlNull()
            Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentEditNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.ID_AP_paymentEditColumn)
        End Function
        
        Public Sub SetID_AP_paymentEditNull()
            Me(Me.tableGridRecord.ID_AP_paymentEditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableGridRecord.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaiedBefore2Null() As Boolean
            Return Me.IsNull(Me.tableGridRecord.PaiedBefore2Column)
        End Function
        
        Public Sub SetPaiedBefore2Null()
            Me(Me.tableGridRecord.PaiedBefore2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableGridRecord.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableGridRecord.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspassbeforNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.passbeforColumn)
        End Function
        
        Public Sub SetpassbeforNull()
            Me(Me.tableGridRecord.passbeforColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorrefnoNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.vendorrefnoColumn)
        End Function
        
        Public Sub SetvendorrefnoNull()
            Me(Me.tableGridRecord.vendorrefnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDService_out_purchases_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.IDService_out_purchases_dtlColumn)
        End Function
        
        Public Sub SetIDService_out_purchases_dtlNull()
            Me(Me.tableGridRecord.IDService_out_purchases_dtlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GridRecordRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GridRecordRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GridRecordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_vendor_credit As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndate_credit As DataColumn
        
        Private columnamount_credit As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnref_no As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnid_vendor_credit_head As DataColumn
        
        Private columnReminder As DataColumn
        
        Private columnpartialOrComplitepass As DataColumn
        
        Private columnselected As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_vendor_credit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property date_creditColumn As DataColumn
            Get
                Return Me.columndate_credit
            End Get
        End Property
        
        Friend ReadOnly Property amount_creditColumn As DataColumn
            Get
                Return Me.columnamount_credit
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property ref_noColumn As DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_credit_headColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit_head
            End Get
        End Property
        
        Friend ReadOnly Property ReminderColumn As DataColumn
            Get
                Return Me.columnReminder
            End Get
        End Property
        
        Friend ReadOnly Property partialOrComplitepassColumn As DataColumn
            Get
                Return Me.columnpartialOrComplitepass
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_vendor_creditRow
            Get
                Return CType(Me.Rows(index),GL_vendor_creditRow)
            End Get
        End Property
        
        Public Event GL_vendor_creditRowChanged As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowChanging As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowDeleted As GL_vendor_creditRowChangeEventHandler
        
        Public Event GL_vendor_creditRowDeleting As GL_vendor_creditRowChangeEventHandler
        
        Public Overloads Sub AddGL_vendor_creditRow(ByVal row As GL_vendor_creditRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_vendor_creditRow(ByVal cod_vendor As String, ByVal date_credit As String, ByVal amount_credit As Decimal, ByVal Remark As String, ByVal ref_no As String, ByVal due_date As String, ByVal id_vendor_credit_head As Integer, ByVal Reminder As Decimal, ByVal partialOrComplitepass As Boolean, ByVal selected As Boolean) As GL_vendor_creditRow
            Dim rowGL_vendor_creditRow As GL_vendor_creditRow = CType(Me.NewRow,GL_vendor_creditRow)
            rowGL_vendor_creditRow.ItemArray = New Object() {Nothing, cod_vendor, date_credit, amount_credit, Remark, ref_no, due_date, id_vendor_credit_head, Reminder, partialOrComplitepass, selected}
            Me.Rows.Add(rowGL_vendor_creditRow)
            Return rowGL_vendor_creditRow
        End Function
        
        Public Function FindByid_vendor_credit(ByVal id_vendor_credit As Integer) As GL_vendor_creditRow
            Return CType(Me.Rows.Find(New Object() {id_vendor_credit}),GL_vendor_creditRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_vendor_creditDataTable = CType(MyBase.Clone,GL_vendor_creditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_vendor_creditDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndate_credit = Me.Columns("date_credit")
            Me.columnamount_credit = Me.Columns("amount_credit")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnref_no = Me.Columns("ref_no")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnid_vendor_credit_head = Me.Columns("id_vendor_credit_head")
            Me.columnReminder = Me.Columns("Reminder")
            Me.columnpartialOrComplitepass = Me.Columns("partialOrComplitepass")
            Me.columnselected = Me.Columns("selected")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndate_credit = New DataColumn("date_credit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_credit)
            Me.columnamount_credit = New DataColumn("amount_credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_credit)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnref_no = New DataColumn("ref_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnref_no)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnid_vendor_credit_head = New DataColumn("id_vendor_credit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit_head)
            Me.columnReminder = New DataColumn("Reminder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReminder)
            Me.columnpartialOrComplitepass = New DataColumn("partialOrComplitepass", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartialOrComplitepass)
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_vendor_credit}, true))
            Me.columnid_vendor_credit.AutoIncrement = true
            Me.columnid_vendor_credit.AllowDBNull = false
            Me.columnid_vendor_credit.ReadOnly = true
            Me.columnid_vendor_credit.Unique = true
            Me.columncod_vendor.AllowDBNull = false
            Me.columnamount_credit.AllowDBNull = false
        End Sub
        
        Public Function NewGL_vendor_creditRow() As GL_vendor_creditRow
            Return CType(Me.NewRow,GL_vendor_creditRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_vendor_creditRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_vendor_creditRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_vendor_creditRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowChanged(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_vendor_creditRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowChanging(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_vendor_creditRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowDeleted(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_vendor_creditRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_vendor_creditRowDeleting(Me, New GL_vendor_creditRowChangeEvent(CType(e.Row,GL_vendor_creditRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_vendor_creditRow(ByVal row As GL_vendor_creditRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditRow
        Inherits DataRow
        
        Private tableGL_vendor_credit As GL_vendor_creditDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_vendor_credit = CType(Me.Table,GL_vendor_creditDataTable)
        End Sub
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tableGL_vendor_credit.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableGL_vendor_credit.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property date_credit As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.date_creditColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.date_creditColumn) = value
            End Set
        End Property
        
        Public Property amount_credit As Decimal
            Get
                Return CType(Me(Me.tableGL_vendor_credit.amount_creditColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_vendor_credit.amount_creditColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.RemarkColumn) = value
            End Set
        End Property
        
        Public Property ref_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.ref_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.ref_noColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.due_dateColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn) = value
            End Set
        End Property
        
        Public Property Reminder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.ReminderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.ReminderColumn) = value
            End Set
        End Property
        
        Public Property partialOrComplitepass As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_vendor_credit.partialOrComplitepassColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_vendor_credit.partialOrComplitepassColumn) = value
            End Set
        End Property
        
        Public Property selected As Boolean
            Get
                If Me.IsselectedNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableGL_vendor_credit.selectedColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableGL_vendor_credit.selectedColumn) = value
            End Set
        End Property
        
        Public Function Isdate_creditNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.date_creditColumn)
        End Function
        
        Public Sub Setdate_creditNull()
            Me(Me.tableGL_vendor_credit.date_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGL_vendor_credit.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.ref_noColumn)
        End Function
        
        Public Sub Setref_noNull()
            Me(Me.tableGL_vendor_credit.ref_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableGL_vendor_credit.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_credit_headNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.id_vendor_credit_headColumn)
        End Function
        
        Public Sub Setid_vendor_credit_headNull()
            Me(Me.tableGL_vendor_credit.id_vendor_credit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReminderNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.ReminderColumn)
        End Function
        
        Public Sub SetReminderNull()
            Me(Me.tableGL_vendor_credit.ReminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartialOrComplitepassNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.partialOrComplitepassColumn)
        End Function
        
        Public Sub SetpartialOrComplitepassNull()
            Me(Me.tableGL_vendor_credit.partialOrComplitepassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableGL_vendor_credit.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableGL_vendor_credit.selectedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_vendor_creditRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_vendor_creditRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_vendor_creditRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_vendor_creditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class credit_debitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_vendor_credit As DataColumn
        
        Private columnAmountPay As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("credit_debit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property AmountPayColumn As DataColumn
            Get
                Return Me.columnAmountPay
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As credit_debitRow
            Get
                Return CType(Me.Rows(index),credit_debitRow)
            End Get
        End Property
        
        Public Event credit_debitRowChanged As credit_debitRowChangeEventHandler
        
        Public Event credit_debitRowChanging As credit_debitRowChangeEventHandler
        
        Public Event credit_debitRowDeleted As credit_debitRowChangeEventHandler
        
        Public Event credit_debitRowDeleting As credit_debitRowChangeEventHandler
        
        Public Overloads Sub Addcredit_debitRow(ByVal row As credit_debitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcredit_debitRow(ByVal AmountPay As Decimal, ByVal ID_AP_payment As Integer, ByVal cod_vendor As String) As credit_debitRow
            Dim rowcredit_debitRow As credit_debitRow = CType(Me.NewRow,credit_debitRow)
            rowcredit_debitRow.ItemArray = New Object() {Nothing, AmountPay, ID_AP_payment, cod_vendor}
            Me.Rows.Add(rowcredit_debitRow)
            Return rowcredit_debitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As credit_debitDataTable = CType(MyBase.Clone,credit_debitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New credit_debitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columnAmountPay = Me.Columns("AmountPay")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columncod_vendor = Me.Columns("cod_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnAmountPay = New DataColumn("AmountPay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountPay)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnid_vendor_credit.AutoIncrement = true
            Me.columnid_vendor_credit.AllowDBNull = false
            Me.columnid_vendor_credit.ReadOnly = true
            Me.columnAmountPay.AllowDBNull = false
        End Sub
        
        Public Function Newcredit_debitRow() As credit_debitRow
            Return CType(Me.NewRow,credit_debitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New credit_debitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(credit_debitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.credit_debitRowChangedEvent) Is Nothing) Then
                RaiseEvent credit_debitRowChanged(Me, New credit_debitRowChangeEvent(CType(e.Row,credit_debitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.credit_debitRowChangingEvent) Is Nothing) Then
                RaiseEvent credit_debitRowChanging(Me, New credit_debitRowChangeEvent(CType(e.Row,credit_debitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.credit_debitRowDeletedEvent) Is Nothing) Then
                RaiseEvent credit_debitRowDeleted(Me, New credit_debitRowChangeEvent(CType(e.Row,credit_debitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.credit_debitRowDeletingEvent) Is Nothing) Then
                RaiseEvent credit_debitRowDeleting(Me, New credit_debitRowChangeEvent(CType(e.Row,credit_debitRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecredit_debitRow(ByVal row As credit_debitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class credit_debitRow
        Inherits DataRow
        
        Private tablecredit_debit As credit_debitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecredit_debit = CType(Me.Table,credit_debitDataTable)
        End Sub
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tablecredit_debit.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tablecredit_debit.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property AmountPay As Decimal
            Get
                Return CType(Me(Me.tablecredit_debit.AmountPayColumn),Decimal)
            End Get
            Set
                Me(Me.tablecredit_debit.AmountPayColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecredit_debit.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecredit_debit.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tablecredit_debit.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecredit_debit.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tablecredit_debit.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tablecredit_debit.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tablecredit_debit.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tablecredit_debit.cod_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class credit_debitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As credit_debitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As credit_debitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As credit_debitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnselected As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnclass_vendor As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property selectedColumn As DataColumn
            Get
                Return Me.columnselected
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_vendorRow
            Get
                Return CType(Me.Rows(index),inv_vendorRow)
            End Get
        End Property
        
        Public Event inv_vendorRowChanged As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowChanging As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleted As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleting As inv_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_vendorRow(ByVal selected As Boolean, ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal class_vendor As String, ByVal desc_class As String) As inv_vendorRow
            Dim rowinv_vendorRow As inv_vendorRow = CType(Me.NewRow,inv_vendorRow)
            rowinv_vendorRow.ItemArray = New Object() {selected, cod_vendor, desc_vendor, class_vendor, desc_class}
            Me.Rows.Add(rowinv_vendorRow)
            Return rowinv_vendorRow
        End Function
        
        Public Function FindBycod_vendor(ByVal cod_vendor As String) As inv_vendorRow
            Return CType(Me.Rows.Find(New Object() {cod_vendor}),inv_vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_vendorDataTable = CType(MyBase.Clone,inv_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnselected = Me.Columns("selected")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnclass_vendor = Me.Columns("class_vendor")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columnselected = New DataColumn("selected", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselected)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vendor}, true))
            Me.columncod_vendor.AllowDBNull = false
            Me.columncod_vendor.Unique = true
        End Sub
        
        Public Function Newinv_vendorRow() As inv_vendorRow
            Return CType(Me.NewRow,inv_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanged(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanging(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleted(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleting(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRow
        Inherits DataRow
        
        Private tableinv_vendor As inv_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_vendor = CType(Me.Table,inv_vendorDataTable)
        End Sub
        
        Public Property selected As Boolean
            Get
                If Me.IsselectedNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableinv_vendor.selectedColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableinv_vendor.selectedColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property class_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.class_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.class_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.desc_classColumn) = value
            End Set
        End Property
        
        Public Function IsselectedNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.selectedColumn)
        End Function
        
        Public Sub SetselectedNull()
            Me(Me.tableinv_vendor.selectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableinv_vendor.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isclass_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.class_vendorColumn)
        End Function
        
        Public Sub Setclass_vendorNull()
            Me(Me.tableinv_vendor.class_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableinv_vendor.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("clas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As clasRow
            Get
                Return CType(Me.Rows(index),clasRow)
            End Get
        End Property
        
        Public Event clasRowChanged As clasRowChangeEventHandler
        
        Public Event clasRowChanging As clasRowChangeEventHandler
        
        Public Event clasRowDeleted As clasRowChangeEventHandler
        
        Public Event clasRowDeleting As clasRowChangeEventHandler
        
        Public Overloads Sub AddclasRow(ByVal row As clasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddclasRow(ByVal cod As String, ByVal description As String, ByVal flag As Boolean) As clasRow
            Dim rowclasRow As clasRow = CType(Me.NewRow,clasRow)
            rowclasRow.ItemArray = New Object() {cod, description, flag}
            Me.Rows.Add(rowclasRow)
            Return rowclasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As clasDataTable = CType(MyBase.Clone,clasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New clasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod.AllowDBNull = false
        End Sub
        
        Public Function NewclasRow() As clasRow
            Return CType(Me.NewRow,clasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New clasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(clasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clasRowChangedEvent) Is Nothing) Then
                RaiseEvent clasRowChanged(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clasRowChangingEvent) Is Nothing) Then
                RaiseEvent clasRowChanging(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clasRowDeletedEvent) Is Nothing) Then
                RaiseEvent clasRowDeleted(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clasRowDeletingEvent) Is Nothing) Then
                RaiseEvent clasRowDeleting(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveclasRow(ByVal row As clasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRow
        Inherits DataRow
        
        Private tableclas As clasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableclas = CType(Me.Table,clasDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableclas.codColumn),String)
            End Get
            Set
                Me(Me.tableclas.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableclas.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.descriptionColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclas.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.flagColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableclas.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableclas.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableclas.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableclas.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As clasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As clasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As clasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchases1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnDue_Date As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnvendorrefno As DataColumn
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("service_out_purchases1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property vendorrefnoColumn As DataColumn
            Get
                Return Me.columnvendorrefno
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_out_purchases1Row
            Get
                Return CType(Me.Rows(index),service_out_purchases1Row)
            End Get
        End Property
        
        Public Event service_out_purchases1RowChanged As service_out_purchases1RowChangeEventHandler
        
        Public Event service_out_purchases1RowChanging As service_out_purchases1RowChangeEventHandler
        
        Public Event service_out_purchases1RowDeleted As service_out_purchases1RowChangeEventHandler
        
        Public Event service_out_purchases1RowDeleting As service_out_purchases1RowChangeEventHandler
        
        Public Overloads Sub Addservice_out_purchases1Row(ByVal row As service_out_purchases1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_out_purchases1Row(ByVal radif As Short, ByVal amount As Decimal, ByVal Due_Date As String, ByVal id_service_center As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Double, ByVal sumpayment As Decimal, ByVal vendorrefno As String, ByVal IDService_out_purchases_dtl As Decimal) As service_out_purchases1Row
            Dim rowservice_out_purchases1Row As service_out_purchases1Row = CType(Me.NewRow,service_out_purchases1Row)
            rowservice_out_purchases1Row.ItemArray = New Object() {radif, amount, Due_Date, id_service_center, DateTransaction, sumoriginalamount, sumpayment, vendorrefno, IDService_out_purchases_dtl}
            Me.Rows.Add(rowservice_out_purchases1Row)
            Return rowservice_out_purchases1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_out_purchases1DataTable = CType(MyBase.Clone,service_out_purchases1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_out_purchases1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnamount = Me.Columns("amount")
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnvendorrefno = Me.Columns("vendorrefno")
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnvendorrefno = New DataColumn("vendorrefno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorrefno)
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.columnradif.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnDue_Date.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
            Me.columnIDService_out_purchases_dtl.AllowDBNull = false
        End Sub
        
        Public Function Newservice_out_purchases1Row() As service_out_purchases1Row
            Return CType(Me.NewRow,service_out_purchases1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_out_purchases1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_out_purchases1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_out_purchases1RowChangedEvent) Is Nothing) Then
                RaiseEvent service_out_purchases1RowChanged(Me, New service_out_purchases1RowChangeEvent(CType(e.Row,service_out_purchases1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_out_purchases1RowChangingEvent) Is Nothing) Then
                RaiseEvent service_out_purchases1RowChanging(Me, New service_out_purchases1RowChangeEvent(CType(e.Row,service_out_purchases1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_out_purchases1RowDeletedEvent) Is Nothing) Then
                RaiseEvent service_out_purchases1RowDeleted(Me, New service_out_purchases1RowChangeEvent(CType(e.Row,service_out_purchases1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_out_purchases1RowDeletingEvent) Is Nothing) Then
                RaiseEvent service_out_purchases1RowDeleting(Me, New service_out_purchases1RowChangeEvent(CType(e.Row,service_out_purchases1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_out_purchases1Row(ByVal row As service_out_purchases1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchases1Row
        Inherits DataRow
        
        Private tableservice_out_purchases1 As service_out_purchases1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_out_purchases1 = CType(Me.Table,service_out_purchases1DataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_out_purchases1.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.radifColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases1.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.amountColumn) = value
            End Set
        End Property
        
        Public Property Due_Date As String
            Get
                Return CType(Me(Me.tableservice_out_purchases1.Due_DateColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_out_purchases1.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases1.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases1.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases1.sumoriginalamountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases1.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases1.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property vendorrefno As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases1.vendorrefnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases1.vendorrefnoColumn) = value
            End Set
        End Property
        
        Public Property IDService_out_purchases_dtl As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases1.IDService_out_purchases_dtlColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases1.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases1.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableservice_out_purchases1.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumoriginalamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases1.sumoriginalamountColumn)
        End Function
        
        Public Sub SetsumoriginalamountNull()
            Me(Me.tableservice_out_purchases1.sumoriginalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvendorrefnoNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases1.vendorrefnoColumn)
        End Function
        
        Public Sub SetvendorrefnoNull()
            Me(Me.tableservice_out_purchases1.vendorrefnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchases1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_out_purchases1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_out_purchases1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_out_purchases1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
