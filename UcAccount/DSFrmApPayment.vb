'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmApPayment
    Inherits DataSet
    
    Private tableGridRecord As GridRecordDataTable
    
    Private tableGL_AP_payment As GL_AP_paymentDataTable
    
    Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
    
    Private tableservice_out_purchases As service_out_purchasesDataTable
    
    Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
    
    Private tableGlDate As GlDateDataTable
    
    Private tableView_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GridRecord")) Is Nothing) Then
                Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
            End If
            If (Not (ds.Tables("GL_AP_payment")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_paymentDataTable(ds.Tables("GL_AP_payment")))
            End If
            If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
            End If
            If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
                Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
            End If
            If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
                Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
            End If
            If (Not (ds.Tables("GlDate")) Is Nothing) Then
                Me.Tables.Add(New GlDateDataTable(ds.Tables("GlDate")))
            End If
            If (Not (ds.Tables("View_GL_vendor_creditReminder")) Is Nothing) Then
                Me.Tables.Add(New View_GL_vendor_creditReminderDataTable(ds.Tables("View_GL_vendor_creditReminder")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GridRecord As GridRecordDataTable
        Get
            Return Me.tableGridRecord
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_payment As GL_AP_paymentDataTable
        Get
            Return Me.tableGL_AP_payment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        Get
            Return Me.tableGL_AP_bill_Dtl_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_out_purchases As service_out_purchasesDataTable
        Get
            Return Me.tableservice_out_purchases
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        Get
            Return Me.tableInv_Receive_product_Ap_Dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GlDate As GlDateDataTable
        Get
            Return Me.tableGlDate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
        Get
            Return Me.tableView_GL_vendor_creditReminder
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmApPayment = CType(MyBase.Clone,DSFrmApPayment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GridRecord")) Is Nothing) Then
            Me.Tables.Add(New GridRecordDataTable(ds.Tables("GridRecord")))
        End If
        If (Not (ds.Tables("GL_AP_payment")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_paymentDataTable(ds.Tables("GL_AP_payment")))
        End If
        If (Not (ds.Tables("GL_AP_bill_Dtl_Dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_AP_bill_Dtl_DtlDataTable(ds.Tables("GL_AP_bill_Dtl_Dtl")))
        End If
        If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
            Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
        End If
        If (Not (ds.Tables("Inv_Receive_product_Ap_Dtl")) Is Nothing) Then
            Me.Tables.Add(New Inv_Receive_product_Ap_DtlDataTable(ds.Tables("Inv_Receive_product_Ap_Dtl")))
        End If
        If (Not (ds.Tables("GlDate")) Is Nothing) Then
            Me.Tables.Add(New GlDateDataTable(ds.Tables("GlDate")))
        End If
        If (Not (ds.Tables("View_GL_vendor_creditReminder")) Is Nothing) Then
            Me.Tables.Add(New View_GL_vendor_creditReminderDataTable(ds.Tables("View_GL_vendor_creditReminder")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGridRecord = CType(Me.Tables("GridRecord"),GridRecordDataTable)
        If (Not (Me.tableGridRecord) Is Nothing) Then
            Me.tableGridRecord.InitVars
        End If
        Me.tableGL_AP_payment = CType(Me.Tables("GL_AP_payment"),GL_AP_paymentDataTable)
        If (Not (Me.tableGL_AP_payment) Is Nothing) Then
            Me.tableGL_AP_payment.InitVars
        End If
        Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Tables("GL_AP_bill_Dtl_Dtl"),GL_AP_bill_Dtl_DtlDataTable)
        If (Not (Me.tableGL_AP_bill_Dtl_Dtl) Is Nothing) Then
            Me.tableGL_AP_bill_Dtl_Dtl.InitVars
        End If
        Me.tableservice_out_purchases = CType(Me.Tables("service_out_purchases"),service_out_purchasesDataTable)
        If (Not (Me.tableservice_out_purchases) Is Nothing) Then
            Me.tableservice_out_purchases.InitVars
        End If
        Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Tables("Inv_Receive_product_Ap_Dtl"),Inv_Receive_product_Ap_DtlDataTable)
        If (Not (Me.tableInv_Receive_product_Ap_Dtl) Is Nothing) Then
            Me.tableInv_Receive_product_Ap_Dtl.InitVars
        End If
        Me.tableGlDate = CType(Me.Tables("GlDate"),GlDateDataTable)
        If (Not (Me.tableGlDate) Is Nothing) Then
            Me.tableGlDate.InitVars
        End If
        Me.tableView_GL_vendor_creditReminder = CType(Me.Tables("View_GL_vendor_creditReminder"),View_GL_vendor_creditReminderDataTable)
        If (Not (Me.tableView_GL_vendor_creditReminder) Is Nothing) Then
            Me.tableView_GL_vendor_creditReminder.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmApPayment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmApPayment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGridRecord = New GridRecordDataTable
        Me.Tables.Add(Me.tableGridRecord)
        Me.tableGL_AP_payment = New GL_AP_paymentDataTable
        Me.Tables.Add(Me.tableGL_AP_payment)
        Me.tableGL_AP_bill_Dtl_Dtl = New GL_AP_bill_Dtl_DtlDataTable
        Me.Tables.Add(Me.tableGL_AP_bill_Dtl_Dtl)
        Me.tableservice_out_purchases = New service_out_purchasesDataTable
        Me.Tables.Add(Me.tableservice_out_purchases)
        Me.tableInv_Receive_product_Ap_Dtl = New Inv_Receive_product_Ap_DtlDataTable
        Me.Tables.Add(Me.tableInv_Receive_product_Ap_Dtl)
        Me.tableGlDate = New GlDateDataTable
        Me.Tables.Add(Me.tableGlDate)
        Me.tableView_GL_vendor_creditReminder = New View_GL_vendor_creditReminderDataTable
        Me.Tables.Add(Me.tableView_GL_vendor_creditReminder)
    End Sub
    
    Private Function ShouldSerializeGridRecord() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_AP_payment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_AP_bill_Dtl_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_out_purchases() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_Receive_product_Ap_Dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGlDate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_GL_vendor_creditReminder() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GridRecordRowChangeEventHandler(ByVal sender As Object, ByVal e As GridRecordRowChangeEvent)
    
    Public Delegate Sub GL_AP_paymentRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_paymentRowChangeEvent)
    
    Public Delegate Sub GL_AP_bill_Dtl_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_AP_bill_Dtl_DtlRowChangeEvent)
    
    Public Delegate Sub service_out_purchasesRowChangeEventHandler(ByVal sender As Object, ByVal e As service_out_purchasesRowChangeEvent)
    
    Public Delegate Sub Inv_Receive_product_Ap_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_Receive_product_Ap_DtlRowChangeEvent)
    
    Public Delegate Sub GlDateRowChangeEventHandler(ByVal sender As Object, ByVal e As GlDateRowChangeEvent)
    
    Public Delegate Sub View_GL_vendor_creditReminderRowChangeEventHandler(ByVal sender As Object, ByVal e As View_GL_vendor_creditReminderRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_AP_payment As DataColumn
        
        Private column_Date As DataColumn
        
        Private columnRefrenceno As DataColumn
        
        Private columnRadif As DataColumn
        
        Private columnRefrenceType As DataColumn
        
        Private columnPaiedBefore As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnAmountDue As DataColumn
        
        Private columnAmountPay As DataColumn
        
        Private columnCheckFlag As DataColumn
        
        Private columnDueDate As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnId_AP_bill_dtl_dtl As DataColumn
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnID_AP_paymentEdit As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Private columnPaiedBefore2 As DataColumn
        
        Friend Sub New()
            MyBase.New("GridRecord")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property RefrencenoColumn As DataColumn
            Get
                Return Me.columnRefrenceno
            End Get
        End Property
        
        Friend ReadOnly Property RadifColumn As DataColumn
            Get
                Return Me.columnRadif
            End Get
        End Property
        
        Friend ReadOnly Property RefrenceTypeColumn As DataColumn
            Get
                Return Me.columnRefrenceType
            End Get
        End Property
        
        Friend ReadOnly Property PaiedBeforeColumn As DataColumn
            Get
                Return Me.columnPaiedBefore
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property AmountDueColumn As DataColumn
            Get
                Return Me.columnAmountDue
            End Get
        End Property
        
        Friend ReadOnly Property AmountPayColumn As DataColumn
            Get
                Return Me.columnAmountPay
            End Get
        End Property
        
        Friend ReadOnly Property CheckFlagColumn As DataColumn
            Get
                Return Me.columnCheckFlag
            End Get
        End Property
        
        Friend ReadOnly Property DueDateColumn As DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtl_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl_dtl
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentEditColumn As DataColumn
            Get
                Return Me.columnID_AP_paymentEdit
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Friend ReadOnly Property PaiedBefore2Column As DataColumn
            Get
                Return Me.columnPaiedBefore2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GridRecordRow
            Get
                Return CType(Me.Rows(index),GridRecordRow)
            End Get
        End Property
        
        Public Event GridRecordRowChanged As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowChanging As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleted As GridRecordRowChangeEventHandler
        
        Public Event GridRecordRowDeleting As GridRecordRowChangeEventHandler
        
        Public Overloads Sub AddGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGridRecordRow( _
                    ByVal _Date As String,  _
                    ByVal Refrenceno As String,  _
                    ByVal Radif As Short,  _
                    ByVal RefrenceType As String,  _
                    ByVal PaiedBefore As Decimal,  _
                    ByVal OriginalAmount As Decimal,  _
                    ByVal AmountDue As Decimal,  _
                    ByVal AmountPay As Decimal,  _
                    ByVal CheckFlag As Boolean,  _
                    ByVal DueDate As String,  _
                    ByVal Remark As String,  _
                    ByVal Id_AP_bill_dtl_dtl As Integer,  _
                    ByVal ID_Inv_Receive_product_Ap_Dtl As Integer,  _
                    ByVal ID_AP_paymentEdit As Integer,  _
                    ByVal id_vendor_credit As Integer,  _
                    ByVal PaiedBefore2 As Decimal) As GridRecordRow
            Dim rowGridRecordRow As GridRecordRow = CType(Me.NewRow,GridRecordRow)
            rowGridRecordRow.ItemArray = New Object() {Nothing, _Date, Refrenceno, Radif, RefrenceType, PaiedBefore, OriginalAmount, AmountDue, AmountPay, CheckFlag, DueDate, Remark, Id_AP_bill_dtl_dtl, ID_Inv_Receive_product_Ap_Dtl, ID_AP_paymentEdit, id_vendor_credit, PaiedBefore2}
            Me.Rows.Add(rowGridRecordRow)
            Return rowGridRecordRow
        End Function
        
        Public Function FindByID_AP_payment(ByVal ID_AP_payment As Integer) As GridRecordRow
            Return CType(Me.Rows.Find(New Object() {ID_AP_payment}),GridRecordRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GridRecordDataTable = CType(MyBase.Clone,GridRecordDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GridRecordDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.column_Date = Me.Columns("Date")
            Me.columnRefrenceno = Me.Columns("Refrenceno")
            Me.columnRadif = Me.Columns("Radif")
            Me.columnRefrenceType = Me.Columns("RefrenceType")
            Me.columnPaiedBefore = Me.Columns("PaiedBefore")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnAmountDue = Me.Columns("AmountDue")
            Me.columnAmountPay = Me.Columns("AmountPay")
            Me.columnCheckFlag = Me.Columns("CheckFlag")
            Me.columnDueDate = Me.Columns("DueDate")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnId_AP_bill_dtl_dtl = Me.Columns("Id_AP_bill_dtl_dtl")
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnID_AP_paymentEdit = Me.Columns("ID_AP_paymentEdit")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
            Me.columnPaiedBefore2 = Me.Columns("PaiedBefore2")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.column_Date = New DataColumn("Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnRefrenceno = New DataColumn("Refrenceno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrenceno)
            Me.columnRadif = New DataColumn("Radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRadif)
            Me.columnRefrenceType = New DataColumn("RefrenceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrenceType)
            Me.columnPaiedBefore = New DataColumn("PaiedBefore", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaiedBefore)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnAmountDue = New DataColumn("AmountDue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountDue)
            Me.columnAmountPay = New DataColumn("AmountPay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountPay)
            Me.columnCheckFlag = New DataColumn("CheckFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckFlag)
            Me.columnDueDate = New DataColumn("DueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDueDate)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnId_AP_bill_dtl_dtl = New DataColumn("Id_AP_bill_dtl_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl_dtl)
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnID_AP_paymentEdit = New DataColumn("ID_AP_paymentEdit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_paymentEdit)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnPaiedBefore2 = New DataColumn("PaiedBefore2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaiedBefore2)
            Me.Constraints.Add(New UniqueConstraint("DSFrmApPaymentKey1", New DataColumn() {Me.columnID_AP_payment}, true))
            Me.columnID_AP_payment.AutoIncrement = true
            Me.columnID_AP_payment.AllowDBNull = false
            Me.columnID_AP_payment.Unique = true
            Me.columnAmountPay.DefaultValue = 0
        End Sub
        
        Public Function NewGridRecordRow() As GridRecordRow
            Return CType(Me.NewRow,GridRecordRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GridRecordRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GridRecordRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GridRecordRowChangedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanged(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GridRecordRowChangingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowChanging(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GridRecordRowDeletedEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleted(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GridRecordRowDeletingEvent) Is Nothing) Then
                RaiseEvent GridRecordRowDeleting(Me, New GridRecordRowChangeEvent(CType(e.Row,GridRecordRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGridRecordRow(ByVal row As GridRecordRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRow
        Inherits DataRow
        
        Private tableGridRecord As GridRecordDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGridRecord = CType(Me.Table,GridRecordDataTable)
        End Sub
        
        Public Property ID_AP_payment As Integer
            Get
                Return CType(Me(Me.tableGridRecord.ID_AP_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGridRecord.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property _Date As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord._DateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord._DateColumn) = value
            End Set
        End Property
        
        Public Property Refrenceno As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RefrencenoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RefrencenoColumn) = value
            End Set
        End Property
        
        Public Property Radif As Short
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RadifColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RadifColumn) = value
            End Set
        End Property
        
        Public Property RefrenceType As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RefrenceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RefrenceTypeColumn) = value
            End Set
        End Property
        
        Public Property PaiedBefore As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.PaiedBeforeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.PaiedBeforeColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.OriginalAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property AmountDue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AmountDueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AmountDueColumn) = value
            End Set
        End Property
        
        Public Property AmountPay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.AmountPayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.AmountPayColumn) = value
            End Set
        End Property
        
        Public Property CheckFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.CheckFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.CheckFlagColumn) = value
            End Set
        End Property
        
        Public Property DueDate As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.DueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.DueDateColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.RemarkColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn) = value
            End Set
        End Property
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_paymentEdit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.ID_AP_paymentEditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.ID_AP_paymentEditColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Property PaiedBefore2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGridRecord.PaiedBefore2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGridRecord.PaiedBefore2Column) = value
            End Set
        End Property
        
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord._DateColumn)
        End Function
        
        Public Sub Set_DateNull()
            Me(Me.tableGridRecord._DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrencenoNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RefrencenoColumn)
        End Function
        
        Public Sub SetRefrencenoNull()
            Me(Me.tableGridRecord.RefrencenoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRadifNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RadifColumn)
        End Function
        
        Public Sub SetRadifNull()
            Me(Me.tableGridRecord.RadifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrenceTypeNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RefrenceTypeColumn)
        End Function
        
        Public Sub SetRefrenceTypeNull()
            Me(Me.tableGridRecord.RefrenceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaiedBeforeNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.PaiedBeforeColumn)
        End Function
        
        Public Sub SetPaiedBeforeNull()
            Me(Me.tableGridRecord.PaiedBeforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableGridRecord.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountDueNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AmountDueColumn)
        End Function
        
        Public Sub SetAmountDueNull()
            Me(Me.tableGridRecord.AmountDueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountPayNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.AmountPayColumn)
        End Function
        
        Public Sub SetAmountPayNull()
            Me(Me.tableGridRecord.AmountPayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckFlagNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.CheckFlagColumn)
        End Function
        
        Public Sub SetCheckFlagNull()
            Me(Me.tableGridRecord.CheckFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.DueDateColumn)
        End Function
        
        Public Sub SetDueDateNull()
            Me(Me.tableGridRecord.DueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGridRecord.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_AP_bill_dtl_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtl_dtlNull()
            Me(Me.tableGridRecord.Id_AP_bill_dtl_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_Inv_Receive_product_Ap_DtlNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn)
        End Function
        
        Public Sub SetID_Inv_Receive_product_Ap_DtlNull()
            Me(Me.tableGridRecord.ID_Inv_Receive_product_Ap_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentEditNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.ID_AP_paymentEditColumn)
        End Function
        
        Public Sub SetID_AP_paymentEditNull()
            Me(Me.tableGridRecord.ID_AP_paymentEditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableGridRecord.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableGridRecord.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaiedBefore2Null() As Boolean
            Return Me.IsNull(Me.tableGridRecord.PaiedBefore2Column)
        End Function
        
        Public Sub SetPaiedBefore2Null()
            Me(Me.tableGridRecord.PaiedBefore2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GridRecordRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GridRecordRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GridRecordRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GridRecordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_AP_payment As DataColumn
        
        Private columnId_AP_bill_dtl_dtl As DataColumn
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnamount_pay As DataColumn
        
        Private columnremark As DataColumn
        
        Private columndate_prepare As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnradif1 As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_payment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtl_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl_dtl
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property amount_payColumn As DataColumn
            Get
                Return Me.columnamount_pay
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property date_prepareColumn As DataColumn
            Get
                Return Me.columndate_prepare
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property radif1Column As DataColumn
            Get
                Return Me.columnradif1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_paymentRow
            Get
                Return CType(Me.Rows(index),GL_AP_paymentRow)
            End Get
        End Property
        
        Public Event GL_AP_paymentRowChanged As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowChanging As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowDeleted As GL_AP_paymentRowChangeEventHandler
        
        Public Event GL_AP_paymentRowDeleting As GL_AP_paymentRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_paymentRow(ByVal row As GL_AP_paymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_paymentRow(ByVal Id_AP_bill_dtl_dtl As Integer, ByVal ID_Inv_Receive_product_Ap_Dtl As Integer, ByVal id_service_center As String, ByVal radif As Short, ByVal amount_pay As Decimal, ByVal remark As String, ByVal date_prepare As String, ByVal id_check As Integer, ByVal radif1 As Short) As GL_AP_paymentRow
            Dim rowGL_AP_paymentRow As GL_AP_paymentRow = CType(Me.NewRow,GL_AP_paymentRow)
            rowGL_AP_paymentRow.ItemArray = New Object() {Nothing, Id_AP_bill_dtl_dtl, ID_Inv_Receive_product_Ap_Dtl, id_service_center, radif, amount_pay, remark, date_prepare, id_check, radif1}
            Me.Rows.Add(rowGL_AP_paymentRow)
            Return rowGL_AP_paymentRow
        End Function
        
        Public Function FindByID_AP_payment(ByVal ID_AP_payment As Integer) As GL_AP_paymentRow
            Return CType(Me.Rows.Find(New Object() {ID_AP_payment}),GL_AP_paymentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_paymentDataTable = CType(MyBase.Clone,GL_AP_paymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_paymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnId_AP_bill_dtl_dtl = Me.Columns("Id_AP_bill_dtl_dtl")
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columnamount_pay = Me.Columns("amount_pay")
            Me.columnremark = Me.Columns("remark")
            Me.columndate_prepare = Me.Columns("date_prepare")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnradif1 = Me.Columns("radif1")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnId_AP_bill_dtl_dtl = New DataColumn("Id_AP_bill_dtl_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl_dtl)
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnamount_pay = New DataColumn("amount_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_pay)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columndate_prepare = New DataColumn("date_prepare", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_prepare)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnradif1 = New DataColumn("radif1", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif1)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_AP_payment}, true))
            Me.columnID_AP_payment.AutoIncrement = true
            Me.columnID_AP_payment.AllowDBNull = false
            Me.columnID_AP_payment.ReadOnly = true
            Me.columnID_AP_payment.Unique = true
            Me.columnamount_pay.AllowDBNull = false
            Me.columndate_prepare.AllowDBNull = false
        End Sub
        
        Public Function NewGL_AP_paymentRow() As GL_AP_paymentRow
            Return CType(Me.NewRow,GL_AP_paymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_paymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_paymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_paymentRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowChanged(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_paymentRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowChanging(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_paymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowDeleted(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_paymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_paymentRowDeleting(Me, New GL_AP_paymentRowChangeEvent(CType(e.Row,GL_AP_paymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_paymentRow(ByVal row As GL_AP_paymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentRow
        Inherits DataRow
        
        Private tableGL_AP_payment As GL_AP_paymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_payment = CType(Me.Table,GL_AP_paymentDataTable)
        End Sub
        
        Public Property ID_AP_payment As Integer
            Get
                Return CType(Me(Me.tableGL_AP_payment.ID_AP_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_AP_payment.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.Id_AP_bill_dtl_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.Id_AP_bill_dtl_dtlColumn) = value
            End Set
        End Property
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.radifColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.radifColumn) = value
            End Set
        End Property
        
        Public Property amount_pay As Decimal
            Get
                Return CType(Me(Me.tableGL_AP_payment.amount_payColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_AP_payment.amount_payColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.remarkColumn) = value
            End Set
        End Property
        
        Public Property date_prepare As String
            Get
                Return CType(Me(Me.tableGL_AP_payment.date_prepareColumn),String)
            End Get
            Set
                Me(Me.tableGL_AP_payment.date_prepareColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.id_checkColumn) = value
            End Set
        End Property
        
        Public Property radif1 As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_payment.radif1Column),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_payment.radif1Column) = value
            End Set
        End Property
        
        Public Function IsId_AP_bill_dtl_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.Id_AP_bill_dtl_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtl_dtlNull()
            Me(Me.tableGL_AP_payment.Id_AP_bill_dtl_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_Inv_Receive_product_Ap_DtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.ID_Inv_Receive_product_Ap_DtlColumn)
        End Function
        
        Public Sub SetID_Inv_Receive_product_Ap_DtlNull()
            Me(Me.tableGL_AP_payment.ID_Inv_Receive_product_Ap_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_AP_payment.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsradifNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.radifColumn)
        End Function
        
        Public Sub SetradifNull()
            Me(Me.tableGL_AP_payment.radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableGL_AP_payment.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tableGL_AP_payment.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isradif1Null() As Boolean
            Return Me.IsNull(Me.tableGL_AP_payment.radif1Column)
        End Function
        
        Public Sub Setradif1Null()
            Me(Me.tableGL_AP_payment.radif1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_paymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_paymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_paymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_paymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_AP_bill_dtl_dtl As DataColumn
        
        Private columnId_AP_bill_dtl As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnId_AP_bill_Head As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_AP_bill_Dtl_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtl_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl_dtl
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_dtlColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_dtl
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property Id_AP_bill_HeadColumn As DataColumn
            Get
                Return Me.columnId_AP_bill_Head
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_AP_bill_Dtl_DtlRow
            Get
                Return CType(Me.Rows(index),GL_AP_bill_Dtl_DtlRow)
            End Get
        End Property
        
        Public Event GL_AP_bill_Dtl_DtlRowChanged As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowChanging As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleted As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Event GL_AP_bill_Dtl_DtlRowDeleting As GL_AP_bill_Dtl_DtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_AP_bill_Dtl_DtlRow(ByVal Id_AP_bill_dtl As Integer, ByVal amount As Decimal, ByVal due_date As String, ByVal DateTransaction As String, ByVal Id_AP_bill_Head As String, ByVal sumpayment As Decimal, ByVal sumoriginalamount As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer) As GL_AP_bill_Dtl_DtlRow
            Dim rowGL_AP_bill_Dtl_DtlRow As GL_AP_bill_Dtl_DtlRow = CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
            rowGL_AP_bill_Dtl_DtlRow.ItemArray = New Object() {Nothing, Id_AP_bill_dtl, amount, due_date, DateTransaction, Id_AP_bill_Head, sumpayment, sumoriginalamount, ID_AP_payment, id_vendor_credit}
            Me.Rows.Add(rowGL_AP_bill_Dtl_DtlRow)
            Return rowGL_AP_bill_Dtl_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_AP_bill_Dtl_DtlDataTable = CType(MyBase.Clone,GL_AP_bill_Dtl_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_AP_bill_Dtl_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_AP_bill_dtl_dtl = Me.Columns("Id_AP_bill_dtl_dtl")
            Me.columnId_AP_bill_dtl = Me.Columns("Id_AP_bill_dtl")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnId_AP_bill_Head = Me.Columns("Id_AP_bill_Head")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_AP_bill_dtl_dtl = New DataColumn("Id_AP_bill_dtl_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl_dtl)
            Me.columnId_AP_bill_dtl = New DataColumn("Id_AP_bill_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_dtl)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnId_AP_bill_Head = New DataColumn("Id_AP_bill_Head", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_AP_bill_Head)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnId_AP_bill_dtl_dtl.AutoIncrement = true
            Me.columnId_AP_bill_dtl_dtl.AllowDBNull = false
            Me.columnId_AP_bill_dtl_dtl.ReadOnly = true
            Me.columnId_AP_bill_Head.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
            Me.columnsumoriginalamount.AllowDBNull = false
        End Sub
        
        Public Function NewGL_AP_bill_Dtl_DtlRow() As GL_AP_bill_Dtl_DtlRow
            Return CType(Me.NewRow,GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_AP_bill_Dtl_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_AP_bill_Dtl_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanged(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowChanging(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleted(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_AP_bill_Dtl_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_AP_bill_Dtl_DtlRowDeleting(Me, New GL_AP_bill_Dtl_DtlRowChangeEvent(CType(e.Row,GL_AP_bill_Dtl_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_AP_bill_Dtl_DtlRow(ByVal row As GL_AP_bill_Dtl_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRow
        Inherits DataRow
        
        Private tableGL_AP_bill_Dtl_Dtl As GL_AP_bill_Dtl_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_AP_bill_Dtl_Dtl = CType(Me.Table,GL_AP_bill_Dtl_DtlDataTable)
        End Sub
        
        Public Property Id_AP_bill_dtl_dtl As Integer
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtl_dtlColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtl_dtlColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_dtl As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property Id_AP_bill_Head As String
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_HeadColumn),String)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_HeadColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Decimal
            Get
                Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.sumoriginalamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsId_AP_bill_dtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn)
        End Function
        
        Public Sub SetId_AP_bill_dtlNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.Id_AP_bill_dtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableGL_AP_bill_Dtl_Dtl.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_AP_bill_Dtl_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_AP_bill_Dtl_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_AP_bill_Dtl_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_AP_bill_Dtl_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnradif As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("service_out_purchases")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_out_purchasesRow
            Get
                Return CType(Me.Rows(index),service_out_purchasesRow)
            End Get
        End Property
        
        Public Event service_out_purchasesRowChanged As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowChanging As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleted As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleting As service_out_purchasesRowChangeEventHandler
        
        Public Overloads Sub Addservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_out_purchasesRow(ByVal radif As Short, ByVal amount As Single, ByVal due_date As String, ByVal id_service_center As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Double, ByVal sumpayment As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer) As service_out_purchasesRow
            Dim rowservice_out_purchasesRow As service_out_purchasesRow = CType(Me.NewRow,service_out_purchasesRow)
            rowservice_out_purchasesRow.ItemArray = New Object() {radif, amount, due_date, id_service_center, DateTransaction, sumoriginalamount, sumpayment, ID_AP_payment, id_vendor_credit}
            Me.Rows.Add(rowservice_out_purchasesRow)
            Return rowservice_out_purchasesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_out_purchasesDataTable = CType(MyBase.Clone,service_out_purchasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_out_purchasesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnradif = Me.Columns("radif")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnamount = New DataColumn("amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnradif.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
        End Sub
        
        Public Function Newservice_out_purchasesRow() As service_out_purchasesRow
            Return CType(Me.NewRow,service_out_purchasesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_out_purchasesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_out_purchasesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_out_purchasesRowChangedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanged(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_out_purchasesRowChangingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanging(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_out_purchasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleted(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_out_purchasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleting(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRow
        Inherits DataRow
        
        Private tableservice_out_purchases As service_out_purchasesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_out_purchases = CType(Me.Table,service_out_purchasesDataTable)
        End Sub
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_out_purchases.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_out_purchases.radifColumn) = value
            End Set
        End Property
        
        Public Property amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.due_dateColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_out_purchases.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Double
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.sumoriginalamountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableservice_out_purchases.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_out_purchases.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableservice_out_purchases.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableservice_out_purchases.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableservice_out_purchases.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumoriginalamountNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.sumoriginalamountColumn)
        End Function
        
        Public Sub SetsumoriginalamountNull()
            Me(Me.tableservice_out_purchases.sumoriginalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableservice_out_purchases.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableservice_out_purchases.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_out_purchasesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_out_purchasesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_out_purchasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_Inv_Receive_product_Ap_Dtl As DataColumn
        
        Private columnid_receive_ref As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnDateTransaction As DataColumn
        
        Private columnsumoriginalamount As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnID_AP_payment As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_Receive_product_Ap_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_Inv_Receive_product_Ap_DtlColumn As DataColumn
            Get
                Return Me.columnID_Inv_Receive_product_Ap_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_receive_refColumn As DataColumn
            Get
                Return Me.columnid_receive_ref
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property DateTransactionColumn As DataColumn
            Get
                Return Me.columnDateTransaction
            End Get
        End Property
        
        Friend ReadOnly Property sumoriginalamountColumn As DataColumn
            Get
                Return Me.columnsumoriginalamount
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property ID_AP_paymentColumn As DataColumn
            Get
                Return Me.columnID_AP_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_Receive_product_Ap_DtlRow
            Get
                Return CType(Me.Rows(index),Inv_Receive_product_Ap_DtlRow)
            End Get
        End Property
        
        Public Event Inv_Receive_product_Ap_DtlRowChanged As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowChanging As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleted As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Event Inv_Receive_product_Ap_DtlRowDeleting As Inv_Receive_product_Ap_DtlRowChangeEventHandler
        
        Public Overloads Sub AddInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_Receive_product_Ap_DtlRow(ByVal id_receive_ref As String, ByVal amount As Decimal, ByVal due_date As String, ByVal DateTransaction As String, ByVal sumoriginalamount As Decimal, ByVal sumpayment As Decimal, ByVal ID_AP_payment As Integer, ByVal id_vendor_credit As Integer) As Inv_Receive_product_Ap_DtlRow
            Dim rowInv_Receive_product_Ap_DtlRow As Inv_Receive_product_Ap_DtlRow = CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
            rowInv_Receive_product_Ap_DtlRow.ItemArray = New Object() {Nothing, id_receive_ref, amount, due_date, DateTransaction, sumoriginalamount, sumpayment, ID_AP_payment, id_vendor_credit}
            Me.Rows.Add(rowInv_Receive_product_Ap_DtlRow)
            Return rowInv_Receive_product_Ap_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_Receive_product_Ap_DtlDataTable = CType(MyBase.Clone,Inv_Receive_product_Ap_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_Receive_product_Ap_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_Inv_Receive_product_Ap_Dtl = Me.Columns("ID_Inv_Receive_product_Ap_Dtl")
            Me.columnid_receive_ref = Me.Columns("id_receive_ref")
            Me.columnamount = Me.Columns("amount")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnDateTransaction = Me.Columns("DateTransaction")
            Me.columnsumoriginalamount = Me.Columns("sumoriginalamount")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnID_AP_payment = Me.Columns("ID_AP_payment")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_Inv_Receive_product_Ap_Dtl = New DataColumn("ID_Inv_Receive_product_Ap_Dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Inv_Receive_product_Ap_Dtl)
            Me.columnid_receive_ref = New DataColumn("id_receive_ref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_receive_ref)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnDateTransaction = New DataColumn("DateTransaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTransaction)
            Me.columnsumoriginalamount = New DataColumn("sumoriginalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumoriginalamount)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnID_AP_payment = New DataColumn("ID_AP_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AP_payment)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columnID_Inv_Receive_product_Ap_Dtl.AutoIncrement = true
            Me.columnID_Inv_Receive_product_Ap_Dtl.AllowDBNull = false
            Me.columnID_Inv_Receive_product_Ap_Dtl.ReadOnly = true
            Me.columnid_receive_ref.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columndue_date.AllowDBNull = false
            Me.columnsumoriginalamount.AllowDBNull = false
            Me.columnsumpayment.AllowDBNull = false
        End Sub
        
        Public Function NewInv_Receive_product_Ap_DtlRow() As Inv_Receive_product_Ap_DtlRow
            Return CType(Me.NewRow,Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_Receive_product_Ap_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_Receive_product_Ap_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanged(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowChanging(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleted(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_Receive_product_Ap_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_Receive_product_Ap_DtlRowDeleting(Me, New Inv_Receive_product_Ap_DtlRowChangeEvent(CType(e.Row,Inv_Receive_product_Ap_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_Receive_product_Ap_DtlRow(ByVal row As Inv_Receive_product_Ap_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRow
        Inherits DataRow
        
        Private tableInv_Receive_product_Ap_Dtl As Inv_Receive_product_Ap_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_Receive_product_Ap_Dtl = CType(Me.Table,Inv_Receive_product_Ap_DtlDataTable)
        End Sub
        
        Public Property ID_Inv_Receive_product_Ap_Dtl As Integer
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn),Integer)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.ID_Inv_Receive_product_Ap_DtlColumn) = value
            End Set
        End Property
        
        Public Property id_receive_ref As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.id_receive_refColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.amountColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn),String)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property DateTransaction As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn) = value
            End Set
        End Property
        
        Public Property sumoriginalamount As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.sumoriginalamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.sumoriginalamountColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.sumpaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property ID_AP_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsDateTransactionNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn)
        End Function
        
        Public Sub SetDateTransactionNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.DateTransactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_AP_paymentNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn)
        End Function
        
        Public Sub SetID_AP_paymentNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.ID_AP_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vendor_creditNull() As Boolean
            Return Me.IsNull(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn)
        End Function
        
        Public Sub Setid_vendor_creditNull()
            Me(Me.tableInv_Receive_product_Ap_Dtl.id_vendor_creditColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_Receive_product_Ap_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_Receive_product_Ap_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_Receive_product_Ap_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_Receive_product_Ap_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlDateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndate_prepare As DataColumn
        
        Friend Sub New()
            MyBase.New("GlDate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property date_prepareColumn As DataColumn
            Get
                Return Me.columndate_prepare
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GlDateRow
            Get
                Return CType(Me.Rows(index),GlDateRow)
            End Get
        End Property
        
        Public Event GlDateRowChanged As GlDateRowChangeEventHandler
        
        Public Event GlDateRowChanging As GlDateRowChangeEventHandler
        
        Public Event GlDateRowDeleted As GlDateRowChangeEventHandler
        
        Public Event GlDateRowDeleting As GlDateRowChangeEventHandler
        
        Public Overloads Sub AddGlDateRow(ByVal row As GlDateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGlDateRow(ByVal date_prepare As String) As GlDateRow
            Dim rowGlDateRow As GlDateRow = CType(Me.NewRow,GlDateRow)
            rowGlDateRow.ItemArray = New Object() {date_prepare}
            Me.Rows.Add(rowGlDateRow)
            Return rowGlDateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GlDateDataTable = CType(MyBase.Clone,GlDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GlDateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndate_prepare = Me.Columns("date_prepare")
        End Sub
        
        Private Sub InitClass()
            Me.columndate_prepare = New DataColumn("date_prepare", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_prepare)
            Me.columndate_prepare.AllowDBNull = false
        End Sub
        
        Public Function NewGlDateRow() As GlDateRow
            Return CType(Me.NewRow,GlDateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GlDateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GlDateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GlDateRowChangedEvent) Is Nothing) Then
                RaiseEvent GlDateRowChanged(Me, New GlDateRowChangeEvent(CType(e.Row,GlDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GlDateRowChangingEvent) Is Nothing) Then
                RaiseEvent GlDateRowChanging(Me, New GlDateRowChangeEvent(CType(e.Row,GlDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GlDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent GlDateRowDeleted(Me, New GlDateRowChangeEvent(CType(e.Row,GlDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GlDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent GlDateRowDeleting(Me, New GlDateRowChangeEvent(CType(e.Row,GlDateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGlDateRow(ByVal row As GlDateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlDateRow
        Inherits DataRow
        
        Private tableGlDate As GlDateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGlDate = CType(Me.Table,GlDateDataTable)
        End Sub
        
        Public Property date_prepare As String
            Get
                Return CType(Me(Me.tableGlDate.date_prepareColumn),String)
            End Get
            Set
                Me(Me.tableGlDate.date_prepareColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlDateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GlDateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GlDateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GlDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columnSumCreadit As DataColumn
        
        Private columnSumPayment As DataColumn
        
        Private columnReminder As DataColumn
        
        Private columnid_vendor_credit As DataColumn
        
        Friend Sub New()
            MyBase.New("View_GL_vendor_creditReminder")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property SumCreaditColumn As DataColumn
            Get
                Return Me.columnSumCreadit
            End Get
        End Property
        
        Friend ReadOnly Property SumPaymentColumn As DataColumn
            Get
                Return Me.columnSumPayment
            End Get
        End Property
        
        Friend ReadOnly Property ReminderColumn As DataColumn
            Get
                Return Me.columnReminder
            End Get
        End Property
        
        Friend ReadOnly Property id_vendor_creditColumn As DataColumn
            Get
                Return Me.columnid_vendor_credit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_GL_vendor_creditReminderRow
            Get
                Return CType(Me.Rows(index),View_GL_vendor_creditReminderRow)
            End Get
        End Property
        
        Public Event View_GL_vendor_creditReminderRowChanged As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowChanging As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowDeleted As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Event View_GL_vendor_creditReminderRowDeleting As View_GL_vendor_creditReminderRowChangeEventHandler
        
        Public Overloads Sub AddView_GL_vendor_creditReminderRow(ByVal row As View_GL_vendor_creditReminderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_GL_vendor_creditReminderRow(ByVal cod_vendor As String, ByVal SumCreadit As Decimal, ByVal SumPayment As Decimal, ByVal Reminder As Decimal, ByVal id_vendor_credit As Integer) As View_GL_vendor_creditReminderRow
            Dim rowView_GL_vendor_creditReminderRow As View_GL_vendor_creditReminderRow = CType(Me.NewRow,View_GL_vendor_creditReminderRow)
            rowView_GL_vendor_creditReminderRow.ItemArray = New Object() {cod_vendor, SumCreadit, SumPayment, Reminder, id_vendor_credit}
            Me.Rows.Add(rowView_GL_vendor_creditReminderRow)
            Return rowView_GL_vendor_creditReminderRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_GL_vendor_creditReminderDataTable = CType(MyBase.Clone,View_GL_vendor_creditReminderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_GL_vendor_creditReminderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnSumCreadit = Me.Columns("SumCreadit")
            Me.columnSumPayment = Me.Columns("SumPayment")
            Me.columnReminder = Me.Columns("Reminder")
            Me.columnid_vendor_credit = Me.Columns("id_vendor_credit")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnSumCreadit = New DataColumn("SumCreadit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumCreadit)
            Me.columnSumPayment = New DataColumn("SumPayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumPayment)
            Me.columnReminder = New DataColumn("Reminder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReminder)
            Me.columnid_vendor_credit = New DataColumn("id_vendor_credit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vendor_credit)
            Me.columncod_vendor.AllowDBNull = false
            Me.columnSumCreadit.AllowDBNull = false
            Me.columnSumPayment.AllowDBNull = false
            Me.columnid_vendor_credit.AllowDBNull = false
        End Sub
        
        Public Function NewView_GL_vendor_creditReminderRow() As View_GL_vendor_creditReminderRow
            Return CType(Me.NewRow,View_GL_vendor_creditReminderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_GL_vendor_creditReminderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_GL_vendor_creditReminderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_GL_vendor_creditReminderRowChangedEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowChanged(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_GL_vendor_creditReminderRowChangingEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowChanging(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_GL_vendor_creditReminderRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowDeleted(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_GL_vendor_creditReminderRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_GL_vendor_creditReminderRowDeleting(Me, New View_GL_vendor_creditReminderRowChangeEvent(CType(e.Row,View_GL_vendor_creditReminderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_GL_vendor_creditReminderRow(ByVal row As View_GL_vendor_creditReminderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderRow
        Inherits DataRow
        
        Private tableView_GL_vendor_creditReminder As View_GL_vendor_creditReminderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_GL_vendor_creditReminder = CType(Me.Table,View_GL_vendor_creditReminderDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property SumCreadit As Decimal
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.SumCreaditColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.SumCreaditColumn) = value
            End Set
        End Property
        
        Public Property SumPayment As Decimal
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.SumPaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.SumPaymentColumn) = value
            End Set
        End Property
        
        Public Property Reminder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn) = value
            End Set
        End Property
        
        Public Property id_vendor_credit As Integer
            Get
                Return CType(Me(Me.tableView_GL_vendor_creditReminder.id_vendor_creditColumn),Integer)
            End Get
            Set
                Me(Me.tableView_GL_vendor_creditReminder.id_vendor_creditColumn) = value
            End Set
        End Property
        
        Public Function IsReminderNull() As Boolean
            Return Me.IsNull(Me.tableView_GL_vendor_creditReminder.ReminderColumn)
        End Function
        
        Public Sub SetReminderNull()
            Me(Me.tableView_GL_vendor_creditReminder.ReminderColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_GL_vendor_creditReminderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_GL_vendor_creditReminderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_GL_vendor_creditReminderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_GL_vendor_creditReminderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
