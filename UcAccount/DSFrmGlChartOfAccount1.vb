'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmGlChartOfAccount
    Inherits DataSet
    
    Private tableGL_account_group As GL_account_groupDataTable
    
    Private tableGL_account_group_subgroup1 As GL_account_group_subgroup1DataTable
    
    Private tableGL_account_group_subgroup2 As GL_account_group_subgroup2DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account_group")) Is Nothing) Then
                Me.Tables.Add(New GL_account_groupDataTable(ds.Tables("GL_account_group")))
            End If
            If (Not (ds.Tables("GL_account_group_subgroup1")) Is Nothing) Then
                Me.Tables.Add(New GL_account_group_subgroup1DataTable(ds.Tables("GL_account_group_subgroup1")))
            End If
            If (Not (ds.Tables("GL_account_group_subgroup2")) Is Nothing) Then
                Me.Tables.Add(New GL_account_group_subgroup2DataTable(ds.Tables("GL_account_group_subgroup2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_group As GL_account_groupDataTable
        Get
            Return Me.tableGL_account_group
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_group_subgroup1 As GL_account_group_subgroup1DataTable
        Get
            Return Me.tableGL_account_group_subgroup1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_group_subgroup2 As GL_account_group_subgroup2DataTable
        Get
            Return Me.tableGL_account_group_subgroup2
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmGlChartOfAccount = CType(MyBase.Clone,DSFrmGlChartOfAccount)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account_group")) Is Nothing) Then
            Me.Tables.Add(New GL_account_groupDataTable(ds.Tables("GL_account_group")))
        End If
        If (Not (ds.Tables("GL_account_group_subgroup1")) Is Nothing) Then
            Me.Tables.Add(New GL_account_group_subgroup1DataTable(ds.Tables("GL_account_group_subgroup1")))
        End If
        If (Not (ds.Tables("GL_account_group_subgroup2")) Is Nothing) Then
            Me.Tables.Add(New GL_account_group_subgroup2DataTable(ds.Tables("GL_account_group_subgroup2")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account_group = CType(Me.Tables("GL_account_group"),GL_account_groupDataTable)
        If (Not (Me.tableGL_account_group) Is Nothing) Then
            Me.tableGL_account_group.InitVars
        End If
        Me.tableGL_account_group_subgroup1 = CType(Me.Tables("GL_account_group_subgroup1"),GL_account_group_subgroup1DataTable)
        If (Not (Me.tableGL_account_group_subgroup1) Is Nothing) Then
            Me.tableGL_account_group_subgroup1.InitVars
        End If
        Me.tableGL_account_group_subgroup2 = CType(Me.Tables("GL_account_group_subgroup2"),GL_account_group_subgroup2DataTable)
        If (Not (Me.tableGL_account_group_subgroup2) Is Nothing) Then
            Me.tableGL_account_group_subgroup2.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmGlChartOfAccount"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmGlChartOfAccount.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account_group = New GL_account_groupDataTable
        Me.Tables.Add(Me.tableGL_account_group)
        Me.tableGL_account_group_subgroup1 = New GL_account_group_subgroup1DataTable
        Me.Tables.Add(Me.tableGL_account_group_subgroup1)
        Me.tableGL_account_group_subgroup2 = New GL_account_group_subgroup2DataTable
        Me.Tables.Add(Me.tableGL_account_group_subgroup2)
    End Sub
    
    Private Function ShouldSerializeGL_account_group() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_group_subgroup1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_group_subgroup2() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_account_groupRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_groupRowChangeEvent)
    
    Public Delegate Sub GL_account_group_subgroup1RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_group_subgroup1RowChangeEvent)
    
    Public Delegate Sub GL_account_group_subgroup2RowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_group_subgroup2RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_groupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columngroup_GL_account As DataColumn
        
        Private columndesc_group_account As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_group")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property group_GL_accountColumn As DataColumn
            Get
                Return Me.columngroup_GL_account
            End Get
        End Property
        
        Friend ReadOnly Property desc_group_accountColumn As DataColumn
            Get
                Return Me.columndesc_group_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_groupRow
            Get
                Return CType(Me.Rows(index),GL_account_groupRow)
            End Get
        End Property
        
        Public Event GL_account_groupRowChanged As GL_account_groupRowChangeEventHandler
        
        Public Event GL_account_groupRowChanging As GL_account_groupRowChangeEventHandler
        
        Public Event GL_account_groupRowDeleted As GL_account_groupRowChangeEventHandler
        
        Public Event GL_account_groupRowDeleting As GL_account_groupRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_groupRow(ByVal row As GL_account_groupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_groupRow(ByVal group_GL_account As String, ByVal desc_group_account As String) As GL_account_groupRow
            Dim rowGL_account_groupRow As GL_account_groupRow = CType(Me.NewRow,GL_account_groupRow)
            rowGL_account_groupRow.ItemArray = New Object() {group_GL_account, desc_group_account}
            Me.Rows.Add(rowGL_account_groupRow)
            Return rowGL_account_groupRow
        End Function
        
        Public Function FindBygroup_GL_account(ByVal group_GL_account As String) As GL_account_groupRow
            Return CType(Me.Rows.Find(New Object() {group_GL_account}),GL_account_groupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_groupDataTable = CType(MyBase.Clone,GL_account_groupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_groupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columngroup_GL_account = Me.Columns("group_GL_account")
            Me.columndesc_group_account = Me.Columns("desc_group_account")
        End Sub
        
        Private Sub InitClass()
            Me.columngroup_GL_account = New DataColumn("group_GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroup_GL_account)
            Me.columndesc_group_account = New DataColumn("desc_group_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_group_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columngroup_GL_account}, true))
            Me.columngroup_GL_account.AllowDBNull = false
            Me.columngroup_GL_account.Unique = true
        End Sub
        
        Public Function NewGL_account_groupRow() As GL_account_groupRow
            Return CType(Me.NewRow,GL_account_groupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_groupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_groupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_groupRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_groupRowChanged(Me, New GL_account_groupRowChangeEvent(CType(e.Row,GL_account_groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_groupRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_groupRowChanging(Me, New GL_account_groupRowChangeEvent(CType(e.Row,GL_account_groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_groupRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_groupRowDeleted(Me, New GL_account_groupRowChangeEvent(CType(e.Row,GL_account_groupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_groupRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_groupRowDeleting(Me, New GL_account_groupRowChangeEvent(CType(e.Row,GL_account_groupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_groupRow(ByVal row As GL_account_groupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_groupRow
        Inherits DataRow
        
        Private tableGL_account_group As GL_account_groupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_group = CType(Me.Table,GL_account_groupDataTable)
        End Sub
        
        Public Property group_GL_account As String
            Get
                Return CType(Me(Me.tableGL_account_group.group_GL_accountColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_group.group_GL_accountColumn) = value
            End Set
        End Property
        
        Public Property desc_group_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_group.desc_group_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_group.desc_group_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_group_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_group.desc_group_accountColumn)
        End Function
        
        Public Sub Setdesc_group_accountNull()
            Me(Me.tableGL_account_group.desc_group_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_groupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_groupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_groupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_groupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGl_account_group_subgroup1_code As DataColumn
        
        Private columnGl_account_group_subgroup1_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_group_subgroup1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup1_codeColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup1_code
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup1_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup1_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_group_subgroup1Row
            Get
                Return CType(Me.Rows(index),GL_account_group_subgroup1Row)
            End Get
        End Property
        
        Public Event GL_account_group_subgroup1RowChanged As GL_account_group_subgroup1RowChangeEventHandler
        
        Public Event GL_account_group_subgroup1RowChanging As GL_account_group_subgroup1RowChangeEventHandler
        
        Public Event GL_account_group_subgroup1RowDeleted As GL_account_group_subgroup1RowChangeEventHandler
        
        Public Event GL_account_group_subgroup1RowDeleting As GL_account_group_subgroup1RowChangeEventHandler
        
        Public Overloads Sub AddGL_account_group_subgroup1Row(ByVal row As GL_account_group_subgroup1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_group_subgroup1Row(ByVal Gl_account_group_subgroup1_code As String, ByVal Gl_account_group_subgroup1_desc As String) As GL_account_group_subgroup1Row
            Dim rowGL_account_group_subgroup1Row As GL_account_group_subgroup1Row = CType(Me.NewRow,GL_account_group_subgroup1Row)
            rowGL_account_group_subgroup1Row.ItemArray = New Object() {Gl_account_group_subgroup1_code, Gl_account_group_subgroup1_desc}
            Me.Rows.Add(rowGL_account_group_subgroup1Row)
            Return rowGL_account_group_subgroup1Row
        End Function
        
        Public Function FindByGl_account_group_subgroup1_code(ByVal Gl_account_group_subgroup1_code As String) As GL_account_group_subgroup1Row
            Return CType(Me.Rows.Find(New Object() {Gl_account_group_subgroup1_code}),GL_account_group_subgroup1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_group_subgroup1DataTable = CType(MyBase.Clone,GL_account_group_subgroup1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_group_subgroup1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGl_account_group_subgroup1_code = Me.Columns("Gl_account_group_subgroup1_code")
            Me.columnGl_account_group_subgroup1_desc = Me.Columns("Gl_account_group_subgroup1_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnGl_account_group_subgroup1_code = New DataColumn("Gl_account_group_subgroup1_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup1_code)
            Me.columnGl_account_group_subgroup1_desc = New DataColumn("Gl_account_group_subgroup1_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup1_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGl_account_group_subgroup1_code}, true))
            Me.columnGl_account_group_subgroup1_code.AllowDBNull = false
            Me.columnGl_account_group_subgroup1_code.Unique = true
        End Sub
        
        Public Function NewGL_account_group_subgroup1Row() As GL_account_group_subgroup1Row
            Return CType(Me.NewRow,GL_account_group_subgroup1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_group_subgroup1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_group_subgroup1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_group_subgroup1RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup1RowChanged(Me, New GL_account_group_subgroup1RowChangeEvent(CType(e.Row,GL_account_group_subgroup1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_group_subgroup1RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup1RowChanging(Me, New GL_account_group_subgroup1RowChangeEvent(CType(e.Row,GL_account_group_subgroup1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_group_subgroup1RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup1RowDeleted(Me, New GL_account_group_subgroup1RowChangeEvent(CType(e.Row,GL_account_group_subgroup1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_group_subgroup1RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup1RowDeleting(Me, New GL_account_group_subgroup1RowChangeEvent(CType(e.Row,GL_account_group_subgroup1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_group_subgroup1Row(ByVal row As GL_account_group_subgroup1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup1Row
        Inherits DataRow
        
        Private tableGL_account_group_subgroup1 As GL_account_group_subgroup1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_group_subgroup1 = CType(Me.Table,GL_account_group_subgroup1DataTable)
        End Sub
        
        Public Property Gl_account_group_subgroup1_code As String
            Get
                Return CType(Me(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_codeColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_codeColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup1_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_descColumn) = value
            End Set
        End Property
        
        Public Function IsGl_account_group_subgroup1_descNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup1_descNull()
            Me(Me.tableGL_account_group_subgroup1.Gl_account_group_subgroup1_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_group_subgroup1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_group_subgroup1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_group_subgroup1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGl_account_group_subgroup2_code As DataColumn
        
        Private columnGl_account_group_subgroup2_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_group_subgroup2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup2_codeColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup2_code
            End Get
        End Property
        
        Friend ReadOnly Property Gl_account_group_subgroup2_descColumn As DataColumn
            Get
                Return Me.columnGl_account_group_subgroup2_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_group_subgroup2Row
            Get
                Return CType(Me.Rows(index),GL_account_group_subgroup2Row)
            End Get
        End Property
        
        Public Event GL_account_group_subgroup2RowChanged As GL_account_group_subgroup2RowChangeEventHandler
        
        Public Event GL_account_group_subgroup2RowChanging As GL_account_group_subgroup2RowChangeEventHandler
        
        Public Event GL_account_group_subgroup2RowDeleted As GL_account_group_subgroup2RowChangeEventHandler
        
        Public Event GL_account_group_subgroup2RowDeleting As GL_account_group_subgroup2RowChangeEventHandler
        
        Public Overloads Sub AddGL_account_group_subgroup2Row(ByVal row As GL_account_group_subgroup2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_group_subgroup2Row(ByVal Gl_account_group_subgroup2_code As String, ByVal Gl_account_group_subgroup2_desc As String) As GL_account_group_subgroup2Row
            Dim rowGL_account_group_subgroup2Row As GL_account_group_subgroup2Row = CType(Me.NewRow,GL_account_group_subgroup2Row)
            rowGL_account_group_subgroup2Row.ItemArray = New Object() {Gl_account_group_subgroup2_code, Gl_account_group_subgroup2_desc}
            Me.Rows.Add(rowGL_account_group_subgroup2Row)
            Return rowGL_account_group_subgroup2Row
        End Function
        
        Public Function FindByGl_account_group_subgroup2_code(ByVal Gl_account_group_subgroup2_code As String) As GL_account_group_subgroup2Row
            Return CType(Me.Rows.Find(New Object() {Gl_account_group_subgroup2_code}),GL_account_group_subgroup2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_group_subgroup2DataTable = CType(MyBase.Clone,GL_account_group_subgroup2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_group_subgroup2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGl_account_group_subgroup2_code = Me.Columns("Gl_account_group_subgroup2_code")
            Me.columnGl_account_group_subgroup2_desc = Me.Columns("Gl_account_group_subgroup2_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnGl_account_group_subgroup2_code = New DataColumn("Gl_account_group_subgroup2_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup2_code)
            Me.columnGl_account_group_subgroup2_desc = New DataColumn("Gl_account_group_subgroup2_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_account_group_subgroup2_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGl_account_group_subgroup2_code}, true))
            Me.columnGl_account_group_subgroup2_code.AllowDBNull = false
            Me.columnGl_account_group_subgroup2_code.Unique = true
        End Sub
        
        Public Function NewGL_account_group_subgroup2Row() As GL_account_group_subgroup2Row
            Return CType(Me.NewRow,GL_account_group_subgroup2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_group_subgroup2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_group_subgroup2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_group_subgroup2RowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup2RowChanged(Me, New GL_account_group_subgroup2RowChangeEvent(CType(e.Row,GL_account_group_subgroup2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_group_subgroup2RowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup2RowChanging(Me, New GL_account_group_subgroup2RowChangeEvent(CType(e.Row,GL_account_group_subgroup2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_group_subgroup2RowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup2RowDeleted(Me, New GL_account_group_subgroup2RowChangeEvent(CType(e.Row,GL_account_group_subgroup2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_group_subgroup2RowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_group_subgroup2RowDeleting(Me, New GL_account_group_subgroup2RowChangeEvent(CType(e.Row,GL_account_group_subgroup2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_group_subgroup2Row(ByVal row As GL_account_group_subgroup2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup2Row
        Inherits DataRow
        
        Private tableGL_account_group_subgroup2 As GL_account_group_subgroup2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_group_subgroup2 = CType(Me.Table,GL_account_group_subgroup2DataTable)
        End Sub
        
        Public Property Gl_account_group_subgroup2_code As String
            Get
                Return CType(Me(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_codeColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_codeColumn) = value
            End Set
        End Property
        
        Public Property Gl_account_group_subgroup2_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_descColumn) = value
            End Set
        End Property
        
        Public Function IsGl_account_group_subgroup2_descNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_descColumn)
        End Function
        
        Public Sub SetGl_account_group_subgroup2_descNull()
            Me(Me.tableGL_account_group_subgroup2.Gl_account_group_subgroup2_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_group_subgroup2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_group_subgroup2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_group_subgroup2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_group_subgroup2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
