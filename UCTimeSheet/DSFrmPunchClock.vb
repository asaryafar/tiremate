'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPunchClock
    Inherits DataSet
    
    Private tablepay_tab_punch_note As pay_tab_punch_noteDataTable
    
    Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_tab_punch_note")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_punch_noteDataTable(ds.Tables("pay_tab_punch_note")))
            End If
            If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
                Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_punch_note As pay_tab_punch_noteDataTable
        Get
            Return Me.tablepay_tab_punch_note
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        Get
            Return Me.tablepay_punch_employee_in_out
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPunchClock = CType(MyBase.Clone,DSFrmPunchClock)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_tab_punch_note")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_punch_noteDataTable(ds.Tables("pay_tab_punch_note")))
        End If
        If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
            Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_tab_punch_note = CType(Me.Tables("pay_tab_punch_note"),pay_tab_punch_noteDataTable)
        If (Not (Me.tablepay_tab_punch_note) Is Nothing) Then
            Me.tablepay_tab_punch_note.InitVars
        End If
        Me.tablepay_punch_employee_in_out = CType(Me.Tables("pay_punch_employee_in_out"),pay_punch_employee_in_outDataTable)
        If (Not (Me.tablepay_punch_employee_in_out) Is Nothing) Then
            Me.tablepay_punch_employee_in_out.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPunchClock"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPunchClock.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_tab_punch_note = New pay_tab_punch_noteDataTable
        Me.Tables.Add(Me.tablepay_tab_punch_note)
        Me.tablepay_punch_employee_in_out = New pay_punch_employee_in_outDataTable
        Me.Tables.Add(Me.tablepay_punch_employee_in_out)
    End Sub
    
    Private Function ShouldSerializepay_tab_punch_note() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_punch_employee_in_out() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_tab_punch_noteRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_punch_noteRowChangeEvent)
    
    Public Delegate Sub pay_punch_employee_in_outRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_punch_employee_in_outRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_punch_noteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpunch_note_code As DataColumn
        
        Private columnpunch_note_desc As DataColumn
        
        Private columntype_in_out As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_punch_note")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property punch_note_codeColumn As DataColumn
            Get
                Return Me.columnpunch_note_code
            End Get
        End Property
        
        Friend ReadOnly Property punch_note_descColumn As DataColumn
            Get
                Return Me.columnpunch_note_desc
            End Get
        End Property
        
        Friend ReadOnly Property type_in_outColumn As DataColumn
            Get
                Return Me.columntype_in_out
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_punch_noteRow
            Get
                Return CType(Me.Rows(index),pay_tab_punch_noteRow)
            End Get
        End Property
        
        Public Event pay_tab_punch_noteRowChanged As pay_tab_punch_noteRowChangeEventHandler
        
        Public Event pay_tab_punch_noteRowChanging As pay_tab_punch_noteRowChangeEventHandler
        
        Public Event pay_tab_punch_noteRowDeleted As pay_tab_punch_noteRowChangeEventHandler
        
        Public Event pay_tab_punch_noteRowDeleting As pay_tab_punch_noteRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_punch_noteRow(ByVal row As pay_tab_punch_noteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_punch_noteRow(ByVal punch_note_code As String, ByVal punch_note_desc As String, ByVal type_in_out As Boolean) As pay_tab_punch_noteRow
            Dim rowpay_tab_punch_noteRow As pay_tab_punch_noteRow = CType(Me.NewRow,pay_tab_punch_noteRow)
            rowpay_tab_punch_noteRow.ItemArray = New Object() {punch_note_code, punch_note_desc, type_in_out}
            Me.Rows.Add(rowpay_tab_punch_noteRow)
            Return rowpay_tab_punch_noteRow
        End Function
        
        Public Function FindBypunch_note_code(ByVal punch_note_code As String) As pay_tab_punch_noteRow
            Return CType(Me.Rows.Find(New Object() {punch_note_code}),pay_tab_punch_noteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_punch_noteDataTable = CType(MyBase.Clone,pay_tab_punch_noteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_punch_noteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpunch_note_code = Me.Columns("punch_note_code")
            Me.columnpunch_note_desc = Me.Columns("punch_note_desc")
            Me.columntype_in_out = Me.Columns("type_in_out")
        End Sub
        
        Private Sub InitClass()
            Me.columnpunch_note_code = New DataColumn("punch_note_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpunch_note_code)
            Me.columnpunch_note_desc = New DataColumn("punch_note_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpunch_note_desc)
            Me.columntype_in_out = New DataColumn("type_in_out", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_in_out)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnpunch_note_code}, true))
            Me.columnpunch_note_code.AllowDBNull = false
            Me.columnpunch_note_code.Unique = true
        End Sub
        
        Public Function Newpay_tab_punch_noteRow() As pay_tab_punch_noteRow
            Return CType(Me.NewRow,pay_tab_punch_noteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_punch_noteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_punch_noteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_punch_noteRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_punch_noteRowChanged(Me, New pay_tab_punch_noteRowChangeEvent(CType(e.Row,pay_tab_punch_noteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_punch_noteRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_punch_noteRowChanging(Me, New pay_tab_punch_noteRowChangeEvent(CType(e.Row,pay_tab_punch_noteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_punch_noteRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_punch_noteRowDeleted(Me, New pay_tab_punch_noteRowChangeEvent(CType(e.Row,pay_tab_punch_noteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_punch_noteRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_punch_noteRowDeleting(Me, New pay_tab_punch_noteRowChangeEvent(CType(e.Row,pay_tab_punch_noteRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_punch_noteRow(ByVal row As pay_tab_punch_noteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_punch_noteRow
        Inherits DataRow
        
        Private tablepay_tab_punch_note As pay_tab_punch_noteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_punch_note = CType(Me.Table,pay_tab_punch_noteDataTable)
        End Sub
        
        Public Property punch_note_code As String
            Get
                Return CType(Me(Me.tablepay_tab_punch_note.punch_note_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_punch_note.punch_note_codeColumn) = value
            End Set
        End Property
        
        Public Property punch_note_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_punch_note.punch_note_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_punch_note.punch_note_descColumn) = value
            End Set
        End Property
        
        Public Property type_in_out As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_punch_note.type_in_outColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_punch_note.type_in_outColumn) = value
            End Set
        End Property
        
        Public Function Ispunch_note_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_punch_note.punch_note_descColumn)
        End Function
        
        Public Sub Setpunch_note_descNull()
            Me(Me.tablepay_tab_punch_note.punch_note_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype_in_outNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_punch_note.type_in_outColumn)
        End Function
        
        Public Sub Settype_in_outNull()
            Me(Me.tablepay_tab_punch_note.type_in_outColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_punch_noteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_punch_noteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_punch_noteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_punch_noteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_punch_in_out As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnaction_date As DataColumn
        
        Private columnaction_time_Hour As DataColumn
        
        Private columnaction_time_Minute As DataColumn
        
        Private columnpunch_note_code As DataColumn
        
        Private columnIn_Out_type As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_punch_employee_in_out")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_punch_in_outColumn As DataColumn
            Get
                Return Me.columnid_punch_in_out
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property action_dateColumn As DataColumn
            Get
                Return Me.columnaction_date
            End Get
        End Property
        
        Friend ReadOnly Property action_time_HourColumn As DataColumn
            Get
                Return Me.columnaction_time_Hour
            End Get
        End Property
        
        Friend ReadOnly Property action_time_MinuteColumn As DataColumn
            Get
                Return Me.columnaction_time_Minute
            End Get
        End Property
        
        Friend ReadOnly Property punch_note_codeColumn As DataColumn
            Get
                Return Me.columnpunch_note_code
            End Get
        End Property
        
        Friend ReadOnly Property In_Out_typeColumn As DataColumn
            Get
                Return Me.columnIn_Out_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_punch_employee_in_outRow
            Get
                Return CType(Me.Rows(index),pay_punch_employee_in_outRow)
            End Get
        End Property
        
        Public Event pay_punch_employee_in_outRowChanged As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowChanging As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleted As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleting As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Overloads Sub Addpay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_punch_employee_in_outRow(ByVal employee_code As String, ByVal action_date As String, ByVal action_time_Hour As String, ByVal action_time_Minute As String, ByVal punch_note_code As String, ByVal In_Out_type As Integer) As pay_punch_employee_in_outRow
            Dim rowpay_punch_employee_in_outRow As pay_punch_employee_in_outRow = CType(Me.NewRow,pay_punch_employee_in_outRow)
            rowpay_punch_employee_in_outRow.ItemArray = New Object() {Nothing, employee_code, action_date, action_time_Hour, action_time_Minute, punch_note_code, In_Out_type}
            Me.Rows.Add(rowpay_punch_employee_in_outRow)
            Return rowpay_punch_employee_in_outRow
        End Function
        
        Public Function FindByid_punch_in_out(ByVal id_punch_in_out As Integer) As pay_punch_employee_in_outRow
            Return CType(Me.Rows.Find(New Object() {id_punch_in_out}),pay_punch_employee_in_outRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_punch_employee_in_outDataTable = CType(MyBase.Clone,pay_punch_employee_in_outDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_punch_employee_in_outDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_punch_in_out = Me.Columns("id_punch_in_out")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnaction_date = Me.Columns("action_date")
            Me.columnaction_time_Hour = Me.Columns("action_time_Hour")
            Me.columnaction_time_Minute = Me.Columns("action_time_Minute")
            Me.columnpunch_note_code = Me.Columns("punch_note_code")
            Me.columnIn_Out_type = Me.Columns("In_Out_type")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_punch_in_out = New DataColumn("id_punch_in_out", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_punch_in_out)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnaction_date = New DataColumn("action_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_date)
            Me.columnaction_time_Hour = New DataColumn("action_time_Hour", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_time_Hour)
            Me.columnaction_time_Minute = New DataColumn("action_time_Minute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_time_Minute)
            Me.columnpunch_note_code = New DataColumn("punch_note_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpunch_note_code)
            Me.columnIn_Out_type = New DataColumn("In_Out_type", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIn_Out_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_punch_in_out}, true))
            Me.columnid_punch_in_out.AutoIncrement = true
            Me.columnid_punch_in_out.AllowDBNull = false
            Me.columnid_punch_in_out.ReadOnly = true
            Me.columnid_punch_in_out.Unique = true
        End Sub
        
        Public Function Newpay_punch_employee_in_outRow() As pay_punch_employee_in_outRow
            Return CType(Me.NewRow,pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_punch_employee_in_outRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_punch_employee_in_outRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanged(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_punch_employee_in_outRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanging(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleted(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleting(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRow
        Inherits DataRow
        
        Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_punch_employee_in_out = CType(Me.Table,pay_punch_employee_in_outDataTable)
        End Sub
        
        Public Property id_punch_in_out As Integer
            Get
                Return CType(Me(Me.tablepay_punch_employee_in_out.id_punch_in_outColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.id_punch_in_outColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property action_date As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.action_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.action_dateColumn) = value
            End Set
        End Property
        
        Public Property action_time_Hour As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.action_time_HourColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.action_time_HourColumn) = value
            End Set
        End Property
        
        Public Property action_time_Minute As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.action_time_MinuteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.action_time_MinuteColumn) = value
            End Set
        End Property
        
        Public Property punch_note_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn) = value
            End Set
        End Property
        
        Public Property In_Out_type As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.In_Out_typeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.In_Out_typeColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_dateNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.action_dateColumn)
        End Function
        
        Public Sub Setaction_dateNull()
            Me(Me.tablepay_punch_employee_in_out.action_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_time_HourNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.action_time_HourColumn)
        End Function
        
        Public Sub Setaction_time_HourNull()
            Me(Me.tablepay_punch_employee_in_out.action_time_HourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_time_MinuteNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.action_time_MinuteColumn)
        End Function
        
        Public Sub Setaction_time_MinuteNull()
            Me(Me.tablepay_punch_employee_in_out.action_time_MinuteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispunch_note_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.punch_note_codeColumn)
        End Function
        
        Public Sub Setpunch_note_codeNull()
            Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIn_Out_typeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.In_Out_typeColumn)
        End Function
        
        Public Sub SetIn_Out_typeNull()
            Me(Me.tablepay_punch_employee_in_out.In_Out_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_punch_employee_in_outRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_punch_employee_in_outRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_punch_employee_in_outRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
