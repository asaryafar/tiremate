'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmWeeklyTimeSheet
    Inherits DataSet
    
    Private tableemployee As employeeDataTable
    
    Private tableemployeeWeeklyTimeSheet As employeeWeeklyTimeSheetDataTable
    
    Private tableYearWeeks As YearWeeksDataTable
    
    Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
    
    Private tablepay_employee_timesheet As pay_employee_timesheetDataTable
    
    Private tableYears As YearsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("employeeWeeklyTimeSheet")) Is Nothing) Then
                Me.Tables.Add(New employeeWeeklyTimeSheetDataTable(ds.Tables("employeeWeeklyTimeSheet")))
            End If
            If (Not (ds.Tables("YearWeeks")) Is Nothing) Then
                Me.Tables.Add(New YearWeeksDataTable(ds.Tables("YearWeeks")))
            End If
            If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
                Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
            End If
            If (Not (ds.Tables("pay_employee_timesheet")) Is Nothing) Then
                Me.Tables.Add(New pay_employee_timesheetDataTable(ds.Tables("pay_employee_timesheet")))
            End If
            If (Not (ds.Tables("Years")) Is Nothing) Then
                Me.Tables.Add(New YearsDataTable(ds.Tables("Years")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employeeWeeklyTimeSheet As employeeWeeklyTimeSheetDataTable
        Get
            Return Me.tableemployeeWeeklyTimeSheet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property YearWeeks As YearWeeksDataTable
        Get
            Return Me.tableYearWeeks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        Get
            Return Me.tablepay_punch_employee_in_out
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_employee_timesheet As pay_employee_timesheetDataTable
        Get
            Return Me.tablepay_employee_timesheet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Years As YearsDataTable
        Get
            Return Me.tableYears
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmWeeklyTimeSheet = CType(MyBase.Clone,DSFrmWeeklyTimeSheet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("employeeWeeklyTimeSheet")) Is Nothing) Then
            Me.Tables.Add(New employeeWeeklyTimeSheetDataTable(ds.Tables("employeeWeeklyTimeSheet")))
        End If
        If (Not (ds.Tables("YearWeeks")) Is Nothing) Then
            Me.Tables.Add(New YearWeeksDataTable(ds.Tables("YearWeeks")))
        End If
        If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
            Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
        End If
        If (Not (ds.Tables("pay_employee_timesheet")) Is Nothing) Then
            Me.Tables.Add(New pay_employee_timesheetDataTable(ds.Tables("pay_employee_timesheet")))
        End If
        If (Not (ds.Tables("Years")) Is Nothing) Then
            Me.Tables.Add(New YearsDataTable(ds.Tables("Years")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableemployeeWeeklyTimeSheet = CType(Me.Tables("employeeWeeklyTimeSheet"),employeeWeeklyTimeSheetDataTable)
        If (Not (Me.tableemployeeWeeklyTimeSheet) Is Nothing) Then
            Me.tableemployeeWeeklyTimeSheet.InitVars
        End If
        Me.tableYearWeeks = CType(Me.Tables("YearWeeks"),YearWeeksDataTable)
        If (Not (Me.tableYearWeeks) Is Nothing) Then
            Me.tableYearWeeks.InitVars
        End If
        Me.tablepay_punch_employee_in_out = CType(Me.Tables("pay_punch_employee_in_out"),pay_punch_employee_in_outDataTable)
        If (Not (Me.tablepay_punch_employee_in_out) Is Nothing) Then
            Me.tablepay_punch_employee_in_out.InitVars
        End If
        Me.tablepay_employee_timesheet = CType(Me.Tables("pay_employee_timesheet"),pay_employee_timesheetDataTable)
        If (Not (Me.tablepay_employee_timesheet) Is Nothing) Then
            Me.tablepay_employee_timesheet.InitVars
        End If
        Me.tableYears = CType(Me.Tables("Years"),YearsDataTable)
        If (Not (Me.tableYears) Is Nothing) Then
            Me.tableYears.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmWeeklyTimeSheet"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmWeeklyTimeSheet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableemployeeWeeklyTimeSheet = New employeeWeeklyTimeSheetDataTable
        Me.Tables.Add(Me.tableemployeeWeeklyTimeSheet)
        Me.tableYearWeeks = New YearWeeksDataTable
        Me.Tables.Add(Me.tableYearWeeks)
        Me.tablepay_punch_employee_in_out = New pay_punch_employee_in_outDataTable
        Me.Tables.Add(Me.tablepay_punch_employee_in_out)
        Me.tablepay_employee_timesheet = New pay_employee_timesheetDataTable
        Me.Tables.Add(Me.tablepay_employee_timesheet)
        Me.tableYears = New YearsDataTable
        Me.Tables.Add(Me.tableYears)
    End Sub
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployeeWeeklyTimeSheet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeYearWeeks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_punch_employee_in_out() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_employee_timesheet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeYears() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub employeeWeeklyTimeSheetRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeWeeklyTimeSheetRowChangeEvent)
    
    Public Delegate Sub YearWeeksRowChangeEventHandler(ByVal sender As Object, ByVal e As YearWeeksRowChangeEvent)
    
    Public Delegate Sub pay_punch_employee_in_outRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_punch_employee_in_outRowChangeEvent)
    
    Public Delegate Sub pay_employee_timesheetRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_employee_timesheetRowChangeEvent)
    
    Public Delegate Sub YearsRowChangeEventHandler(ByVal sender As Object, ByVal e As YearsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmployeeFullName As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeFullNameColumn As DataColumn
            Get
                Return Me.columnEmployeeFullName
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal EmployeeFullName As String, ByVal employee_code As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {EmployeeFullName, employee_code}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmployeeFullName = Me.Columns("EmployeeFullName")
            Me.columnemployee_code = Me.Columns("employee_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmployeeFullName = New DataColumn("EmployeeFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeFullName)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnEmployeeFullName.ReadOnly = true
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property EmployeeFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.EmployeeFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.EmployeeFullNameColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Function IsEmployeeFullNameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.EmployeeFullNameColumn)
        End Function
        
        Public Sub SetEmployeeFullNameNull()
            Me(Me.tableemployee.EmployeeFullNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeWeeklyTimeSheetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnDay1 As DataColumn
        
        Private columnDay2 As DataColumn
        
        Private columnDay3 As DataColumn
        
        Private columnDay4 As DataColumn
        
        Private columnDay5 As DataColumn
        
        Private columnDay6 As DataColumn
        
        Private columnDay7 As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnFlagCanEdit As DataColumn
        
        Friend Sub New()
            MyBase.New("employeeWeeklyTimeSheet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property Day1Column As DataColumn
            Get
                Return Me.columnDay1
            End Get
        End Property
        
        Friend ReadOnly Property Day2Column As DataColumn
            Get
                Return Me.columnDay2
            End Get
        End Property
        
        Friend ReadOnly Property Day3Column As DataColumn
            Get
                Return Me.columnDay3
            End Get
        End Property
        
        Friend ReadOnly Property Day4Column As DataColumn
            Get
                Return Me.columnDay4
            End Get
        End Property
        
        Friend ReadOnly Property Day5Column As DataColumn
            Get
                Return Me.columnDay5
            End Get
        End Property
        
        Friend ReadOnly Property Day6Column As DataColumn
            Get
                Return Me.columnDay6
            End Get
        End Property
        
        Friend ReadOnly Property Day7Column As DataColumn
            Get
                Return Me.columnDay7
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property FlagCanEditColumn As DataColumn
            Get
                Return Me.columnFlagCanEdit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeWeeklyTimeSheetRow
            Get
                Return CType(Me.Rows(index),employeeWeeklyTimeSheetRow)
            End Get
        End Property
        
        Public Event employeeWeeklyTimeSheetRowChanged As employeeWeeklyTimeSheetRowChangeEventHandler
        
        Public Event employeeWeeklyTimeSheetRowChanging As employeeWeeklyTimeSheetRowChangeEventHandler
        
        Public Event employeeWeeklyTimeSheetRowDeleted As employeeWeeklyTimeSheetRowChangeEventHandler
        
        Public Event employeeWeeklyTimeSheetRowDeleting As employeeWeeklyTimeSheetRowChangeEventHandler
        
        Public Overloads Sub AddemployeeWeeklyTimeSheetRow(ByVal row As employeeWeeklyTimeSheetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeWeeklyTimeSheetRow(ByVal employee_code As String, ByVal Day1 As String, ByVal Day2 As String, ByVal Day3 As String, ByVal Day4 As String, ByVal Day5 As String, ByVal Day6 As String, ByVal Day7 As String, ByVal Total As String, ByVal FlagCanEdit As Integer) As employeeWeeklyTimeSheetRow
            Dim rowemployeeWeeklyTimeSheetRow As employeeWeeklyTimeSheetRow = CType(Me.NewRow,employeeWeeklyTimeSheetRow)
            rowemployeeWeeklyTimeSheetRow.ItemArray = New Object() {employee_code, Day1, Day2, Day3, Day4, Day5, Day6, Day7, Total, FlagCanEdit}
            Me.Rows.Add(rowemployeeWeeklyTimeSheetRow)
            Return rowemployeeWeeklyTimeSheetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeWeeklyTimeSheetDataTable = CType(MyBase.Clone,employeeWeeklyTimeSheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeWeeklyTimeSheetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnDay1 = Me.Columns("Day1")
            Me.columnDay2 = Me.Columns("Day2")
            Me.columnDay3 = Me.Columns("Day3")
            Me.columnDay4 = Me.Columns("Day4")
            Me.columnDay5 = Me.Columns("Day5")
            Me.columnDay6 = Me.Columns("Day6")
            Me.columnDay7 = Me.Columns("Day7")
            Me.columnTotal = Me.Columns("Total")
            Me.columnFlagCanEdit = Me.Columns("FlagCanEdit")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnDay1 = New DataColumn("Day1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay1)
            Me.columnDay2 = New DataColumn("Day2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay2)
            Me.columnDay3 = New DataColumn("Day3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay3)
            Me.columnDay4 = New DataColumn("Day4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay4)
            Me.columnDay5 = New DataColumn("Day5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay5)
            Me.columnDay6 = New DataColumn("Day6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay6)
            Me.columnDay7 = New DataColumn("Day7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDay7)
            Me.columnTotal = New DataColumn("Total", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnFlagCanEdit = New DataColumn("FlagCanEdit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagCanEdit)
            Me.columnemployee_code.AllowDBNull = false
        End Sub
        
        Public Function NewemployeeWeeklyTimeSheetRow() As employeeWeeklyTimeSheetRow
            Return CType(Me.NewRow,employeeWeeklyTimeSheetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeWeeklyTimeSheetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeWeeklyTimeSheetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeWeeklyTimeSheetRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeWeeklyTimeSheetRowChanged(Me, New employeeWeeklyTimeSheetRowChangeEvent(CType(e.Row,employeeWeeklyTimeSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeWeeklyTimeSheetRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeWeeklyTimeSheetRowChanging(Me, New employeeWeeklyTimeSheetRowChangeEvent(CType(e.Row,employeeWeeklyTimeSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeWeeklyTimeSheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeWeeklyTimeSheetRowDeleted(Me, New employeeWeeklyTimeSheetRowChangeEvent(CType(e.Row,employeeWeeklyTimeSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeWeeklyTimeSheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeWeeklyTimeSheetRowDeleting(Me, New employeeWeeklyTimeSheetRowChangeEvent(CType(e.Row,employeeWeeklyTimeSheetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeWeeklyTimeSheetRow(ByVal row As employeeWeeklyTimeSheetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeWeeklyTimeSheetRow
        Inherits DataRow
        
        Private tableemployeeWeeklyTimeSheet As employeeWeeklyTimeSheetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployeeWeeklyTimeSheet = CType(Me.Table,employeeWeeklyTimeSheetDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployeeWeeklyTimeSheet.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property Day1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day1Column) = value
            End Set
        End Property
        
        Public Property Day2 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day2Column) = value
            End Set
        End Property
        
        Public Property Day3 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day3Column) = value
            End Set
        End Property
        
        Public Property Day4 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day4Column) = value
            End Set
        End Property
        
        Public Property Day5 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day5Column) = value
            End Set
        End Property
        
        Public Property Day6 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day6Column) = value
            End Set
        End Property
        
        Public Property Day7 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.Day7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.Day7Column) = value
            End Set
        End Property
        
        Public Property Total As String
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.TotalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.TotalColumn) = value
            End Set
        End Property
        
        Public Property FlagCanEdit As Integer
            Get
                Try 
                    Return CType(Me(Me.tableemployeeWeeklyTimeSheet.FlagCanEditColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployeeWeeklyTimeSheet.FlagCanEditColumn) = value
            End Set
        End Property
        
        Public Function IsDay1Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day1Column)
        End Function
        
        Public Sub SetDay1Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay2Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day2Column)
        End Function
        
        Public Sub SetDay2Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay3Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day3Column)
        End Function
        
        Public Sub SetDay3Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay4Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day4Column)
        End Function
        
        Public Sub SetDay4Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay5Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day5Column)
        End Function
        
        Public Sub SetDay5Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay6Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day6Column)
        End Function
        
        Public Sub SetDay6Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDay7Null() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.Day7Column)
        End Function
        
        Public Sub SetDay7Null()
            Me(Me.tableemployeeWeeklyTimeSheet.Day7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableemployeeWeeklyTimeSheet.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagCanEditNull() As Boolean
            Return Me.IsNull(Me.tableemployeeWeeklyTimeSheet.FlagCanEditColumn)
        End Function
        
        Public Sub SetFlagCanEditNull()
            Me(Me.tableemployeeWeeklyTimeSheet.FlagCanEditColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeWeeklyTimeSheetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeWeeklyTimeSheetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeWeeklyTimeSheetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeWeeklyTimeSheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWeekNo As DataColumn
        
        Private columnDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("YearWeeks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property WeekNoColumn As DataColumn
            Get
                Return Me.columnWeekNo
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearWeeksRow
            Get
                Return CType(Me.Rows(index),YearWeeksRow)
            End Get
        End Property
        
        Public Event YearWeeksRowChanged As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowChanging As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowDeleted As YearWeeksRowChangeEventHandler
        
        Public Event YearWeeksRowDeleting As YearWeeksRowChangeEventHandler
        
        Public Overloads Sub AddYearWeeksRow(ByVal row As YearWeeksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddYearWeeksRow(ByVal WeekNo As String, ByVal Desc As String) As YearWeeksRow
            Dim rowYearWeeksRow As YearWeeksRow = CType(Me.NewRow,YearWeeksRow)
            rowYearWeeksRow.ItemArray = New Object() {WeekNo, Desc}
            Me.Rows.Add(rowYearWeeksRow)
            Return rowYearWeeksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As YearWeeksDataTable = CType(MyBase.Clone,YearWeeksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New YearWeeksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnWeekNo = Me.Columns("WeekNo")
            Me.columnDesc = Me.Columns("Desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnWeekNo = New DataColumn("WeekNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekNo)
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
            Me.columnWeekNo.ReadOnly = true
            Me.columnDesc.AllowDBNull = false
        End Sub
        
        Public Function NewYearWeeksRow() As YearWeeksRow
            Return CType(Me.NewRow,YearWeeksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New YearWeeksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(YearWeeksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearWeeksRowChangedEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowChanged(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearWeeksRowChangingEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowChanging(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearWeeksRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowDeleted(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearWeeksRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearWeeksRowDeleting(Me, New YearWeeksRowChangeEvent(CType(e.Row,YearWeeksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveYearWeeksRow(ByVal row As YearWeeksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksRow
        Inherits DataRow
        
        Private tableYearWeeks As YearWeeksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableYearWeeks = CType(Me.Table,YearWeeksDataTable)
        End Sub
        
        Public Property WeekNo As String
            Get
                Try 
                    Return CType(Me(Me.tableYearWeeks.WeekNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYearWeeks.WeekNoColumn) = value
            End Set
        End Property
        
        Public Property Desc As String
            Get
                Return CType(Me(Me.tableYearWeeks.DescColumn),String)
            End Get
            Set
                Me(Me.tableYearWeeks.DescColumn) = value
            End Set
        End Property
        
        Public Function IsWeekNoNull() As Boolean
            Return Me.IsNull(Me.tableYearWeeks.WeekNoColumn)
        End Function
        
        Public Sub SetWeekNoNull()
            Me(Me.tableYearWeeks.WeekNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearWeeksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As YearWeeksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As YearWeeksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As YearWeeksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_punch_in_out As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnaction_Time As DataColumn
        
        Private columnin_out_type As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_punch_employee_in_out")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_punch_in_outColumn As DataColumn
            Get
                Return Me.columnid_punch_in_out
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property action_TimeColumn As DataColumn
            Get
                Return Me.columnaction_Time
            End Get
        End Property
        
        Friend ReadOnly Property in_out_typeColumn As DataColumn
            Get
                Return Me.columnin_out_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_punch_employee_in_outRow
            Get
                Return CType(Me.Rows(index),pay_punch_employee_in_outRow)
            End Get
        End Property
        
        Public Event pay_punch_employee_in_outRowChanged As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowChanging As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleted As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleting As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Overloads Sub Addpay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_punch_employee_in_outRow(ByVal employee_code As String, ByVal action_Time As String, ByVal in_out_type As Short) As pay_punch_employee_in_outRow
            Dim rowpay_punch_employee_in_outRow As pay_punch_employee_in_outRow = CType(Me.NewRow,pay_punch_employee_in_outRow)
            rowpay_punch_employee_in_outRow.ItemArray = New Object() {Nothing, employee_code, action_Time, in_out_type}
            Me.Rows.Add(rowpay_punch_employee_in_outRow)
            Return rowpay_punch_employee_in_outRow
        End Function
        
        Public Function FindByid_punch_in_out(ByVal id_punch_in_out As Integer) As pay_punch_employee_in_outRow
            Return CType(Me.Rows.Find(New Object() {id_punch_in_out}),pay_punch_employee_in_outRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_punch_employee_in_outDataTable = CType(MyBase.Clone,pay_punch_employee_in_outDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_punch_employee_in_outDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_punch_in_out = Me.Columns("id_punch_in_out")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnaction_Time = Me.Columns("action_Time")
            Me.columnin_out_type = Me.Columns("in_out_type")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_punch_in_out = New DataColumn("id_punch_in_out", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_punch_in_out)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnaction_Time = New DataColumn("action_Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_Time)
            Me.columnin_out_type = New DataColumn("in_out_type", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnin_out_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_punch_in_out}, true))
            Me.columnid_punch_in_out.AutoIncrement = true
            Me.columnid_punch_in_out.AllowDBNull = false
            Me.columnid_punch_in_out.ReadOnly = true
            Me.columnid_punch_in_out.Unique = true
            Me.columnaction_Time.ReadOnly = true
        End Sub
        
        Public Function Newpay_punch_employee_in_outRow() As pay_punch_employee_in_outRow
            Return CType(Me.NewRow,pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_punch_employee_in_outRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_punch_employee_in_outRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanged(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_punch_employee_in_outRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanging(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleted(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleting(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRow
        Inherits DataRow
        
        Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_punch_employee_in_out = CType(Me.Table,pay_punch_employee_in_outDataTable)
        End Sub
        
        Public Property id_punch_in_out As Integer
            Get
                Return CType(Me(Me.tablepay_punch_employee_in_out.id_punch_in_outColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.id_punch_in_outColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property action_Time As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.action_TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.action_TimeColumn) = value
            End Set
        End Property
        
        Public Property in_out_type As Short
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.in_out_typeColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.in_out_typeColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_TimeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.action_TimeColumn)
        End Function
        
        Public Sub Setaction_TimeNull()
            Me(Me.tablepay_punch_employee_in_out.action_TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isin_out_typeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.in_out_typeColumn)
        End Function
        
        Public Sub Setin_out_typeNull()
            Me(Me.tablepay_punch_employee_in_out.in_out_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_punch_employee_in_outRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_punch_employee_in_outRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_punch_employee_in_outRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_employee_timesheetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columntimesheet_date As DataColumn
        
        Private columnaction_time_hour As DataColumn
        
        Private columnaction_time_minute As DataColumn
        
        Private columncalculate As DataColumn
        
        Private columnAction_Time As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_employee_timesheet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property timesheet_dateColumn As DataColumn
            Get
                Return Me.columntimesheet_date
            End Get
        End Property
        
        Friend ReadOnly Property action_time_hourColumn As DataColumn
            Get
                Return Me.columnaction_time_hour
            End Get
        End Property
        
        Friend ReadOnly Property action_time_minuteColumn As DataColumn
            Get
                Return Me.columnaction_time_minute
            End Get
        End Property
        
        Friend ReadOnly Property calculateColumn As DataColumn
            Get
                Return Me.columncalculate
            End Get
        End Property
        
        Friend ReadOnly Property Action_TimeColumn As DataColumn
            Get
                Return Me.columnAction_Time
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_employee_timesheetRow
            Get
                Return CType(Me.Rows(index),pay_employee_timesheetRow)
            End Get
        End Property
        
        Public Event pay_employee_timesheetRowChanged As pay_employee_timesheetRowChangeEventHandler
        
        Public Event pay_employee_timesheetRowChanging As pay_employee_timesheetRowChangeEventHandler
        
        Public Event pay_employee_timesheetRowDeleted As pay_employee_timesheetRowChangeEventHandler
        
        Public Event pay_employee_timesheetRowDeleting As pay_employee_timesheetRowChangeEventHandler
        
        Public Overloads Sub Addpay_employee_timesheetRow(ByVal row As pay_employee_timesheetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_employee_timesheetRow(ByVal employee_code As String, ByVal timesheet_date As String, ByVal action_time_hour As String, ByVal action_time_minute As String, ByVal calculate As Boolean, ByVal Action_Time As String) As pay_employee_timesheetRow
            Dim rowpay_employee_timesheetRow As pay_employee_timesheetRow = CType(Me.NewRow,pay_employee_timesheetRow)
            rowpay_employee_timesheetRow.ItemArray = New Object() {employee_code, timesheet_date, action_time_hour, action_time_minute, calculate, Action_Time}
            Me.Rows.Add(rowpay_employee_timesheetRow)
            Return rowpay_employee_timesheetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_employee_timesheetDataTable = CType(MyBase.Clone,pay_employee_timesheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_employee_timesheetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columntimesheet_date = Me.Columns("timesheet_date")
            Me.columnaction_time_hour = Me.Columns("action_time_hour")
            Me.columnaction_time_minute = Me.Columns("action_time_minute")
            Me.columncalculate = Me.Columns("calculate")
            Me.columnAction_Time = Me.Columns("Action_Time")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columntimesheet_date = New DataColumn("timesheet_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimesheet_date)
            Me.columnaction_time_hour = New DataColumn("action_time_hour", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_time_hour)
            Me.columnaction_time_minute = New DataColumn("action_time_minute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_time_minute)
            Me.columncalculate = New DataColumn("calculate", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncalculate)
            Me.columnAction_Time = New DataColumn("Action_Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAction_Time)
            Me.columnAction_Time.ReadOnly = true
        End Sub
        
        Public Function Newpay_employee_timesheetRow() As pay_employee_timesheetRow
            Return CType(Me.NewRow,pay_employee_timesheetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_employee_timesheetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_employee_timesheetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_employee_timesheetRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_employee_timesheetRowChanged(Me, New pay_employee_timesheetRowChangeEvent(CType(e.Row,pay_employee_timesheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_employee_timesheetRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_employee_timesheetRowChanging(Me, New pay_employee_timesheetRowChangeEvent(CType(e.Row,pay_employee_timesheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_employee_timesheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_employee_timesheetRowDeleted(Me, New pay_employee_timesheetRowChangeEvent(CType(e.Row,pay_employee_timesheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_employee_timesheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_employee_timesheetRowDeleting(Me, New pay_employee_timesheetRowChangeEvent(CType(e.Row,pay_employee_timesheetRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_employee_timesheetRow(ByVal row As pay_employee_timesheetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_employee_timesheetRow
        Inherits DataRow
        
        Private tablepay_employee_timesheet As pay_employee_timesheetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_employee_timesheet = CType(Me.Table,pay_employee_timesheetDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property timesheet_date As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.timesheet_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.timesheet_dateColumn) = value
            End Set
        End Property
        
        Public Property action_time_hour As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.action_time_hourColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.action_time_hourColumn) = value
            End Set
        End Property
        
        Public Property action_time_minute As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.action_time_minuteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.action_time_minuteColumn) = value
            End Set
        End Property
        
        Public Property calculate As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.calculateColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.calculateColumn) = value
            End Set
        End Property
        
        Public Property Action_Time As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_employee_timesheet.Action_TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_employee_timesheet.Action_TimeColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_employee_timesheet.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istimesheet_dateNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.timesheet_dateColumn)
        End Function
        
        Public Sub Settimesheet_dateNull()
            Me(Me.tablepay_employee_timesheet.timesheet_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_time_hourNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.action_time_hourColumn)
        End Function
        
        Public Sub Setaction_time_hourNull()
            Me(Me.tablepay_employee_timesheet.action_time_hourColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_time_minuteNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.action_time_minuteColumn)
        End Function
        
        Public Sub Setaction_time_minuteNull()
            Me(Me.tablepay_employee_timesheet.action_time_minuteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscalculateNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.calculateColumn)
        End Function
        
        Public Sub SetcalculateNull()
            Me(Me.tablepay_employee_timesheet.calculateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAction_TimeNull() As Boolean
            Return Me.IsNull(Me.tablepay_employee_timesheet.Action_TimeColumn)
        End Function
        
        Public Sub SetAction_TimeNull()
            Me(Me.tablepay_employee_timesheet.Action_TimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_employee_timesheetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_employee_timesheetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_employee_timesheetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_employee_timesheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnYearNo As DataColumn
        
        Friend Sub New()
            MyBase.New("Years")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property YearNoColumn As DataColumn
            Get
                Return Me.columnYearNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearsRow
            Get
                Return CType(Me.Rows(index),YearsRow)
            End Get
        End Property
        
        Public Event YearsRowChanged As YearsRowChangeEventHandler
        
        Public Event YearsRowChanging As YearsRowChangeEventHandler
        
        Public Event YearsRowDeleted As YearsRowChangeEventHandler
        
        Public Event YearsRowDeleting As YearsRowChangeEventHandler
        
        Public Overloads Sub AddYearsRow(ByVal row As YearsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddYearsRow(ByVal YearNo As String) As YearsRow
            Dim rowYearsRow As YearsRow = CType(Me.NewRow,YearsRow)
            rowYearsRow.ItemArray = New Object() {YearNo}
            Me.Rows.Add(rowYearsRow)
            Return rowYearsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As YearsDataTable = CType(MyBase.Clone,YearsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New YearsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnYearNo = Me.Columns("YearNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnYearNo = New DataColumn("YearNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearNo)
            Me.columnYearNo.ReadOnly = true
        End Sub
        
        Public Function NewYearsRow() As YearsRow
            Return CType(Me.NewRow,YearsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New YearsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(YearsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearsRowChangedEvent) Is Nothing) Then
                RaiseEvent YearsRowChanged(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearsRowChangingEvent) Is Nothing) Then
                RaiseEvent YearsRowChanging(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearsRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearsRowDeleted(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearsRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearsRowDeleting(Me, New YearsRowChangeEvent(CType(e.Row,YearsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveYearsRow(ByVal row As YearsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsRow
        Inherits DataRow
        
        Private tableYears As YearsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableYears = CType(Me.Table,YearsDataTable)
        End Sub
        
        Public Property YearNo As String
            Get
                Try 
                    Return CType(Me(Me.tableYears.YearNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableYears.YearNoColumn) = value
            End Set
        End Property
        
        Public Function IsYearNoNull() As Boolean
            Return Me.IsNull(Me.tableYears.YearNoColumn)
        End Function
        
        Public Sub SetYearNoNull()
            Me(Me.tableYears.YearNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class YearsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As YearsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As YearsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As YearsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
