'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepEmployeeTime
    Inherits DataSet
    
    Private tableemployee_position As employee_positionDataTable
    
    Private tableemployee As employeeDataTable
    
    Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
    
    Private tableSummary As SummaryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee_position")) Is Nothing) Then
                Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
            End If
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
                Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
            End If
            If (Not (ds.Tables("Summary")) Is Nothing) Then
                Me.Tables.Add(New SummaryDataTable(ds.Tables("Summary")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee_position As employee_positionDataTable
        Get
            Return Me.tableemployee_position
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        Get
            Return Me.tablepay_punch_employee_in_out
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Summary As SummaryDataTable
        Get
            Return Me.tableSummary
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepEmployeeTime = CType(MyBase.Clone,DSFrmRepEmployeeTime)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee_position")) Is Nothing) Then
            Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
        End If
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("pay_punch_employee_in_out")) Is Nothing) Then
            Me.Tables.Add(New pay_punch_employee_in_outDataTable(ds.Tables("pay_punch_employee_in_out")))
        End If
        If (Not (ds.Tables("Summary")) Is Nothing) Then
            Me.Tables.Add(New SummaryDataTable(ds.Tables("Summary")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee_position = CType(Me.Tables("employee_position"),employee_positionDataTable)
        If (Not (Me.tableemployee_position) Is Nothing) Then
            Me.tableemployee_position.InitVars
        End If
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tablepay_punch_employee_in_out = CType(Me.Tables("pay_punch_employee_in_out"),pay_punch_employee_in_outDataTable)
        If (Not (Me.tablepay_punch_employee_in_out) Is Nothing) Then
            Me.tablepay_punch_employee_in_out.InitVars
        End If
        Me.tableSummary = CType(Me.Tables("Summary"),SummaryDataTable)
        If (Not (Me.tableSummary) Is Nothing) Then
            Me.tableSummary.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepEmployeeTime"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepEmployeeTime.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee_position = New employee_positionDataTable
        Me.Tables.Add(Me.tableemployee_position)
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tablepay_punch_employee_in_out = New pay_punch_employee_in_outDataTable
        Me.Tables.Add(Me.tablepay_punch_employee_in_out)
        Me.tableSummary = New SummaryDataTable
        Me.Tables.Add(Me.tableSummary)
    End Sub
    
    Private Function ShouldSerializeemployee_position() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_punch_employee_in_out() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSummary() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employee_positionRowChangeEventHandler(ByVal sender As Object, ByVal e As employee_positionRowChangeEvent)
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub pay_punch_employee_in_outRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_punch_employee_in_outRowChangeEvent)
    
    Public Delegate Sub SummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As SummaryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncode As DataColumn
        
        Private columnName As DataColumn
        
        Private columnFlag As DataColumn
        
        Friend Sub New()
            MyBase.New("employee_position")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codeColumn As DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property FlagColumn As DataColumn
            Get
                Return Me.columnFlag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee_positionRow
            Get
                Return CType(Me.Rows(index),employee_positionRow)
            End Get
        End Property
        
        Public Event employee_positionRowChanged As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowChanging As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleted As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleting As employee_positionRowChangeEventHandler
        
        Public Overloads Sub Addemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee_positionRow(ByVal code As String, ByVal Name As String, ByVal Flag As Boolean) As employee_positionRow
            Dim rowemployee_positionRow As employee_positionRow = CType(Me.NewRow,employee_positionRow)
            rowemployee_positionRow.ItemArray = New Object() {code, Name, Flag}
            Me.Rows.Add(rowemployee_positionRow)
            Return rowemployee_positionRow
        End Function
        
        Public Function FindBycode(ByVal code As String) As employee_positionRow
            Return CType(Me.Rows.Find(New Object() {code}),employee_positionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee_positionDataTable = CType(MyBase.Clone,employee_positionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee_positionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncode = Me.Columns("code")
            Me.columnName = Me.Columns("Name")
            Me.columnFlag = Me.Columns("Flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncode = New DataColumn("code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncode)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnFlag = New DataColumn("Flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncode}, true))
            Me.columncode.AllowDBNull = false
            Me.columncode.Unique = true
        End Sub
        
        Public Function Newemployee_positionRow() As employee_positionRow
            Return CType(Me.NewRow,employee_positionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee_positionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee_positionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee_positionRowChangedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanged(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee_positionRowChangingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanging(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee_positionRowDeletedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleted(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee_positionRowDeletingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleting(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRow
        Inherits DataRow
        
        Private tableemployee_position As employee_positionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee_position = CType(Me.Table,employee_positionDataTable)
        End Sub
        
        Public Property code As String
            Get
                Return CType(Me(Me.tableemployee_position.codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee_position.codeColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_position.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_position.NameColumn) = value
            End Set
        End Property
        
        Public Property Flag As Boolean
            Get
                If Me.IsFlagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableemployee_position.FlagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableemployee_position.FlagColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableemployee_position.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableemployee_position.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagNull() As Boolean
            Return Me.IsNull(Me.tableemployee_position.FlagColumn)
        End Function
        
        Public Sub SetFlagNull()
            Me(Me.tableemployee_position.FlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee_positionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee_positionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee_positionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCode As DataColumn
        
        Private columnName As DataColumn
        
        Private columnFlag As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property FlagColumn As DataColumn
            Get
                Return Me.columnFlag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal Code As String, ByVal Name As String, ByVal Flag As Boolean) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {Code, Name, Flag}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByCode(ByVal Code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {Code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCode = Me.Columns("Code")
            Me.columnName = Me.Columns("Name")
            Me.columnFlag = Me.Columns("Flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnCode = New DataColumn("Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnFlag = New DataColumn("Flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCode}, true))
            Me.columnCode.AllowDBNull = false
            Me.columnCode.Unique = true
            Me.columnName.ReadOnly = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property Code As String
            Get
                Return CType(Me(Me.tableemployee.CodeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.CodeColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.NameColumn) = value
            End Set
        End Property
        
        Public Property Flag As Boolean
            Get
                If Me.IsFlagNull Then
                    Return false
                Else
                    Return CType(Me(Me.tableemployee.FlagColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableemployee.FlagColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableemployee.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagNull() As Boolean
            Return Me.IsNull(Me.tableemployee.FlagColumn)
        End Function
        
        Public Sub SetFlagNull()
            Me(Me.tableemployee.FlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_punch_in As DataColumn
        
        Private columnemployee_code As DataColumn
        
        Private columnIn_Time As DataColumn
        
        Private columnaction_date As DataColumn
        
        Private columnpunch_note_code As DataColumn
        
        Private columnOut_Time As DataColumn
        
        Private columnHours As DataColumn
        
        Private columnEmployeeFullName As DataColumn
        
        Private columnid_punch_out As DataColumn
        
        Private columnTotalHours As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_punch_employee_in_out")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_punch_inColumn As DataColumn
            Get
                Return Me.columnid_punch_in
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property In_TimeColumn As DataColumn
            Get
                Return Me.columnIn_Time
            End Get
        End Property
        
        Friend ReadOnly Property action_dateColumn As DataColumn
            Get
                Return Me.columnaction_date
            End Get
        End Property
        
        Friend ReadOnly Property punch_note_codeColumn As DataColumn
            Get
                Return Me.columnpunch_note_code
            End Get
        End Property
        
        Friend ReadOnly Property Out_TimeColumn As DataColumn
            Get
                Return Me.columnOut_Time
            End Get
        End Property
        
        Friend ReadOnly Property HoursColumn As DataColumn
            Get
                Return Me.columnHours
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeFullNameColumn As DataColumn
            Get
                Return Me.columnEmployeeFullName
            End Get
        End Property
        
        Friend ReadOnly Property id_punch_outColumn As DataColumn
            Get
                Return Me.columnid_punch_out
            End Get
        End Property
        
        Friend ReadOnly Property TotalHoursColumn As DataColumn
            Get
                Return Me.columnTotalHours
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_punch_employee_in_outRow
            Get
                Return CType(Me.Rows(index),pay_punch_employee_in_outRow)
            End Get
        End Property
        
        Public Event pay_punch_employee_in_outRowChanged As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowChanging As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleted As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Event pay_punch_employee_in_outRowDeleting As pay_punch_employee_in_outRowChangeEventHandler
        
        Public Overloads Sub Addpay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_punch_employee_in_outRow(ByVal employee_code As String, ByVal In_Time As String, ByVal action_date As String, ByVal punch_note_code As String, ByVal Out_Time As String, ByVal Hours As String, ByVal EmployeeFullName As String, ByVal id_punch_out As Integer, ByVal TotalHours As String) As pay_punch_employee_in_outRow
            Dim rowpay_punch_employee_in_outRow As pay_punch_employee_in_outRow = CType(Me.NewRow,pay_punch_employee_in_outRow)
            rowpay_punch_employee_in_outRow.ItemArray = New Object() {Nothing, employee_code, In_Time, action_date, punch_note_code, Out_Time, Hours, EmployeeFullName, id_punch_out, TotalHours}
            Me.Rows.Add(rowpay_punch_employee_in_outRow)
            Return rowpay_punch_employee_in_outRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_punch_employee_in_outDataTable = CType(MyBase.Clone,pay_punch_employee_in_outDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_punch_employee_in_outDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_punch_in = Me.Columns("id_punch_in")
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnIn_Time = Me.Columns("In_Time")
            Me.columnaction_date = Me.Columns("action_date")
            Me.columnpunch_note_code = Me.Columns("punch_note_code")
            Me.columnOut_Time = Me.Columns("Out_Time")
            Me.columnHours = Me.Columns("Hours")
            Me.columnEmployeeFullName = Me.Columns("EmployeeFullName")
            Me.columnid_punch_out = Me.Columns("id_punch_out")
            Me.columnTotalHours = Me.Columns("TotalHours")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_punch_in = New DataColumn("id_punch_in", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_punch_in)
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnIn_Time = New DataColumn("In_Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIn_Time)
            Me.columnaction_date = New DataColumn("action_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_date)
            Me.columnpunch_note_code = New DataColumn("punch_note_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpunch_note_code)
            Me.columnOut_Time = New DataColumn("Out_Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOut_Time)
            Me.columnHours = New DataColumn("Hours", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHours)
            Me.columnEmployeeFullName = New DataColumn("EmployeeFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeFullName)
            Me.columnid_punch_out = New DataColumn("id_punch_out", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_punch_out)
            Me.columnTotalHours = New DataColumn("TotalHours", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHours)
            Me.columnid_punch_in.AutoIncrement = true
            Me.columnid_punch_in.AllowDBNull = false
            Me.columnid_punch_in.ReadOnly = true
        End Sub
        
        Public Function Newpay_punch_employee_in_outRow() As pay_punch_employee_in_outRow
            Return CType(Me.NewRow,pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_punch_employee_in_outRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_punch_employee_in_outRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_punch_employee_in_outRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanged(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_punch_employee_in_outRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowChanging(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleted(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_punch_employee_in_outRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_punch_employee_in_outRowDeleting(Me, New pay_punch_employee_in_outRowChangeEvent(CType(e.Row,pay_punch_employee_in_outRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_punch_employee_in_outRow(ByVal row As pay_punch_employee_in_outRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRow
        Inherits DataRow
        
        Private tablepay_punch_employee_in_out As pay_punch_employee_in_outDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_punch_employee_in_out = CType(Me.Table,pay_punch_employee_in_outDataTable)
        End Sub
        
        Public Property id_punch_in As Integer
            Get
                Return CType(Me(Me.tablepay_punch_employee_in_out.id_punch_inColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.id_punch_inColumn) = value
            End Set
        End Property
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property In_Time As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.In_TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.In_TimeColumn) = value
            End Set
        End Property
        
        Public Property action_date As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.action_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.action_dateColumn) = value
            End Set
        End Property
        
        Public Property punch_note_code As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn) = value
            End Set
        End Property
        
        Public Property Out_Time As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.Out_TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.Out_TimeColumn) = value
            End Set
        End Property
        
        Public Property Hours As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.HoursColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.HoursColumn) = value
            End Set
        End Property
        
        Public Property EmployeeFullName As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.EmployeeFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.EmployeeFullNameColumn) = value
            End Set
        End Property
        
        Public Property id_punch_out As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.id_punch_outColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.id_punch_outColumn) = value
            End Set
        End Property
        
        Public Property TotalHours As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_punch_employee_in_out.TotalHoursColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_punch_employee_in_out.TotalHoursColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tablepay_punch_employee_in_out.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIn_TimeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.In_TimeColumn)
        End Function
        
        Public Sub SetIn_TimeNull()
            Me(Me.tablepay_punch_employee_in_out.In_TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_dateNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.action_dateColumn)
        End Function
        
        Public Sub Setaction_dateNull()
            Me(Me.tablepay_punch_employee_in_out.action_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispunch_note_codeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.punch_note_codeColumn)
        End Function
        
        Public Sub Setpunch_note_codeNull()
            Me(Me.tablepay_punch_employee_in_out.punch_note_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOut_TimeNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.Out_TimeColumn)
        End Function
        
        Public Sub SetOut_TimeNull()
            Me(Me.tablepay_punch_employee_in_out.Out_TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHoursNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.HoursColumn)
        End Function
        
        Public Sub SetHoursNull()
            Me(Me.tablepay_punch_employee_in_out.HoursColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmployeeFullNameNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.EmployeeFullNameColumn)
        End Function
        
        Public Sub SetEmployeeFullNameNull()
            Me(Me.tablepay_punch_employee_in_out.EmployeeFullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_punch_outNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.id_punch_outColumn)
        End Function
        
        Public Sub Setid_punch_outNull()
            Me(Me.tablepay_punch_employee_in_out.id_punch_outColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalHoursNull() As Boolean
            Return Me.IsNull(Me.tablepay_punch_employee_in_out.TotalHoursColumn)
        End Function
        
        Public Sub SetTotalHoursNull()
            Me(Me.tablepay_punch_employee_in_out.TotalHoursColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_punch_employee_in_outRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_punch_employee_in_outRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_punch_employee_in_outRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_punch_employee_in_outRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnEmployeeFullName As DataColumn
        
        Private columnTotalHours As DataColumn
        
        Friend Sub New()
            MyBase.New("Summary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeFullNameColumn As DataColumn
            Get
                Return Me.columnEmployeeFullName
            End Get
        End Property
        
        Friend ReadOnly Property TotalHoursColumn As DataColumn
            Get
                Return Me.columnTotalHours
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SummaryRow
            Get
                Return CType(Me.Rows(index),SummaryRow)
            End Get
        End Property
        
        Public Event SummaryRowChanged As SummaryRowChangeEventHandler
        
        Public Event SummaryRowChanging As SummaryRowChangeEventHandler
        
        Public Event SummaryRowDeleted As SummaryRowChangeEventHandler
        
        Public Event SummaryRowDeleting As SummaryRowChangeEventHandler
        
        Public Overloads Sub AddSummaryRow(ByVal row As SummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSummaryRow(ByVal employee_code As String, ByVal EmployeeFullName As String, ByVal TotalHours As String) As SummaryRow
            Dim rowSummaryRow As SummaryRow = CType(Me.NewRow,SummaryRow)
            rowSummaryRow.ItemArray = New Object() {employee_code, EmployeeFullName, TotalHours}
            Me.Rows.Add(rowSummaryRow)
            Return rowSummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SummaryDataTable = CType(MyBase.Clone,SummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnEmployeeFullName = Me.Columns("EmployeeFullName")
            Me.columnTotalHours = Me.Columns("TotalHours")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnEmployeeFullName = New DataColumn("EmployeeFullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeFullName)
            Me.columnTotalHours = New DataColumn("TotalHours", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHours)
        End Sub
        
        Public Function NewSummaryRow() As SummaryRow
            Return CType(Me.NewRow,SummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent SummaryRowChanged(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent SummaryRowChanging(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent SummaryRowDeleted(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent SummaryRowDeleting(Me, New SummaryRowChangeEvent(CType(e.Row,SummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSummaryRow(ByVal row As SummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryRow
        Inherits DataRow
        
        Private tableSummary As SummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSummary = CType(Me.Table,SummaryDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Try 
                    Return CType(Me(Me.tableSummary.employee_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property EmployeeFullName As String
            Get
                Try 
                    Return CType(Me(Me.tableSummary.EmployeeFullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.EmployeeFullNameColumn) = value
            End Set
        End Property
        
        Public Property TotalHours As String
            Get
                Try 
                    Return CType(Me(Me.tableSummary.TotalHoursColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummary.TotalHoursColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_codeNull() As Boolean
            Return Me.IsNull(Me.tableSummary.employee_codeColumn)
        End Function
        
        Public Sub Setemployee_codeNull()
            Me(Me.tableSummary.employee_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmployeeFullNameNull() As Boolean
            Return Me.IsNull(Me.tableSummary.EmployeeFullNameColumn)
        End Function
        
        Public Sub SetEmployeeFullNameNull()
            Me(Me.tableSummary.EmployeeFullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalHoursNull() As Boolean
            Return Me.IsNull(Me.tableSummary.TotalHoursColumn)
        End Function
        
        Public Sub SetTotalHoursNull()
            Me(Me.tableSummary.TotalHoursColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
