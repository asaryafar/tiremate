'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsFrmCheckDataConsistancy1
    Inherits DataSet
    
    Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableView_Customer_Balance As View_Customer_BalanceDataTable
    
    Private tableSP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
    
    Private tableSP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
    
    Private tableSP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
    
    Private tableSP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
    
    Private tableSP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
    
    Private tableSP_CustomerBalance As SP_CustomerBalanceDataTable
    
    Private tableAdjustmentall As AdjustmentallDataTable
    
    Private tableGL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
    
    Private tableGL_account_adjustment_dtl_dtl As GL_account_adjustment_dtl_dtlDataTable
    
    Private tableGl_Payment_deposit_head_dtl As Gl_Payment_deposit_head_dtlDataTable
    
    Private tableGlreceivepayment As GlreceivepaymentDataTable
    
    Private tableView1 As View1DataTable
    
    Private tableoutpo As outpoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("View_Customer_Balance")) Is Nothing) Then
                Me.Tables.Add(New View_Customer_BalanceDataTable(ds.Tables("View_Customer_Balance")))
            End If
            If (Not (ds.Tables("SP_CustomerAging31to60")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging31to60DataTable(ds.Tables("SP_CustomerAging31to60")))
            End If
            If (Not (ds.Tables("SP_CustomerAging61to90")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging61to90DataTable(ds.Tables("SP_CustomerAging61to90")))
            End If
            If (Not (ds.Tables("SP_CustomerAgingNotDueYet")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAgingNotDueYetDataTable(ds.Tables("SP_CustomerAgingNotDueYet")))
            End If
            If (Not (ds.Tables("SP_CustomerAgingOver90")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAgingOver90DataTable(ds.Tables("SP_CustomerAgingOver90")))
            End If
            If (Not (ds.Tables("SP_CustomerAging1to30")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging1to30DataTable(ds.Tables("SP_CustomerAging1to30")))
            End If
            If (Not (ds.Tables("SP_CustomerBalance")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerBalanceDataTable(ds.Tables("SP_CustomerBalance")))
            End If
            If (Not (ds.Tables("Adjustmentall")) Is Nothing) Then
                Me.Tables.Add(New AdjustmentallDataTable(ds.Tables("Adjustmentall")))
            End If
            If (Not (ds.Tables("GL_account_adjustment_dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_dtlDataTable(ds.Tables("GL_account_adjustment_dtl")))
            End If
            If (Not (ds.Tables("GL_account_adjustment_dtl_dtl")) Is Nothing) Then
                Me.Tables.Add(New GL_account_adjustment_dtl_dtlDataTable(ds.Tables("GL_account_adjustment_dtl_dtl")))
            End If
            If (Not (ds.Tables("Gl_Payment_deposit_head_dtl")) Is Nothing) Then
                Me.Tables.Add(New Gl_Payment_deposit_head_dtlDataTable(ds.Tables("Gl_Payment_deposit_head_dtl")))
            End If
            If (Not (ds.Tables("Glreceivepayment")) Is Nothing) Then
                Me.Tables.Add(New GlreceivepaymentDataTable(ds.Tables("Glreceivepayment")))
            End If
            If (Not (ds.Tables("View1")) Is Nothing) Then
                Me.Tables.Add(New View1DataTable(ds.Tables("View1")))
            End If
            If (Not (ds.Tables("outpo")) Is Nothing) Then
                Me.Tables.Add(New outpoDataTable(ds.Tables("outpo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_head As GL_account_adjustment_headDataTable
        Get
            Return Me.tableGL_account_adjustment_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_Customer_Balance As View_Customer_BalanceDataTable
        Get
            Return Me.tableView_Customer_Balance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
        Get
            Return Me.tableSP_CustomerAging31to60
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
        Get
            Return Me.tableSP_CustomerAging61to90
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
        Get
            Return Me.tableSP_CustomerAgingNotDueYet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
        Get
            Return Me.tableSP_CustomerAgingOver90
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
        Get
            Return Me.tableSP_CustomerAging1to30
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerBalance As SP_CustomerBalanceDataTable
        Get
            Return Me.tableSP_CustomerBalance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adjustmentall As AdjustmentallDataTable
        Get
            Return Me.tableAdjustmentall
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
        Get
            Return Me.tableGL_account_adjustment_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_account_adjustment_dtl_dtl As GL_account_adjustment_dtl_dtlDataTable
        Get
            Return Me.tableGL_account_adjustment_dtl_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Gl_Payment_deposit_head_dtl As Gl_Payment_deposit_head_dtlDataTable
        Get
            Return Me.tableGl_Payment_deposit_head_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Glreceivepayment As GlreceivepaymentDataTable
        Get
            Return Me.tableGlreceivepayment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View1 As View1DataTable
        Get
            Return Me.tableView1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property outpo As outpoDataTable
        Get
            Return Me.tableoutpo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsFrmCheckDataConsistancy1 = CType(MyBase.Clone,DsFrmCheckDataConsistancy1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_account_adjustment_head")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_headDataTable(ds.Tables("GL_account_adjustment_head")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("View_Customer_Balance")) Is Nothing) Then
            Me.Tables.Add(New View_Customer_BalanceDataTable(ds.Tables("View_Customer_Balance")))
        End If
        If (Not (ds.Tables("SP_CustomerAging31to60")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging31to60DataTable(ds.Tables("SP_CustomerAging31to60")))
        End If
        If (Not (ds.Tables("SP_CustomerAging61to90")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging61to90DataTable(ds.Tables("SP_CustomerAging61to90")))
        End If
        If (Not (ds.Tables("SP_CustomerAgingNotDueYet")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAgingNotDueYetDataTable(ds.Tables("SP_CustomerAgingNotDueYet")))
        End If
        If (Not (ds.Tables("SP_CustomerAgingOver90")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAgingOver90DataTable(ds.Tables("SP_CustomerAgingOver90")))
        End If
        If (Not (ds.Tables("SP_CustomerAging1to30")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging1to30DataTable(ds.Tables("SP_CustomerAging1to30")))
        End If
        If (Not (ds.Tables("SP_CustomerBalance")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerBalanceDataTable(ds.Tables("SP_CustomerBalance")))
        End If
        If (Not (ds.Tables("Adjustmentall")) Is Nothing) Then
            Me.Tables.Add(New AdjustmentallDataTable(ds.Tables("Adjustmentall")))
        End If
        If (Not (ds.Tables("GL_account_adjustment_dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_dtlDataTable(ds.Tables("GL_account_adjustment_dtl")))
        End If
        If (Not (ds.Tables("GL_account_adjustment_dtl_dtl")) Is Nothing) Then
            Me.Tables.Add(New GL_account_adjustment_dtl_dtlDataTable(ds.Tables("GL_account_adjustment_dtl_dtl")))
        End If
        If (Not (ds.Tables("Gl_Payment_deposit_head_dtl")) Is Nothing) Then
            Me.Tables.Add(New Gl_Payment_deposit_head_dtlDataTable(ds.Tables("Gl_Payment_deposit_head_dtl")))
        End If
        If (Not (ds.Tables("Glreceivepayment")) Is Nothing) Then
            Me.Tables.Add(New GlreceivepaymentDataTable(ds.Tables("Glreceivepayment")))
        End If
        If (Not (ds.Tables("View1")) Is Nothing) Then
            Me.Tables.Add(New View1DataTable(ds.Tables("View1")))
        End If
        If (Not (ds.Tables("outpo")) Is Nothing) Then
            Me.Tables.Add(New outpoDataTable(ds.Tables("outpo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_account_adjustment_head = CType(Me.Tables("GL_account_adjustment_head"),GL_account_adjustment_headDataTable)
        If (Not (Me.tableGL_account_adjustment_head) Is Nothing) Then
            Me.tableGL_account_adjustment_head.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableView_Customer_Balance = CType(Me.Tables("View_Customer_Balance"),View_Customer_BalanceDataTable)
        If (Not (Me.tableView_Customer_Balance) Is Nothing) Then
            Me.tableView_Customer_Balance.InitVars
        End If
        Me.tableSP_CustomerAging31to60 = CType(Me.Tables("SP_CustomerAging31to60"),SP_CustomerAging31to60DataTable)
        If (Not (Me.tableSP_CustomerAging31to60) Is Nothing) Then
            Me.tableSP_CustomerAging31to60.InitVars
        End If
        Me.tableSP_CustomerAging61to90 = CType(Me.Tables("SP_CustomerAging61to90"),SP_CustomerAging61to90DataTable)
        If (Not (Me.tableSP_CustomerAging61to90) Is Nothing) Then
            Me.tableSP_CustomerAging61to90.InitVars
        End If
        Me.tableSP_CustomerAgingNotDueYet = CType(Me.Tables("SP_CustomerAgingNotDueYet"),SP_CustomerAgingNotDueYetDataTable)
        If (Not (Me.tableSP_CustomerAgingNotDueYet) Is Nothing) Then
            Me.tableSP_CustomerAgingNotDueYet.InitVars
        End If
        Me.tableSP_CustomerAgingOver90 = CType(Me.Tables("SP_CustomerAgingOver90"),SP_CustomerAgingOver90DataTable)
        If (Not (Me.tableSP_CustomerAgingOver90) Is Nothing) Then
            Me.tableSP_CustomerAgingOver90.InitVars
        End If
        Me.tableSP_CustomerAging1to30 = CType(Me.Tables("SP_CustomerAging1to30"),SP_CustomerAging1to30DataTable)
        If (Not (Me.tableSP_CustomerAging1to30) Is Nothing) Then
            Me.tableSP_CustomerAging1to30.InitVars
        End If
        Me.tableSP_CustomerBalance = CType(Me.Tables("SP_CustomerBalance"),SP_CustomerBalanceDataTable)
        If (Not (Me.tableSP_CustomerBalance) Is Nothing) Then
            Me.tableSP_CustomerBalance.InitVars
        End If
        Me.tableAdjustmentall = CType(Me.Tables("Adjustmentall"),AdjustmentallDataTable)
        If (Not (Me.tableAdjustmentall) Is Nothing) Then
            Me.tableAdjustmentall.InitVars
        End If
        Me.tableGL_account_adjustment_dtl = CType(Me.Tables("GL_account_adjustment_dtl"),GL_account_adjustment_dtlDataTable)
        If (Not (Me.tableGL_account_adjustment_dtl) Is Nothing) Then
            Me.tableGL_account_adjustment_dtl.InitVars
        End If
        Me.tableGL_account_adjustment_dtl_dtl = CType(Me.Tables("GL_account_adjustment_dtl_dtl"),GL_account_adjustment_dtl_dtlDataTable)
        If (Not (Me.tableGL_account_adjustment_dtl_dtl) Is Nothing) Then
            Me.tableGL_account_adjustment_dtl_dtl.InitVars
        End If
        Me.tableGl_Payment_deposit_head_dtl = CType(Me.Tables("Gl_Payment_deposit_head_dtl"),Gl_Payment_deposit_head_dtlDataTable)
        If (Not (Me.tableGl_Payment_deposit_head_dtl) Is Nothing) Then
            Me.tableGl_Payment_deposit_head_dtl.InitVars
        End If
        Me.tableGlreceivepayment = CType(Me.Tables("Glreceivepayment"),GlreceivepaymentDataTable)
        If (Not (Me.tableGlreceivepayment) Is Nothing) Then
            Me.tableGlreceivepayment.InitVars
        End If
        Me.tableView1 = CType(Me.Tables("View1"),View1DataTable)
        If (Not (Me.tableView1) Is Nothing) Then
            Me.tableView1.InitVars
        End If
        Me.tableoutpo = CType(Me.Tables("outpo"),outpoDataTable)
        If (Not (Me.tableoutpo) Is Nothing) Then
            Me.tableoutpo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsFrmCheckDataConsistancy1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsFrmCheckDataConsistancy1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_account_adjustment_head = New GL_account_adjustment_headDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_head)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableView_Customer_Balance = New View_Customer_BalanceDataTable
        Me.Tables.Add(Me.tableView_Customer_Balance)
        Me.tableSP_CustomerAging31to60 = New SP_CustomerAging31to60DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging31to60)
        Me.tableSP_CustomerAging61to90 = New SP_CustomerAging61to90DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging61to90)
        Me.tableSP_CustomerAgingNotDueYet = New SP_CustomerAgingNotDueYetDataTable
        Me.Tables.Add(Me.tableSP_CustomerAgingNotDueYet)
        Me.tableSP_CustomerAgingOver90 = New SP_CustomerAgingOver90DataTable
        Me.Tables.Add(Me.tableSP_CustomerAgingOver90)
        Me.tableSP_CustomerAging1to30 = New SP_CustomerAging1to30DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging1to30)
        Me.tableSP_CustomerBalance = New SP_CustomerBalanceDataTable
        Me.Tables.Add(Me.tableSP_CustomerBalance)
        Me.tableAdjustmentall = New AdjustmentallDataTable
        Me.Tables.Add(Me.tableAdjustmentall)
        Me.tableGL_account_adjustment_dtl = New GL_account_adjustment_dtlDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_dtl)
        Me.tableGL_account_adjustment_dtl_dtl = New GL_account_adjustment_dtl_dtlDataTable
        Me.Tables.Add(Me.tableGL_account_adjustment_dtl_dtl)
        Me.tableGl_Payment_deposit_head_dtl = New Gl_Payment_deposit_head_dtlDataTable
        Me.Tables.Add(Me.tableGl_Payment_deposit_head_dtl)
        Me.tableGlreceivepayment = New GlreceivepaymentDataTable
        Me.Tables.Add(Me.tableGlreceivepayment)
        Me.tableView1 = New View1DataTable
        Me.Tables.Add(Me.tableView1)
        Me.tableoutpo = New outpoDataTable
        Me.Tables.Add(Me.tableoutpo)
    End Sub
    
    Private Function ShouldSerializeGL_account_adjustment_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_Customer_Balance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging31to60() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging61to90() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAgingNotDueYet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAgingOver90() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging1to30() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerBalance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdjustmentall() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_adjustment_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_account_adjustment_dtl_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGl_Payment_deposit_head_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGlreceivepayment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeoutpo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_account_adjustment_headRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_headRowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub View_Customer_BalanceRowChangeEventHandler(ByVal sender As Object, ByVal e As View_Customer_BalanceRowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging31to60RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging31to60RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging61to90RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging61to90RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAgingNotDueYetRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAgingNotDueYetRowChangeEvent)
    
    Public Delegate Sub SP_CustomerAgingOver90RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAgingOver90RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging1to30RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging1to30RowChangeEvent)
    
    Public Delegate Sub SP_CustomerBalanceRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerBalanceRowChangeEvent)
    
    Public Delegate Sub AdjustmentallRowChangeEventHandler(ByVal sender As Object, ByVal e As AdjustmentallRowChangeEvent)
    
    Public Delegate Sub GL_account_adjustment_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_dtlRowChangeEvent)
    
    Public Delegate Sub GL_account_adjustment_dtl_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_account_adjustment_dtl_dtlRowChangeEvent)
    
    Public Delegate Sub Gl_Payment_deposit_head_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Gl_Payment_deposit_head_dtlRowChangeEvent)
    
    Public Delegate Sub GlreceivepaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As GlreceivepaymentRowChangeEvent)
    
    Public Delegate Sub View1RowChangeEventHandler(ByVal sender As Object, ByVal e As View1RowChangeEvent)
    
    Public Delegate Sub outpoRowChangeEventHandler(ByVal sender As Object, ByVal e As outpoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnamount_adjustment As DataColumn
        
        Private columndate_adjustment As DataColumn
        
        Private columnRemark As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnGl_receive_payment_Refrence_no As DataColumn
        
        Private columnfinance_charge_flag As DataColumn
        
        Private columnOld_Amount_adjustment As DataColumn
        
        Private columnFromStoreNo As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustmentColumn As DataColumn
            Get
                Return Me.columnamount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property date_adjustmentColumn As DataColumn
            Get
                Return Me.columndate_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property Gl_receive_payment_Refrence_noColumn As DataColumn
            Get
                Return Me.columnGl_receive_payment_Refrence_no
            End Get
        End Property
        
        Friend ReadOnly Property finance_charge_flagColumn As DataColumn
            Get
                Return Me.columnfinance_charge_flag
            End Get
        End Property
        
        Friend ReadOnly Property Old_Amount_adjustmentColumn As DataColumn
            Get
                Return Me.columnOld_Amount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property FromStoreNoColumn As DataColumn
            Get
                Return Me.columnFromStoreNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_headRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_headRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_headRowChanged As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowChanging As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleted As GL_account_adjustment_headRowChangeEventHandler
        
        Public Event GL_account_adjustment_headRowDeleting As GL_account_adjustment_headRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_headRow(ByVal refrence_no As String, ByVal cod_customer As String, ByVal amount_adjustment As Decimal, ByVal date_adjustment As String, ByVal Remark As String, ByVal GL_account As String, ByVal id_GL_journal As Integer, ByVal Gl_receive_payment_Refrence_no As String, ByVal finance_charge_flag As Boolean, ByVal Old_Amount_adjustment As Decimal, ByVal FromStoreNo As String) As GL_account_adjustment_headRow
            Dim rowGL_account_adjustment_headRow As GL_account_adjustment_headRow = CType(Me.NewRow,GL_account_adjustment_headRow)
            rowGL_account_adjustment_headRow.ItemArray = New Object() {refrence_no, cod_customer, amount_adjustment, date_adjustment, Remark, GL_account, id_GL_journal, Gl_receive_payment_Refrence_no, finance_charge_flag, Old_Amount_adjustment, FromStoreNo}
            Me.Rows.Add(rowGL_account_adjustment_headRow)
            Return rowGL_account_adjustment_headRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As GL_account_adjustment_headRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),GL_account_adjustment_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_headDataTable = CType(MyBase.Clone,GL_account_adjustment_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnamount_adjustment = Me.Columns("amount_adjustment")
            Me.columndate_adjustment = Me.Columns("date_adjustment")
            Me.columnRemark = Me.Columns("Remark")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnGl_receive_payment_Refrence_no = Me.Columns("Gl_receive_payment_Refrence_no")
            Me.columnfinance_charge_flag = Me.Columns("finance_charge_flag")
            Me.columnOld_Amount_adjustment = Me.Columns("Old_Amount_adjustment")
            Me.columnFromStoreNo = Me.Columns("FromStoreNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnamount_adjustment = New DataColumn("amount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment)
            Me.columndate_adjustment = New DataColumn("date_adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_adjustment)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnGl_receive_payment_Refrence_no = New DataColumn("Gl_receive_payment_Refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGl_receive_payment_Refrence_no)
            Me.columnfinance_charge_flag = New DataColumn("finance_charge_flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfinance_charge_flag)
            Me.columnOld_Amount_adjustment = New DataColumn("Old_Amount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOld_Amount_adjustment)
            Me.columnFromStoreNo = New DataColumn("FromStoreNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromStoreNo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
        End Sub
        
        Public Function NewGL_account_adjustment_headRow() As GL_account_adjustment_headRow
            Return CType(Me.NewRow,GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_headRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanged(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_headRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowChanging(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleted(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_headRowDeleting(Me, New GL_account_adjustment_headRowChangeEvent(CType(e.Row,GL_account_adjustment_headRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_headRow(ByVal row As GL_account_adjustment_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_head As GL_account_adjustment_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_head = CType(Me.Table,GL_account_adjustment_headDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_head.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property date_adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.RemarkColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Gl_receive_payment_Refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.Gl_receive_payment_Refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.Gl_receive_payment_Refrence_noColumn) = value
            End Set
        End Property
        
        Public Property finance_charge_flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.finance_charge_flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.finance_charge_flagColumn) = value
            End Set
        End Property
        
        Public Property Old_Amount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.Old_Amount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.Old_Amount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property FromStoreNo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_head.FromStoreNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_head.FromStoreNoColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_account_adjustment_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.amount_adjustmentColumn)
        End Function
        
        Public Sub Setamount_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.amount_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.date_adjustmentColumn)
        End Function
        
        Public Sub Setdate_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.date_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tableGL_account_adjustment_head.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_account_adjustment_head.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_account_adjustment_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGl_receive_payment_Refrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.Gl_receive_payment_Refrence_noColumn)
        End Function
        
        Public Sub SetGl_receive_payment_Refrence_noNull()
            Me(Me.tableGL_account_adjustment_head.Gl_receive_payment_Refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfinance_charge_flagNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.finance_charge_flagColumn)
        End Function
        
        Public Sub Setfinance_charge_flagNull()
            Me(Me.tableGL_account_adjustment_head.finance_charge_flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOld_Amount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.Old_Amount_adjustmentColumn)
        End Function
        
        Public Sub SetOld_Amount_adjustmentNull()
            Me(Me.tableGL_account_adjustment_head.Old_Amount_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromStoreNoNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_head.FromStoreNoColumn)
        End Function
        
        Public Sub SetFromStoreNoNull()
            Me(Me.tableGL_account_adjustment_head.FromStoreNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnNote As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property NoteColumn As DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow(ByVal id_service_center As String, ByVal sumpayment As Decimal, ByVal Note As String) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {id_service_center, sumpayment, Note}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function FindByid_service_center(ByVal id_service_center As String) As GL_payment_depositRow
            Return CType(Me.Rows.Find(New Object() {id_service_center}),GL_payment_depositRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnNote = Me.Columns("Note")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnNote = New DataColumn("Note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNote)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key2", New DataColumn() {Me.columnid_service_center}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnid_service_center.Unique = true
            Me.columnsumpayment.ReadOnly = true
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableGL_payment_deposit.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.sumpaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.NoteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.NoteColumn) = value
            End Set
        End Property
        
        Public Function IssumpaymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.sumpaymentColumn)
        End Function
        
        Public Sub SetsumpaymentNull()
            Me(Me.tableGL_payment_deposit.sumpaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.NoteColumn)
        End Function
        
        Public Sub SetNoteNull()
            Me(Me.tableGL_payment_deposit.NoteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columntype_of_form As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnid_vehicle As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntax As DataColumn
        
        Private columnhouse_comment As DataColumn
        
        Private columncust_comment As DataColumn
        
        Private columnadd_user As DataColumn
        
        Private columnchg_user As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnid_service_center_before As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property type_of_formColumn As DataColumn
            Get
                Return Me.columntype_of_form
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property id_vehicleColumn As DataColumn
            Get
                Return Me.columnid_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property house_commentColumn As DataColumn
            Get
                Return Me.columnhouse_comment
            End Get
        End Property
        
        Friend ReadOnly Property cust_commentColumn As DataColumn
            Get
                Return Me.columncust_comment
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property chg_userColumn As DataColumn
            Get
                Return Me.columnchg_user
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property id_service_center_beforeColumn As DataColumn
            Get
                Return Me.columnid_service_center_before
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal id_service_center As String, ByVal type_of_form As String, ByVal cod_customer As String, ByVal id_vehicle As Integer, ByVal date_refer As String, ByVal discount As Single, ByVal tax As Single, ByVal house_comment As String, ByVal cust_comment As String, ByVal add_user As Short, ByVal chg_user As Short, ByVal po_no As String, ByVal id_service_center_before As String, ByVal id_GL_journal As Integer, ByVal Total As Decimal) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {id_service_center, type_of_form, cod_customer, id_vehicle, date_refer, discount, tax, house_comment, cust_comment, add_user, chg_user, po_no, id_service_center_before, id_GL_journal, Total}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function FindByid_service_center(ByVal id_service_center As String) As service_center_headRow
            Return CType(Me.Rows.Find(New Object() {id_service_center}),service_center_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columntype_of_form = Me.Columns("type_of_form")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnid_vehicle = Me.Columns("id_vehicle")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columndiscount = Me.Columns("discount")
            Me.columntax = Me.Columns("tax")
            Me.columnhouse_comment = Me.Columns("house_comment")
            Me.columncust_comment = Me.Columns("cust_comment")
            Me.columnadd_user = Me.Columns("add_user")
            Me.columnchg_user = Me.Columns("chg_user")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnid_service_center_before = Me.Columns("id_service_center_before")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columntype_of_form = New DataColumn("type_of_form", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_of_form)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnid_vehicle = New DataColumn("id_vehicle", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vehicle)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntax = New DataColumn("tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnhouse_comment = New DataColumn("house_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comment)
            Me.columncust_comment = New DataColumn("cust_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_comment)
            Me.columnadd_user = New DataColumn("add_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columnchg_user = New DataColumn("chg_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchg_user)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnid_service_center_before = New DataColumn("id_service_center_before", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center_before)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_service_center}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnid_service_center.Unique = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_head.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property type_of_form As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.type_of_formColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.type_of_formColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property id_vehicle As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_vehicleColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_vehicleColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.discountColumn) = value
            End Set
        End Property
        
        Public Property tax As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.taxColumn) = value
            End Set
        End Property
        
        Public Property house_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.house_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.house_commentColumn) = value
            End Set
        End Property
        
        Public Property cust_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cust_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cust_commentColumn) = value
            End Set
        End Property
        
        Public Property add_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.add_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.add_userColumn) = value
            End Set
        End Property
        
        Public Property chg_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.chg_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.chg_userColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property id_service_center_before As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_service_center_beforeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_center_beforeColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.TotalColumn) = value
            End Set
        End Property
        
        Public Function Istype_of_formNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.type_of_formColumn)
        End Function
        
        Public Sub Settype_of_formNull()
            Me(Me.tableservice_center_head.type_of_formColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableservice_center_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_vehicleColumn)
        End Function
        
        Public Sub Setid_vehicleNull()
            Me(Me.tableservice_center_head.id_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_head.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableservice_center_head.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableservice_center_head.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.house_commentColumn)
        End Function
        
        Public Sub Sethouse_commentNull()
            Me(Me.tableservice_center_head.house_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cust_commentColumn)
        End Function
        
        Public Sub Setcust_commentNull()
            Me(Me.tableservice_center_head.cust_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableservice_center_head.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischg_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.chg_userColumn)
        End Function
        
        Public Sub Setchg_userNull()
            Me(Me.tableservice_center_head.chg_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableservice_center_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_center_beforeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_service_center_beforeColumn)
        End Function
        
        Public Sub Setid_service_center_beforeNull()
            Me(Me.tableservice_center_head.id_service_center_beforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableservice_center_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_head.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Customer_BalanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Private columnnotdue As DataColumn
        
        Private columna1to30 As DataColumn
        
        Private columna31to60 As DataColumn
        
        Private columna61to90 As DataColumn
        
        Private columnover90 As DataColumn
        
        Private columnsumall1 As DataColumn
        
        Private columnBalanceSP As DataColumn
        
        Friend Sub New()
            MyBase.New("View_Customer_Balance")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Friend ReadOnly Property notdueColumn As DataColumn
            Get
                Return Me.columnnotdue
            End Get
        End Property
        
        Friend ReadOnly Property a1to30Column As DataColumn
            Get
                Return Me.columna1to30
            End Get
        End Property
        
        Friend ReadOnly Property a31to60Column As DataColumn
            Get
                Return Me.columna31to60
            End Get
        End Property
        
        Friend ReadOnly Property a61to90Column As DataColumn
            Get
                Return Me.columna61to90
            End Get
        End Property
        
        Friend ReadOnly Property over90Column As DataColumn
            Get
                Return Me.columnover90
            End Get
        End Property
        
        Friend ReadOnly Property sumall1Column As DataColumn
            Get
                Return Me.columnsumall1
            End Get
        End Property
        
        Friend ReadOnly Property BalanceSPColumn As DataColumn
            Get
                Return Me.columnBalanceSP
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_Customer_BalanceRow
            Get
                Return CType(Me.Rows(index),View_Customer_BalanceRow)
            End Get
        End Property
        
        Public Event View_Customer_BalanceRowChanged As View_Customer_BalanceRowChangeEventHandler
        
        Public Event View_Customer_BalanceRowChanging As View_Customer_BalanceRowChangeEventHandler
        
        Public Event View_Customer_BalanceRowDeleted As View_Customer_BalanceRowChangeEventHandler
        
        Public Event View_Customer_BalanceRowDeleting As View_Customer_BalanceRowChangeEventHandler
        
        Public Overloads Sub AddView_Customer_BalanceRow(ByVal row As View_Customer_BalanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_Customer_BalanceRow(ByVal cod_customer As String, ByVal BalanceAmount As Decimal, ByVal notdue As Decimal, ByVal a1to30 As Decimal, ByVal a31to60 As Decimal, ByVal a61to90 As Decimal, ByVal over90 As Decimal, ByVal sumall1 As Decimal, ByVal BalanceSP As Decimal) As View_Customer_BalanceRow
            Dim rowView_Customer_BalanceRow As View_Customer_BalanceRow = CType(Me.NewRow,View_Customer_BalanceRow)
            rowView_Customer_BalanceRow.ItemArray = New Object() {cod_customer, BalanceAmount, notdue, a1to30, a31to60, a61to90, over90, sumall1, BalanceSP}
            Me.Rows.Add(rowView_Customer_BalanceRow)
            Return rowView_Customer_BalanceRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As View_Customer_BalanceRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),View_Customer_BalanceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_Customer_BalanceDataTable = CType(MyBase.Clone,View_Customer_BalanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_Customer_BalanceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
            Me.columnnotdue = Me.Columns("notdue")
            Me.columna1to30 = Me.Columns("a1to30")
            Me.columna31to60 = Me.Columns("a31to60")
            Me.columna61to90 = Me.Columns("a61to90")
            Me.columnover90 = Me.Columns("over90")
            Me.columnsumall1 = Me.Columns("sumall1")
            Me.columnBalanceSP = Me.Columns("BalanceSP")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.columnnotdue = New DataColumn("notdue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotdue)
            Me.columna1to30 = New DataColumn("a1to30", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columna1to30)
            Me.columna31to60 = New DataColumn("a31to60", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columna31to60)
            Me.columna61to90 = New DataColumn("a61to90", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columna61to90)
            Me.columnover90 = New DataColumn("over90", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnover90)
            Me.columnsumall1 = New DataColumn("sumall1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumall1)
            Me.columnBalanceSP = New DataColumn("BalanceSP", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceSP)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key3", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function NewView_Customer_BalanceRow() As View_Customer_BalanceRow
            Return CType(Me.NewRow,View_Customer_BalanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_Customer_BalanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_Customer_BalanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_Customer_BalanceRowChangedEvent) Is Nothing) Then
                RaiseEvent View_Customer_BalanceRowChanged(Me, New View_Customer_BalanceRowChangeEvent(CType(e.Row,View_Customer_BalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_Customer_BalanceRowChangingEvent) Is Nothing) Then
                RaiseEvent View_Customer_BalanceRowChanging(Me, New View_Customer_BalanceRowChangeEvent(CType(e.Row,View_Customer_BalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_Customer_BalanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_Customer_BalanceRowDeleted(Me, New View_Customer_BalanceRowChangeEvent(CType(e.Row,View_Customer_BalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_Customer_BalanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_Customer_BalanceRowDeleting(Me, New View_Customer_BalanceRowChangeEvent(CType(e.Row,View_Customer_BalanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_Customer_BalanceRow(ByVal row As View_Customer_BalanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Customer_BalanceRow
        Inherits DataRow
        
        Private tableView_Customer_Balance As View_Customer_BalanceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_Customer_Balance = CType(Me.Table,View_Customer_BalanceDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableView_Customer_Balance.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableView_Customer_Balance.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Property notdue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.notdueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.notdueColumn) = value
            End Set
        End Property
        
        Public Property a1to30 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.a1to30Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.a1to30Column) = value
            End Set
        End Property
        
        Public Property a31to60 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.a31to60Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.a31to60Column) = value
            End Set
        End Property
        
        Public Property a61to90 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.a61to90Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.a61to90Column) = value
            End Set
        End Property
        
        Public Property over90 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.over90Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.over90Column) = value
            End Set
        End Property
        
        Public Property sumall1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.sumall1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.sumall1Column) = value
            End Set
        End Property
        
        Public Property BalanceSP As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Customer_Balance.BalanceSPColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Customer_Balance.BalanceSPColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableView_Customer_Balance.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotdueNull() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.notdueColumn)
        End Function
        
        Public Sub SetnotdueNull()
            Me(Me.tableView_Customer_Balance.notdueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isa1to30Null() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.a1to30Column)
        End Function
        
        Public Sub Seta1to30Null()
            Me(Me.tableView_Customer_Balance.a1to30Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isa31to60Null() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.a31to60Column)
        End Function
        
        Public Sub Seta31to60Null()
            Me(Me.tableView_Customer_Balance.a31to60Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isa61to90Null() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.a61to90Column)
        End Function
        
        Public Sub Seta61to90Null()
            Me(Me.tableView_Customer_Balance.a61to90Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isover90Null() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.over90Column)
        End Function
        
        Public Sub Setover90Null()
            Me(Me.tableView_Customer_Balance.over90Column) = System.Convert.DBNull
        End Sub
        
        Public Function Issumall1Null() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.sumall1Column)
        End Function
        
        Public Sub Setsumall1Null()
            Me(Me.tableView_Customer_Balance.sumall1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceSPNull() As Boolean
            Return Me.IsNull(Me.tableView_Customer_Balance.BalanceSPColumn)
        End Function
        
        Public Sub SetBalanceSPNull()
            Me(Me.tableView_Customer_Balance.BalanceSPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Customer_BalanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_Customer_BalanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_Customer_BalanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_Customer_BalanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging31to60")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging31to60Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging31to60Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging31to60RowChanged As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowChanging As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowDeleted As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowDeleting As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging31to60Row(ByVal row As SP_CustomerAging31to60Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging31to60Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging31to60Row
            Dim rowSP_CustomerAging31to60Row As SP_CustomerAging31to60Row = CType(Me.NewRow,SP_CustomerAging31to60Row)
            rowSP_CustomerAging31to60Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging31to60Row)
            Return rowSP_CustomerAging31to60Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging31to60Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging31to60Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging31to60DataTable = CType(MyBase.Clone,SP_CustomerAging31to60DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging31to60DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key4", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging31to60Row() As SP_CustomerAging31to60Row
            Return CType(Me.NewRow,SP_CustomerAging31to60Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging31to60Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging31to60Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging31to60RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowChanged(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging31to60RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowChanging(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging31to60RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowDeleted(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging31to60RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowDeleting(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging31to60Row(ByVal row As SP_CustomerAging31to60Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60Row
        Inherits DataRow
        
        Private tableSP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging31to60 = CType(Me.Table,SP_CustomerAging31to60DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging31to60.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging31to60.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging31to60.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging31to60Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging31to60Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging31to60Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging61to90")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging61to90Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging61to90Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging61to90RowChanged As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowChanging As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowDeleted As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowDeleting As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging61to90Row(ByVal row As SP_CustomerAging61to90Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging61to90Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging61to90Row
            Dim rowSP_CustomerAging61to90Row As SP_CustomerAging61to90Row = CType(Me.NewRow,SP_CustomerAging61to90Row)
            rowSP_CustomerAging61to90Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging61to90Row)
            Return rowSP_CustomerAging61to90Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging61to90Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging61to90Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging61to90DataTable = CType(MyBase.Clone,SP_CustomerAging61to90DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging61to90DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key5", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging61to90Row() As SP_CustomerAging61to90Row
            Return CType(Me.NewRow,SP_CustomerAging61to90Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging61to90Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging61to90Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging61to90RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowChanged(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging61to90RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowChanging(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging61to90RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowDeleted(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging61to90RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowDeleting(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging61to90Row(ByVal row As SP_CustomerAging61to90Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90Row
        Inherits DataRow
        
        Private tableSP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging61to90 = CType(Me.Table,SP_CustomerAging61to90DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging61to90.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging61to90.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging61to90.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging61to90Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging61to90Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging61to90Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAgingNotDueYet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAgingNotDueYetRow
            Get
                Return CType(Me.Rows(index),SP_CustomerAgingNotDueYetRow)
            End Get
        End Property
        
        Public Event SP_CustomerAgingNotDueYetRowChanged As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowChanging As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowDeleted As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowDeleting As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAgingNotDueYetRow(ByVal row As SP_CustomerAgingNotDueYetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAgingNotDueYetRow(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAgingNotDueYetRow
            Dim rowSP_CustomerAgingNotDueYetRow As SP_CustomerAgingNotDueYetRow = CType(Me.NewRow,SP_CustomerAgingNotDueYetRow)
            rowSP_CustomerAgingNotDueYetRow.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAgingNotDueYetRow)
            Return rowSP_CustomerAgingNotDueYetRow
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAgingNotDueYetRow
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAgingNotDueYetRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAgingNotDueYetDataTable = CType(MyBase.Clone,SP_CustomerAgingNotDueYetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAgingNotDueYetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key6", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAgingNotDueYetRow() As SP_CustomerAgingNotDueYetRow
            Return CType(Me.NewRow,SP_CustomerAgingNotDueYetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAgingNotDueYetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAgingNotDueYetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowChanged(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowChanging(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowDeleted(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowDeleting(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAgingNotDueYetRow(ByVal row As SP_CustomerAgingNotDueYetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetRow
        Inherits DataRow
        
        Private tableSP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAgingNotDueYet = CType(Me.Table,SP_CustomerAgingNotDueYetDataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAgingNotDueYet.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAgingNotDueYet.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAgingNotDueYetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAgingNotDueYetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAgingNotDueYetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAgingOver90")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAgingOver90Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAgingOver90Row)
            End Get
        End Property
        
        Public Event SP_CustomerAgingOver90RowChanged As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowChanging As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowDeleted As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowDeleting As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAgingOver90Row(ByVal row As SP_CustomerAgingOver90Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAgingOver90Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAgingOver90Row
            Dim rowSP_CustomerAgingOver90Row As SP_CustomerAgingOver90Row = CType(Me.NewRow,SP_CustomerAgingOver90Row)
            rowSP_CustomerAgingOver90Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAgingOver90Row)
            Return rowSP_CustomerAgingOver90Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAgingOver90Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAgingOver90Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAgingOver90DataTable = CType(MyBase.Clone,SP_CustomerAgingOver90DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAgingOver90DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key7", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAgingOver90Row() As SP_CustomerAgingOver90Row
            Return CType(Me.NewRow,SP_CustomerAgingOver90Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAgingOver90Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAgingOver90Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAgingOver90RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowChanged(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAgingOver90RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowChanging(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAgingOver90RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowDeleted(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAgingOver90RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowDeleting(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAgingOver90Row(ByVal row As SP_CustomerAgingOver90Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90Row
        Inherits DataRow
        
        Private tableSP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAgingOver90 = CType(Me.Table,SP_CustomerAgingOver90DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAgingOver90.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAgingOver90.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAgingOver90Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAgingOver90Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAgingOver90Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging1to30")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging1to30Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging1to30Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging1to30RowChanged As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowChanging As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowDeleted As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowDeleting As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging1to30Row(ByVal row As SP_CustomerAging1to30Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging1to30Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging1to30Row
            Dim rowSP_CustomerAging1to30Row As SP_CustomerAging1to30Row = CType(Me.NewRow,SP_CustomerAging1to30Row)
            rowSP_CustomerAging1to30Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging1to30Row)
            Return rowSP_CustomerAging1to30Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging1to30Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging1to30Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging1to30DataTable = CType(MyBase.Clone,SP_CustomerAging1to30DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging1to30DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key8", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging1to30Row() As SP_CustomerAging1to30Row
            Return CType(Me.NewRow,SP_CustomerAging1to30Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging1to30Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging1to30Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging1to30RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowChanged(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging1to30RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowChanging(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging1to30RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowDeleted(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging1to30RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowDeleting(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging1to30Row(ByVal row As SP_CustomerAging1to30Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30Row
        Inherits DataRow
        
        Private tableSP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging1to30 = CType(Me.Table,SP_CustomerAging1to30DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging1to30.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging1to30.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging1to30.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging1to30Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging1to30Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging1to30Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerBalanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerBalance")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerBalanceRow
            Get
                Return CType(Me.Rows(index),SP_CustomerBalanceRow)
            End Get
        End Property
        
        Public Event SP_CustomerBalanceRowChanged As SP_CustomerBalanceRowChangeEventHandler
        
        Public Event SP_CustomerBalanceRowChanging As SP_CustomerBalanceRowChangeEventHandler
        
        Public Event SP_CustomerBalanceRowDeleted As SP_CustomerBalanceRowChangeEventHandler
        
        Public Event SP_CustomerBalanceRowDeleting As SP_CustomerBalanceRowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerBalanceRow(ByVal row As SP_CustomerBalanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerBalanceRow(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerBalanceRow
            Dim rowSP_CustomerBalanceRow As SP_CustomerBalanceRow = CType(Me.NewRow,SP_CustomerBalanceRow)
            rowSP_CustomerBalanceRow.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerBalanceRow)
            Return rowSP_CustomerBalanceRow
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerBalanceRow
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerBalanceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerBalanceDataTable = CType(MyBase.Clone,SP_CustomerBalanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerBalanceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key9", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerBalanceRow() As SP_CustomerBalanceRow
            Return CType(Me.NewRow,SP_CustomerBalanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerBalanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerBalanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerBalanceRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerBalanceRowChanged(Me, New SP_CustomerBalanceRowChangeEvent(CType(e.Row,SP_CustomerBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerBalanceRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerBalanceRowChanging(Me, New SP_CustomerBalanceRowChangeEvent(CType(e.Row,SP_CustomerBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerBalanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerBalanceRowDeleted(Me, New SP_CustomerBalanceRowChangeEvent(CType(e.Row,SP_CustomerBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerBalanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerBalanceRowDeleting(Me, New SP_CustomerBalanceRowChangeEvent(CType(e.Row,SP_CustomerBalanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerBalanceRow(ByVal row As SP_CustomerBalanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerBalanceRow
        Inherits DataRow
        
        Private tableSP_CustomerBalance As SP_CustomerBalanceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerBalance = CType(Me.Table,SP_CustomerBalanceDataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerBalance.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerBalance.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerBalance.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerBalance.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerBalance.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerBalance.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerBalanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerBalanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerBalanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerBalanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentallDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnamount_adjustment_head As DataColumn
        
        Private columnamount_adjustment_Dtl As DataColumn
        
        Private columnamount_adjustment_Dtl_Dtl As DataColumn
        
        Private columnNote As DataColumn
        
        Friend Sub New()
            MyBase.New("Adjustmentall")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustment_headColumn As DataColumn
            Get
                Return Me.columnamount_adjustment_head
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustment_DtlColumn As DataColumn
            Get
                Return Me.columnamount_adjustment_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustment_Dtl_DtlColumn As DataColumn
            Get
                Return Me.columnamount_adjustment_Dtl_Dtl
            End Get
        End Property
        
        Friend ReadOnly Property NoteColumn As DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdjustmentallRow
            Get
                Return CType(Me.Rows(index),AdjustmentallRow)
            End Get
        End Property
        
        Public Event AdjustmentallRowChanged As AdjustmentallRowChangeEventHandler
        
        Public Event AdjustmentallRowChanging As AdjustmentallRowChangeEventHandler
        
        Public Event AdjustmentallRowDeleted As AdjustmentallRowChangeEventHandler
        
        Public Event AdjustmentallRowDeleting As AdjustmentallRowChangeEventHandler
        
        Public Overloads Sub AddAdjustmentallRow(ByVal row As AdjustmentallRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdjustmentallRow(ByVal refrence_no As String, ByVal cod_customer As String, ByVal amount_adjustment_head As Decimal, ByVal amount_adjustment_Dtl As Decimal, ByVal amount_adjustment_Dtl_Dtl As Decimal, ByVal Note As String) As AdjustmentallRow
            Dim rowAdjustmentallRow As AdjustmentallRow = CType(Me.NewRow,AdjustmentallRow)
            rowAdjustmentallRow.ItemArray = New Object() {refrence_no, cod_customer, amount_adjustment_head, amount_adjustment_Dtl, amount_adjustment_Dtl_Dtl, Note}
            Me.Rows.Add(rowAdjustmentallRow)
            Return rowAdjustmentallRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdjustmentallDataTable = CType(MyBase.Clone,AdjustmentallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdjustmentallDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnamount_adjustment_head = Me.Columns("amount_adjustment_head")
            Me.columnamount_adjustment_Dtl = Me.Columns("amount_adjustment_Dtl")
            Me.columnamount_adjustment_Dtl_Dtl = Me.Columns("amount_adjustment_Dtl_Dtl")
            Me.columnNote = Me.Columns("Note")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnamount_adjustment_head = New DataColumn("amount_adjustment_head", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment_head)
            Me.columnamount_adjustment_Dtl = New DataColumn("amount_adjustment_Dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment_Dtl)
            Me.columnamount_adjustment_Dtl_Dtl = New DataColumn("amount_adjustment_Dtl_Dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment_Dtl_Dtl)
            Me.columnNote = New DataColumn("Note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNote)
            Me.columnrefrence_no.AllowDBNull = false
        End Sub
        
        Public Function NewAdjustmentallRow() As AdjustmentallRow
            Return CType(Me.NewRow,AdjustmentallRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdjustmentallRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdjustmentallRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdjustmentallRowChangedEvent) Is Nothing) Then
                RaiseEvent AdjustmentallRowChanged(Me, New AdjustmentallRowChangeEvent(CType(e.Row,AdjustmentallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdjustmentallRowChangingEvent) Is Nothing) Then
                RaiseEvent AdjustmentallRowChanging(Me, New AdjustmentallRowChangeEvent(CType(e.Row,AdjustmentallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdjustmentallRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdjustmentallRowDeleted(Me, New AdjustmentallRowChangeEvent(CType(e.Row,AdjustmentallRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdjustmentallRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdjustmentallRowDeleting(Me, New AdjustmentallRowChangeEvent(CType(e.Row,AdjustmentallRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdjustmentallRow(ByVal row As AdjustmentallRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentallRow
        Inherits DataRow
        
        Private tableAdjustmentall As AdjustmentallDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdjustmentall = CType(Me.Table,AdjustmentallDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableAdjustmentall.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableAdjustmentall.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustmentall.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustmentall.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment_head As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustmentall.amount_adjustment_headColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustmentall.amount_adjustment_headColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment_Dtl As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustmentall.amount_adjustment_DtlColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustmentall.amount_adjustment_DtlColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment_Dtl_Dtl As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustmentall.amount_adjustment_Dtl_DtlColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustmentall.amount_adjustment_Dtl_DtlColumn) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustmentall.NoteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustmentall.NoteColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableAdjustmentall.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableAdjustmentall.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustment_headNull() As Boolean
            Return Me.IsNull(Me.tableAdjustmentall.amount_adjustment_headColumn)
        End Function
        
        Public Sub Setamount_adjustment_headNull()
            Me(Me.tableAdjustmentall.amount_adjustment_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustment_DtlNull() As Boolean
            Return Me.IsNull(Me.tableAdjustmentall.amount_adjustment_DtlColumn)
        End Function
        
        Public Sub Setamount_adjustment_DtlNull()
            Me(Me.tableAdjustmentall.amount_adjustment_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustment_Dtl_DtlNull() As Boolean
            Return Me.IsNull(Me.tableAdjustmentall.amount_adjustment_Dtl_DtlColumn)
        End Function
        
        Public Sub Setamount_adjustment_Dtl_DtlNull()
            Me(Me.tableAdjustmentall.amount_adjustment_Dtl_DtlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableAdjustmentall.NoteColumn)
        End Function
        
        Public Sub SetNoteNull()
            Me(Me.tableAdjustmentall.NoteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentallRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdjustmentallRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdjustmentallRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdjustmentallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columnsumdtl As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property sumdtlColumn As DataColumn
            Get
                Return Me.columnsumdtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_dtlRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_dtlRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_dtlRowChanged As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowChanging As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowDeleted As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtlRowDeleting As GL_account_adjustment_dtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_dtlRow(ByVal row As GL_account_adjustment_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_dtlRow(ByVal refrence_no As String, ByVal sumdtl As Decimal) As GL_account_adjustment_dtlRow
            Dim rowGL_account_adjustment_dtlRow As GL_account_adjustment_dtlRow = CType(Me.NewRow,GL_account_adjustment_dtlRow)
            rowGL_account_adjustment_dtlRow.ItemArray = New Object() {refrence_no, sumdtl}
            Me.Rows.Add(rowGL_account_adjustment_dtlRow)
            Return rowGL_account_adjustment_dtlRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As GL_account_adjustment_dtlRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),GL_account_adjustment_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_dtlDataTable = CType(MyBase.Clone,GL_account_adjustment_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnsumdtl = Me.Columns("sumdtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnsumdtl = New DataColumn("sumdtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumdtl)
            Me.Constraints.Add(New UniqueConstraint("DsFrmCheckDataConsistancy1Key1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
            Me.columnsumdtl.ReadOnly = true
        End Sub
        
        Public Function NewGL_account_adjustment_dtlRow() As GL_account_adjustment_dtlRow
            Return CType(Me.NewRow,GL_account_adjustment_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowChanged(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowChanging(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowDeleted(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtlRowDeleting(Me, New GL_account_adjustment_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_dtlRow(ByVal row As GL_account_adjustment_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_dtl As GL_account_adjustment_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_dtl = CType(Me.Table,GL_account_adjustment_dtlDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_dtl.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property sumdtl As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl.sumdtlColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl.sumdtlColumn) = value
            End Set
        End Property
        
        Public Function IssumdtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl.sumdtlColumn)
        End Function
        
        Public Sub SetsumdtlNull()
            Me(Me.tableGL_account_adjustment_dtl.sumdtlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtl_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columnsumdtlDtl As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_account_adjustment_dtl_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property sumdtlDtlColumn As DataColumn
            Get
                Return Me.columnsumdtlDtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_account_adjustment_dtl_dtlRow
            Get
                Return CType(Me.Rows(index),GL_account_adjustment_dtl_dtlRow)
            End Get
        End Property
        
        Public Event GL_account_adjustment_dtl_dtlRowChanged As GL_account_adjustment_dtl_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtl_dtlRowChanging As GL_account_adjustment_dtl_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtl_dtlRowDeleted As GL_account_adjustment_dtl_dtlRowChangeEventHandler
        
        Public Event GL_account_adjustment_dtl_dtlRowDeleting As GL_account_adjustment_dtl_dtlRowChangeEventHandler
        
        Public Overloads Sub AddGL_account_adjustment_dtl_dtlRow(ByVal row As GL_account_adjustment_dtl_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_account_adjustment_dtl_dtlRow(ByVal refrence_no As String, ByVal sumdtlDtl As Decimal) As GL_account_adjustment_dtl_dtlRow
            Dim rowGL_account_adjustment_dtl_dtlRow As GL_account_adjustment_dtl_dtlRow = CType(Me.NewRow,GL_account_adjustment_dtl_dtlRow)
            rowGL_account_adjustment_dtl_dtlRow.ItemArray = New Object() {refrence_no, sumdtlDtl}
            Me.Rows.Add(rowGL_account_adjustment_dtl_dtlRow)
            Return rowGL_account_adjustment_dtl_dtlRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As GL_account_adjustment_dtl_dtlRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),GL_account_adjustment_dtl_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_account_adjustment_dtl_dtlDataTable = CType(MyBase.Clone,GL_account_adjustment_dtl_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_account_adjustment_dtl_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnsumdtlDtl = Me.Columns("sumdtlDtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnsumdtlDtl = New DataColumn("sumdtlDtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumdtlDtl)
            Me.Constraints.Add(New UniqueConstraint("DsFrmCheckDataConsistancy1Key2", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
            Me.columnsumdtlDtl.ReadOnly = true
        End Sub
        
        Public Function NewGL_account_adjustment_dtl_dtlRow() As GL_account_adjustment_dtl_dtlRow
            Return CType(Me.NewRow,GL_account_adjustment_dtl_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_account_adjustment_dtl_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_account_adjustment_dtl_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_account_adjustment_dtl_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtl_dtlRowChanged(Me, New GL_account_adjustment_dtl_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_account_adjustment_dtl_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtl_dtlRowChanging(Me, New GL_account_adjustment_dtl_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_account_adjustment_dtl_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtl_dtlRowDeleted(Me, New GL_account_adjustment_dtl_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_account_adjustment_dtl_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_account_adjustment_dtl_dtlRowDeleting(Me, New GL_account_adjustment_dtl_dtlRowChangeEvent(CType(e.Row,GL_account_adjustment_dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_account_adjustment_dtl_dtlRow(ByVal row As GL_account_adjustment_dtl_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtl_dtlRow
        Inherits DataRow
        
        Private tableGL_account_adjustment_dtl_dtl As GL_account_adjustment_dtl_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_account_adjustment_dtl_dtl = CType(Me.Table,GL_account_adjustment_dtl_dtlDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGL_account_adjustment_dtl_dtl.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl_dtl.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property sumdtlDtl As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_account_adjustment_dtl_dtl.sumdtlDtlColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_account_adjustment_dtl_dtl.sumdtlDtlColumn) = value
            End Set
        End Property
        
        Public Function IssumdtlDtlNull() As Boolean
            Return Me.IsNull(Me.tableGL_account_adjustment_dtl_dtl.sumdtlDtlColumn)
        End Function
        
        Public Sub SetsumdtlDtlNull()
            Me(Me.tableGL_account_adjustment_dtl_dtl.sumdtlDtlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_account_adjustment_dtl_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_account_adjustment_dtl_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_account_adjustment_dtl_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_account_adjustment_dtl_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_Payment_deposit_head_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpayment_amount1 As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnpayment_amount2 As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("Gl_Payment_deposit_head_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property payment_amount1Column As DataColumn
            Get
                Return Me.columnpayment_amount1
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property payment_amount2Column As DataColumn
            Get
                Return Me.columnpayment_amount2
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Gl_Payment_deposit_head_dtlRow
            Get
                Return CType(Me.Rows(index),Gl_Payment_deposit_head_dtlRow)
            End Get
        End Property
        
        Public Event Gl_Payment_deposit_head_dtlRowChanged As Gl_Payment_deposit_head_dtlRowChangeEventHandler
        
        Public Event Gl_Payment_deposit_head_dtlRowChanging As Gl_Payment_deposit_head_dtlRowChangeEventHandler
        
        Public Event Gl_Payment_deposit_head_dtlRowDeleted As Gl_Payment_deposit_head_dtlRowChangeEventHandler
        
        Public Event Gl_Payment_deposit_head_dtlRowDeleting As Gl_Payment_deposit_head_dtlRowChangeEventHandler
        
        Public Overloads Sub AddGl_Payment_deposit_head_dtlRow(ByVal row As Gl_Payment_deposit_head_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGl_Payment_deposit_head_dtlRow(ByVal payment_amount1 As Decimal, ByVal ID_payment As Integer, ByVal payment_amount2 As Decimal, ByVal refrence_no As String) As Gl_Payment_deposit_head_dtlRow
            Dim rowGl_Payment_deposit_head_dtlRow As Gl_Payment_deposit_head_dtlRow = CType(Me.NewRow,Gl_Payment_deposit_head_dtlRow)
            rowGl_Payment_deposit_head_dtlRow.ItemArray = New Object() {payment_amount1, ID_payment, payment_amount2, refrence_no}
            Me.Rows.Add(rowGl_Payment_deposit_head_dtlRow)
            Return rowGl_Payment_deposit_head_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Gl_Payment_deposit_head_dtlDataTable = CType(MyBase.Clone,Gl_Payment_deposit_head_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Gl_Payment_deposit_head_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpayment_amount1 = Me.Columns("payment_amount1")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnpayment_amount2 = Me.Columns("payment_amount2")
            Me.columnrefrence_no = Me.Columns("refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnpayment_amount1 = New DataColumn("payment_amount1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount1)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnpayment_amount2 = New DataColumn("payment_amount2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount2)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnID_payment.AllowDBNull = false
        End Sub
        
        Public Function NewGl_Payment_deposit_head_dtlRow() As Gl_Payment_deposit_head_dtlRow
            Return CType(Me.NewRow,Gl_Payment_deposit_head_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Gl_Payment_deposit_head_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Gl_Payment_deposit_head_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Gl_Payment_deposit_head_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Gl_Payment_deposit_head_dtlRowChanged(Me, New Gl_Payment_deposit_head_dtlRowChangeEvent(CType(e.Row,Gl_Payment_deposit_head_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Gl_Payment_deposit_head_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Gl_Payment_deposit_head_dtlRowChanging(Me, New Gl_Payment_deposit_head_dtlRowChangeEvent(CType(e.Row,Gl_Payment_deposit_head_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Gl_Payment_deposit_head_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Gl_Payment_deposit_head_dtlRowDeleted(Me, New Gl_Payment_deposit_head_dtlRowChangeEvent(CType(e.Row,Gl_Payment_deposit_head_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Gl_Payment_deposit_head_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Gl_Payment_deposit_head_dtlRowDeleting(Me, New Gl_Payment_deposit_head_dtlRowChangeEvent(CType(e.Row,Gl_Payment_deposit_head_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGl_Payment_deposit_head_dtlRow(ByVal row As Gl_Payment_deposit_head_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_Payment_deposit_head_dtlRow
        Inherits DataRow
        
        Private tableGl_Payment_deposit_head_dtl As Gl_Payment_deposit_head_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGl_Payment_deposit_head_dtl = CType(Me.Table,Gl_Payment_deposit_head_dtlDataTable)
        End Sub
        
        Public Property payment_amount1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount1Column) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGl_Payment_deposit_head_dtl.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGl_Payment_deposit_head_dtl.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property payment_amount2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount2Column) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGl_Payment_deposit_head_dtl.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGl_Payment_deposit_head_dtl.refrence_noColumn) = value
            End Set
        End Property
        
        Public Function Ispayment_amount1Null() As Boolean
            Return Me.IsNull(Me.tableGl_Payment_deposit_head_dtl.payment_amount1Column)
        End Function
        
        Public Sub Setpayment_amount1Null()
            Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amount2Null() As Boolean
            Return Me.IsNull(Me.tableGl_Payment_deposit_head_dtl.payment_amount2Column)
        End Function
        
        Public Sub Setpayment_amount2Null()
            Me(Me.tableGl_Payment_deposit_head_dtl.payment_amount2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGl_Payment_deposit_head_dtl.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGl_Payment_deposit_head_dtl.refrence_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Gl_Payment_deposit_head_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Gl_Payment_deposit_head_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Gl_Payment_deposit_head_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Gl_Payment_deposit_head_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlreceivepaymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no As DataColumn
        
        Private columnHead_Amount As DataColumn
        
        Private columnDetail_Amount As DataColumn
        
        Friend Sub New()
            MyBase.New("Glreceivepayment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property Head_AmountColumn As DataColumn
            Get
                Return Me.columnHead_Amount
            End Get
        End Property
        
        Friend ReadOnly Property Detail_AmountColumn As DataColumn
            Get
                Return Me.columnDetail_Amount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GlreceivepaymentRow
            Get
                Return CType(Me.Rows(index),GlreceivepaymentRow)
            End Get
        End Property
        
        Public Event GlreceivepaymentRowChanged As GlreceivepaymentRowChangeEventHandler
        
        Public Event GlreceivepaymentRowChanging As GlreceivepaymentRowChangeEventHandler
        
        Public Event GlreceivepaymentRowDeleted As GlreceivepaymentRowChangeEventHandler
        
        Public Event GlreceivepaymentRowDeleting As GlreceivepaymentRowChangeEventHandler
        
        Public Overloads Sub AddGlreceivepaymentRow(ByVal row As GlreceivepaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGlreceivepaymentRow(ByVal refrence_no As String, ByVal Head_Amount As Single, ByVal Detail_Amount As Decimal) As GlreceivepaymentRow
            Dim rowGlreceivepaymentRow As GlreceivepaymentRow = CType(Me.NewRow,GlreceivepaymentRow)
            rowGlreceivepaymentRow.ItemArray = New Object() {refrence_no, Head_Amount, Detail_Amount}
            Me.Rows.Add(rowGlreceivepaymentRow)
            Return rowGlreceivepaymentRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As GlreceivepaymentRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),GlreceivepaymentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GlreceivepaymentDataTable = CType(MyBase.Clone,GlreceivepaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GlreceivepaymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnHead_Amount = Me.Columns("Head_Amount")
            Me.columnDetail_Amount = Me.Columns("Detail_Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnHead_Amount = New DataColumn("Head_Amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHead_Amount)
            Me.columnDetail_Amount = New DataColumn("Detail_Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetail_Amount)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
        End Sub
        
        Public Function NewGlreceivepaymentRow() As GlreceivepaymentRow
            Return CType(Me.NewRow,GlreceivepaymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GlreceivepaymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GlreceivepaymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GlreceivepaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent GlreceivepaymentRowChanged(Me, New GlreceivepaymentRowChangeEvent(CType(e.Row,GlreceivepaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GlreceivepaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent GlreceivepaymentRowChanging(Me, New GlreceivepaymentRowChangeEvent(CType(e.Row,GlreceivepaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GlreceivepaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent GlreceivepaymentRowDeleted(Me, New GlreceivepaymentRowChangeEvent(CType(e.Row,GlreceivepaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GlreceivepaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent GlreceivepaymentRowDeleting(Me, New GlreceivepaymentRowChangeEvent(CType(e.Row,GlreceivepaymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGlreceivepaymentRow(ByVal row As GlreceivepaymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlreceivepaymentRow
        Inherits DataRow
        
        Private tableGlreceivepayment As GlreceivepaymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGlreceivepayment = CType(Me.Table,GlreceivepaymentDataTable)
        End Sub
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableGlreceivepayment.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableGlreceivepayment.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property Head_Amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableGlreceivepayment.Head_AmountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGlreceivepayment.Head_AmountColumn) = value
            End Set
        End Property
        
        Public Property Detail_Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGlreceivepayment.Detail_AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGlreceivepayment.Detail_AmountColumn) = value
            End Set
        End Property
        
        Public Function IsHead_AmountNull() As Boolean
            Return Me.IsNull(Me.tableGlreceivepayment.Head_AmountColumn)
        End Function
        
        Public Sub SetHead_AmountNull()
            Me(Me.tableGlreceivepayment.Head_AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetail_AmountNull() As Boolean
            Return Me.IsNull(Me.tableGlreceivepayment.Detail_AmountColumn)
        End Function
        
        Public Sub SetDetail_AmountNull()
            Me(Me.tableGlreceivepayment.Detail_AmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlreceivepaymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GlreceivepaymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GlreceivepaymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GlreceivepaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_no_Adjustment As DataColumn
        
        Private columnsumpayment As DataColumn
        
        Private columnamount_adjustment As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("View1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_AdjustmentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Adjustment
            End Get
        End Property
        
        Friend ReadOnly Property sumpaymentColumn As DataColumn
            Get
                Return Me.columnsumpayment
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustmentColumn As DataColumn
            Get
                Return Me.columnamount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View1Row
            Get
                Return CType(Me.Rows(index),View1Row)
            End Get
        End Property
        
        Public Event View1RowChanged As View1RowChangeEventHandler
        
        Public Event View1RowChanging As View1RowChangeEventHandler
        
        Public Event View1RowDeleted As View1RowChangeEventHandler
        
        Public Event View1RowDeleting As View1RowChangeEventHandler
        
        Public Overloads Sub AddView1Row(ByVal row As View1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView1Row(ByVal refrence_no_Adjustment As String, ByVal sumpayment As Decimal, ByVal amount_adjustment As Decimal, ByVal refrence_no As String) As View1Row
            Dim rowView1Row As View1Row = CType(Me.NewRow,View1Row)
            rowView1Row.ItemArray = New Object() {refrence_no_Adjustment, sumpayment, amount_adjustment, refrence_no}
            Me.Rows.Add(rowView1Row)
            Return rowView1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View1DataTable = CType(MyBase.Clone,View1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_no_Adjustment = Me.Columns("refrence_no_Adjustment")
            Me.columnsumpayment = Me.Columns("sumpayment")
            Me.columnamount_adjustment = Me.Columns("amount_adjustment")
            Me.columnrefrence_no = Me.Columns("refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_no_Adjustment = New DataColumn("refrence_no_Adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Adjustment)
            Me.columnsumpayment = New DataColumn("sumpayment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsumpayment)
            Me.columnamount_adjustment = New DataColumn("amount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
        End Sub
        
        Public Function NewView1Row() As View1Row
            Return CType(Me.NewRow,View1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View1RowChangedEvent) Is Nothing) Then
                RaiseEvent View1RowChanged(Me, New View1RowChangeEvent(CType(e.Row,View1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View1RowChangingEvent) Is Nothing) Then
                RaiseEvent View1RowChanging(Me, New View1RowChangeEvent(CType(e.Row,View1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View1RowDeletedEvent) Is Nothing) Then
                RaiseEvent View1RowDeleted(Me, New View1RowChangeEvent(CType(e.Row,View1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View1RowDeletingEvent) Is Nothing) Then
                RaiseEvent View1RowDeleting(Me, New View1RowChangeEvent(CType(e.Row,View1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView1Row(ByVal row As View1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View1Row
        Inherits DataRow
        
        Private tableView1 As View1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView1 = CType(Me.Table,View1DataTable)
        End Sub
        
        Public Property refrence_no_Adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableView1.refrence_no_AdjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView1.refrence_no_AdjustmentColumn) = value
            End Set
        End Property
        
        Public Property sumpayment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView1.sumpaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView1.sumpaymentColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView1.amount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView1.amount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableView1.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView1.refrence_noColumn) = value
            End Set
        End Property
        
        Public Function Isrefrence_no_AdjustmentNull() As Boolean
            Return Me.IsNull(Me.tableView1.refrence_no_AdjustmentColumn)
        End Function
        
        Public Sub Setrefrence_no_AdjustmentNull()
            Me(Me.tableView1.refrence_no_AdjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssumpaymentNull() As Boolean
            Return Me.IsNull(Me.tableView1.sumpaymentColumn)
        End Function
        
        Public Sub SetsumpaymentNull()
            Me(Me.tableView1.sumpaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableView1.amount_adjustmentColumn)
        End Function
        
        Public Sub Setamount_adjustmentNull()
            Me(Me.tableView1.amount_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableView1.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableView1.refrence_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outpoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columncod_technician As DataColumn
        
        Private columnCOMMENT_ARTICLE As DataColumn
        
        Private columnAVERAGE_COST As DataColumn
        
        Friend Sub New()
            MyBase.New("outpo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property COMMENT_ARTICLEColumn As DataColumn
            Get
                Return Me.columnCOMMENT_ARTICLE
            End Get
        End Property
        
        Friend ReadOnly Property AVERAGE_COSTColumn As DataColumn
            Get
                Return Me.columnAVERAGE_COST
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As outpoRow
            Get
                Return CType(Me.Rows(index),outpoRow)
            End Get
        End Property
        
        Public Event outpoRowChanged As outpoRowChangeEventHandler
        
        Public Event outpoRowChanging As outpoRowChangeEventHandler
        
        Public Event outpoRowDeleted As outpoRowChangeEventHandler
        
        Public Event outpoRowDeleting As outpoRowChangeEventHandler
        
        Public Overloads Sub AddoutpoRow(ByVal row As outpoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddoutpoRow(ByVal id_service_center As String, ByVal radif As Short, ByVal type_select As String, ByVal cod_select As String, ByVal desc_radif As String, ByVal qty As Decimal, ByVal price As Decimal, ByVal fet As Decimal, ByVal taxable As Boolean, ByVal cod_technician As String, ByVal COMMENT_ARTICLE As String, ByVal AVERAGE_COST As Decimal) As outpoRow
            Dim rowoutpoRow As outpoRow = CType(Me.NewRow,outpoRow)
            rowoutpoRow.ItemArray = New Object() {id_service_center, radif, type_select, cod_select, desc_radif, qty, price, fet, taxable, cod_technician, COMMENT_ARTICLE, AVERAGE_COST}
            Me.Rows.Add(rowoutpoRow)
            Return rowoutpoRow
        End Function
        
        Public Function FindByid_service_centerradif(ByVal id_service_center As String, ByVal radif As Short) As outpoRow
            Return CType(Me.Rows.Find(New Object() {id_service_center, radif}),outpoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As outpoDataTable = CType(MyBase.Clone,outpoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New outpoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columntype_select = Me.Columns("type_select")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnfet = Me.Columns("fet")
            Me.columntaxable = Me.Columns("taxable")
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columnCOMMENT_ARTICLE = Me.Columns("COMMENT_ARTICLE")
            Me.columnAVERAGE_COST = Me.Columns("AVERAGE_COST")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columnCOMMENT_ARTICLE = New DataColumn("COMMENT_ARTICLE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMMENT_ARTICLE)
            Me.columnAVERAGE_COST = New DataColumn("AVERAGE_COST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVERAGE_COST)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_service_center, Me.columnradif}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnqty.AllowDBNull = false
            Me.columnprice.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
        End Sub
        
        Public Function NewoutpoRow() As outpoRow
            Return CType(Me.NewRow,outpoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New outpoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(outpoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.outpoRowChangedEvent) Is Nothing) Then
                RaiseEvent outpoRowChanged(Me, New outpoRowChangeEvent(CType(e.Row,outpoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.outpoRowChangingEvent) Is Nothing) Then
                RaiseEvent outpoRowChanging(Me, New outpoRowChangeEvent(CType(e.Row,outpoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.outpoRowDeletedEvent) Is Nothing) Then
                RaiseEvent outpoRowDeleted(Me, New outpoRowChangeEvent(CType(e.Row,outpoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.outpoRowDeletingEvent) Is Nothing) Then
                RaiseEvent outpoRowDeleting(Me, New outpoRowChangeEvent(CType(e.Row,outpoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveoutpoRow(ByVal row As outpoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outpoRow
        Inherits DataRow
        
        Private tableoutpo As outpoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableoutpo = CType(Me.Table,outpoDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableoutpo.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableoutpo.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableoutpo.radifColumn),Short)
            End Get
            Set
                Me(Me.tableoutpo.radifColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.type_selectColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableoutpo.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableoutpo.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Return CType(Me(Me.tableoutpo.priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableoutpo.priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Return CType(Me(Me.tableoutpo.fetColumn),Decimal)
            End Get
            Set
                Me(Me.tableoutpo.fetColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.taxableColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property COMMENT_ARTICLE As String
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.COMMENT_ARTICLEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.COMMENT_ARTICLEColumn) = value
            End Set
        End Property
        
        Public Property AVERAGE_COST As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutpo.AVERAGE_COSTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutpo.AVERAGE_COSTColumn) = value
            End Set
        End Property
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableoutpo.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableoutpo.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableoutpo.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableoutpo.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableoutpo.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMMENT_ARTICLENull() As Boolean
            Return Me.IsNull(Me.tableoutpo.COMMENT_ARTICLEColumn)
        End Function
        
        Public Sub SetCOMMENT_ARTICLENull()
            Me(Me.tableoutpo.COMMENT_ARTICLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVERAGE_COSTNull() As Boolean
            Return Me.IsNull(Me.tableoutpo.AVERAGE_COSTColumn)
        End Function
        
        Public Sub SetAVERAGE_COSTNull()
            Me(Me.tableoutpo.AVERAGE_COSTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outpoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As outpoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As outpoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As outpoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
