'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmUpdateDatabase
    Inherits DataSet
    
    Private tableGL_payment_deposit_Bedehi As GL_payment_deposit_BedehiDataTable
    
    Private tableGL_payment_deposit_Pardakht As GL_payment_deposit_PardakhtDataTable
    
    Private tableGL_payment_deposit_adj As GL_payment_deposit_adjDataTable
    
    Private tableGL_debit_deposit As GL_debit_depositDataTable
    
    Private tableUpdatePaidAmount As UpdatePaidAmountDataTable
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Private tablebas_vehicle As bas_vehicleDataTable
    
    Private tableService_out_purchases_Dtl_dtl As Service_out_purchases_Dtl_dtlDataTable
    
    Private tableService_out_purchases_Dtl As Service_out_purchases_DtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GL_payment_deposit_Bedehi")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_deposit_BedehiDataTable(ds.Tables("GL_payment_deposit_Bedehi")))
            End If
            If (Not (ds.Tables("GL_payment_deposit_Pardakht")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_deposit_PardakhtDataTable(ds.Tables("GL_payment_deposit_Pardakht")))
            End If
            If (Not (ds.Tables("GL_payment_deposit_adj")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_deposit_adjDataTable(ds.Tables("GL_payment_deposit_adj")))
            End If
            If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
            End If
            If (Not (ds.Tables("UpdatePaidAmount")) Is Nothing) Then
                Me.Tables.Add(New UpdatePaidAmountDataTable(ds.Tables("UpdatePaidAmount")))
            End If
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            If (Not (ds.Tables("bas_vehicle")) Is Nothing) Then
                Me.Tables.Add(New bas_vehicleDataTable(ds.Tables("bas_vehicle")))
            End If
            If (Not (ds.Tables("Service_out_purchases_Dtl_dtl")) Is Nothing) Then
                Me.Tables.Add(New Service_out_purchases_Dtl_dtlDataTable(ds.Tables("Service_out_purchases_Dtl_dtl")))
            End If
            If (Not (ds.Tables("Service_out_purchases_Dtl")) Is Nothing) Then
                Me.Tables.Add(New Service_out_purchases_DtlDataTable(ds.Tables("Service_out_purchases_Dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit_Bedehi As GL_payment_deposit_BedehiDataTable
        Get
            Return Me.tableGL_payment_deposit_Bedehi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit_Pardakht As GL_payment_deposit_PardakhtDataTable
        Get
            Return Me.tableGL_payment_deposit_Pardakht
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit_adj As GL_payment_deposit_adjDataTable
        Get
            Return Me.tableGL_payment_deposit_adj
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_debit_deposit As GL_debit_depositDataTable
        Get
            Return Me.tableGL_debit_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UpdatePaidAmount As UpdatePaidAmountDataTable
        Get
            Return Me.tableUpdatePaidAmount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_vehicle As bas_vehicleDataTable
        Get
            Return Me.tablebas_vehicle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Service_out_purchases_Dtl_dtl As Service_out_purchases_Dtl_dtlDataTable
        Get
            Return Me.tableService_out_purchases_Dtl_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Service_out_purchases_Dtl As Service_out_purchases_DtlDataTable
        Get
            Return Me.tableService_out_purchases_Dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmUpdateDatabase = CType(MyBase.Clone,DSFrmUpdateDatabase)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GL_payment_deposit_Bedehi")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_deposit_BedehiDataTable(ds.Tables("GL_payment_deposit_Bedehi")))
        End If
        If (Not (ds.Tables("GL_payment_deposit_Pardakht")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_deposit_PardakhtDataTable(ds.Tables("GL_payment_deposit_Pardakht")))
        End If
        If (Not (ds.Tables("GL_payment_deposit_adj")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_deposit_adjDataTable(ds.Tables("GL_payment_deposit_adj")))
        End If
        If (Not (ds.Tables("GL_debit_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_debit_depositDataTable(ds.Tables("GL_debit_deposit")))
        End If
        If (Not (ds.Tables("UpdatePaidAmount")) Is Nothing) Then
            Me.Tables.Add(New UpdatePaidAmountDataTable(ds.Tables("UpdatePaidAmount")))
        End If
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        If (Not (ds.Tables("bas_vehicle")) Is Nothing) Then
            Me.Tables.Add(New bas_vehicleDataTable(ds.Tables("bas_vehicle")))
        End If
        If (Not (ds.Tables("Service_out_purchases_Dtl_dtl")) Is Nothing) Then
            Me.Tables.Add(New Service_out_purchases_Dtl_dtlDataTable(ds.Tables("Service_out_purchases_Dtl_dtl")))
        End If
        If (Not (ds.Tables("Service_out_purchases_Dtl")) Is Nothing) Then
            Me.Tables.Add(New Service_out_purchases_DtlDataTable(ds.Tables("Service_out_purchases_Dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGL_payment_deposit_Bedehi = CType(Me.Tables("GL_payment_deposit_Bedehi"),GL_payment_deposit_BedehiDataTable)
        If (Not (Me.tableGL_payment_deposit_Bedehi) Is Nothing) Then
            Me.tableGL_payment_deposit_Bedehi.InitVars
        End If
        Me.tableGL_payment_deposit_Pardakht = CType(Me.Tables("GL_payment_deposit_Pardakht"),GL_payment_deposit_PardakhtDataTable)
        If (Not (Me.tableGL_payment_deposit_Pardakht) Is Nothing) Then
            Me.tableGL_payment_deposit_Pardakht.InitVars
        End If
        Me.tableGL_payment_deposit_adj = CType(Me.Tables("GL_payment_deposit_adj"),GL_payment_deposit_adjDataTable)
        If (Not (Me.tableGL_payment_deposit_adj) Is Nothing) Then
            Me.tableGL_payment_deposit_adj.InitVars
        End If
        Me.tableGL_debit_deposit = CType(Me.Tables("GL_debit_deposit"),GL_debit_depositDataTable)
        If (Not (Me.tableGL_debit_deposit) Is Nothing) Then
            Me.tableGL_debit_deposit.InitVars
        End If
        Me.tableUpdatePaidAmount = CType(Me.Tables("UpdatePaidAmount"),UpdatePaidAmountDataTable)
        If (Not (Me.tableUpdatePaidAmount) Is Nothing) Then
            Me.tableUpdatePaidAmount.InitVars
        End If
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
        Me.tablebas_vehicle = CType(Me.Tables("bas_vehicle"),bas_vehicleDataTable)
        If (Not (Me.tablebas_vehicle) Is Nothing) Then
            Me.tablebas_vehicle.InitVars
        End If
        Me.tableService_out_purchases_Dtl_dtl = CType(Me.Tables("Service_out_purchases_Dtl_dtl"),Service_out_purchases_Dtl_dtlDataTable)
        If (Not (Me.tableService_out_purchases_Dtl_dtl) Is Nothing) Then
            Me.tableService_out_purchases_Dtl_dtl.InitVars
        End If
        Me.tableService_out_purchases_Dtl = CType(Me.Tables("Service_out_purchases_Dtl"),Service_out_purchases_DtlDataTable)
        If (Not (Me.tableService_out_purchases_Dtl) Is Nothing) Then
            Me.tableService_out_purchases_Dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmUpdateDatabase"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmUpdateDatabase.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGL_payment_deposit_Bedehi = New GL_payment_deposit_BedehiDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit_Bedehi)
        Me.tableGL_payment_deposit_Pardakht = New GL_payment_deposit_PardakhtDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit_Pardakht)
        Me.tableGL_payment_deposit_adj = New GL_payment_deposit_adjDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit_adj)
        Me.tableGL_debit_deposit = New GL_debit_depositDataTable
        Me.Tables.Add(Me.tableGL_debit_deposit)
        Me.tableUpdatePaidAmount = New UpdatePaidAmountDataTable
        Me.Tables.Add(Me.tableUpdatePaidAmount)
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
        Me.tablebas_vehicle = New bas_vehicleDataTable
        Me.Tables.Add(Me.tablebas_vehicle)
        Me.tableService_out_purchases_Dtl_dtl = New Service_out_purchases_Dtl_dtlDataTable
        Me.Tables.Add(Me.tableService_out_purchases_Dtl_dtl)
        Me.tableService_out_purchases_Dtl = New Service_out_purchases_DtlDataTable
        Me.Tables.Add(Me.tableService_out_purchases_Dtl)
    End Sub
    
    Private Function ShouldSerializeGL_payment_deposit_Bedehi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit_Pardakht() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit_adj() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_debit_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUpdatePaidAmount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_vehicle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeService_out_purchases_Dtl_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeService_out_purchases_Dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GL_payment_deposit_BedehiRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_deposit_BedehiRowChangeEvent)
    
    Public Delegate Sub GL_payment_deposit_PardakhtRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_deposit_PardakhtRowChangeEvent)
    
    Public Delegate Sub GL_payment_deposit_adjRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_deposit_adjRowChangeEvent)
    
    Public Delegate Sub GL_debit_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_debit_depositRowChangeEvent)
    
    Public Delegate Sub UpdatePaidAmountRowChangeEventHandler(ByVal sender As Object, ByVal e As UpdatePaidAmountRowChangeEvent)
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    Public Delegate Sub bas_vehicleRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_vehicleRowChangeEvent)
    
    Public Delegate Sub Service_out_purchases_Dtl_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Service_out_purchases_Dtl_dtlRowChangeEvent)
    
    Public Delegate Sub Service_out_purchases_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Service_out_purchases_DtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_BedehiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnrefrence_no_Adjustment As DataColumn
        
        Private columnrefrence_no_Gl_receive_payment As DataColumn
        
        Private columnDownpayment_Wo_No As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit_Bedehi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_AdjustmentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Adjustment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_Gl_receive_paymentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Gl_receive_payment
            End Get
        End Property
        
        Friend ReadOnly Property Downpayment_Wo_NoColumn As DataColumn
            Get
                Return Me.columnDownpayment_Wo_No
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_deposit_BedehiRow
            Get
                Return CType(Me.Rows(index),GL_payment_deposit_BedehiRow)
            End Get
        End Property
        
        Public Event GL_payment_deposit_BedehiRowChanged As GL_payment_deposit_BedehiRowChangeEventHandler
        
        Public Event GL_payment_deposit_BedehiRowChanging As GL_payment_deposit_BedehiRowChangeEventHandler
        
        Public Event GL_payment_deposit_BedehiRowDeleted As GL_payment_deposit_BedehiRowChangeEventHandler
        
        Public Event GL_payment_deposit_BedehiRowDeleting As GL_payment_deposit_BedehiRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_deposit_BedehiRow(ByVal row As GL_payment_deposit_BedehiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_deposit_BedehiRow(ByVal id_service_center As String, ByVal refrence_no As String, ByVal refer_type As String, ByVal payment_type As String, ByVal payment_amount As Decimal, ByVal flag_deposit_bank As Boolean, ByVal id_GL_journal As Integer, ByVal Paid_amount As Decimal, ByVal Discount As Decimal, ByVal refrence_no_Adjustment As String, ByVal refrence_no_Gl_receive_payment As String, ByVal Downpayment_Wo_No As String) As GL_payment_deposit_BedehiRow
            Dim rowGL_payment_deposit_BedehiRow As GL_payment_deposit_BedehiRow = CType(Me.NewRow,GL_payment_deposit_BedehiRow)
            rowGL_payment_deposit_BedehiRow.ItemArray = New Object() {Nothing, id_service_center, refrence_no, refer_type, payment_type, payment_amount, flag_deposit_bank, id_GL_journal, Paid_amount, Discount, refrence_no_Adjustment, refrence_no_Gl_receive_payment, Downpayment_Wo_No}
            Me.Rows.Add(rowGL_payment_deposit_BedehiRow)
            Return rowGL_payment_deposit_BedehiRow
        End Function
        
        Public Function FindByID_payment(ByVal ID_payment As Integer) As GL_payment_deposit_BedehiRow
            Return CType(Me.Rows.Find(New Object() {ID_payment}),GL_payment_deposit_BedehiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_deposit_BedehiDataTable = CType(MyBase.Clone,GL_payment_deposit_BedehiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_deposit_BedehiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnrefrence_no_Adjustment = Me.Columns("refrence_no_Adjustment")
            Me.columnrefrence_no_Gl_receive_payment = Me.Columns("refrence_no_Gl_receive_payment")
            Me.columnDownpayment_Wo_No = Me.Columns("Downpayment_Wo_No")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnrefrence_no_Adjustment = New DataColumn("refrence_no_Adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Adjustment)
            Me.columnrefrence_no_Gl_receive_payment = New DataColumn("refrence_no_Gl_receive_payment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Gl_receive_payment)
            Me.columnDownpayment_Wo_No = New DataColumn("Downpayment_Wo_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDownpayment_Wo_No)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_payment}, true))
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnID_payment.Unique = true
        End Sub
        
        Public Function NewGL_payment_deposit_BedehiRow() As GL_payment_deposit_BedehiRow
            Return CType(Me.NewRow,GL_payment_deposit_BedehiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_deposit_BedehiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_deposit_BedehiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_deposit_BedehiRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_BedehiRowChanged(Me, New GL_payment_deposit_BedehiRowChangeEvent(CType(e.Row,GL_payment_deposit_BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_deposit_BedehiRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_BedehiRowChanging(Me, New GL_payment_deposit_BedehiRowChangeEvent(CType(e.Row,GL_payment_deposit_BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_deposit_BedehiRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_BedehiRowDeleted(Me, New GL_payment_deposit_BedehiRowChangeEvent(CType(e.Row,GL_payment_deposit_BedehiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_deposit_BedehiRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_BedehiRowDeleting(Me, New GL_payment_deposit_BedehiRowChangeEvent(CType(e.Row,GL_payment_deposit_BedehiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_deposit_BedehiRow(ByVal row As GL_payment_deposit_BedehiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_BedehiRow
        Inherits DataRow
        
        Private tableGL_payment_deposit_Bedehi As GL_payment_deposit_BedehiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit_Bedehi = CType(Me.Table,GL_payment_deposit_BedehiDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_Bedehi.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.DiscountColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_Adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_AdjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_AdjustmentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_Gl_receive_payment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_Gl_receive_paymentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_Gl_receive_paymentColumn) = value
            End Set
        End Property
        
        Public Property Downpayment_Wo_No As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Bedehi.Downpayment_Wo_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Bedehi.Downpayment_Wo_NoColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit_Bedehi.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit_Bedehi.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit_Bedehi.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit_Bedehi.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit_Bedehi.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit_Bedehi.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_payment_deposit_Bedehi.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableGL_payment_deposit_Bedehi.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGL_payment_deposit_Bedehi.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_no_AdjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.refrence_no_AdjustmentColumn)
        End Function
        
        Public Sub Setrefrence_no_AdjustmentNull()
            Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_AdjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_no_Gl_receive_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.refrence_no_Gl_receive_paymentColumn)
        End Function
        
        Public Sub Setrefrence_no_Gl_receive_paymentNull()
            Me(Me.tableGL_payment_deposit_Bedehi.refrence_no_Gl_receive_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownpayment_Wo_NoNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Bedehi.Downpayment_Wo_NoColumn)
        End Function
        
        Public Sub SetDownpayment_Wo_NoNull()
            Me(Me.tableGL_payment_deposit_Bedehi.Downpayment_Wo_NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_BedehiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_deposit_BedehiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_deposit_BedehiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_deposit_BedehiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_PardakhtDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnrefrence_no_Adjustment As DataColumn
        
        Private columnrefrence_no_Gl_receive_payment As DataColumn
        
        Private columnDownpayment_Wo_No As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit_Pardakht")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_AdjustmentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Adjustment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_Gl_receive_paymentColumn As DataColumn
            Get
                Return Me.columnrefrence_no_Gl_receive_payment
            End Get
        End Property
        
        Friend ReadOnly Property Downpayment_Wo_NoColumn As DataColumn
            Get
                Return Me.columnDownpayment_Wo_No
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_deposit_PardakhtRow
            Get
                Return CType(Me.Rows(index),GL_payment_deposit_PardakhtRow)
            End Get
        End Property
        
        Public Event GL_payment_deposit_PardakhtRowChanged As GL_payment_deposit_PardakhtRowChangeEventHandler
        
        Public Event GL_payment_deposit_PardakhtRowChanging As GL_payment_deposit_PardakhtRowChangeEventHandler
        
        Public Event GL_payment_deposit_PardakhtRowDeleted As GL_payment_deposit_PardakhtRowChangeEventHandler
        
        Public Event GL_payment_deposit_PardakhtRowDeleting As GL_payment_deposit_PardakhtRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_deposit_PardakhtRow(ByVal row As GL_payment_deposit_PardakhtRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_deposit_PardakhtRow(ByVal id_service_center As String, ByVal refrence_no As String, ByVal refer_type As String, ByVal payment_type As String, ByVal payment_amount As Decimal, ByVal flag_deposit_bank As Boolean, ByVal id_GL_journal As Integer, ByVal Paid_amount As Decimal, ByVal Discount As Decimal, ByVal refrence_no_Adjustment As String, ByVal refrence_no_Gl_receive_payment As String, ByVal Downpayment_Wo_No As String) As GL_payment_deposit_PardakhtRow
            Dim rowGL_payment_deposit_PardakhtRow As GL_payment_deposit_PardakhtRow = CType(Me.NewRow,GL_payment_deposit_PardakhtRow)
            rowGL_payment_deposit_PardakhtRow.ItemArray = New Object() {Nothing, id_service_center, refrence_no, refer_type, payment_type, payment_amount, flag_deposit_bank, id_GL_journal, Paid_amount, Discount, refrence_no_Adjustment, refrence_no_Gl_receive_payment, Downpayment_Wo_No}
            Me.Rows.Add(rowGL_payment_deposit_PardakhtRow)
            Return rowGL_payment_deposit_PardakhtRow
        End Function
        
        Public Function FindByID_payment(ByVal ID_payment As Integer) As GL_payment_deposit_PardakhtRow
            Return CType(Me.Rows.Find(New Object() {ID_payment}),GL_payment_deposit_PardakhtRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_deposit_PardakhtDataTable = CType(MyBase.Clone,GL_payment_deposit_PardakhtDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_deposit_PardakhtDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnrefrence_no_Adjustment = Me.Columns("refrence_no_Adjustment")
            Me.columnrefrence_no_Gl_receive_payment = Me.Columns("refrence_no_Gl_receive_payment")
            Me.columnDownpayment_Wo_No = Me.Columns("Downpayment_Wo_No")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnrefrence_no_Adjustment = New DataColumn("refrence_no_Adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Adjustment)
            Me.columnrefrence_no_Gl_receive_payment = New DataColumn("refrence_no_Gl_receive_payment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_Gl_receive_payment)
            Me.columnDownpayment_Wo_No = New DataColumn("Downpayment_Wo_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDownpayment_Wo_No)
            Me.Constraints.Add(New UniqueConstraint("DSFrmUpdateDatabaseKey1", New DataColumn() {Me.columnID_payment}, true))
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnID_payment.Unique = true
        End Sub
        
        Public Function NewGL_payment_deposit_PardakhtRow() As GL_payment_deposit_PardakhtRow
            Return CType(Me.NewRow,GL_payment_deposit_PardakhtRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_deposit_PardakhtRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_deposit_PardakhtRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_deposit_PardakhtRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_PardakhtRowChanged(Me, New GL_payment_deposit_PardakhtRowChangeEvent(CType(e.Row,GL_payment_deposit_PardakhtRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_deposit_PardakhtRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_PardakhtRowChanging(Me, New GL_payment_deposit_PardakhtRowChangeEvent(CType(e.Row,GL_payment_deposit_PardakhtRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_deposit_PardakhtRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_PardakhtRowDeleted(Me, New GL_payment_deposit_PardakhtRowChangeEvent(CType(e.Row,GL_payment_deposit_PardakhtRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_deposit_PardakhtRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_PardakhtRowDeleting(Me, New GL_payment_deposit_PardakhtRowChangeEvent(CType(e.Row,GL_payment_deposit_PardakhtRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_deposit_PardakhtRow(ByVal row As GL_payment_deposit_PardakhtRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_PardakhtRow
        Inherits DataRow
        
        Private tableGL_payment_deposit_Pardakht As GL_payment_deposit_PardakhtDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit_Pardakht = CType(Me.Table,GL_payment_deposit_PardakhtDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_Pardakht.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.DiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.DiscountColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_Adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_AdjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_AdjustmentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_Gl_receive_payment As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_Gl_receive_paymentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_Gl_receive_paymentColumn) = value
            End Set
        End Property
        
        Public Property Downpayment_Wo_No As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_Pardakht.Downpayment_Wo_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_Pardakht.Downpayment_Wo_NoColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit_Pardakht.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit_Pardakht.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit_Pardakht.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit_Pardakht.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit_Pardakht.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit_Pardakht.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_payment_deposit_Pardakht.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableGL_payment_deposit_Pardakht.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableGL_payment_deposit_Pardakht.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_no_AdjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.refrence_no_AdjustmentColumn)
        End Function
        
        Public Sub Setrefrence_no_AdjustmentNull()
            Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_AdjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_no_Gl_receive_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.refrence_no_Gl_receive_paymentColumn)
        End Function
        
        Public Sub Setrefrence_no_Gl_receive_paymentNull()
            Me(Me.tableGL_payment_deposit_Pardakht.refrence_no_Gl_receive_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownpayment_Wo_NoNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_Pardakht.Downpayment_Wo_NoColumn)
        End Function
        
        Public Sub SetDownpayment_Wo_NoNull()
            Me(Me.tableGL_payment_deposit_Pardakht.Downpayment_Wo_NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_PardakhtRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_deposit_PardakhtRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_deposit_PardakhtRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_deposit_PardakhtRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_adjDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDGL_account_adjustment_dtl As DataColumn
        
        Private columnrefrence_no_due As DataColumn
        
        Private columnid_service_center_due As DataColumn
        
        Private columnamount_adjustment As DataColumn
        
        Private columnAR_Paid_amount As DataColumn
        
        Private columnAdj_Paid_Amount As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit_adj")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDGL_account_adjustment_dtlColumn As DataColumn
            Get
                Return Me.columnIDGL_account_adjustment_dtl
            End Get
        End Property
        
        Friend ReadOnly Property refrence_no_dueColumn As DataColumn
            Get
                Return Me.columnrefrence_no_due
            End Get
        End Property
        
        Friend ReadOnly Property id_service_center_dueColumn As DataColumn
            Get
                Return Me.columnid_service_center_due
            End Get
        End Property
        
        Friend ReadOnly Property amount_adjustmentColumn As DataColumn
            Get
                Return Me.columnamount_adjustment
            End Get
        End Property
        
        Friend ReadOnly Property AR_Paid_amountColumn As DataColumn
            Get
                Return Me.columnAR_Paid_amount
            End Get
        End Property
        
        Friend ReadOnly Property Adj_Paid_AmountColumn As DataColumn
            Get
                Return Me.columnAdj_Paid_Amount
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_deposit_adjRow
            Get
                Return CType(Me.Rows(index),GL_payment_deposit_adjRow)
            End Get
        End Property
        
        Public Event GL_payment_deposit_adjRowChanged As GL_payment_deposit_adjRowChangeEventHandler
        
        Public Event GL_payment_deposit_adjRowChanging As GL_payment_deposit_adjRowChangeEventHandler
        
        Public Event GL_payment_deposit_adjRowDeleted As GL_payment_deposit_adjRowChangeEventHandler
        
        Public Event GL_payment_deposit_adjRowDeleting As GL_payment_deposit_adjRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_deposit_adjRow(ByVal row As GL_payment_deposit_adjRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_deposit_adjRow(ByVal refrence_no_due As String, ByVal id_service_center_due As String, ByVal amount_adjustment As Decimal, ByVal AR_Paid_amount As Decimal, ByVal Adj_Paid_Amount As Decimal, ByVal BalanceAmount As Decimal, ByVal cod_customer As String, ByVal AR_due_date As String) As GL_payment_deposit_adjRow
            Dim rowGL_payment_deposit_adjRow As GL_payment_deposit_adjRow = CType(Me.NewRow,GL_payment_deposit_adjRow)
            rowGL_payment_deposit_adjRow.ItemArray = New Object() {Nothing, refrence_no_due, id_service_center_due, amount_adjustment, AR_Paid_amount, Adj_Paid_Amount, BalanceAmount, cod_customer, AR_due_date}
            Me.Rows.Add(rowGL_payment_deposit_adjRow)
            Return rowGL_payment_deposit_adjRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_deposit_adjDataTable = CType(MyBase.Clone,GL_payment_deposit_adjDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_deposit_adjDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDGL_account_adjustment_dtl = Me.Columns("IDGL_account_adjustment_dtl")
            Me.columnrefrence_no_due = Me.Columns("refrence_no_due")
            Me.columnid_service_center_due = Me.Columns("id_service_center_due")
            Me.columnamount_adjustment = Me.Columns("amount_adjustment")
            Me.columnAR_Paid_amount = Me.Columns("AR_Paid_amount")
            Me.columnAdj_Paid_Amount = Me.Columns("Adj_Paid_Amount")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDGL_account_adjustment_dtl = New DataColumn("IDGL_account_adjustment_dtl", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDGL_account_adjustment_dtl)
            Me.columnrefrence_no_due = New DataColumn("refrence_no_due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no_due)
            Me.columnid_service_center_due = New DataColumn("id_service_center_due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center_due)
            Me.columnamount_adjustment = New DataColumn("amount_adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_adjustment)
            Me.columnAR_Paid_amount = New DataColumn("AR_Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_Paid_amount)
            Me.columnAdj_Paid_Amount = New DataColumn("Adj_Paid_Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdj_Paid_Amount)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columnIDGL_account_adjustment_dtl.AutoIncrement = true
            Me.columnIDGL_account_adjustment_dtl.AllowDBNull = false
            Me.columnIDGL_account_adjustment_dtl.ReadOnly = true
            Me.columnrefrence_no_due.AllowDBNull = false
            Me.columnid_service_center_due.AllowDBNull = false
            Me.columnamount_adjustment.ReadOnly = true
            Me.columnAR_Paid_amount.ReadOnly = true
            Me.columnAdj_Paid_Amount.ReadOnly = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewGL_payment_deposit_adjRow() As GL_payment_deposit_adjRow
            Return CType(Me.NewRow,GL_payment_deposit_adjRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_deposit_adjRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_deposit_adjRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_deposit_adjRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_adjRowChanged(Me, New GL_payment_deposit_adjRowChangeEvent(CType(e.Row,GL_payment_deposit_adjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_deposit_adjRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_adjRowChanging(Me, New GL_payment_deposit_adjRowChangeEvent(CType(e.Row,GL_payment_deposit_adjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_deposit_adjRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_adjRowDeleted(Me, New GL_payment_deposit_adjRowChangeEvent(CType(e.Row,GL_payment_deposit_adjRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_deposit_adjRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_deposit_adjRowDeleting(Me, New GL_payment_deposit_adjRowChangeEvent(CType(e.Row,GL_payment_deposit_adjRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_deposit_adjRow(ByVal row As GL_payment_deposit_adjRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_adjRow
        Inherits DataRow
        
        Private tableGL_payment_deposit_adj As GL_payment_deposit_adjDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit_adj = CType(Me.Table,GL_payment_deposit_adjDataTable)
        End Sub
        
        Public Property IDGL_account_adjustment_dtl As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit_adj.IDGL_account_adjustment_dtlColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.IDGL_account_adjustment_dtlColumn) = value
            End Set
        End Property
        
        Public Property refrence_no_due As String
            Get
                Return CType(Me(Me.tableGL_payment_deposit_adj.refrence_no_dueColumn),String)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.refrence_no_dueColumn) = value
            End Set
        End Property
        
        Public Property id_service_center_due As String
            Get
                Return CType(Me(Me.tableGL_payment_deposit_adj.id_service_center_dueColumn),String)
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.id_service_center_dueColumn) = value
            End Set
        End Property
        
        Public Property amount_adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.amount_adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.amount_adjustmentColumn) = value
            End Set
        End Property
        
        Public Property AR_Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.AR_Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.AR_Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Adj_Paid_Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.Adj_Paid_AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.Adj_Paid_AmountColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit_adj.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit_adj.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Function Isamount_adjustmentNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.amount_adjustmentColumn)
        End Function
        
        Public Sub Setamount_adjustmentNull()
            Me(Me.tableGL_payment_deposit_adj.amount_adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_Paid_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.AR_Paid_amountColumn)
        End Function
        
        Public Sub SetAR_Paid_amountNull()
            Me(Me.tableGL_payment_deposit_adj.AR_Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdj_Paid_AmountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.Adj_Paid_AmountColumn)
        End Function
        
        Public Sub SetAdj_Paid_AmountNull()
            Me(Me.tableGL_payment_deposit_adj.Adj_Paid_AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableGL_payment_deposit_adj.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_payment_deposit_adj.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit_adj.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableGL_payment_deposit_adj.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_deposit_adjRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_deposit_adjRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_deposit_adjRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_deposit_adjRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_debit_deposit As DataColumn
        
        Private columnid_debit_deposit_head As DataColumn
        
        Private columntype_transaction As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnid_check As DataColumn
        
        Private columnid_transfer As DataColumn
        
        Private columnid_external_cash As DataColumn
        
        Private columnid_ATM As DataColumn
        
        Private columnid_adjustment_no As DataColumn
        
        Private columndebit_amount As DataColumn
        
        Private columndeposit_amount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnCleared_bank As DataColumn
        
        Private columnMemo As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_debit_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_depositColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit
            End Get
        End Property
        
        Friend ReadOnly Property id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnid_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property type_transactionColumn As DataColumn
            Get
                Return Me.columntype_transaction
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_checkColumn As DataColumn
            Get
                Return Me.columnid_check
            End Get
        End Property
        
        Friend ReadOnly Property id_transferColumn As DataColumn
            Get
                Return Me.columnid_transfer
            End Get
        End Property
        
        Friend ReadOnly Property id_external_cashColumn As DataColumn
            Get
                Return Me.columnid_external_cash
            End Get
        End Property
        
        Friend ReadOnly Property id_ATMColumn As DataColumn
            Get
                Return Me.columnid_ATM
            End Get
        End Property
        
        Friend ReadOnly Property id_adjustment_noColumn As DataColumn
            Get
                Return Me.columnid_adjustment_no
            End Get
        End Property
        
        Friend ReadOnly Property debit_amountColumn As DataColumn
            Get
                Return Me.columndebit_amount
            End Get
        End Property
        
        Friend ReadOnly Property deposit_amountColumn As DataColumn
            Get
                Return Me.columndeposit_amount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property Cleared_bankColumn As DataColumn
            Get
                Return Me.columnCleared_bank
            End Get
        End Property
        
        Friend ReadOnly Property MemoColumn As DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_debit_depositRow
            Get
                Return CType(Me.Rows(index),GL_debit_depositRow)
            End Get
        End Property
        
        Public Event GL_debit_depositRowChanged As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowChanging As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleted As GL_debit_depositRowChangeEventHandler
        
        Public Event GL_debit_depositRowDeleting As GL_debit_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_debit_depositRow(ByVal id_debit_deposit_head As Integer, ByVal type_transaction As String, ByVal ID_payment As Integer, ByVal id_check As Integer, ByVal id_transfer As Integer, ByVal id_external_cash As Integer, ByVal id_ATM As Integer, ByVal id_adjustment_no As Integer, ByVal debit_amount As Decimal, ByVal deposit_amount As Decimal, ByVal GL_account As String, ByVal Cleared_bank As Boolean, ByVal Memo As String) As GL_debit_depositRow
            Dim rowGL_debit_depositRow As GL_debit_depositRow = CType(Me.NewRow,GL_debit_depositRow)
            rowGL_debit_depositRow.ItemArray = New Object() {Nothing, id_debit_deposit_head, type_transaction, ID_payment, id_check, id_transfer, id_external_cash, id_ATM, id_adjustment_no, debit_amount, deposit_amount, GL_account, Cleared_bank, Memo}
            Me.Rows.Add(rowGL_debit_depositRow)
            Return rowGL_debit_depositRow
        End Function
        
        Public Function FindByid_debit_deposit(ByVal id_debit_deposit As Integer) As GL_debit_depositRow
            Return CType(Me.Rows.Find(New Object() {id_debit_deposit}),GL_debit_depositRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_debit_depositDataTable = CType(MyBase.Clone,GL_debit_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_debit_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_debit_deposit = Me.Columns("id_debit_deposit")
            Me.columnid_debit_deposit_head = Me.Columns("id_debit_deposit_head")
            Me.columntype_transaction = Me.Columns("type_transaction")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_check = Me.Columns("id_check")
            Me.columnid_transfer = Me.Columns("id_transfer")
            Me.columnid_external_cash = Me.Columns("id_external_cash")
            Me.columnid_ATM = Me.Columns("id_ATM")
            Me.columnid_adjustment_no = Me.Columns("id_adjustment_no")
            Me.columndebit_amount = Me.Columns("debit_amount")
            Me.columndeposit_amount = Me.Columns("deposit_amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnCleared_bank = Me.Columns("Cleared_bank")
            Me.columnMemo = Me.Columns("Memo")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_debit_deposit = New DataColumn("id_debit_deposit", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit)
            Me.columnid_debit_deposit_head = New DataColumn("id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_debit_deposit_head)
            Me.columntype_transaction = New DataColumn("type_transaction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_transaction)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_check = New DataColumn("id_check", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_check)
            Me.columnid_transfer = New DataColumn("id_transfer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_transfer)
            Me.columnid_external_cash = New DataColumn("id_external_cash", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_external_cash)
            Me.columnid_ATM = New DataColumn("id_ATM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_ATM)
            Me.columnid_adjustment_no = New DataColumn("id_adjustment_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_adjustment_no)
            Me.columndebit_amount = New DataColumn("debit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebit_amount)
            Me.columndeposit_amount = New DataColumn("deposit_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeposit_amount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnCleared_bank = New DataColumn("Cleared_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCleared_bank)
            Me.columnMemo = New DataColumn("Memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_debit_deposit}, true))
            Me.columnid_debit_deposit.AutoIncrement = true
            Me.columnid_debit_deposit.AllowDBNull = false
            Me.columnid_debit_deposit.ReadOnly = true
            Me.columnid_debit_deposit.Unique = true
            Me.columnCleared_bank.AllowDBNull = false
        End Sub
        
        Public Function NewGL_debit_depositRow() As GL_debit_depositRow
            Return CType(Me.NewRow,GL_debit_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_debit_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_debit_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_debit_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanged(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_debit_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowChanging(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_debit_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleted(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_debit_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_debit_depositRowDeleting(Me, New GL_debit_depositRowChangeEvent(CType(e.Row,GL_debit_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_debit_depositRow(ByVal row As GL_debit_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRow
        Inherits DataRow
        
        Private tableGL_debit_deposit As GL_debit_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_debit_deposit = CType(Me.Table,GL_debit_depositDataTable)
        End Sub
        
        Public Property id_debit_deposit As Integer
            Get
                Return CType(Me(Me.tableGL_debit_deposit.id_debit_depositColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_debit_depositColumn) = value
            End Set
        End Property
        
        Public Property id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property type_transaction As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.type_transactionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.type_transactionColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.ID_paymentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_check As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_checkColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_checkColumn) = value
            End Set
        End Property
        
        Public Property id_transfer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_transferColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_transferColumn) = value
            End Set
        End Property
        
        Public Property id_external_cash As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_external_cashColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_external_cashColumn) = value
            End Set
        End Property
        
        Public Property id_ATM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_ATMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_ATMColumn) = value
            End Set
        End Property
        
        Public Property id_adjustment_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.id_adjustment_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.id_adjustment_noColumn) = value
            End Set
        End Property
        
        Public Property debit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.debit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.debit_amountColumn) = value
            End Set
        End Property
        
        Public Property deposit_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.deposit_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.deposit_amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property Cleared_bank As Boolean
            Get
                Return CType(Me(Me.tableGL_debit_deposit.Cleared_bankColumn),Boolean)
            End Get
            Set
                Me(Me.tableGL_debit_deposit.Cleared_bankColumn) = value
            End Set
        End Property
        
        Public Property Memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_debit_deposit.MemoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_debit_deposit.MemoColumn) = value
            End Set
        End Property
        
        Public Function Isid_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_debit_deposit_headColumn)
        End Function
        
        Public Sub Setid_debit_deposit_headNull()
            Me(Me.tableGL_debit_deposit.id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype_transactionNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.type_transactionColumn)
        End Function
        
        Public Sub Settype_transactionNull()
            Me(Me.tableGL_debit_deposit.type_transactionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_paymentNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.ID_paymentColumn)
        End Function
        
        Public Sub SetID_paymentNull()
            Me(Me.tableGL_debit_deposit.ID_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_checkNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_checkColumn)
        End Function
        
        Public Sub Setid_checkNull()
            Me(Me.tableGL_debit_deposit.id_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_transferNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_transferColumn)
        End Function
        
        Public Sub Setid_transferNull()
            Me(Me.tableGL_debit_deposit.id_transferColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_external_cashNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_external_cashColumn)
        End Function
        
        Public Sub Setid_external_cashNull()
            Me(Me.tableGL_debit_deposit.id_external_cashColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_ATMNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_ATMColumn)
        End Function
        
        Public Sub Setid_ATMNull()
            Me(Me.tableGL_debit_deposit.id_ATMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_adjustment_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.id_adjustment_noColumn)
        End Function
        
        Public Sub Setid_adjustment_noNull()
            Me(Me.tableGL_debit_deposit.id_adjustment_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdebit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.debit_amountColumn)
        End Function
        
        Public Sub Setdebit_amountNull()
            Me(Me.tableGL_debit_deposit.debit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeposit_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.deposit_amountColumn)
        End Function
        
        Public Sub Setdeposit_amountNull()
            Me(Me.tableGL_debit_deposit.deposit_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_debit_deposit.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_debit_deposit.MemoColumn)
        End Function
        
        Public Sub SetMemoNull()
            Me(Me.tableGL_debit_deposit.MemoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_debit_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_debit_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_debit_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_debit_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UpdatePaidAmountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Friend Sub New()
            MyBase.New("UpdatePaidAmount")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UpdatePaidAmountRow
            Get
                Return CType(Me.Rows(index),UpdatePaidAmountRow)
            End Get
        End Property
        
        Public Event UpdatePaidAmountRowChanged As UpdatePaidAmountRowChangeEventHandler
        
        Public Event UpdatePaidAmountRowChanging As UpdatePaidAmountRowChangeEventHandler
        
        Public Event UpdatePaidAmountRowDeleted As UpdatePaidAmountRowChangeEventHandler
        
        Public Event UpdatePaidAmountRowDeleting As UpdatePaidAmountRowChangeEventHandler
        
        Public Overloads Sub AddUpdatePaidAmountRow(ByVal row As UpdatePaidAmountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUpdatePaidAmountRow(ByVal Paid_amount As Decimal, ByVal payment_amount As Decimal) As UpdatePaidAmountRow
            Dim rowUpdatePaidAmountRow As UpdatePaidAmountRow = CType(Me.NewRow,UpdatePaidAmountRow)
            rowUpdatePaidAmountRow.ItemArray = New Object() {Nothing, Paid_amount, payment_amount}
            Me.Rows.Add(rowUpdatePaidAmountRow)
            Return rowUpdatePaidAmountRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UpdatePaidAmountDataTable = CType(MyBase.Clone,UpdatePaidAmountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UpdatePaidAmountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnpayment_amount = Me.Columns("payment_amount")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
        End Sub
        
        Public Function NewUpdatePaidAmountRow() As UpdatePaidAmountRow
            Return CType(Me.NewRow,UpdatePaidAmountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UpdatePaidAmountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UpdatePaidAmountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UpdatePaidAmountRowChangedEvent) Is Nothing) Then
                RaiseEvent UpdatePaidAmountRowChanged(Me, New UpdatePaidAmountRowChangeEvent(CType(e.Row,UpdatePaidAmountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UpdatePaidAmountRowChangingEvent) Is Nothing) Then
                RaiseEvent UpdatePaidAmountRowChanging(Me, New UpdatePaidAmountRowChangeEvent(CType(e.Row,UpdatePaidAmountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UpdatePaidAmountRowDeletedEvent) Is Nothing) Then
                RaiseEvent UpdatePaidAmountRowDeleted(Me, New UpdatePaidAmountRowChangeEvent(CType(e.Row,UpdatePaidAmountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UpdatePaidAmountRowDeletingEvent) Is Nothing) Then
                RaiseEvent UpdatePaidAmountRowDeleting(Me, New UpdatePaidAmountRowChangeEvent(CType(e.Row,UpdatePaidAmountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUpdatePaidAmountRow(ByVal row As UpdatePaidAmountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UpdatePaidAmountRow
        Inherits DataRow
        
        Private tableUpdatePaidAmount As UpdatePaidAmountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUpdatePaidAmount = CType(Me.Table,UpdatePaidAmountDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableUpdatePaidAmount.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableUpdatePaidAmount.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUpdatePaidAmount.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatePaidAmount.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUpdatePaidAmount.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatePaidAmount.payment_amountColumn) = value
            End Set
        End Property
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableUpdatePaidAmount.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableUpdatePaidAmount.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableUpdatePaidAmount.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableUpdatePaidAmount.payment_amountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UpdatePaidAmountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UpdatePaidAmountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UpdatePaidAmountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UpdatePaidAmountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnRefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property Refrence_noColumn As DataColumn
            Get
                Return Me.columnRefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String, ByVal Amount As Decimal, ByVal Refrence_no As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME, Amount, Refrence_no}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnRefrence_no = Me.Columns("Refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnRefrence_no = New DataColumn("Refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefrence_no)
            Me.columnSTORENO.AllowDBNull = false
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.AmountColumn) = value
            End Set
        End Property
        
        Public Property Refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.Refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.Refrence_noColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableStore_Setup.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.Refrence_noColumn)
        End Function
        
        Public Sub SetRefrence_noNull()
            Me(Me.tableStore_Setup.Refrence_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vehicle As DataColumn
        
        Private columncod_make As DataColumn
        
        Private columncod_model As DataColumn
        
        Private columnmake_year As DataColumn
        
        Private columnoptions As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_vehicle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vehicleColumn As DataColumn
            Get
                Return Me.columncod_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property cod_makeColumn As DataColumn
            Get
                Return Me.columncod_make
            End Get
        End Property
        
        Friend ReadOnly Property cod_modelColumn As DataColumn
            Get
                Return Me.columncod_model
            End Get
        End Property
        
        Friend ReadOnly Property make_yearColumn As DataColumn
            Get
                Return Me.columnmake_year
            End Get
        End Property
        
        Friend ReadOnly Property optionsColumn As DataColumn
            Get
                Return Me.columnoptions
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_vehicleRow
            Get
                Return CType(Me.Rows(index),bas_vehicleRow)
            End Get
        End Property
        
        Public Event bas_vehicleRowChanged As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowChanging As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowDeleted As bas_vehicleRowChangeEventHandler
        
        Public Event bas_vehicleRowDeleting As bas_vehicleRowChangeEventHandler
        
        Public Overloads Sub Addbas_vehicleRow(ByVal row As bas_vehicleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_vehicleRow(ByVal cod_vehicle As String, ByVal cod_make As String, ByVal cod_model As String, ByVal make_year As String, ByVal options As String) As bas_vehicleRow
            Dim rowbas_vehicleRow As bas_vehicleRow = CType(Me.NewRow,bas_vehicleRow)
            rowbas_vehicleRow.ItemArray = New Object() {cod_vehicle, cod_make, cod_model, make_year, options}
            Me.Rows.Add(rowbas_vehicleRow)
            Return rowbas_vehicleRow
        End Function
        
        Public Function FindBycod_vehicle(ByVal cod_vehicle As String) As bas_vehicleRow
            Return CType(Me.Rows.Find(New Object() {cod_vehicle}),bas_vehicleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_vehicleDataTable = CType(MyBase.Clone,bas_vehicleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_vehicleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vehicle = Me.Columns("cod_vehicle")
            Me.columncod_make = Me.Columns("cod_make")
            Me.columncod_model = Me.Columns("cod_model")
            Me.columnmake_year = Me.Columns("make_year")
            Me.columnoptions = Me.Columns("options")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vehicle = New DataColumn("cod_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vehicle)
            Me.columncod_make = New DataColumn("cod_make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_make)
            Me.columncod_model = New DataColumn("cod_model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_model)
            Me.columnmake_year = New DataColumn("make_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake_year)
            Me.columnoptions = New DataColumn("options", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoptions)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vehicle}, true))
            Me.columncod_vehicle.AllowDBNull = false
            Me.columncod_vehicle.Unique = true
            Me.columncod_make.AllowDBNull = false
            Me.columncod_model.AllowDBNull = false
            Me.columnmake_year.AllowDBNull = false
            Me.columnoptions.AllowDBNull = false
        End Sub
        
        Public Function Newbas_vehicleRow() As bas_vehicleRow
            Return CType(Me.NewRow,bas_vehicleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_vehicleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_vehicleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_vehicleRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowChanged(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_vehicleRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowChanging(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_vehicleRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowDeleted(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_vehicleRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_vehicleRowDeleting(Me, New bas_vehicleRowChangeEvent(CType(e.Row,bas_vehicleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_vehicleRow(ByVal row As bas_vehicleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleRow
        Inherits DataRow
        
        Private tablebas_vehicle As bas_vehicleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_vehicle = CType(Me.Table,bas_vehicleDataTable)
        End Sub
        
        Public Property cod_vehicle As String
            Get
                Return CType(Me(Me.tablebas_vehicle.cod_vehicleColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.cod_vehicleColumn) = value
            End Set
        End Property
        
        Public Property cod_make As String
            Get
                Return CType(Me(Me.tablebas_vehicle.cod_makeColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.cod_makeColumn) = value
            End Set
        End Property
        
        Public Property cod_model As String
            Get
                Return CType(Me(Me.tablebas_vehicle.cod_modelColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.cod_modelColumn) = value
            End Set
        End Property
        
        Public Property make_year As String
            Get
                Return CType(Me(Me.tablebas_vehicle.make_yearColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.make_yearColumn) = value
            End Set
        End Property
        
        Public Property options As String
            Get
                Return CType(Me(Me.tablebas_vehicle.optionsColumn),String)
            End Get
            Set
                Me(Me.tablebas_vehicle.optionsColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_vehicleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_vehicleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_vehicleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_vehicleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_Dtl_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnDue_Date As DataColumn
        
        Private columnCost As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Friend Sub New()
            MyBase.New("Service_out_purchases_Dtl_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Service_out_purchases_Dtl_dtlRow
            Get
                Return CType(Me.Rows(index),Service_out_purchases_Dtl_dtlRow)
            End Get
        End Property
        
        Public Event Service_out_purchases_Dtl_dtlRowChanged As Service_out_purchases_Dtl_dtlRowChangeEventHandler
        
        Public Event Service_out_purchases_Dtl_dtlRowChanging As Service_out_purchases_Dtl_dtlRowChangeEventHandler
        
        Public Event Service_out_purchases_Dtl_dtlRowDeleted As Service_out_purchases_Dtl_dtlRowChangeEventHandler
        
        Public Event Service_out_purchases_Dtl_dtlRowDeleting As Service_out_purchases_Dtl_dtlRowChangeEventHandler
        
        Public Overloads Sub AddService_out_purchases_Dtl_dtlRow(ByVal row As Service_out_purchases_Dtl_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddService_out_purchases_Dtl_dtlRow(ByVal id_service_center As String, ByVal radif As Short, ByVal Due_Date As String, ByVal Cost As Decimal, ByVal AR_terms As String) As Service_out_purchases_Dtl_dtlRow
            Dim rowService_out_purchases_Dtl_dtlRow As Service_out_purchases_Dtl_dtlRow = CType(Me.NewRow,Service_out_purchases_Dtl_dtlRow)
            rowService_out_purchases_Dtl_dtlRow.ItemArray = New Object() {Nothing, id_service_center, radif, Due_Date, Cost, AR_terms}
            Me.Rows.Add(rowService_out_purchases_Dtl_dtlRow)
            Return rowService_out_purchases_Dtl_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Service_out_purchases_Dtl_dtlDataTable = CType(MyBase.Clone,Service_out_purchases_Dtl_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Service_out_purchases_Dtl_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columnCost = Me.Columns("Cost")
            Me.columnAR_terms = Me.Columns("AR_terms")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columnCost = New DataColumn("Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnIDService_out_purchases_dtl.AutoIncrement = true
            Me.columnIDService_out_purchases_dtl.AllowDBNull = false
            Me.columnIDService_out_purchases_dtl.ReadOnly = true
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnDue_Date.AllowDBNull = false
            Me.columnCost.AllowDBNull = false
        End Sub
        
        Public Function NewService_out_purchases_Dtl_dtlRow() As Service_out_purchases_Dtl_dtlRow
            Return CType(Me.NewRow,Service_out_purchases_Dtl_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Service_out_purchases_Dtl_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Service_out_purchases_Dtl_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Service_out_purchases_Dtl_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_Dtl_dtlRowChanged(Me, New Service_out_purchases_Dtl_dtlRowChangeEvent(CType(e.Row,Service_out_purchases_Dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Service_out_purchases_Dtl_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_Dtl_dtlRowChanging(Me, New Service_out_purchases_Dtl_dtlRowChangeEvent(CType(e.Row,Service_out_purchases_Dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Service_out_purchases_Dtl_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_Dtl_dtlRowDeleted(Me, New Service_out_purchases_Dtl_dtlRowChangeEvent(CType(e.Row,Service_out_purchases_Dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Service_out_purchases_Dtl_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_Dtl_dtlRowDeleting(Me, New Service_out_purchases_Dtl_dtlRowChangeEvent(CType(e.Row,Service_out_purchases_Dtl_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveService_out_purchases_Dtl_dtlRow(ByVal row As Service_out_purchases_Dtl_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_Dtl_dtlRow
        Inherits DataRow
        
        Private tableService_out_purchases_Dtl_dtl As Service_out_purchases_Dtl_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableService_out_purchases_Dtl_dtl = CType(Me.Table,Service_out_purchases_Dtl_dtlDataTable)
        End Sub
        
        Public Property IDService_out_purchases_dtl As Decimal
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.IDService_out_purchases_dtlColumn),Decimal)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property Due_Date As String
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.Due_DateColumn),String)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property Cost As Decimal
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.CostColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableService_out_purchases_Dtl_dtl.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl_dtl.AR_termsColumn) = value
            End Set
        End Property
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableService_out_purchases_Dtl_dtl.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableService_out_purchases_Dtl_dtl.AR_termsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_Dtl_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Service_out_purchases_Dtl_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Service_out_purchases_Dtl_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Service_out_purchases_Dtl_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDService_out_purchases_dtl As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnCost As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnDue_Date_dtl As DataColumn
        
        Friend Sub New()
            MyBase.New("Service_out_purchases_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDService_out_purchases_dtlColumn As DataColumn
            Get
                Return Me.columnIDService_out_purchases_dtl
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property Due_Date_dtlColumn As DataColumn
            Get
                Return Me.columnDue_Date_dtl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Service_out_purchases_DtlRow
            Get
                Return CType(Me.Rows(index),Service_out_purchases_DtlRow)
            End Get
        End Property
        
        Public Event Service_out_purchases_DtlRowChanged As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowChanging As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowDeleted As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowDeleting As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Overloads Sub AddService_out_purchases_DtlRow(ByVal row As Service_out_purchases_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddService_out_purchases_DtlRow(ByVal id_service_center As String, ByVal radif As Short, ByVal Cost As Single, ByVal AR_terms As String, ByVal due_date As String, ByVal Due_Date_dtl As String) As Service_out_purchases_DtlRow
            Dim rowService_out_purchases_DtlRow As Service_out_purchases_DtlRow = CType(Me.NewRow,Service_out_purchases_DtlRow)
            rowService_out_purchases_DtlRow.ItemArray = New Object() {Nothing, id_service_center, radif, Cost, AR_terms, due_date, Due_Date_dtl}
            Me.Rows.Add(rowService_out_purchases_DtlRow)
            Return rowService_out_purchases_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Service_out_purchases_DtlDataTable = CType(MyBase.Clone,Service_out_purchases_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Service_out_purchases_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDService_out_purchases_dtl = Me.Columns("IDService_out_purchases_dtl")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columnCost = Me.Columns("Cost")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnDue_Date_dtl = Me.Columns("Due_Date_dtl")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDService_out_purchases_dtl = New DataColumn("IDService_out_purchases_dtl", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDService_out_purchases_dtl)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnCost = New DataColumn("Cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnDue_Date_dtl = New DataColumn("Due_Date_dtl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date_dtl)
            Me.columnIDService_out_purchases_dtl.AutoIncrement = true
            Me.columnIDService_out_purchases_dtl.AllowDBNull = false
            Me.columnIDService_out_purchases_dtl.ReadOnly = true
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnCost.ReadOnly = true
            Me.columnDue_Date_dtl.AllowDBNull = false
        End Sub
        
        Public Function NewService_out_purchases_DtlRow() As Service_out_purchases_DtlRow
            Return CType(Me.NewRow,Service_out_purchases_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Service_out_purchases_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Service_out_purchases_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Service_out_purchases_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowChanged(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Service_out_purchases_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowChanging(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Service_out_purchases_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowDeleted(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Service_out_purchases_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowDeleting(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveService_out_purchases_DtlRow(ByVal row As Service_out_purchases_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlRow
        Inherits DataRow
        
        Private tableService_out_purchases_Dtl As Service_out_purchases_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableService_out_purchases_Dtl = CType(Me.Table,Service_out_purchases_DtlDataTable)
        End Sub
        
        Public Property IDService_out_purchases_dtl As Decimal
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.IDService_out_purchases_dtlColumn),Decimal)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.IDService_out_purchases_dtlColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property Cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableService_out_purchases_Dtl.CostColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.CostColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableService_out_purchases_Dtl.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableService_out_purchases_Dtl.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.due_dateColumn) = value
            End Set
        End Property
        
        Public Property Due_Date_dtl As String
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.Due_Date_dtlColumn),String)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.Due_Date_dtlColumn) = value
            End Set
        End Property
        
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableService_out_purchases_Dtl.CostColumn)
        End Function
        
        Public Sub SetCostNull()
            Me(Me.tableService_out_purchases_Dtl.CostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableService_out_purchases_Dtl.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableService_out_purchases_Dtl.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableService_out_purchases_Dtl.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableService_out_purchases_Dtl.due_dateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Service_out_purchases_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Service_out_purchases_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Service_out_purchases_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
