'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmCleanDatabase
    Inherits DataSet
    
    Private tableTableMap As TableMapDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TableMap")) Is Nothing) Then
                Me.Tables.Add(New TableMapDataTable(ds.Tables("TableMap")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TableMap As TableMapDataTable
        Get
            Return Me.tableTableMap
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmCleanDatabase = CType(MyBase.Clone,DSFrmCleanDatabase)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TableMap")) Is Nothing) Then
            Me.Tables.Add(New TableMapDataTable(ds.Tables("TableMap")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTableMap = CType(Me.Tables("TableMap"),TableMapDataTable)
        If (Not (Me.tableTableMap) Is Nothing) Then
            Me.tableTableMap.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmCleanDatabase"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmCleanDatabase.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTableMap = New TableMapDataTable
        Me.Tables.Add(Me.tableTableMap)
    End Sub
    
    Private Function ShouldSerializeTableMap() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TableMapRowChangeEventHandler(ByVal sender As Object, ByVal e As TableMapRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TableMapDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTableId As DataColumn
        
        Private columnTableDesc As DataColumn
        
        Private columnTableParentId As DataColumn
        
        Private columnTableName As DataColumn
        
        Private columnWhereClause As DataColumn
        
        Friend Sub New()
            MyBase.New("TableMap")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TableIdColumn As DataColumn
            Get
                Return Me.columnTableId
            End Get
        End Property
        
        Friend ReadOnly Property TableDescColumn As DataColumn
            Get
                Return Me.columnTableDesc
            End Get
        End Property
        
        Friend ReadOnly Property TableParentIdColumn As DataColumn
            Get
                Return Me.columnTableParentId
            End Get
        End Property
        
        Friend ReadOnly Property TableNameColumn As DataColumn
            Get
                Return Me.columnTableName
            End Get
        End Property
        
        Friend ReadOnly Property WhereClauseColumn As DataColumn
            Get
                Return Me.columnWhereClause
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TableMapRow
            Get
                Return CType(Me.Rows(index),TableMapRow)
            End Get
        End Property
        
        Public Event TableMapRowChanged As TableMapRowChangeEventHandler
        
        Public Event TableMapRowChanging As TableMapRowChangeEventHandler
        
        Public Event TableMapRowDeleted As TableMapRowChangeEventHandler
        
        Public Event TableMapRowDeleting As TableMapRowChangeEventHandler
        
        Public Overloads Sub AddTableMapRow(ByVal row As TableMapRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTableMapRow(ByVal TableId As String, ByVal TableDesc As String, ByVal TableParentId As String, ByVal TableName As String, ByVal WhereClause As String) As TableMapRow
            Dim rowTableMapRow As TableMapRow = CType(Me.NewRow,TableMapRow)
            rowTableMapRow.ItemArray = New Object() {TableId, TableDesc, TableParentId, TableName, WhereClause}
            Me.Rows.Add(rowTableMapRow)
            Return rowTableMapRow
        End Function
        
        Public Function FindByTableId(ByVal TableId As String) As TableMapRow
            Return CType(Me.Rows.Find(New Object() {TableId}),TableMapRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TableMapDataTable = CType(MyBase.Clone,TableMapDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TableMapDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTableId = Me.Columns("TableId")
            Me.columnTableDesc = Me.Columns("TableDesc")
            Me.columnTableParentId = Me.Columns("TableParentId")
            Me.columnTableName = Me.Columns("TableName")
            Me.columnWhereClause = Me.Columns("WhereClause")
        End Sub
        
        Private Sub InitClass()
            Me.columnTableId = New DataColumn("TableId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTableId)
            Me.columnTableDesc = New DataColumn("TableDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTableDesc)
            Me.columnTableParentId = New DataColumn("TableParentId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTableParentId)
            Me.columnTableName = New DataColumn("TableName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTableName)
            Me.columnWhereClause = New DataColumn("WhereClause", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWhereClause)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnTableId}, true))
            Me.columnTableId.AllowDBNull = false
            Me.columnTableId.Unique = true
            Me.columnTableDesc.AllowDBNull = false
        End Sub
        
        Public Function NewTableMapRow() As TableMapRow
            Return CType(Me.NewRow,TableMapRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TableMapRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TableMapRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TableMapRowChangedEvent) Is Nothing) Then
                RaiseEvent TableMapRowChanged(Me, New TableMapRowChangeEvent(CType(e.Row,TableMapRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TableMapRowChangingEvent) Is Nothing) Then
                RaiseEvent TableMapRowChanging(Me, New TableMapRowChangeEvent(CType(e.Row,TableMapRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TableMapRowDeletedEvent) Is Nothing) Then
                RaiseEvent TableMapRowDeleted(Me, New TableMapRowChangeEvent(CType(e.Row,TableMapRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TableMapRowDeletingEvent) Is Nothing) Then
                RaiseEvent TableMapRowDeleting(Me, New TableMapRowChangeEvent(CType(e.Row,TableMapRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTableMapRow(ByVal row As TableMapRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TableMapRow
        Inherits DataRow
        
        Private tableTableMap As TableMapDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTableMap = CType(Me.Table,TableMapDataTable)
        End Sub
        
        Public Property TableId As String
            Get
                Return CType(Me(Me.tableTableMap.TableIdColumn),String)
            End Get
            Set
                Me(Me.tableTableMap.TableIdColumn) = value
            End Set
        End Property
        
        Public Property TableDesc As String
            Get
                Return CType(Me(Me.tableTableMap.TableDescColumn),String)
            End Get
            Set
                Me(Me.tableTableMap.TableDescColumn) = value
            End Set
        End Property
        
        Public Property TableParentId As String
            Get
                Try 
                    Return CType(Me(Me.tableTableMap.TableParentIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableMap.TableParentIdColumn) = value
            End Set
        End Property
        
        Public Property TableName As String
            Get
                Try 
                    Return CType(Me(Me.tableTableMap.TableNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableMap.TableNameColumn) = value
            End Set
        End Property
        
        Public Property WhereClause As String
            Get
                Try 
                    Return CType(Me(Me.tableTableMap.WhereClauseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableMap.WhereClauseColumn) = value
            End Set
        End Property
        
        Public Function IsTableParentIdNull() As Boolean
            Return Me.IsNull(Me.tableTableMap.TableParentIdColumn)
        End Function
        
        Public Sub SetTableParentIdNull()
            Me(Me.tableTableMap.TableParentIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTableNameNull() As Boolean
            Return Me.IsNull(Me.tableTableMap.TableNameColumn)
        End Function
        
        Public Sub SetTableNameNull()
            Me(Me.tableTableMap.TableNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWhereClauseNull() As Boolean
            Return Me.IsNull(Me.tableTableMap.WhereClauseColumn)
        End Function
        
        Public Sub SetWhereClauseNull()
            Me(Me.tableTableMap.WhereClauseColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TableMapRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TableMapRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TableMapRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TableMapRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
