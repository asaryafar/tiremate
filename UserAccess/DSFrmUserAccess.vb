'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmUserAccess
    Inherits DataSet
    
    Private tableItems As ItemsDataTable
    
    Private tableUsers As UsersDataTable
    
    Private tableUserAccess As UserAccessDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Items")) Is Nothing) Then
                Me.Tables.Add(New ItemsDataTable(ds.Tables("Items")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("UserAccess")) Is Nothing) Then
                Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Items As ItemsDataTable
        Get
            Return Me.tableItems
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserAccess As UserAccessDataTable
        Get
            Return Me.tableUserAccess
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmUserAccess = CType(MyBase.Clone,DSFrmUserAccess)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Items")) Is Nothing) Then
            Me.Tables.Add(New ItemsDataTable(ds.Tables("Items")))
        End If
        If (Not (ds.Tables("Users")) Is Nothing) Then
            Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
        End If
        If (Not (ds.Tables("UserAccess")) Is Nothing) Then
            Me.Tables.Add(New UserAccessDataTable(ds.Tables("UserAccess")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableItems = CType(Me.Tables("Items"),ItemsDataTable)
        If (Not (Me.tableItems) Is Nothing) Then
            Me.tableItems.InitVars
        End If
        Me.tableUsers = CType(Me.Tables("Users"),UsersDataTable)
        If (Not (Me.tableUsers) Is Nothing) Then
            Me.tableUsers.InitVars
        End If
        Me.tableUserAccess = CType(Me.Tables("UserAccess"),UserAccessDataTable)
        If (Not (Me.tableUserAccess) Is Nothing) Then
            Me.tableUserAccess.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmUserAccess"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmUserAccess.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableItems = New ItemsDataTable
        Me.Tables.Add(Me.tableItems)
        Me.tableUsers = New UsersDataTable
        Me.Tables.Add(Me.tableUsers)
        Me.tableUserAccess = New UserAccessDataTable
        Me.Tables.Add(Me.tableUserAccess)
    End Sub
    
    Private Function ShouldSerializeItems() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserAccess() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemsRowChangeEvent)
    
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)
    
    Public Delegate Sub UserAccessRowChangeEventHandler(ByVal sender As Object, ByVal e As UserAccessRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFormName As DataColumn
        
        Private columnItem_large_icon As DataColumn
        
        Private columnItem_small_icon As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnItemKind As DataColumn
        
        Private columnItemToolTip As DataColumn
        
        Private columnMasterGroup As DataColumn
        
        Private columnMasterItem As DataColumn
        
        Friend Sub New()
            MyBase.New("Items")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FormNameColumn As DataColumn
            Get
                Return Me.columnFormName
            End Get
        End Property
        
        Friend ReadOnly Property Item_large_iconColumn As DataColumn
            Get
                Return Me.columnItem_large_icon
            End Get
        End Property
        
        Friend ReadOnly Property Item_small_iconColumn As DataColumn
            Get
                Return Me.columnItem_small_icon
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property ItemKindColumn As DataColumn
            Get
                Return Me.columnItemKind
            End Get
        End Property
        
        Friend ReadOnly Property ItemToolTipColumn As DataColumn
            Get
                Return Me.columnItemToolTip
            End Get
        End Property
        
        Friend ReadOnly Property MasterGroupColumn As DataColumn
            Get
                Return Me.columnMasterGroup
            End Get
        End Property
        
        Friend ReadOnly Property MasterItemColumn As DataColumn
            Get
                Return Me.columnMasterItem
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemsRow
            Get
                Return CType(Me.Rows(index),ItemsRow)
            End Get
        End Property
        
        Public Event ItemsRowChanged As ItemsRowChangeEventHandler
        
        Public Event ItemsRowChanging As ItemsRowChangeEventHandler
        
        Public Event ItemsRowDeleted As ItemsRowChangeEventHandler
        
        Public Event ItemsRowDeleting As ItemsRowChangeEventHandler
        
        Public Overloads Sub AddItemsRow(ByVal row As ItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemsRow(ByVal FormName As String, ByVal Item_large_icon As Integer, ByVal Item_small_icon As Integer, ByVal Itemdesc As String, ByVal ItemKey As Integer, ByVal ItemKind As Integer, ByVal ItemToolTip As String, ByVal MasterGroup As String, ByVal MasterItem As Integer) As ItemsRow
            Dim rowItemsRow As ItemsRow = CType(Me.NewRow,ItemsRow)
            rowItemsRow.ItemArray = New Object() {FormName, Item_large_icon, Item_small_icon, Itemdesc, ItemKey, ItemKind, ItemToolTip, MasterGroup, MasterItem}
            Me.Rows.Add(rowItemsRow)
            Return rowItemsRow
        End Function
        
        Public Function FindByItemKey(ByVal ItemKey As Integer) As ItemsRow
            Return CType(Me.Rows.Find(New Object() {ItemKey}),ItemsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemsDataTable = CType(MyBase.Clone,ItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFormName = Me.Columns("FormName")
            Me.columnItem_large_icon = Me.Columns("Item_large_icon")
            Me.columnItem_small_icon = Me.Columns("Item_small_icon")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnItemKind = Me.Columns("ItemKind")
            Me.columnItemToolTip = Me.Columns("ItemToolTip")
            Me.columnMasterGroup = Me.Columns("MasterGroup")
            Me.columnMasterItem = Me.Columns("MasterItem")
        End Sub
        
        Private Sub InitClass()
            Me.columnFormName = New DataColumn("FormName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormName)
            Me.columnItem_large_icon = New DataColumn("Item_large_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_large_icon)
            Me.columnItem_small_icon = New DataColumn("Item_small_icon", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_small_icon)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnItemKind = New DataColumn("ItemKind", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKind)
            Me.columnItemToolTip = New DataColumn("ItemToolTip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemToolTip)
            Me.columnMasterGroup = New DataColumn("MasterGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterGroup)
            Me.columnMasterItem = New DataColumn("MasterItem", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasterItem)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemKey}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnItemKey.Unique = true
        End Sub
        
        Public Function NewItemsRow() As ItemsRow
            Return CType(Me.NewRow,ItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemsRowChanged(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemsRowChanging(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemsRowDeleted(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemsRowDeleting(Me, New ItemsRowChangeEvent(CType(e.Row,ItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemsRow(ByVal row As ItemsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsRow
        Inherits DataRow
        
        Private tableItems As ItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItems = CType(Me.Table,ItemsDataTable)
        End Sub
        
        Public Property FormName As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.FormNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.FormNameColumn) = value
            End Set
        End Property
        
        Public Property Item_large_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.Item_large_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.Item_large_iconColumn) = value
            End Set
        End Property
        
        Public Property Item_small_icon As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.Item_small_iconColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.Item_small_iconColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As Integer
            Get
                Return CType(Me(Me.tableItems.ItemKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableItems.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property ItemKind As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemKindColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemKindColumn) = value
            End Set
        End Property
        
        Public Property ItemToolTip As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.ItemToolTipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.ItemToolTipColumn) = value
            End Set
        End Property
        
        Public Property MasterGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableItems.MasterGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.MasterGroupColumn) = value
            End Set
        End Property
        
        Public Property MasterItem As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItems.MasterItemColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItems.MasterItemColumn) = value
            End Set
        End Property
        
        Public Function IsFormNameNull() As Boolean
            Return Me.IsNull(Me.tableItems.FormNameColumn)
        End Function
        
        Public Sub SetFormNameNull()
            Me(Me.tableItems.FormNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_large_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems.Item_large_iconColumn)
        End Function
        
        Public Sub SetItem_large_iconNull()
            Me(Me.tableItems.Item_large_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_small_iconNull() As Boolean
            Return Me.IsNull(Me.tableItems.Item_small_iconColumn)
        End Function
        
        Public Sub SetItem_small_iconNull()
            Me(Me.tableItems.Item_small_iconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableItems.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKindNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemKindColumn)
        End Function
        
        Public Sub SetItemKindNull()
            Me(Me.tableItems.ItemKindColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemToolTipNull() As Boolean
            Return Me.IsNull(Me.tableItems.ItemToolTipColumn)
        End Function
        
        Public Sub SetItemToolTipNull()
            Me(Me.tableItems.ItemToolTipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterGroupNull() As Boolean
            Return Me.IsNull(Me.tableItems.MasterGroupColumn)
        End Function
        
        Public Sub SetMasterGroupNull()
            Me(Me.tableItems.MasterGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMasterItemNull() As Boolean
            Return Me.IsNull(Me.tableItems.MasterItemColumn)
        End Function
        
        Public Sub SetMasterItemNull()
            Me(Me.tableItems.MasterItemColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserId As DataColumn
        
        Private columnUserLogin As DataColumn
        
        Friend Sub New()
            MyBase.New("Users")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index),UsersRow)
            End Get
        End Property
        
        Public Event UsersRowChanged As UsersRowChangeEventHandler
        
        Public Event UsersRowChanging As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleted As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleting As UsersRowChangeEventHandler
        
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsersRow(ByVal UserLogin As String) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow,UsersRow)
            rowUsersRow.ItemArray = New Object() {Nothing, UserLogin}
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function
        
        Public Function FindByUserId(ByVal UserId As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserId}),UsersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone,UsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserId = Me.Columns("UserId")
            Me.columnUserLogin = Me.Columns("UserLogin")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUserId}, true))
            Me.columnUserId.AutoIncrement = true
            Me.columnUserId.AllowDBNull = false
            Me.columnUserId.Unique = true
        End Sub
        
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow,UsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRow
        Inherits DataRow
        
        Private tableUsers As UsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table,UsersDataTable)
        End Sub
        
        Public Property UserId As Integer
            Get
                Return CType(Me(Me.tableUsers.UserIdColumn),Integer)
            End Get
            Set
                Me(Me.tableUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemKey As DataColumn
        
        Private columnUserId As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Friend Sub New()
            MyBase.New("UserAccess")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserAccessRow
            Get
                Return CType(Me.Rows(index),UserAccessRow)
            End Get
        End Property
        
        Public Event UserAccessRowChanged As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowChanging As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleted As UserAccessRowChangeEventHandler
        
        Public Event UserAccessRowDeleting As UserAccessRowChangeEventHandler
        
        Public Overloads Sub AddUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserAccessRow(ByVal ItemKey As Integer, ByVal UserId As Integer, ByVal Itemdesc As String) As UserAccessRow
            Dim rowUserAccessRow As UserAccessRow = CType(Me.NewRow,UserAccessRow)
            rowUserAccessRow.ItemArray = New Object() {ItemKey, UserId, Itemdesc}
            Me.Rows.Add(rowUserAccessRow)
            Return rowUserAccessRow
        End Function
        
        Public Function FindByItemKey(ByVal ItemKey As Integer) As UserAccessRow
            Return CType(Me.Rows.Find(New Object() {ItemKey}),UserAccessRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserAccessDataTable = CType(MyBase.Clone,UserAccessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserAccessDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnUserId = Me.Columns("UserId")
            Me.columnItemdesc = Me.Columns("Itemdesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.Constraints.Add(New UniqueConstraint("DSFrmUserAccessKey1", New DataColumn() {Me.columnItemKey}, true))
            Me.columnItemKey.AllowDBNull = false
            Me.columnItemKey.Unique = true
        End Sub
        
        Public Function NewUserAccessRow() As UserAccessRow
            Return CType(Me.NewRow,UserAccessRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserAccessRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserAccessRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserAccessRowChangedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanged(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserAccessRowChangingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowChanging(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserAccessRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleted(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserAccessRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserAccessRowDeleting(Me, New UserAccessRowChangeEvent(CType(e.Row,UserAccessRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserAccessRow(ByVal row As UserAccessRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRow
        Inherits DataRow
        
        Private tableUserAccess As UserAccessDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserAccess = CType(Me.Table,UserAccessDataTable)
        End Sub
        
        Public Property ItemKey As Integer
            Get
                Return CType(Me(Me.tableUserAccess.ItemKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableUserAccess.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUserAccess.UserIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserAccess.UserIdColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableUserAccess.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserAccess.ItemdescColumn) = value
            End Set
        End Property
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableUserAccess.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableUserAccess.UserIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableUserAccess.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableUserAccess.ItemdescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserAccessRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserAccessRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserAccessRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserAccessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
