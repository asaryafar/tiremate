'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmUsers
    Inherits DataSet
    
    Private tableUserGroup As UserGroupDataTable
    
    Private tableUsers As UsersDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UserGroup")) Is Nothing) Then
                Me.Tables.Add(New UserGroupDataTable(ds.Tables("UserGroup")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserGroup As UserGroupDataTable
        Get
            Return Me.tableUserGroup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmUsers = CType(MyBase.Clone,DSFrmUsers)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("UserGroup")) Is Nothing) Then
            Me.Tables.Add(New UserGroupDataTable(ds.Tables("UserGroup")))
        End If
        If (Not (ds.Tables("Users")) Is Nothing) Then
            Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUserGroup = CType(Me.Tables("UserGroup"),UserGroupDataTable)
        If (Not (Me.tableUserGroup) Is Nothing) Then
            Me.tableUserGroup.InitVars
        End If
        Me.tableUsers = CType(Me.Tables("Users"),UsersDataTable)
        If (Not (Me.tableUsers) Is Nothing) Then
            Me.tableUsers.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmUsers"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmUsers.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUserGroup = New UserGroupDataTable
        Me.Tables.Add(Me.tableUserGroup)
        Me.tableUsers = New UsersDataTable
        Me.Tables.Add(Me.tableUsers)
    End Sub
    
    Private Function ShouldSerializeUserGroup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsers() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UserGroupRowChangeEventHandler(ByVal sender As Object, ByVal e As UserGroupRowChangeEvent)
    
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGroupActiveFlag As DataColumn
        
        Private columnUserGroupId As DataColumn
        
        Private columnUserGroupName As DataColumn
        
        Friend Sub New()
            MyBase.New("UserGroup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GroupActiveFlagColumn As DataColumn
            Get
                Return Me.columnGroupActiveFlag
            End Get
        End Property
        
        Friend ReadOnly Property UserGroupIdColumn As DataColumn
            Get
                Return Me.columnUserGroupId
            End Get
        End Property
        
        Friend ReadOnly Property UserGroupNameColumn As DataColumn
            Get
                Return Me.columnUserGroupName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserGroupRow
            Get
                Return CType(Me.Rows(index),UserGroupRow)
            End Get
        End Property
        
        Public Event UserGroupRowChanged As UserGroupRowChangeEventHandler
        
        Public Event UserGroupRowChanging As UserGroupRowChangeEventHandler
        
        Public Event UserGroupRowDeleted As UserGroupRowChangeEventHandler
        
        Public Event UserGroupRowDeleting As UserGroupRowChangeEventHandler
        
        Public Overloads Sub AddUserGroupRow(ByVal row As UserGroupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserGroupRow(ByVal GroupActiveFlag As Boolean, ByVal UserGroupName As String) As UserGroupRow
            Dim rowUserGroupRow As UserGroupRow = CType(Me.NewRow,UserGroupRow)
            rowUserGroupRow.ItemArray = New Object() {GroupActiveFlag, Nothing, UserGroupName}
            Me.Rows.Add(rowUserGroupRow)
            Return rowUserGroupRow
        End Function
        
        Public Function FindByUserGroupId(ByVal UserGroupId As Integer) As UserGroupRow
            Return CType(Me.Rows.Find(New Object() {UserGroupId}),UserGroupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserGroupDataTable = CType(MyBase.Clone,UserGroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserGroupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGroupActiveFlag = Me.Columns("GroupActiveFlag")
            Me.columnUserGroupId = Me.Columns("UserGroupId")
            Me.columnUserGroupName = Me.Columns("UserGroupName")
        End Sub
        
        Private Sub InitClass()
            Me.columnGroupActiveFlag = New DataColumn("GroupActiveFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroupActiveFlag)
            Me.columnUserGroupId = New DataColumn("UserGroupId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserGroupId)
            Me.columnUserGroupName = New DataColumn("UserGroupName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserGroupName)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUserGroupId}, true))
            Me.columnUserGroupId.AutoIncrement = true
            Me.columnUserGroupId.AllowDBNull = false
            Me.columnUserGroupId.Unique = true
        End Sub
        
        Public Function NewUserGroupRow() As UserGroupRow
            Return CType(Me.NewRow,UserGroupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserGroupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserGroupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserGroupRowChangedEvent) Is Nothing) Then
                RaiseEvent UserGroupRowChanged(Me, New UserGroupRowChangeEvent(CType(e.Row,UserGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserGroupRowChangingEvent) Is Nothing) Then
                RaiseEvent UserGroupRowChanging(Me, New UserGroupRowChangeEvent(CType(e.Row,UserGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserGroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserGroupRowDeleted(Me, New UserGroupRowChangeEvent(CType(e.Row,UserGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserGroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserGroupRowDeleting(Me, New UserGroupRowChangeEvent(CType(e.Row,UserGroupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserGroupRow(ByVal row As UserGroupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupRow
        Inherits DataRow
        
        Private tableUserGroup As UserGroupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserGroup = CType(Me.Table,UserGroupDataTable)
        End Sub
        
        Public Property GroupActiveFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUserGroup.GroupActiveFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserGroup.GroupActiveFlagColumn) = value
            End Set
        End Property
        
        Public Property UserGroupId As Integer
            Get
                Return CType(Me(Me.tableUserGroup.UserGroupIdColumn),Integer)
            End Get
            Set
                Me(Me.tableUserGroup.UserGroupIdColumn) = value
            End Set
        End Property
        
        Public Property UserGroupName As String
            Get
                Try 
                    Return CType(Me(Me.tableUserGroup.UserGroupNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserGroup.UserGroupNameColumn) = value
            End Set
        End Property
        
        Public Function IsGroupActiveFlagNull() As Boolean
            Return Me.IsNull(Me.tableUserGroup.GroupActiveFlagColumn)
        End Function
        
        Public Sub SetGroupActiveFlagNull()
            Me(Me.tableUserGroup.GroupActiveFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableUserGroup.UserGroupNameColumn)
        End Function
        
        Public Sub SetUserGroupNameNull()
            Me(Me.tableUserGroup.UserGroupNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserGroupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserGroupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserGroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDefaultStoreNo As DataColumn
        
        Private columnDefaultYear As DataColumn
        
        Private columnUserActiveFalg As DataColumn
        
        Private columnUserFamily As DataColumn
        
        Private columnUserGroupId As DataColumn
        
        Private columnUserId As DataColumn
        
        Private columnUserLogin As DataColumn
        
        Private columnUserName As DataColumn
        
        Private columnUserPassword As DataColumn
        
        Private columnUserGroupName As DataColumn
        
        Private columnGroupActiveFlag As DataColumn
        
        Friend Sub New()
            MyBase.New("Users")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DefaultStoreNoColumn As DataColumn
            Get
                Return Me.columnDefaultStoreNo
            End Get
        End Property
        
        Friend ReadOnly Property DefaultYearColumn As DataColumn
            Get
                Return Me.columnDefaultYear
            End Get
        End Property
        
        Friend ReadOnly Property UserActiveFalgColumn As DataColumn
            Get
                Return Me.columnUserActiveFalg
            End Get
        End Property
        
        Friend ReadOnly Property UserFamilyColumn As DataColumn
            Get
                Return Me.columnUserFamily
            End Get
        End Property
        
        Friend ReadOnly Property UserGroupIdColumn As DataColumn
            Get
                Return Me.columnUserGroupId
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Friend ReadOnly Property UserNameColumn As DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        Friend ReadOnly Property UserPasswordColumn As DataColumn
            Get
                Return Me.columnUserPassword
            End Get
        End Property
        
        Friend ReadOnly Property UserGroupNameColumn As DataColumn
            Get
                Return Me.columnUserGroupName
            End Get
        End Property
        
        Friend ReadOnly Property GroupActiveFlagColumn As DataColumn
            Get
                Return Me.columnGroupActiveFlag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index),UsersRow)
            End Get
        End Property
        
        Public Event UsersRowChanged As UsersRowChangeEventHandler
        
        Public Event UsersRowChanging As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleted As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleting As UsersRowChangeEventHandler
        
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsersRow(ByVal DefaultStoreNo As String, ByVal DefaultYear As Integer, ByVal UserActiveFalg As Boolean, ByVal UserFamily As String, ByVal UserGroupId As Integer, ByVal UserLogin As String, ByVal UserName As String, ByVal UserPassword As String, ByVal UserGroupName As String, ByVal GroupActiveFlag As Boolean) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow,UsersRow)
            rowUsersRow.ItemArray = New Object() {DefaultStoreNo, DefaultYear, UserActiveFalg, UserFamily, UserGroupId, Nothing, UserLogin, UserName, UserPassword, UserGroupName, GroupActiveFlag}
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone,UsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDefaultStoreNo = Me.Columns("DefaultStoreNo")
            Me.columnDefaultYear = Me.Columns("DefaultYear")
            Me.columnUserActiveFalg = Me.Columns("UserActiveFalg")
            Me.columnUserFamily = Me.Columns("UserFamily")
            Me.columnUserGroupId = Me.Columns("UserGroupId")
            Me.columnUserId = Me.Columns("UserId")
            Me.columnUserLogin = Me.Columns("UserLogin")
            Me.columnUserName = Me.Columns("UserName")
            Me.columnUserPassword = Me.Columns("UserPassword")
            Me.columnUserGroupName = Me.Columns("UserGroupName")
            Me.columnGroupActiveFlag = Me.Columns("GroupActiveFlag")
        End Sub
        
        Private Sub InitClass()
            Me.columnDefaultStoreNo = New DataColumn("DefaultStoreNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultStoreNo)
            Me.columnDefaultYear = New DataColumn("DefaultYear", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultYear)
            Me.columnUserActiveFalg = New DataColumn("UserActiveFalg", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserActiveFalg)
            Me.columnUserFamily = New DataColumn("UserFamily", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserFamily)
            Me.columnUserGroupId = New DataColumn("UserGroupId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserGroupId)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.columnUserName = New DataColumn("UserName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserName)
            Me.columnUserPassword = New DataColumn("UserPassword", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserPassword)
            Me.columnUserGroupName = New DataColumn("UserGroupName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserGroupName)
            Me.columnGroupActiveFlag = New DataColumn("GroupActiveFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroupActiveFlag)
            Me.columnUserId.AutoIncrement = true
        End Sub
        
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow,UsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRow
        Inherits DataRow
        
        Private tableUsers As UsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table,UsersDataTable)
        End Sub
        
        Public Property DefaultStoreNo As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.DefaultStoreNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.DefaultStoreNoColumn) = value
            End Set
        End Property
        
        Public Property DefaultYear As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUsers.DefaultYearColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.DefaultYearColumn) = value
            End Set
        End Property
        
        Public Property UserActiveFalg As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserActiveFalgColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserActiveFalgColumn) = value
            End Set
        End Property
        
        Public Property UserFamily As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserFamilyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserFamilyColumn) = value
            End Set
        End Property
        
        Public Property UserGroupId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserGroupIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserGroupIdColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Property UserName As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserNameColumn) = value
            End Set
        End Property
        
        Public Property UserPassword As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserPasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserPasswordColumn) = value
            End Set
        End Property
        
        Public Property UserGroupName As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserGroupNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserGroupNameColumn) = value
            End Set
        End Property
        
        Public Property GroupActiveFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUsers.GroupActiveFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.GroupActiveFlagColumn) = value
            End Set
        End Property
        
        Public Function IsDefaultStoreNoNull() As Boolean
            Return Me.IsNull(Me.tableUsers.DefaultStoreNoColumn)
        End Function
        
        Public Sub SetDefaultStoreNoNull()
            Me(Me.tableUsers.DefaultStoreNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultYearNull() As Boolean
            Return Me.IsNull(Me.tableUsers.DefaultYearColumn)
        End Function
        
        Public Sub SetDefaultYearNull()
            Me(Me.tableUsers.DefaultYearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserActiveFalgNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserActiveFalgColumn)
        End Function
        
        Public Sub SetUserActiveFalgNull()
            Me(Me.tableUsers.UserActiveFalgColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserFamilyNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserFamilyColumn)
        End Function
        
        Public Sub SetUserFamilyNull()
            Me(Me.tableUsers.UserFamilyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserGroupIdNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserGroupIdColumn)
        End Function
        
        Public Sub SetUserGroupIdNull()
            Me(Me.tableUsers.UserGroupIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableUsers.UserIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserNameColumn)
        End Function
        
        Public Sub SetUserNameNull()
            Me(Me.tableUsers.UserNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserPasswordNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserPasswordColumn)
        End Function
        
        Public Sub SetUserPasswordNull()
            Me(Me.tableUsers.UserPasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserGroupNameColumn)
        End Function
        
        Public Sub SetUserGroupNameNull()
            Me(Me.tableUsers.UserGroupNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroupActiveFlagNull() As Boolean
            Return Me.IsNull(Me.tableUsers.GroupActiveFlagColumn)
        End Function
        
        Public Sub SetGroupActiveFlagNull()
            Me(Me.tableUsers.GroupActiveFlagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
