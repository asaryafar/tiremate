'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsItems
    Inherits DataSet
    
    Private tableArBalance As ArBalanceDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tablecust_trtab_main As cust_trtab_mainDataTable
    
    Private tableTemp As TempDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tableGL_payment_AR As GL_payment_ARDataTable
    
    Private tableinv_tab_brand As inv_tab_brandDataTable
    
    Private tableinv_tab_line As inv_tab_lineDataTable
    
    Private tableinv_tab_style As inv_tab_styleDataTable
    
    Private tableStyle As StyleDataTable
    
    Private tableLine As LineDataTable
    
    Private tableinv_tab_public As inv_tab_publicDataTable
    
    Private tableItemsListing As ItemsListingDataTable
    
    Private tableinv_vendor As inv_vendorDataTable
    
    Private tableinv_tab_vendor_class As inv_tab_vendor_classDataTable
    
    Private tableinv_tab_vendor_type As inv_tab_vendor_typeDataTable
    
    Private tableVendor As VendorDataTable
    
    Private tablebas_zipcode As bas_zipcodeDataTable
    
    Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
    
    Private tableinv_item As inv_itemDataTable
    
    Private tableinv_tab_type_item As inv_tab_type_itemDataTable
    
    Private tableinv_tab_item_warehouse As inv_tab_item_warehouseDataTable
    
    Private tableinv_item_vendor As inv_item_vendorDataTable
    
    Private tableinv_item_cost_transaction As inv_item_cost_transactionDataTable
    
    Private tableinv_discount_item As inv_discount_itemDataTable
    
    Private tablePriceCode As PriceCodeDataTable
    
    Private tableBRAND As BRANDDataTable
    
    Private tableinv_price_code As inv_price_codeDataTable
    
    Private tableITQty As ITQtyDataTable
    
    Private tableService As ServiceDataTable
    
    Private tableinv_tab_service_type As inv_tab_service_typeDataTable
    
    Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
    
    Private tableinv_tab_labor_service_price As inv_tab_labor_service_priceDataTable
    
    Private tableinv_itemtemp As inv_itemtempDataTable
    
    Private relationGL_payment_depositGL_payment_AR As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ArBalance")) Is Nothing) Then
                Me.Tables.Add(New ArBalanceDataTable(ds.Tables("ArBalance")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
                Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
            End If
            If (Not (ds.Tables("Temp")) Is Nothing) Then
                Me.Tables.Add(New TempDataTable(ds.Tables("Temp")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("GL_payment_AR")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_ARDataTable(ds.Tables("GL_payment_AR")))
            End If
            If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
            End If
            If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
            End If
            If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
            End If
            If (Not (ds.Tables("Style")) Is Nothing) Then
                Me.Tables.Add(New StyleDataTable(ds.Tables("Style")))
            End If
            If (Not (ds.Tables("Line")) Is Nothing) Then
                Me.Tables.Add(New LineDataTable(ds.Tables("Line")))
            End If
            If (Not (ds.Tables("inv_tab_public")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_publicDataTable(ds.Tables("inv_tab_public")))
            End If
            If (Not (ds.Tables("ItemsListing")) Is Nothing) Then
                Me.Tables.Add(New ItemsListingDataTable(ds.Tables("ItemsListing")))
            End If
            If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
            End If
            If (Not (ds.Tables("inv_tab_vendor_class")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vendor_classDataTable(ds.Tables("inv_tab_vendor_class")))
            End If
            If (Not (ds.Tables("inv_tab_vendor_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_vendor_typeDataTable(ds.Tables("inv_tab_vendor_type")))
            End If
            If (Not (ds.Tables("Vendor")) Is Nothing) Then
                Me.Tables.Add(New VendorDataTable(ds.Tables("Vendor")))
            End If
            If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
                Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
            End If
            If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
                Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
            End If
            If (Not (ds.Tables("inv_item")) Is Nothing) Then
                Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
            End If
            If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
            End If
            If (Not (ds.Tables("inv_tab_item_warehouse")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_item_warehouseDataTable(ds.Tables("inv_tab_item_warehouse")))
            End If
            If (Not (ds.Tables("inv_item_vendor")) Is Nothing) Then
                Me.Tables.Add(New inv_item_vendorDataTable(ds.Tables("inv_item_vendor")))
            End If
            If (Not (ds.Tables("inv_item_cost_transaction")) Is Nothing) Then
                Me.Tables.Add(New inv_item_cost_transactionDataTable(ds.Tables("inv_item_cost_transaction")))
            End If
            If (Not (ds.Tables("inv_discount_item")) Is Nothing) Then
                Me.Tables.Add(New inv_discount_itemDataTable(ds.Tables("inv_discount_item")))
            End If
            If (Not (ds.Tables("PriceCode")) Is Nothing) Then
                Me.Tables.Add(New PriceCodeDataTable(ds.Tables("PriceCode")))
            End If
            If (Not (ds.Tables("BRAND")) Is Nothing) Then
                Me.Tables.Add(New BRANDDataTable(ds.Tables("BRAND")))
            End If
            If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
                Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
            End If
            If (Not (ds.Tables("ITQty")) Is Nothing) Then
                Me.Tables.Add(New ITQtyDataTable(ds.Tables("ITQty")))
            End If
            If (Not (ds.Tables("Service")) Is Nothing) Then
                Me.Tables.Add(New ServiceDataTable(ds.Tables("Service")))
            End If
            If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
            End If
            If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
            End If
            If (Not (ds.Tables("inv_tab_labor_service_price")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_labor_service_priceDataTable(ds.Tables("inv_tab_labor_service_price")))
            End If
            If (Not (ds.Tables("inv_itemtemp")) Is Nothing) Then
                Me.Tables.Add(New inv_itemtempDataTable(ds.Tables("inv_itemtemp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ArBalance As ArBalanceDataTable
        Get
            Return Me.tableArBalance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_trtab_main As cust_trtab_mainDataTable
        Get
            Return Me.tablecust_trtab_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Temp As TempDataTable
        Get
            Return Me.tableTemp
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_AR As GL_payment_ARDataTable
        Get
            Return Me.tableGL_payment_AR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_brand As inv_tab_brandDataTable
        Get
            Return Me.tableinv_tab_brand
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_line As inv_tab_lineDataTable
        Get
            Return Me.tableinv_tab_line
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_style As inv_tab_styleDataTable
        Get
            Return Me.tableinv_tab_style
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Style As StyleDataTable
        Get
            Return Me.tableStyle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Line As LineDataTable
        Get
            Return Me.tableLine
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_public As inv_tab_publicDataTable
        Get
            Return Me.tableinv_tab_public
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemsListing As ItemsListingDataTable
        Get
            Return Me.tableItemsListing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_vendor As inv_vendorDataTable
        Get
            Return Me.tableinv_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vendor_class As inv_tab_vendor_classDataTable
        Get
            Return Me.tableinv_tab_vendor_class
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_vendor_type As inv_tab_vendor_typeDataTable
        Get
            Return Me.tableinv_tab_vendor_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Vendor As VendorDataTable
        Get
            Return Me.tableVendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_zipcode As bas_zipcodeDataTable
        Get
            Return Me.tablebas_zipcode
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_quick_refrence As inv_item_quick_refrenceDataTable
        Get
            Return Me.tableinv_item_quick_refrence
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item As inv_itemDataTable
        Get
            Return Me.tableinv_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_type_item As inv_tab_type_itemDataTable
        Get
            Return Me.tableinv_tab_type_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_item_warehouse As inv_tab_item_warehouseDataTable
        Get
            Return Me.tableinv_tab_item_warehouse
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_vendor As inv_item_vendorDataTable
        Get
            Return Me.tableinv_item_vendor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_item_cost_transaction As inv_item_cost_transactionDataTable
        Get
            Return Me.tableinv_item_cost_transaction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_discount_item As inv_discount_itemDataTable
        Get
            Return Me.tableinv_discount_item
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PriceCode As PriceCodeDataTable
        Get
            Return Me.tablePriceCode
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BRAND As BRANDDataTable
        Get
            Return Me.tableBRAND
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_price_code As inv_price_codeDataTable
        Get
            Return Me.tableinv_price_code
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITQty As ITQtyDataTable
        Get
            Return Me.tableITQty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Service As ServiceDataTable
        Get
            Return Me.tableService
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_service_type As inv_tab_service_typeDataTable
        Get
            Return Me.tableinv_tab_service_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_labor_service As inv_tab_labor_serviceDataTable
        Get
            Return Me.tableinv_tab_labor_service
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_labor_service_price As inv_tab_labor_service_priceDataTable
        Get
            Return Me.tableinv_tab_labor_service_price
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_itemtemp As inv_itemtempDataTable
        Get
            Return Me.tableinv_itemtemp
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsItems = CType(MyBase.Clone,dsItems)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ArBalance")) Is Nothing) Then
            Me.Tables.Add(New ArBalanceDataTable(ds.Tables("ArBalance")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
            Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
        End If
        If (Not (ds.Tables("Temp")) Is Nothing) Then
            Me.Tables.Add(New TempDataTable(ds.Tables("Temp")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("GL_payment_AR")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_ARDataTable(ds.Tables("GL_payment_AR")))
        End If
        If (Not (ds.Tables("inv_tab_brand")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_brandDataTable(ds.Tables("inv_tab_brand")))
        End If
        If (Not (ds.Tables("inv_tab_line")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_lineDataTable(ds.Tables("inv_tab_line")))
        End If
        If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
        End If
        If (Not (ds.Tables("Style")) Is Nothing) Then
            Me.Tables.Add(New StyleDataTable(ds.Tables("Style")))
        End If
        If (Not (ds.Tables("Line")) Is Nothing) Then
            Me.Tables.Add(New LineDataTable(ds.Tables("Line")))
        End If
        If (Not (ds.Tables("inv_tab_public")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_publicDataTable(ds.Tables("inv_tab_public")))
        End If
        If (Not (ds.Tables("ItemsListing")) Is Nothing) Then
            Me.Tables.Add(New ItemsListingDataTable(ds.Tables("ItemsListing")))
        End If
        If (Not (ds.Tables("inv_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_vendorDataTable(ds.Tables("inv_vendor")))
        End If
        If (Not (ds.Tables("inv_tab_vendor_class")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vendor_classDataTable(ds.Tables("inv_tab_vendor_class")))
        End If
        If (Not (ds.Tables("inv_tab_vendor_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_vendor_typeDataTable(ds.Tables("inv_tab_vendor_type")))
        End If
        If (Not (ds.Tables("Vendor")) Is Nothing) Then
            Me.Tables.Add(New VendorDataTable(ds.Tables("Vendor")))
        End If
        If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
            Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
        End If
        If (Not (ds.Tables("inv_item_quick_refrence")) Is Nothing) Then
            Me.Tables.Add(New inv_item_quick_refrenceDataTable(ds.Tables("inv_item_quick_refrence")))
        End If
        If (Not (ds.Tables("inv_item")) Is Nothing) Then
            Me.Tables.Add(New inv_itemDataTable(ds.Tables("inv_item")))
        End If
        If (Not (ds.Tables("inv_tab_type_item")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_type_itemDataTable(ds.Tables("inv_tab_type_item")))
        End If
        If (Not (ds.Tables("inv_tab_item_warehouse")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_item_warehouseDataTable(ds.Tables("inv_tab_item_warehouse")))
        End If
        If (Not (ds.Tables("inv_item_vendor")) Is Nothing) Then
            Me.Tables.Add(New inv_item_vendorDataTable(ds.Tables("inv_item_vendor")))
        End If
        If (Not (ds.Tables("inv_item_cost_transaction")) Is Nothing) Then
            Me.Tables.Add(New inv_item_cost_transactionDataTable(ds.Tables("inv_item_cost_transaction")))
        End If
        If (Not (ds.Tables("inv_discount_item")) Is Nothing) Then
            Me.Tables.Add(New inv_discount_itemDataTable(ds.Tables("inv_discount_item")))
        End If
        If (Not (ds.Tables("PriceCode")) Is Nothing) Then
            Me.Tables.Add(New PriceCodeDataTable(ds.Tables("PriceCode")))
        End If
        If (Not (ds.Tables("BRAND")) Is Nothing) Then
            Me.Tables.Add(New BRANDDataTable(ds.Tables("BRAND")))
        End If
        If (Not (ds.Tables("inv_price_code")) Is Nothing) Then
            Me.Tables.Add(New inv_price_codeDataTable(ds.Tables("inv_price_code")))
        End If
        If (Not (ds.Tables("ITQty")) Is Nothing) Then
            Me.Tables.Add(New ITQtyDataTable(ds.Tables("ITQty")))
        End If
        If (Not (ds.Tables("Service")) Is Nothing) Then
            Me.Tables.Add(New ServiceDataTable(ds.Tables("Service")))
        End If
        If (Not (ds.Tables("inv_tab_service_type")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_service_typeDataTable(ds.Tables("inv_tab_service_type")))
        End If
        If (Not (ds.Tables("inv_tab_labor_service")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_labor_serviceDataTable(ds.Tables("inv_tab_labor_service")))
        End If
        If (Not (ds.Tables("inv_tab_labor_service_price")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_labor_service_priceDataTable(ds.Tables("inv_tab_labor_service_price")))
        End If
        If (Not (ds.Tables("inv_itemtemp")) Is Nothing) Then
            Me.Tables.Add(New inv_itemtempDataTable(ds.Tables("inv_itemtemp")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableArBalance = CType(Me.Tables("ArBalance"),ArBalanceDataTable)
        If (Not (Me.tableArBalance) Is Nothing) Then
            Me.tableArBalance.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tablecust_trtab_main = CType(Me.Tables("cust_trtab_main"),cust_trtab_mainDataTable)
        If (Not (Me.tablecust_trtab_main) Is Nothing) Then
            Me.tablecust_trtab_main.InitVars
        End If
        Me.tableTemp = CType(Me.Tables("Temp"),TempDataTable)
        If (Not (Me.tableTemp) Is Nothing) Then
            Me.tableTemp.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tableGL_payment_AR = CType(Me.Tables("GL_payment_AR"),GL_payment_ARDataTable)
        If (Not (Me.tableGL_payment_AR) Is Nothing) Then
            Me.tableGL_payment_AR.InitVars
        End If
        Me.tableinv_tab_brand = CType(Me.Tables("inv_tab_brand"),inv_tab_brandDataTable)
        If (Not (Me.tableinv_tab_brand) Is Nothing) Then
            Me.tableinv_tab_brand.InitVars
        End If
        Me.tableinv_tab_line = CType(Me.Tables("inv_tab_line"),inv_tab_lineDataTable)
        If (Not (Me.tableinv_tab_line) Is Nothing) Then
            Me.tableinv_tab_line.InitVars
        End If
        Me.tableinv_tab_style = CType(Me.Tables("inv_tab_style"),inv_tab_styleDataTable)
        If (Not (Me.tableinv_tab_style) Is Nothing) Then
            Me.tableinv_tab_style.InitVars
        End If
        Me.tableStyle = CType(Me.Tables("Style"),StyleDataTable)
        If (Not (Me.tableStyle) Is Nothing) Then
            Me.tableStyle.InitVars
        End If
        Me.tableLine = CType(Me.Tables("Line"),LineDataTable)
        If (Not (Me.tableLine) Is Nothing) Then
            Me.tableLine.InitVars
        End If
        Me.tableinv_tab_public = CType(Me.Tables("inv_tab_public"),inv_tab_publicDataTable)
        If (Not (Me.tableinv_tab_public) Is Nothing) Then
            Me.tableinv_tab_public.InitVars
        End If
        Me.tableItemsListing = CType(Me.Tables("ItemsListing"),ItemsListingDataTable)
        If (Not (Me.tableItemsListing) Is Nothing) Then
            Me.tableItemsListing.InitVars
        End If
        Me.tableinv_vendor = CType(Me.Tables("inv_vendor"),inv_vendorDataTable)
        If (Not (Me.tableinv_vendor) Is Nothing) Then
            Me.tableinv_vendor.InitVars
        End If
        Me.tableinv_tab_vendor_class = CType(Me.Tables("inv_tab_vendor_class"),inv_tab_vendor_classDataTable)
        If (Not (Me.tableinv_tab_vendor_class) Is Nothing) Then
            Me.tableinv_tab_vendor_class.InitVars
        End If
        Me.tableinv_tab_vendor_type = CType(Me.Tables("inv_tab_vendor_type"),inv_tab_vendor_typeDataTable)
        If (Not (Me.tableinv_tab_vendor_type) Is Nothing) Then
            Me.tableinv_tab_vendor_type.InitVars
        End If
        Me.tableVendor = CType(Me.Tables("Vendor"),VendorDataTable)
        If (Not (Me.tableVendor) Is Nothing) Then
            Me.tableVendor.InitVars
        End If
        Me.tablebas_zipcode = CType(Me.Tables("bas_zipcode"),bas_zipcodeDataTable)
        If (Not (Me.tablebas_zipcode) Is Nothing) Then
            Me.tablebas_zipcode.InitVars
        End If
        Me.tableinv_item_quick_refrence = CType(Me.Tables("inv_item_quick_refrence"),inv_item_quick_refrenceDataTable)
        If (Not (Me.tableinv_item_quick_refrence) Is Nothing) Then
            Me.tableinv_item_quick_refrence.InitVars
        End If
        Me.tableinv_item = CType(Me.Tables("inv_item"),inv_itemDataTable)
        If (Not (Me.tableinv_item) Is Nothing) Then
            Me.tableinv_item.InitVars
        End If
        Me.tableinv_tab_type_item = CType(Me.Tables("inv_tab_type_item"),inv_tab_type_itemDataTable)
        If (Not (Me.tableinv_tab_type_item) Is Nothing) Then
            Me.tableinv_tab_type_item.InitVars
        End If
        Me.tableinv_tab_item_warehouse = CType(Me.Tables("inv_tab_item_warehouse"),inv_tab_item_warehouseDataTable)
        If (Not (Me.tableinv_tab_item_warehouse) Is Nothing) Then
            Me.tableinv_tab_item_warehouse.InitVars
        End If
        Me.tableinv_item_vendor = CType(Me.Tables("inv_item_vendor"),inv_item_vendorDataTable)
        If (Not (Me.tableinv_item_vendor) Is Nothing) Then
            Me.tableinv_item_vendor.InitVars
        End If
        Me.tableinv_item_cost_transaction = CType(Me.Tables("inv_item_cost_transaction"),inv_item_cost_transactionDataTable)
        If (Not (Me.tableinv_item_cost_transaction) Is Nothing) Then
            Me.tableinv_item_cost_transaction.InitVars
        End If
        Me.tableinv_discount_item = CType(Me.Tables("inv_discount_item"),inv_discount_itemDataTable)
        If (Not (Me.tableinv_discount_item) Is Nothing) Then
            Me.tableinv_discount_item.InitVars
        End If
        Me.tablePriceCode = CType(Me.Tables("PriceCode"),PriceCodeDataTable)
        If (Not (Me.tablePriceCode) Is Nothing) Then
            Me.tablePriceCode.InitVars
        End If
        Me.tableBRAND = CType(Me.Tables("BRAND"),BRANDDataTable)
        If (Not (Me.tableBRAND) Is Nothing) Then
            Me.tableBRAND.InitVars
        End If
        Me.tableinv_price_code = CType(Me.Tables("inv_price_code"),inv_price_codeDataTable)
        If (Not (Me.tableinv_price_code) Is Nothing) Then
            Me.tableinv_price_code.InitVars
        End If
        Me.tableITQty = CType(Me.Tables("ITQty"),ITQtyDataTable)
        If (Not (Me.tableITQty) Is Nothing) Then
            Me.tableITQty.InitVars
        End If
        Me.tableService = CType(Me.Tables("Service"),ServiceDataTable)
        If (Not (Me.tableService) Is Nothing) Then
            Me.tableService.InitVars
        End If
        Me.tableinv_tab_service_type = CType(Me.Tables("inv_tab_service_type"),inv_tab_service_typeDataTable)
        If (Not (Me.tableinv_tab_service_type) Is Nothing) Then
            Me.tableinv_tab_service_type.InitVars
        End If
        Me.tableinv_tab_labor_service = CType(Me.Tables("inv_tab_labor_service"),inv_tab_labor_serviceDataTable)
        If (Not (Me.tableinv_tab_labor_service) Is Nothing) Then
            Me.tableinv_tab_labor_service.InitVars
        End If
        Me.tableinv_tab_labor_service_price = CType(Me.Tables("inv_tab_labor_service_price"),inv_tab_labor_service_priceDataTable)
        If (Not (Me.tableinv_tab_labor_service_price) Is Nothing) Then
            Me.tableinv_tab_labor_service_price.InitVars
        End If
        Me.tableinv_itemtemp = CType(Me.Tables("inv_itemtemp"),inv_itemtempDataTable)
        If (Not (Me.tableinv_itemtemp) Is Nothing) Then
            Me.tableinv_itemtemp.InitVars
        End If
        Me.relationGL_payment_depositGL_payment_AR = Me.Relations("GL_payment_depositGL_payment_AR")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsItems"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsItems.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableArBalance = New ArBalanceDataTable
        Me.Tables.Add(Me.tableArBalance)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tablecust_trtab_main = New cust_trtab_mainDataTable
        Me.Tables.Add(Me.tablecust_trtab_main)
        Me.tableTemp = New TempDataTable
        Me.Tables.Add(Me.tableTemp)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tableGL_payment_AR = New GL_payment_ARDataTable
        Me.Tables.Add(Me.tableGL_payment_AR)
        Me.tableinv_tab_brand = New inv_tab_brandDataTable
        Me.Tables.Add(Me.tableinv_tab_brand)
        Me.tableinv_tab_line = New inv_tab_lineDataTable
        Me.Tables.Add(Me.tableinv_tab_line)
        Me.tableinv_tab_style = New inv_tab_styleDataTable
        Me.Tables.Add(Me.tableinv_tab_style)
        Me.tableStyle = New StyleDataTable
        Me.Tables.Add(Me.tableStyle)
        Me.tableLine = New LineDataTable
        Me.Tables.Add(Me.tableLine)
        Me.tableinv_tab_public = New inv_tab_publicDataTable
        Me.Tables.Add(Me.tableinv_tab_public)
        Me.tableItemsListing = New ItemsListingDataTable
        Me.Tables.Add(Me.tableItemsListing)
        Me.tableinv_vendor = New inv_vendorDataTable
        Me.Tables.Add(Me.tableinv_vendor)
        Me.tableinv_tab_vendor_class = New inv_tab_vendor_classDataTable
        Me.Tables.Add(Me.tableinv_tab_vendor_class)
        Me.tableinv_tab_vendor_type = New inv_tab_vendor_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_vendor_type)
        Me.tableVendor = New VendorDataTable
        Me.Tables.Add(Me.tableVendor)
        Me.tablebas_zipcode = New bas_zipcodeDataTable
        Me.Tables.Add(Me.tablebas_zipcode)
        Me.tableinv_item_quick_refrence = New inv_item_quick_refrenceDataTable
        Me.Tables.Add(Me.tableinv_item_quick_refrence)
        Me.tableinv_item = New inv_itemDataTable
        Me.Tables.Add(Me.tableinv_item)
        Me.tableinv_tab_type_item = New inv_tab_type_itemDataTable
        Me.Tables.Add(Me.tableinv_tab_type_item)
        Me.tableinv_tab_item_warehouse = New inv_tab_item_warehouseDataTable
        Me.Tables.Add(Me.tableinv_tab_item_warehouse)
        Me.tableinv_item_vendor = New inv_item_vendorDataTable
        Me.Tables.Add(Me.tableinv_item_vendor)
        Me.tableinv_item_cost_transaction = New inv_item_cost_transactionDataTable
        Me.Tables.Add(Me.tableinv_item_cost_transaction)
        Me.tableinv_discount_item = New inv_discount_itemDataTable
        Me.Tables.Add(Me.tableinv_discount_item)
        Me.tablePriceCode = New PriceCodeDataTable
        Me.Tables.Add(Me.tablePriceCode)
        Me.tableBRAND = New BRANDDataTable
        Me.Tables.Add(Me.tableBRAND)
        Me.tableinv_price_code = New inv_price_codeDataTable
        Me.Tables.Add(Me.tableinv_price_code)
        Me.tableITQty = New ITQtyDataTable
        Me.Tables.Add(Me.tableITQty)
        Me.tableService = New ServiceDataTable
        Me.Tables.Add(Me.tableService)
        Me.tableinv_tab_service_type = New inv_tab_service_typeDataTable
        Me.Tables.Add(Me.tableinv_tab_service_type)
        Me.tableinv_tab_labor_service = New inv_tab_labor_serviceDataTable
        Me.Tables.Add(Me.tableinv_tab_labor_service)
        Me.tableinv_tab_labor_service_price = New inv_tab_labor_service_priceDataTable
        Me.Tables.Add(Me.tableinv_tab_labor_service_price)
        Me.tableinv_itemtemp = New inv_itemtempDataTable
        Me.Tables.Add(Me.tableinv_itemtemp)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("GL_payment_depositGL_payment_AR", New DataColumn() {Me.tableGL_payment_deposit.ID_paymentColumn}, New DataColumn() {Me.tableGL_payment_AR.ID_paymentColumn})
        Me.tableGL_payment_AR.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationGL_payment_depositGL_payment_AR = New DataRelation("GL_payment_depositGL_payment_AR", New DataColumn() {Me.tableGL_payment_deposit.ID_paymentColumn}, New DataColumn() {Me.tableGL_payment_AR.ID_paymentColumn}, false)
        Me.Relations.Add(Me.relationGL_payment_depositGL_payment_AR)
    End Sub
    
    Private Function ShouldSerializeArBalance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_trtab_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTemp() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_AR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_brand() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_line() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_style() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStyle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLine() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_public() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeItemsListing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vendor_class() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_vendor_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_zipcode() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item_quick_refrence() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_type_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_item_warehouse() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item_vendor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_item_cost_transaction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_discount_item() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePriceCode() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBRAND() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_price_code() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeITQty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeService() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_service_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_labor_service() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_labor_service_price() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_itemtemp() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ArBalanceRowChangeEventHandler(ByVal sender As Object, ByVal e As ArBalanceRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub cust_trtab_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_trtab_mainRowChangeEvent)
    
    Public Delegate Sub TempRowChangeEventHandler(ByVal sender As Object, ByVal e As TempRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub GL_payment_ARRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_ARRowChangeEvent)
    
    Public Delegate Sub inv_tab_brandRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_brandRowChangeEvent)
    
    Public Delegate Sub inv_tab_lineRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_lineRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleRowChangeEvent)
    
    Public Delegate Sub StyleRowChangeEventHandler(ByVal sender As Object, ByVal e As StyleRowChangeEvent)
    
    Public Delegate Sub LineRowChangeEventHandler(ByVal sender As Object, ByVal e As LineRowChangeEvent)
    
    Public Delegate Sub inv_tab_publicRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_publicRowChangeEvent)
    
    Public Delegate Sub ItemsListingRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemsListingRowChangeEvent)
    
    Public Delegate Sub inv_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_vendorRowChangeEvent)
    
    Public Delegate Sub inv_tab_vendor_classRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vendor_classRowChangeEvent)
    
    Public Delegate Sub inv_tab_vendor_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_vendor_typeRowChangeEvent)
    
    Public Delegate Sub VendorRowChangeEventHandler(ByVal sender As Object, ByVal e As VendorRowChangeEvent)
    
    Public Delegate Sub bas_zipcodeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_zipcodeRowChangeEvent)
    
    Public Delegate Sub inv_item_quick_refrenceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_quick_refrenceRowChangeEvent)
    
    Public Delegate Sub inv_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemRowChangeEvent)
    
    Public Delegate Sub inv_tab_type_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_type_itemRowChangeEvent)
    
    Public Delegate Sub inv_tab_item_warehouseRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_item_warehouseRowChangeEvent)
    
    Public Delegate Sub inv_item_vendorRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_vendorRowChangeEvent)
    
    Public Delegate Sub inv_item_cost_transactionRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_item_cost_transactionRowChangeEvent)
    
    Public Delegate Sub inv_discount_itemRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_discount_itemRowChangeEvent)
    
    Public Delegate Sub PriceCodeRowChangeEventHandler(ByVal sender As Object, ByVal e As PriceCodeRowChangeEvent)
    
    Public Delegate Sub BRANDRowChangeEventHandler(ByVal sender As Object, ByVal e As BRANDRowChangeEvent)
    
    Public Delegate Sub inv_price_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_price_codeRowChangeEvent)
    
    Public Delegate Sub ITQtyRowChangeEventHandler(ByVal sender As Object, ByVal e As ITQtyRowChangeEvent)
    
    Public Delegate Sub ServiceRowChangeEventHandler(ByVal sender As Object, ByVal e As ServiceRowChangeEvent)
    
    Public Delegate Sub inv_tab_service_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_service_typeRowChangeEvent)
    
    Public Delegate Sub inv_tab_labor_serviceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_labor_serviceRowChangeEvent)
    
    Public Delegate Sub inv_tab_labor_service_priceRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_labor_service_priceRowChangeEvent)
    
    Public Delegate Sub inv_itemtempRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_itemtempRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArBalanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCUSTOMER As DataColumn
        
        Private columnCustomer_Name As DataColumn
        
        Private columnNet_Due As DataColumn
        
        Private columnDUE_DATE As DataColumn
        
        Friend Sub New()
            MyBase.New("ArBalance")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property Customer_NameColumn As DataColumn
            Get
                Return Me.columnCustomer_Name
            End Get
        End Property
        
        Friend ReadOnly Property Net_DueColumn As DataColumn
            Get
                Return Me.columnNet_Due
            End Get
        End Property
        
        Friend ReadOnly Property DUE_DATEColumn As DataColumn
            Get
                Return Me.columnDUE_DATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ArBalanceRow
            Get
                Return CType(Me.Rows(index),ArBalanceRow)
            End Get
        End Property
        
        Public Event ArBalanceRowChanged As ArBalanceRowChangeEventHandler
        
        Public Event ArBalanceRowChanging As ArBalanceRowChangeEventHandler
        
        Public Event ArBalanceRowDeleted As ArBalanceRowChangeEventHandler
        
        Public Event ArBalanceRowDeleting As ArBalanceRowChangeEventHandler
        
        Public Overloads Sub AddArBalanceRow(ByVal row As ArBalanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddArBalanceRow(ByVal CUSTOMER As String, ByVal Customer_Name As String, ByVal Net_Due As String, ByVal DUE_DATE As Date) As ArBalanceRow
            Dim rowArBalanceRow As ArBalanceRow = CType(Me.NewRow,ArBalanceRow)
            rowArBalanceRow.ItemArray = New Object() {CUSTOMER, Customer_Name, Net_Due, DUE_DATE}
            Me.Rows.Add(rowArBalanceRow)
            Return rowArBalanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ArBalanceDataTable = CType(MyBase.Clone,ArBalanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ArBalanceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCUSTOMER = Me.Columns("CUSTOMER")
            Me.columnCustomer_Name = Me.Columns("Customer Name")
            Me.columnNet_Due = Me.Columns("Net Due")
            Me.columnDUE_DATE = Me.Columns("DUE DATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnCUSTOMER = New DataColumn("CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUSTOMER)
            Me.columnCustomer_Name = New DataColumn("Customer Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomer_Name)
            Me.columnNet_Due = New DataColumn("Net Due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNet_Due)
            Me.columnDUE_DATE = New DataColumn("DUE DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUE_DATE)
        End Sub
        
        Public Function NewArBalanceRow() As ArBalanceRow
            Return CType(Me.NewRow,ArBalanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ArBalanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ArBalanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ArBalanceRowChangedEvent) Is Nothing) Then
                RaiseEvent ArBalanceRowChanged(Me, New ArBalanceRowChangeEvent(CType(e.Row,ArBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ArBalanceRowChangingEvent) Is Nothing) Then
                RaiseEvent ArBalanceRowChanging(Me, New ArBalanceRowChangeEvent(CType(e.Row,ArBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ArBalanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent ArBalanceRowDeleted(Me, New ArBalanceRowChangeEvent(CType(e.Row,ArBalanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ArBalanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent ArBalanceRowDeleting(Me, New ArBalanceRowChangeEvent(CType(e.Row,ArBalanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveArBalanceRow(ByVal row As ArBalanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArBalanceRow
        Inherits DataRow
        
        Private tableArBalance As ArBalanceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableArBalance = CType(Me.Table,ArBalanceDataTable)
        End Sub
        
        Public Property CUSTOMER As String
            Get
                Try 
                    Return CType(Me(Me.tableArBalance.CUSTOMERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArBalance.CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property Customer_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableArBalance.Customer_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArBalance.Customer_NameColumn) = value
            End Set
        End Property
        
        Public Property Net_Due As String
            Get
                Try 
                    Return CType(Me(Me.tableArBalance.Net_DueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArBalance.Net_DueColumn) = value
            End Set
        End Property
        
        Public Property DUE_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableArBalance.DUE_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArBalance.DUE_DATEColumn) = value
            End Set
        End Property
        
        Public Function IsCUSTOMERNull() As Boolean
            Return Me.IsNull(Me.tableArBalance.CUSTOMERColumn)
        End Function
        
        Public Sub SetCUSTOMERNull()
            Me(Me.tableArBalance.CUSTOMERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomer_NameNull() As Boolean
            Return Me.IsNull(Me.tableArBalance.Customer_NameColumn)
        End Function
        
        Public Sub SetCustomer_NameNull()
            Me(Me.tableArBalance.Customer_NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNet_DueNull() As Boolean
            Return Me.IsNull(Me.tableArBalance.Net_DueColumn)
        End Function
        
        Public Sub SetNet_DueNull()
            Me(Me.tableArBalance.Net_DueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUE_DATENull() As Boolean
            Return Me.IsNull(Me.tableArBalance.DUE_DATEColumn)
        End Function
        
        Public Sub SetDUE_DATENull()
            Me(Me.tableArBalance.DUE_DATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArBalanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ArBalanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ArBalanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ArBalanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columntype_of_form As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columnid_vehicle As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntax As DataColumn
        
        Private columnhouse_comment As DataColumn
        
        Private columncust_comment As DataColumn
        
        Private columnadd_user As DataColumn
        
        Private columnchg_user As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnid_service_center_before As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property type_of_formColumn As DataColumn
            Get
                Return Me.columntype_of_form
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property id_vehicleColumn As DataColumn
            Get
                Return Me.columnid_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property house_commentColumn As DataColumn
            Get
                Return Me.columnhouse_comment
            End Get
        End Property
        
        Friend ReadOnly Property cust_commentColumn As DataColumn
            Get
                Return Me.columncust_comment
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property chg_userColumn As DataColumn
            Get
                Return Me.columnchg_user
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property id_service_center_beforeColumn As DataColumn
            Get
                Return Me.columnid_service_center_before
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal id_service_center As String, ByVal type_of_form As String, ByVal cod_customer As String, ByVal id_vehicle As Integer, ByVal date_refer As String, ByVal discount As Single, ByVal tax As Single, ByVal house_comment As String, ByVal cust_comment As String, ByVal add_user As Short, ByVal chg_user As Short, ByVal po_no As String, ByVal id_service_center_before As String, ByVal id_GL_journal As Integer, ByVal Total As Decimal) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {id_service_center, type_of_form, cod_customer, id_vehicle, date_refer, discount, tax, house_comment, cust_comment, add_user, chg_user, po_no, id_service_center_before, id_GL_journal, Total}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function FindByid_service_center(ByVal id_service_center As String) As service_center_headRow
            Return CType(Me.Rows.Find(New Object() {id_service_center}),service_center_headRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columntype_of_form = Me.Columns("type_of_form")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnid_vehicle = Me.Columns("id_vehicle")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columndiscount = Me.Columns("discount")
            Me.columntax = Me.Columns("tax")
            Me.columnhouse_comment = Me.Columns("house_comment")
            Me.columncust_comment = Me.Columns("cust_comment")
            Me.columnadd_user = Me.Columns("add_user")
            Me.columnchg_user = Me.Columns("chg_user")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnid_service_center_before = Me.Columns("id_service_center_before")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columntype_of_form = New DataColumn("type_of_form", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_of_form)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnid_vehicle = New DataColumn("id_vehicle", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vehicle)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntax = New DataColumn("tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnhouse_comment = New DataColumn("house_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comment)
            Me.columncust_comment = New DataColumn("cust_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_comment)
            Me.columnadd_user = New DataColumn("add_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columnchg_user = New DataColumn("chg_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchg_user)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnid_service_center_before = New DataColumn("id_service_center_before", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center_before)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_service_center}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnid_service_center.Unique = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_head.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property type_of_form As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.type_of_formColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.type_of_formColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property id_vehicle As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_vehicleColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_vehicleColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.discountColumn) = value
            End Set
        End Property
        
        Public Property tax As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.taxColumn) = value
            End Set
        End Property
        
        Public Property house_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.house_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.house_commentColumn) = value
            End Set
        End Property
        
        Public Property cust_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cust_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cust_commentColumn) = value
            End Set
        End Property
        
        Public Property add_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.add_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.add_userColumn) = value
            End Set
        End Property
        
        Public Property chg_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.chg_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.chg_userColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property id_service_center_before As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_service_center_beforeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_center_beforeColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.TotalColumn) = value
            End Set
        End Property
        
        Public Function Istype_of_formNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.type_of_formColumn)
        End Function
        
        Public Sub Settype_of_formNull()
            Me(Me.tableservice_center_head.type_of_formColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableservice_center_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_vehicleColumn)
        End Function
        
        Public Sub Setid_vehicleNull()
            Me(Me.tableservice_center_head.id_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_head.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableservice_center_head.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableservice_center_head.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.house_commentColumn)
        End Function
        
        Public Sub Sethouse_commentNull()
            Me(Me.tableservice_center_head.house_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cust_commentColumn)
        End Function
        
        Public Sub Setcust_commentNull()
            Me(Me.tableservice_center_head.cust_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableservice_center_head.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischg_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.chg_userColumn)
        End Function
        
        Public Sub Setchg_userNull()
            Me(Me.tableservice_center_head.chg_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableservice_center_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_center_beforeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_service_center_beforeColumn)
        End Function
        
        Public Sub Setid_service_center_beforeNull()
            Me(Me.tableservice_center_head.id_service_center_beforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableservice_center_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_head.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnvip_code As DataColumn
        
        Private columncod_company As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columndriver_name1 As DataColumn
        
        Private columndriver_name2 As DataColumn
        
        Private columndriver_name3 As DataColumn
        
        Private columndriver_name4 As DataColumn
        
        Private columnDriverLicense As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnemail As DataColumn
        
        Private columncod_sales_rep As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columncust_exempt_tax As DataColumn
        
        Private columnscrap_check As DataColumn
        
        Private columnscrap_value As DataColumn
        
        Private columncredit_card_no As DataColumn
        
        Private columnexpiration_credit_date As DataColumn
        
        Private columncredit_limited As DataColumn
        
        Private columnAR_charge As DataColumn
        
        Private columnAR_term As DataColumn
        
        Private columncod_sales_tax As DataColumn
        
        Private columncod_price As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columncod_source As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_territory As DataColumn
        
        Private columndesc_sales_report As DataColumn
        
        Private columnuser_id As DataColumn
        
        Private columnuser_password As DataColumn
        
        Private columnAR_statement As DataColumn
        
        Private columnAR_send_copy As DataColumn
        
        Private columnAR_finance_charge As DataColumn
        
        Private columnAR_require_PO As DataColumn
        
        Private columnAR_credit_hold As DataColumn
        
        Private columnAR_accept_check As DataColumn
        
        Private columncust_notes As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columninactive As DataColumn
        
        Private columncustomer_no As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_trtab_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property vip_codeColumn As DataColumn
            Get
                Return Me.columnvip_code
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property driver_name1Column As DataColumn
            Get
                Return Me.columndriver_name1
            End Get
        End Property
        
        Friend ReadOnly Property driver_name2Column As DataColumn
            Get
                Return Me.columndriver_name2
            End Get
        End Property
        
        Friend ReadOnly Property driver_name3Column As DataColumn
            Get
                Return Me.columndriver_name3
            End Get
        End Property
        
        Friend ReadOnly Property driver_name4Column As DataColumn
            Get
                Return Me.columndriver_name4
            End Get
        End Property
        
        Friend ReadOnly Property DriverLicenseColumn As DataColumn
            Get
                Return Me.columnDriverLicense
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_repColumn As DataColumn
            Get
                Return Me.columncod_sales_rep
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property cust_exempt_taxColumn As DataColumn
            Get
                Return Me.columncust_exempt_tax
            End Get
        End Property
        
        Friend ReadOnly Property scrap_checkColumn As DataColumn
            Get
                Return Me.columnscrap_check
            End Get
        End Property
        
        Friend ReadOnly Property scrap_valueColumn As DataColumn
            Get
                Return Me.columnscrap_value
            End Get
        End Property
        
        Friend ReadOnly Property credit_card_noColumn As DataColumn
            Get
                Return Me.columncredit_card_no
            End Get
        End Property
        
        Friend ReadOnly Property expiration_credit_dateColumn As DataColumn
            Get
                Return Me.columnexpiration_credit_date
            End Get
        End Property
        
        Friend ReadOnly Property credit_limitedColumn As DataColumn
            Get
                Return Me.columncredit_limited
            End Get
        End Property
        
        Friend ReadOnly Property AR_chargeColumn As DataColumn
            Get
                Return Me.columnAR_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_termColumn As DataColumn
            Get
                Return Me.columnAR_term
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property cod_priceColumn As DataColumn
            Get
                Return Me.columncod_price
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_reportColumn As DataColumn
            Get
                Return Me.columndesc_sales_report
            End Get
        End Property
        
        Friend ReadOnly Property user_idColumn As DataColumn
            Get
                Return Me.columnuser_id
            End Get
        End Property
        
        Friend ReadOnly Property user_passwordColumn As DataColumn
            Get
                Return Me.columnuser_password
            End Get
        End Property
        
        Friend ReadOnly Property AR_statementColumn As DataColumn
            Get
                Return Me.columnAR_statement
            End Get
        End Property
        
        Friend ReadOnly Property AR_send_copyColumn As DataColumn
            Get
                Return Me.columnAR_send_copy
            End Get
        End Property
        
        Friend ReadOnly Property AR_finance_chargeColumn As DataColumn
            Get
                Return Me.columnAR_finance_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_require_POColumn As DataColumn
            Get
                Return Me.columnAR_require_PO
            End Get
        End Property
        
        Friend ReadOnly Property AR_credit_holdColumn As DataColumn
            Get
                Return Me.columnAR_credit_hold
            End Get
        End Property
        
        Friend ReadOnly Property AR_accept_checkColumn As DataColumn
            Get
                Return Me.columnAR_accept_check
            End Get
        End Property
        
        Friend ReadOnly Property cust_notesColumn As DataColumn
            Get
                Return Me.columncust_notes
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property inactiveColumn As DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        Friend ReadOnly Property customer_noColumn As DataColumn
            Get
                Return Me.columncustomer_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_trtab_mainRow
            Get
                Return CType(Me.Rows(index),cust_trtab_mainRow)
            End Get
        End Property
        
        Public Event cust_trtab_mainRowChanged As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowChanging As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleted As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleting As cust_trtab_mainRowChangeEventHandler
        
        Public Overloads Sub Addcust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_trtab_mainRow( _
                    ByVal cod_customer As String,  _
                    ByVal vip_code As String,  _
                    ByVal cod_company As String,  _
                    ByVal f_name As String,  _
                    ByVal m_name As String,  _
                    ByVal l_name As String,  _
                    ByVal address As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal driver_name1 As String,  _
                    ByVal driver_name2 As String,  _
                    ByVal driver_name3 As String,  _
                    ByVal driver_name4 As String,  _
                    ByVal DriverLicense As String,  _
                    ByVal zip As String,  _
                    ByVal email As String,  _
                    ByVal cod_sales_rep As String,  _
                    ByVal social_security_no As String,  _
                    ByVal cust_exempt_tax As Single,  _
                    ByVal scrap_check As Boolean,  _
                    ByVal scrap_value As Single,  _
                    ByVal credit_card_no As String,  _
                    ByVal expiration_credit_date As String,  _
                    ByVal credit_limited As Single,  _
                    ByVal AR_charge As Boolean,  _
                    ByVal AR_term As String,  _
                    ByVal cod_sales_tax As String,  _
                    ByVal cod_price As String,  _
                    ByVal discount As Single,  _
                    ByVal cod_type As String,  _
                    ByVal cod_source As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_territory As String,  _
                    ByVal desc_sales_report As String,  _
                    ByVal user_id As String,  _
                    ByVal user_password As String,  _
                    ByVal AR_statement As Boolean,  _
                    ByVal AR_send_copy As Boolean,  _
                    ByVal AR_finance_charge As Boolean,  _
                    ByVal AR_require_PO As Boolean,  _
                    ByVal AR_credit_hold As Boolean,  _
                    ByVal AR_accept_check As Boolean,  _
                    ByVal cust_notes As String,  _
                    ByVal Taxable As Boolean,  _
                    ByVal inactive As Boolean,  _
                    ByVal customer_no As String) As cust_trtab_mainRow
            Dim rowcust_trtab_mainRow As cust_trtab_mainRow = CType(Me.NewRow,cust_trtab_mainRow)
            rowcust_trtab_mainRow.ItemArray = New Object() {cod_customer, vip_code, cod_company, f_name, m_name, l_name, address, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, driver_name1, driver_name2, driver_name3, driver_name4, DriverLicense, zip, email, cod_sales_rep, social_security_no, cust_exempt_tax, scrap_check, scrap_value, credit_card_no, expiration_credit_date, credit_limited, AR_charge, AR_term, cod_sales_tax, cod_price, discount, cod_type, cod_source, cod_class, cod_territory, desc_sales_report, user_id, user_password, AR_statement, AR_send_copy, AR_finance_charge, AR_require_PO, AR_credit_hold, AR_accept_check, cust_notes, Taxable, inactive, customer_no}
            Me.Rows.Add(rowcust_trtab_mainRow)
            Return rowcust_trtab_mainRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As cust_trtab_mainRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),cust_trtab_mainRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_trtab_mainDataTable = CType(MyBase.Clone,cust_trtab_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_trtab_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnvip_code = Me.Columns("vip_code")
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columndriver_name1 = Me.Columns("driver_name1")
            Me.columndriver_name2 = Me.Columns("driver_name2")
            Me.columndriver_name3 = Me.Columns("driver_name3")
            Me.columndriver_name4 = Me.Columns("driver_name4")
            Me.columnDriverLicense = Me.Columns("DriverLicense")
            Me.columnzip = Me.Columns("zip")
            Me.columnemail = Me.Columns("email")
            Me.columncod_sales_rep = Me.Columns("cod_sales_rep")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columncust_exempt_tax = Me.Columns("cust_exempt_tax")
            Me.columnscrap_check = Me.Columns("scrap_check")
            Me.columnscrap_value = Me.Columns("scrap_value")
            Me.columncredit_card_no = Me.Columns("credit_card_no")
            Me.columnexpiration_credit_date = Me.Columns("expiration_credit_date")
            Me.columncredit_limited = Me.Columns("credit_limited")
            Me.columnAR_charge = Me.Columns("AR_charge")
            Me.columnAR_term = Me.Columns("AR_term")
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columncod_price = Me.Columns("cod_price")
            Me.columndiscount = Me.Columns("discount")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columncod_source = Me.Columns("cod_source")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columndesc_sales_report = Me.Columns("desc_sales_report")
            Me.columnuser_id = Me.Columns("user_id")
            Me.columnuser_password = Me.Columns("user_password")
            Me.columnAR_statement = Me.Columns("AR_statement")
            Me.columnAR_send_copy = Me.Columns("AR_send_copy")
            Me.columnAR_finance_charge = Me.Columns("AR_finance_charge")
            Me.columnAR_require_PO = Me.Columns("AR_require_PO")
            Me.columnAR_credit_hold = Me.Columns("AR_credit_hold")
            Me.columnAR_accept_check = Me.Columns("AR_accept_check")
            Me.columncust_notes = Me.Columns("cust_notes")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columninactive = Me.Columns("inactive")
            Me.columncustomer_no = Me.Columns("customer_no")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnvip_code = New DataColumn("vip_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvip_code)
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columndriver_name1 = New DataColumn("driver_name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name1)
            Me.columndriver_name2 = New DataColumn("driver_name2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name2)
            Me.columndriver_name3 = New DataColumn("driver_name3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name3)
            Me.columndriver_name4 = New DataColumn("driver_name4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name4)
            Me.columnDriverLicense = New DataColumn("DriverLicense", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDriverLicense)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncod_sales_rep = New DataColumn("cod_sales_rep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_rep)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columncust_exempt_tax = New DataColumn("cust_exempt_tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_exempt_tax)
            Me.columnscrap_check = New DataColumn("scrap_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_check)
            Me.columnscrap_value = New DataColumn("scrap_value", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_value)
            Me.columncredit_card_no = New DataColumn("credit_card_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_card_no)
            Me.columnexpiration_credit_date = New DataColumn("expiration_credit_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexpiration_credit_date)
            Me.columncredit_limited = New DataColumn("credit_limited", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_limited)
            Me.columnAR_charge = New DataColumn("AR_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_charge)
            Me.columnAR_term = New DataColumn("AR_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_term)
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columncod_price = New DataColumn("cod_price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_price)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columndesc_sales_report = New DataColumn("desc_sales_report", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_report)
            Me.columnuser_id = New DataColumn("user_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_id)
            Me.columnuser_password = New DataColumn("user_password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_password)
            Me.columnAR_statement = New DataColumn("AR_statement", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_statement)
            Me.columnAR_send_copy = New DataColumn("AR_send_copy", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_send_copy)
            Me.columnAR_finance_charge = New DataColumn("AR_finance_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_finance_charge)
            Me.columnAR_require_PO = New DataColumn("AR_require_PO", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_require_PO)
            Me.columnAR_credit_hold = New DataColumn("AR_credit_hold", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_credit_hold)
            Me.columnAR_accept_check = New DataColumn("AR_accept_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_accept_check)
            Me.columncust_notes = New DataColumn("cust_notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_notes)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columninactive = New DataColumn("inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninactive)
            Me.columncustomer_no = New DataColumn("customer_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function Newcust_trtab_mainRow() As cust_trtab_mainRow
            Return CType(Me.NewRow,cust_trtab_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_trtab_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_trtab_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_trtab_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanged(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_trtab_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanging(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_trtab_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleted(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_trtab_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleting(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRow
        Inherits DataRow
        
        Private tablecust_trtab_main As cust_trtab_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_trtab_main = CType(Me.Table,cust_trtab_mainDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecust_trtab_main.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property vip_code As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.vip_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.vip_codeColumn) = value
            End Set
        End Property
        
        Public Property cod_company As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.f_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.m_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.l_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.addressColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property driver_name1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name1Column) = value
            End Set
        End Property
        
        Public Property driver_name2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name2Column) = value
            End Set
        End Property
        
        Public Property driver_name3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name3Column) = value
            End Set
        End Property
        
        Public Property driver_name4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name4Column) = value
            End Set
        End Property
        
        Public Property DriverLicense As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.DriverLicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.DriverLicenseColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.zipColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.emailColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_rep As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_repColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_repColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property cust_exempt_tax As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_exempt_taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = value
            End Set
        End Property
        
        Public Property scrap_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_checkColumn) = value
            End Set
        End Property
        
        Public Property scrap_value As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_valueColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_valueColumn) = value
            End Set
        End Property
        
        Public Property credit_card_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_card_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_card_noColumn) = value
            End Set
        End Property
        
        Public Property expiration_credit_date As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.expiration_credit_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = value
            End Set
        End Property
        
        Public Property credit_limited As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_limitedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_limitedColumn) = value
            End Set
        End Property
        
        Public Property AR_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_term As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_termColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property cod_price As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_priceColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.discountColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_source As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_territory As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_report As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.desc_sales_reportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = value
            End Set
        End Property
        
        Public Property user_id As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_idColumn) = value
            End Set
        End Property
        
        Public Property user_password As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_passwordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_passwordColumn) = value
            End Set
        End Property
        
        Public Property AR_statement As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_statementColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_statementColumn) = value
            End Set
        End Property
        
        Public Property AR_send_copy As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_send_copyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_send_copyColumn) = value
            End Set
        End Property
        
        Public Property AR_finance_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_finance_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_require_PO As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_require_POColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_require_POColumn) = value
            End Set
        End Property
        
        Public Property AR_credit_hold As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_credit_holdColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = value
            End Set
        End Property
        
        Public Property AR_accept_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_accept_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = value
            End Set
        End Property
        
        Public Property cust_notes As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_notesColumn) = value
            End Set
        End Property
        
        Public Property Taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.TaxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.TaxableColumn) = value
            End Set
        End Property
        
        Public Property inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.inactiveColumn) = value
            End Set
        End Property
        
        Public Property customer_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.customer_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.customer_noColumn) = value
            End Set
        End Property
        
        Public Function Isvip_codeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.vip_codeColumn)
        End Function
        
        Public Sub Setvip_codeNull()
            Me(Me.tablecust_trtab_main.vip_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_companyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_companyColumn)
        End Function
        
        Public Sub Setcod_companyNull()
            Me(Me.tablecust_trtab_main.cod_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecust_trtab_main.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tablecust_trtab_main.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecust_trtab_main.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablecust_trtab_main.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablecust_trtab_main.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablecust_trtab_main.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablecust_trtab_main.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablecust_trtab_main.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablecust_trtab_main.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablecust_trtab_main.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablecust_trtab_main.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablecust_trtab_main.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablecust_trtab_main.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablecust_trtab_main.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablecust_trtab_main.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablecust_trtab_main.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablecust_trtab_main.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablecust_trtab_main.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablecust_trtab_main.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablecust_trtab_main.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablecust_trtab_main.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablecust_trtab_main.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablecust_trtab_main.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablecust_trtab_main.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name1Column)
        End Function
        
        Public Sub Setdriver_name1Null()
            Me(Me.tablecust_trtab_main.driver_name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name2Column)
        End Function
        
        Public Sub Setdriver_name2Null()
            Me(Me.tablecust_trtab_main.driver_name2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name3Column)
        End Function
        
        Public Sub Setdriver_name3Null()
            Me(Me.tablecust_trtab_main.driver_name3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name4Column)
        End Function
        
        Public Sub Setdriver_name4Null()
            Me(Me.tablecust_trtab_main.driver_name4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDriverLicenseNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.DriverLicenseColumn)
        End Function
        
        Public Sub SetDriverLicenseNull()
            Me(Me.tablecust_trtab_main.DriverLicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablecust_trtab_main.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablecust_trtab_main.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_repNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_repColumn)
        End Function
        
        Public Sub Setcod_sales_repNull()
            Me(Me.tablecust_trtab_main.cod_sales_repColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tablecust_trtab_main.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_exempt_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_exempt_taxColumn)
        End Function
        
        Public Sub Setcust_exempt_taxNull()
            Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_checkColumn)
        End Function
        
        Public Sub Setscrap_checkNull()
            Me(Me.tablecust_trtab_main.scrap_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_valueNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_valueColumn)
        End Function
        
        Public Sub Setscrap_valueNull()
            Me(Me.tablecust_trtab_main.scrap_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_card_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_card_noColumn)
        End Function
        
        Public Sub Setcredit_card_noNull()
            Me(Me.tablecust_trtab_main.credit_card_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isexpiration_credit_dateNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.expiration_credit_dateColumn)
        End Function
        
        Public Sub Setexpiration_credit_dateNull()
            Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_limitedNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_limitedColumn)
        End Function
        
        Public Sub Setcredit_limitedNull()
            Me(Me.tablecust_trtab_main.credit_limitedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_chargeColumn)
        End Function
        
        Public Sub SetAR_chargeNull()
            Me(Me.tablecust_trtab_main.AR_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_termColumn)
        End Function
        
        Public Sub SetAR_termNull()
            Me(Me.tablecust_trtab_main.AR_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_taxColumn)
        End Function
        
        Public Sub Setcod_sales_taxNull()
            Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_priceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_priceColumn)
        End Function
        
        Public Sub Setcod_priceNull()
            Me(Me.tablecust_trtab_main.cod_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tablecust_trtab_main.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tablecust_trtab_main.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sourceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sourceColumn)
        End Function
        
        Public Sub Setcod_sourceNull()
            Me(Me.tablecust_trtab_main.cod_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tablecust_trtab_main.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_territoryNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_territoryColumn)
        End Function
        
        Public Sub Setcod_territoryNull()
            Me(Me.tablecust_trtab_main.cod_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sales_reportNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.desc_sales_reportColumn)
        End Function
        
        Public Sub Setdesc_sales_reportNull()
            Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_idNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_idColumn)
        End Function
        
        Public Sub Setuser_idNull()
            Me(Me.tablecust_trtab_main.user_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_passwordNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_passwordColumn)
        End Function
        
        Public Sub Setuser_passwordNull()
            Me(Me.tablecust_trtab_main.user_passwordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_statementNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_statementColumn)
        End Function
        
        Public Sub SetAR_statementNull()
            Me(Me.tablecust_trtab_main.AR_statementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_send_copyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_send_copyColumn)
        End Function
        
        Public Sub SetAR_send_copyNull()
            Me(Me.tablecust_trtab_main.AR_send_copyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_finance_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_finance_chargeColumn)
        End Function
        
        Public Sub SetAR_finance_chargeNull()
            Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_require_PONull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_require_POColumn)
        End Function
        
        Public Sub SetAR_require_PONull()
            Me(Me.tablecust_trtab_main.AR_require_POColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_credit_holdNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_credit_holdColumn)
        End Function
        
        Public Sub SetAR_credit_holdNull()
            Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_accept_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_accept_checkColumn)
        End Function
        
        Public Sub SetAR_accept_checkNull()
            Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_notesNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_notesColumn)
        End Function
        
        Public Sub Setcust_notesNull()
            Me(Me.tablecust_trtab_main.cust_notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tablecust_trtab_main.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.inactiveColumn)
        End Function
        
        Public Sub SetinactiveNull()
            Me(Me.tablecust_trtab_main.inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscustomer_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.customer_noColumn)
        End Function
        
        Public Sub Setcustomer_noNull()
            Me(Me.tablecust_trtab_main.customer_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_trtab_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_trtab_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_trtab_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCusCode As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnbalance As DataColumn
        
        Friend Sub New()
            MyBase.New("Temp")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CusCodeColumn As DataColumn
            Get
                Return Me.columnCusCode
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property balanceColumn As DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TempRow
            Get
                Return CType(Me.Rows(index),TempRow)
            End Get
        End Property
        
        Public Event TempRowChanged As TempRowChangeEventHandler
        
        Public Event TempRowChanging As TempRowChangeEventHandler
        
        Public Event TempRowDeleted As TempRowChangeEventHandler
        
        Public Event TempRowDeleting As TempRowChangeEventHandler
        
        Public Overloads Sub AddTempRow(ByVal row As TempRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTempRow(ByVal CusCode As String, ByVal Name As String, ByVal Description As String, ByVal balance As Double) As TempRow
            Dim rowTempRow As TempRow = CType(Me.NewRow,TempRow)
            rowTempRow.ItemArray = New Object() {CusCode, Name, Description, balance}
            Me.Rows.Add(rowTempRow)
            Return rowTempRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TempDataTable = CType(MyBase.Clone,TempDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TempDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCusCode = Me.Columns("CusCode")
            Me.columnName = Me.Columns("Name")
            Me.columnDescription = Me.Columns("Description")
            Me.columnbalance = Me.Columns("balance")
        End Sub
        
        Private Sub InitClass()
            Me.columnCusCode = New DataColumn("CusCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCusCode)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnbalance = New DataColumn("balance", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbalance)
        End Sub
        
        Public Function NewTempRow() As TempRow
            Return CType(Me.NewRow,TempRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TempRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TempRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TempRowChangedEvent) Is Nothing) Then
                RaiseEvent TempRowChanged(Me, New TempRowChangeEvent(CType(e.Row,TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TempRowChangingEvent) Is Nothing) Then
                RaiseEvent TempRowChanging(Me, New TempRowChangeEvent(CType(e.Row,TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TempRowDeletedEvent) Is Nothing) Then
                RaiseEvent TempRowDeleted(Me, New TempRowChangeEvent(CType(e.Row,TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TempRowDeletingEvent) Is Nothing) Then
                RaiseEvent TempRowDeleting(Me, New TempRowChangeEvent(CType(e.Row,TempRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTempRow(ByVal row As TempRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempRow
        Inherits DataRow
        
        Private tableTemp As TempDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemp = CType(Me.Table,TempDataTable)
        End Sub
        
        Public Property CusCode As String
            Get
                Try 
                    Return CType(Me(Me.tableTemp.CusCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemp.CusCodeColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableTemp.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemp.NameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableTemp.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemp.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property balance As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemp.balanceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemp.balanceColumn) = value
            End Set
        End Property
        
        Public Function IsCusCodeNull() As Boolean
            Return Me.IsNull(Me.tableTemp.CusCodeColumn)
        End Function
        
        Public Sub SetCusCodeNull()
            Me(Me.tableTemp.CusCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableTemp.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableTemp.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTemp.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableTemp.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbalanceNull() As Boolean
            Return Me.IsNull(Me.tableTemp.balanceColumn)
        End Function
        
        Public Sub SetbalanceNull()
            Me(Me.tableTemp.balanceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TempRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TempRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TempRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columncod_technician As DataColumn
        
        Private columnCOMMENT_ARTICLE As DataColumn
        
        Private columnAVERAGE_COST As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property COMMENT_ARTICLEColumn As DataColumn
            Get
                Return Me.columnCOMMENT_ARTICLE
            End Get
        End Property
        
        Friend ReadOnly Property AVERAGE_COSTColumn As DataColumn
            Get
                Return Me.columnAVERAGE_COST
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow(ByVal id_service_center As String, ByVal radif As Short, ByVal type_select As String, ByVal cod_select As String, ByVal desc_radif As String, ByVal qty As Decimal, ByVal price As Decimal, ByVal fet As Decimal, ByVal taxable As Boolean, ByVal cod_technician As String, ByVal COMMENT_ARTICLE As String, ByVal AVERAGE_COST As Decimal) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {id_service_center, radif, type_select, cod_select, desc_radif, qty, price, fet, taxable, cod_technician, COMMENT_ARTICLE, AVERAGE_COST}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function FindByid_service_centerradif(ByVal id_service_center As String, ByVal radif As Short) As service_center_dtlRow
            Return CType(Me.Rows.Find(New Object() {id_service_center, radif}),service_center_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columntype_select = Me.Columns("type_select")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnfet = Me.Columns("fet")
            Me.columntaxable = Me.Columns("taxable")
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columnCOMMENT_ARTICLE = Me.Columns("COMMENT_ARTICLE")
            Me.columnAVERAGE_COST = Me.Columns("AVERAGE_COST")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columnCOMMENT_ARTICLE = New DataColumn("COMMENT_ARTICLE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMMENT_ARTICLE)
            Me.columnAVERAGE_COST = New DataColumn("AVERAGE_COST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVERAGE_COST)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_service_center, Me.columnradif}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnqty.AllowDBNull = false
            Me.columnprice.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_center_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_center_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.type_selectColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableservice_center_dtl.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Return CType(Me(Me.tableservice_center_dtl.priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_dtl.priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Return CType(Me(Me.tableservice_center_dtl.fetColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property COMMENT_ARTICLE As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn) = value
            End Set
        End Property
        
        Public Property AVERAGE_COST As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn) = value
            End Set
        End Property
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableservice_center_dtl.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_dtl.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableservice_center_dtl.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableservice_center_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableservice_center_dtl.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMMENT_ARTICLENull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn)
        End Function
        
        Public Sub SetCOMMENT_ARTICLENull()
            Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVERAGE_COSTNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AVERAGE_COSTColumn)
        End Function
        
        Public Sub SetAVERAGE_COSTNull()
            Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag_deposit_bank As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flag_deposit_bankColumn As DataColumn
            Get
                Return Me.columnflag_deposit_bank
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow(ByVal ID_payment As Integer, ByVal id_service_center As String, ByVal refrence_no As String, ByVal refer_type As String, ByVal payment_type As String, ByVal payment_amount As Decimal, ByVal flag_deposit_bank As Boolean, ByVal id_GL_journal As Integer) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {ID_payment, id_service_center, refrence_no, refer_type, payment_type, payment_amount, flag_deposit_bank, id_GL_journal}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function FindByID_payment(ByVal ID_payment As Integer) As GL_payment_depositRow
            Return CType(Me.Rows.Find(New Object() {ID_payment}),GL_payment_depositRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag_deposit_bank = Me.Columns("flag_deposit_bank")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag_deposit_bank = New DataColumn("flag_deposit_bank", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag_deposit_bank)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_payment}, true))
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.Unique = true
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag_deposit_bank As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isflag_deposit_bankNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.flag_deposit_bankColumn)
        End Function
        
        Public Sub Setflag_deposit_bankNull()
            Me(Me.tableGL_payment_deposit.flag_deposit_bankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableGL_payment_deposit.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetGL_payment_ARRows() As GL_payment_ARRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("GL_payment_depositGL_payment_AR")),GL_payment_ARRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_ARDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columnCancel_flag As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_AR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property Cancel_flagColumn As DataColumn
            Get
                Return Me.columnCancel_flag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_ARRow
            Get
                Return CType(Me.Rows(index),GL_payment_ARRow)
            End Get
        End Property
        
        Public Event GL_payment_ARRowChanged As GL_payment_ARRowChangeEventHandler
        
        Public Event GL_payment_ARRowChanging As GL_payment_ARRowChangeEventHandler
        
        Public Event GL_payment_ARRowDeleted As GL_payment_ARRowChangeEventHandler
        
        Public Event GL_payment_ARRowDeleting As GL_payment_ARRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_ARRow(ByVal row As GL_payment_ARRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_ARRow(ByVal parentGL_payment_depositRowByGL_payment_depositGL_payment_AR As GL_payment_depositRow, ByVal AR_terms As String, ByVal AR_due_date As String, ByVal Cancel_flag As Boolean) As GL_payment_ARRow
            Dim rowGL_payment_ARRow As GL_payment_ARRow = CType(Me.NewRow,GL_payment_ARRow)
            rowGL_payment_ARRow.ItemArray = New Object() {parentGL_payment_depositRowByGL_payment_depositGL_payment_AR(0), AR_terms, AR_due_date, Cancel_flag}
            Me.Rows.Add(rowGL_payment_ARRow)
            Return rowGL_payment_ARRow
        End Function
        
        Public Function FindByID_payment(ByVal ID_payment As Integer) As GL_payment_ARRow
            Return CType(Me.Rows.Find(New Object() {ID_payment}),GL_payment_ARRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_ARDataTable = CType(MyBase.Clone,GL_payment_ARDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_ARDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columnCancel_flag = Me.Columns("Cancel_flag")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columnCancel_flag = New DataColumn("Cancel_flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCancel_flag)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_payment}, true))
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.Unique = true
        End Sub
        
        Public Function NewGL_payment_ARRow() As GL_payment_ARRow
            Return CType(Me.NewRow,GL_payment_ARRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_ARRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_ARRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_ARRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_ARRowChanged(Me, New GL_payment_ARRowChangeEvent(CType(e.Row,GL_payment_ARRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_ARRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_ARRowChanging(Me, New GL_payment_ARRowChangeEvent(CType(e.Row,GL_payment_ARRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_ARRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_ARRowDeleted(Me, New GL_payment_ARRowChangeEvent(CType(e.Row,GL_payment_ARRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_ARRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_ARRowDeleting(Me, New GL_payment_ARRowChangeEvent(CType(e.Row,GL_payment_ARRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_ARRow(ByVal row As GL_payment_ARRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_ARRow
        Inherits DataRow
        
        Private tableGL_payment_AR As GL_payment_ARDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_AR = CType(Me.Table,GL_payment_ARDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_AR.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_AR.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_AR.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_AR.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_AR.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_AR.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property Cancel_flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_AR.Cancel_flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_AR.Cancel_flagColumn) = value
            End Set
        End Property
        
        Public Property GL_payment_depositRow As GL_payment_depositRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("GL_payment_depositGL_payment_AR")),GL_payment_depositRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("GL_payment_depositGL_payment_AR"))
            End Set
        End Property
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_AR.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableGL_payment_AR.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_AR.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableGL_payment_AR.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCancel_flagNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_AR.Cancel_flagColumn)
        End Function
        
        Public Sub SetCancel_flagNull()
            Me(Me.tableGL_payment_AR.Cancel_flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_ARRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_ARRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_ARRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_ARRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columncomplete_desc_brand As DataColumn
        
        Private columnabbreviation_desc_brand As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columntel As DataColumn
        
        Private columnconect_personal As DataColumn
        
        Private columnicon_brand As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_brand")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property complete_desc_brandColumn As DataColumn
            Get
                Return Me.columncomplete_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_desc_brandColumn As DataColumn
            Get
                Return Me.columnabbreviation_desc_brand
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property telColumn As DataColumn
            Get
                Return Me.columntel
            End Get
        End Property
        
        Friend ReadOnly Property conect_personalColumn As DataColumn
            Get
                Return Me.columnconect_personal
            End Get
        End Property
        
        Friend ReadOnly Property icon_brandColumn As DataColumn
            Get
                Return Me.columnicon_brand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_brandRow
            Get
                Return CType(Me.Rows(index),inv_tab_brandRow)
            End Get
        End Property
        
        Public Event inv_tab_brandRowChanged As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowChanging As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleted As inv_tab_brandRowChangeEventHandler
        
        Public Event inv_tab_brandRowDeleting As inv_tab_brandRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_brandRow(ByVal cod_brand As String, ByVal complete_desc_brand As String, ByVal abbreviation_desc_brand As String, ByVal address As String, ByVal tel As String, ByVal conect_personal As String, ByVal icon_brand() As Byte) As inv_tab_brandRow
            Dim rowinv_tab_brandRow As inv_tab_brandRow = CType(Me.NewRow,inv_tab_brandRow)
            rowinv_tab_brandRow.ItemArray = New Object() {cod_brand, complete_desc_brand, abbreviation_desc_brand, address, tel, conect_personal, icon_brand}
            Me.Rows.Add(rowinv_tab_brandRow)
            Return rowinv_tab_brandRow
        End Function
        
        Public Function FindBycod_brand(ByVal cod_brand As String) As inv_tab_brandRow
            Return CType(Me.Rows.Find(New Object() {cod_brand}),inv_tab_brandRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_brandDataTable = CType(MyBase.Clone,inv_tab_brandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_brandDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columncomplete_desc_brand = Me.Columns("complete_desc_brand")
            Me.columnabbreviation_desc_brand = Me.Columns("abbreviation_desc_brand")
            Me.columnaddress = Me.Columns("address")
            Me.columntel = Me.Columns("tel")
            Me.columnconect_personal = Me.Columns("conect_personal")
            Me.columnicon_brand = Me.Columns("icon_brand")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columncomplete_desc_brand = New DataColumn("complete_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_desc_brand)
            Me.columnabbreviation_desc_brand = New DataColumn("abbreviation_desc_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_desc_brand)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columntel = New DataColumn("tel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntel)
            Me.columnconect_personal = New DataColumn("conect_personal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconect_personal)
            Me.columnicon_brand = New DataColumn("icon_brand", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnicon_brand)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_brand}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columncod_brand.Unique = true
        End Sub
        
        Public Function Newinv_tab_brandRow() As inv_tab_brandRow
            Return CType(Me.NewRow,inv_tab_brandRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_brandRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_brandRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_brandRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanged(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_brandRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowChanging(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_brandRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleted(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_brandRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_brandRowDeleting(Me, New inv_tab_brandRowChangeEvent(CType(e.Row,inv_tab_brandRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_brandRow(ByVal row As inv_tab_brandRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRow
        Inherits DataRow
        
        Private tableinv_tab_brand As inv_tab_brandDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_brand = CType(Me.Table,inv_tab_brandDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_brand.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_brand.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property complete_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.complete_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_desc_brand As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.addressColumn) = value
            End Set
        End Property
        
        Public Property tel As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.telColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.telColumn) = value
            End Set
        End Property
        
        Public Property conect_personal As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.conect_personalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.conect_personalColumn) = value
            End Set
        End Property
        
        Public Property icon_brand As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_brand.icon_brandColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_brand.icon_brandColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.complete_desc_brandColumn)
        End Function
        
        Public Sub Setcomplete_desc_brandNull()
            Me(Me.tableinv_tab_brand.complete_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_desc_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.abbreviation_desc_brandColumn)
        End Function
        
        Public Sub Setabbreviation_desc_brandNull()
            Me(Me.tableinv_tab_brand.abbreviation_desc_brandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableinv_tab_brand.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstelNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.telColumn)
        End Function
        
        Public Sub SettelNull()
            Me(Me.tableinv_tab_brand.telColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isconect_personalNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.conect_personalColumn)
        End Function
        
        Public Sub Setconect_personalNull()
            Me(Me.tableinv_tab_brand.conect_personalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isicon_brandNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_brand.icon_brandColumn)
        End Function
        
        Public Sub Seticon_brandNull()
            Me(Me.tableinv_tab_brand.icon_brandColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_brandRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_brandRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_brandRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_brandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_brand As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnline As DataColumn
        
        Private columnfeatures As DataColumn
        
        Private columnbenefits As DataColumn
        
        Private columntreadwear As DataColumn
        
        Private columntraction As DataColumn
        
        Private columntemperature As DataColumn
        
        Private columnlimit_warranty As DataColumn
        
        Private columnconstruction As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Private columntread_life As DataColumn
        
        Private columnwet_traction As DataColumn
        
        Private columnquiet_ride As DataColumn
        
        Private columnhandling As DataColumn
        
        Private columnwinter_traction As DataColumn
        
        Private columnnud_traction As DataColumn
        
        Private columnoverall_score As DataColumn
        
        Private columndry_traction As DataColumn
        
        Private columnride_comfort As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_brandColumn As DataColumn
            Get
                Return Me.columncod_brand
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property featuresColumn As DataColumn
            Get
                Return Me.columnfeatures
            End Get
        End Property
        
        Friend ReadOnly Property benefitsColumn As DataColumn
            Get
                Return Me.columnbenefits
            End Get
        End Property
        
        Friend ReadOnly Property treadwearColumn As DataColumn
            Get
                Return Me.columntreadwear
            End Get
        End Property
        
        Friend ReadOnly Property tractionColumn As DataColumn
            Get
                Return Me.columntraction
            End Get
        End Property
        
        Friend ReadOnly Property temperatureColumn As DataColumn
            Get
                Return Me.columntemperature
            End Get
        End Property
        
        Friend ReadOnly Property limit_warrantyColumn As DataColumn
            Get
                Return Me.columnlimit_warranty
            End Get
        End Property
        
        Friend ReadOnly Property constructionColumn As DataColumn
            Get
                Return Me.columnconstruction
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Friend ReadOnly Property tread_lifeColumn As DataColumn
            Get
                Return Me.columntread_life
            End Get
        End Property
        
        Friend ReadOnly Property wet_tractionColumn As DataColumn
            Get
                Return Me.columnwet_traction
            End Get
        End Property
        
        Friend ReadOnly Property quiet_rideColumn As DataColumn
            Get
                Return Me.columnquiet_ride
            End Get
        End Property
        
        Friend ReadOnly Property handlingColumn As DataColumn
            Get
                Return Me.columnhandling
            End Get
        End Property
        
        Friend ReadOnly Property winter_tractionColumn As DataColumn
            Get
                Return Me.columnwinter_traction
            End Get
        End Property
        
        Friend ReadOnly Property nud_tractionColumn As DataColumn
            Get
                Return Me.columnnud_traction
            End Get
        End Property
        
        Friend ReadOnly Property overall_scoreColumn As DataColumn
            Get
                Return Me.columnoverall_score
            End Get
        End Property
        
        Friend ReadOnly Property dry_tractionColumn As DataColumn
            Get
                Return Me.columndry_traction
            End Get
        End Property
        
        Friend ReadOnly Property ride_comfortColumn As DataColumn
            Get
                Return Me.columnride_comfort
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_lineRow
            Get
                Return CType(Me.Rows(index),inv_tab_lineRow)
            End Get
        End Property
        
        Public Event inv_tab_lineRowChanged As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowChanging As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleted As inv_tab_lineRowChangeEventHandler
        
        Public Event inv_tab_lineRowDeleting As inv_tab_lineRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_lineRow( _
                    ByVal cod_brand As String,  _
                    ByVal style As String,  _
                    ByVal line As String,  _
                    ByVal features As String,  _
                    ByVal benefits As String,  _
                    ByVal treadwear As String,  _
                    ByVal traction As String,  _
                    ByVal temperature As String,  _
                    ByVal limit_warranty As String,  _
                    ByVal construction As String,  _
                    ByVal remark As String,  _
                    ByVal image_remark() As Byte,  _
                    ByVal tread_life As String,  _
                    ByVal wet_traction As String,  _
                    ByVal quiet_ride As String,  _
                    ByVal handling As String,  _
                    ByVal winter_traction As String,  _
                    ByVal nud_traction As String,  _
                    ByVal overall_score As String,  _
                    ByVal dry_traction As String,  _
                    ByVal ride_comfort As String) As inv_tab_lineRow
            Dim rowinv_tab_lineRow As inv_tab_lineRow = CType(Me.NewRow,inv_tab_lineRow)
            rowinv_tab_lineRow.ItemArray = New Object() {cod_brand, style, line, features, benefits, treadwear, traction, temperature, limit_warranty, construction, remark, image_remark, tread_life, wet_traction, quiet_ride, handling, winter_traction, nud_traction, overall_score, dry_traction, ride_comfort}
            Me.Rows.Add(rowinv_tab_lineRow)
            Return rowinv_tab_lineRow
        End Function
        
        Public Function FindByline(ByVal line As String) As inv_tab_lineRow
            Return CType(Me.Rows.Find(New Object() {line}),inv_tab_lineRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_lineDataTable = CType(MyBase.Clone,inv_tab_lineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_lineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_brand = Me.Columns("cod_brand")
            Me.columnstyle = Me.Columns("style")
            Me.columnline = Me.Columns("line")
            Me.columnfeatures = Me.Columns("features")
            Me.columnbenefits = Me.Columns("benefits")
            Me.columntreadwear = Me.Columns("treadwear")
            Me.columntraction = Me.Columns("traction")
            Me.columntemperature = Me.Columns("temperature")
            Me.columnlimit_warranty = Me.Columns("limit_warranty")
            Me.columnconstruction = Me.Columns("construction")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
            Me.columntread_life = Me.Columns("tread_life")
            Me.columnwet_traction = Me.Columns("wet_traction")
            Me.columnquiet_ride = Me.Columns("quiet_ride")
            Me.columnhandling = Me.Columns("handling")
            Me.columnwinter_traction = Me.Columns("winter_traction")
            Me.columnnud_traction = Me.Columns("nud_traction")
            Me.columnoverall_score = Me.Columns("overall_score")
            Me.columndry_traction = Me.Columns("dry_traction")
            Me.columnride_comfort = Me.Columns("ride_comfort")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_brand = New DataColumn("cod_brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_brand)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnfeatures = New DataColumn("features", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfeatures)
            Me.columnbenefits = New DataColumn("benefits", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbenefits)
            Me.columntreadwear = New DataColumn("treadwear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntreadwear)
            Me.columntraction = New DataColumn("traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntraction)
            Me.columntemperature = New DataColumn("temperature", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemperature)
            Me.columnlimit_warranty = New DataColumn("limit_warranty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlimit_warranty)
            Me.columnconstruction = New DataColumn("construction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconstruction)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.columntread_life = New DataColumn("tread_life", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntread_life)
            Me.columnwet_traction = New DataColumn("wet_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwet_traction)
            Me.columnquiet_ride = New DataColumn("quiet_ride", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquiet_ride)
            Me.columnhandling = New DataColumn("handling", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhandling)
            Me.columnwinter_traction = New DataColumn("winter_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwinter_traction)
            Me.columnnud_traction = New DataColumn("nud_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnud_traction)
            Me.columnoverall_score = New DataColumn("overall_score", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverall_score)
            Me.columndry_traction = New DataColumn("dry_traction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndry_traction)
            Me.columnride_comfort = New DataColumn("ride_comfort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnride_comfort)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnline}, true))
            Me.columncod_brand.AllowDBNull = false
            Me.columnstyle.AllowDBNull = false
            Me.columnline.AllowDBNull = false
            Me.columnline.Unique = true
        End Sub
        
        Public Function Newinv_tab_lineRow() As inv_tab_lineRow
            Return CType(Me.NewRow,inv_tab_lineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_lineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_lineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_lineRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanged(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_lineRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowChanging(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_lineRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleted(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_lineRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_lineRowDeleting(Me, New inv_tab_lineRowChangeEvent(CType(e.Row,inv_tab_lineRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_lineRow(ByVal row As inv_tab_lineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRow
        Inherits DataRow
        
        Private tableinv_tab_line As inv_tab_lineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_line = CType(Me.Table,inv_tab_lineDataTable)
        End Sub
        
        Public Property cod_brand As String
            Get
                Return CType(Me(Me.tableinv_tab_line.cod_brandColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.cod_brandColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_line.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.styleColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Return CType(Me(Me.tableinv_tab_line.lineColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_line.lineColumn) = value
            End Set
        End Property
        
        Public Property features As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.featuresColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.featuresColumn) = value
            End Set
        End Property
        
        Public Property benefits As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.benefitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.benefitsColumn) = value
            End Set
        End Property
        
        Public Property treadwear As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.treadwearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.treadwearColumn) = value
            End Set
        End Property
        
        Public Property traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tractionColumn) = value
            End Set
        End Property
        
        Public Property temperature As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.temperatureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.temperatureColumn) = value
            End Set
        End Property
        
        Public Property limit_warranty As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.limit_warrantyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.limit_warrantyColumn) = value
            End Set
        End Property
        
        Public Property construction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.constructionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.constructionColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.image_remarkColumn) = value
            End Set
        End Property
        
        Public Property tread_life As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.tread_lifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.tread_lifeColumn) = value
            End Set
        End Property
        
        Public Property wet_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.wet_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.wet_tractionColumn) = value
            End Set
        End Property
        
        Public Property quiet_ride As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.quiet_rideColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.quiet_rideColumn) = value
            End Set
        End Property
        
        Public Property handling As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.handlingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.handlingColumn) = value
            End Set
        End Property
        
        Public Property winter_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.winter_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.winter_tractionColumn) = value
            End Set
        End Property
        
        Public Property nud_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.nud_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.nud_tractionColumn) = value
            End Set
        End Property
        
        Public Property overall_score As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.overall_scoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.overall_scoreColumn) = value
            End Set
        End Property
        
        Public Property dry_traction As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.dry_tractionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.dry_tractionColumn) = value
            End Set
        End Property
        
        Public Property ride_comfort As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_line.ride_comfortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_line.ride_comfortColumn) = value
            End Set
        End Property
        
        Public Function IsfeaturesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.featuresColumn)
        End Function
        
        Public Sub SetfeaturesNull()
            Me(Me.tableinv_tab_line.featuresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbenefitsNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.benefitsColumn)
        End Function
        
        Public Sub SetbenefitsNull()
            Me(Me.tableinv_tab_line.benefitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstreadwearNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.treadwearColumn)
        End Function
        
        Public Sub SettreadwearNull()
            Me(Me.tableinv_tab_line.treadwearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tractionColumn)
        End Function
        
        Public Sub SettractionNull()
            Me(Me.tableinv_tab_line.tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstemperatureNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.temperatureColumn)
        End Function
        
        Public Sub SettemperatureNull()
            Me(Me.tableinv_tab_line.temperatureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islimit_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.limit_warrantyColumn)
        End Function
        
        Public Sub Setlimit_warrantyNull()
            Me(Me.tableinv_tab_line.limit_warrantyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconstructionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.constructionColumn)
        End Function
        
        Public Sub SetconstructionNull()
            Me(Me.tableinv_tab_line.constructionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_line.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_line.image_remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istread_lifeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.tread_lifeColumn)
        End Function
        
        Public Sub Settread_lifeNull()
            Me(Me.tableinv_tab_line.tread_lifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswet_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.wet_tractionColumn)
        End Function
        
        Public Sub Setwet_tractionNull()
            Me(Me.tableinv_tab_line.wet_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isquiet_rideNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.quiet_rideColumn)
        End Function
        
        Public Sub Setquiet_rideNull()
            Me(Me.tableinv_tab_line.quiet_rideColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshandlingNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.handlingColumn)
        End Function
        
        Public Sub SethandlingNull()
            Me(Me.tableinv_tab_line.handlingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswinter_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.winter_tractionColumn)
        End Function
        
        Public Sub Setwinter_tractionNull()
            Me(Me.tableinv_tab_line.winter_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnud_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.nud_tractionColumn)
        End Function
        
        Public Sub Setnud_tractionNull()
            Me(Me.tableinv_tab_line.nud_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isoverall_scoreNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.overall_scoreColumn)
        End Function
        
        Public Sub Setoverall_scoreNull()
            Me(Me.tableinv_tab_line.overall_scoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdry_tractionNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.dry_tractionColumn)
        End Function
        
        Public Sub Setdry_tractionNull()
            Me(Me.tableinv_tab_line.dry_tractionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isride_comfortNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_line.ride_comfortColumn)
        End Function
        
        Public Sub Setride_comfortNull()
            Me(Me.tableinv_tab_line.ride_comfortColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_lineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_lineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_lineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_lineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnimage_remark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property image_remarkColumn As DataColumn
            Get
                Return Me.columnimage_remark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleRow)
            End Get
        End Property
        
        Public Event inv_tab_styleRowChanged As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowChanging As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleted As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleting As inv_tab_styleRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleRow(ByVal style As String, ByVal desc_style As String, ByVal remark As String, ByVal image_remark() As Byte) As inv_tab_styleRow
            Dim rowinv_tab_styleRow As inv_tab_styleRow = CType(Me.NewRow,inv_tab_styleRow)
            rowinv_tab_styleRow.ItemArray = New Object() {style, desc_style, remark, image_remark}
            Me.Rows.Add(rowinv_tab_styleRow)
            Return rowinv_tab_styleRow
        End Function
        
        Public Function FindBystyle(ByVal style As String) As inv_tab_styleRow
            Return CType(Me.Rows.Find(New Object() {style}),inv_tab_styleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleDataTable = CType(MyBase.Clone,inv_tab_styleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
            Me.columnremark = Me.Columns("remark")
            Me.columnimage_remark = Me.Columns("image_remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnimage_remark = New DataColumn("image_remark", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage_remark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstyle}, true))
            Me.columnstyle.AllowDBNull = false
            Me.columnstyle.Unique = true
        End Sub
        
        Public Function Newinv_tab_styleRow() As inv_tab_styleRow
            Return CType(Me.NewRow,inv_tab_styleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanged(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanging(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleted(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleting(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRow
        Inherits DataRow
        
        Private tableinv_tab_style As inv_tab_styleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_style = CType(Me.Table,inv_tab_styleDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_style.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_style.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.desc_styleColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.remarkColumn) = value
            End Set
        End Property
        
        Public Property image_remark As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.image_remarkColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.image_remarkColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_style.desc_styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_tab_style.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isimage_remarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.image_remarkColumn)
        End Function
        
        Public Sub Setimage_remarkNull()
            Me(Me.tableinv_tab_style.image_remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnStyle As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("Style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property StyleColumn As DataColumn
            Get
                Return Me.columnStyle
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StyleRow
            Get
                Return CType(Me.Rows(index),StyleRow)
            End Get
        End Property
        
        Public Event StyleRowChanged As StyleRowChangeEventHandler
        
        Public Event StyleRowChanging As StyleRowChangeEventHandler
        
        Public Event StyleRowDeleted As StyleRowChangeEventHandler
        
        Public Event StyleRowDeleting As StyleRowChangeEventHandler
        
        Public Overloads Sub AddStyleRow(ByVal row As StyleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStyleRow(ByVal Style As String, ByVal Description As String) As StyleRow
            Dim rowStyleRow As StyleRow = CType(Me.NewRow,StyleRow)
            rowStyleRow.ItemArray = New Object() {Style, Description}
            Me.Rows.Add(rowStyleRow)
            Return rowStyleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StyleDataTable = CType(MyBase.Clone,StyleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StyleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnStyle = Me.Columns("Style")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnStyle = New DataColumn("Style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStyle)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
        End Sub
        
        Public Function NewStyleRow() As StyleRow
            Return CType(Me.NewRow,StyleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StyleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StyleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StyleRowChangedEvent) Is Nothing) Then
                RaiseEvent StyleRowChanged(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StyleRowChangingEvent) Is Nothing) Then
                RaiseEvent StyleRowChanging(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StyleRowDeletedEvent) Is Nothing) Then
                RaiseEvent StyleRowDeleted(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StyleRowDeletingEvent) Is Nothing) Then
                RaiseEvent StyleRowDeleting(Me, New StyleRowChangeEvent(CType(e.Row,StyleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStyleRow(ByVal row As StyleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleRow
        Inherits DataRow
        
        Private tableStyle As StyleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStyle = CType(Me.Table,StyleDataTable)
        End Sub
        
        Public Property Style As String
            Get
                Try 
                    Return CType(Me(Me.tableStyle.StyleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStyle.StyleColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableStyle.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStyle.DescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsStyleNull() As Boolean
            Return Me.IsNull(Me.tableStyle.StyleColumn)
        End Function
        
        Public Sub SetStyleNull()
            Me(Me.tableStyle.StyleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableStyle.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableStyle.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StyleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StyleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StyleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StyleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLine As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnBrand As DataColumn
        
        Private columnStyle As DataColumn
        
        Friend Sub New()
            MyBase.New("Line")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LineColumn As DataColumn
            Get
                Return Me.columnLine
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property BrandColumn As DataColumn
            Get
                Return Me.columnBrand
            End Get
        End Property
        
        Friend ReadOnly Property StyleColumn As DataColumn
            Get
                Return Me.columnStyle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LineRow
            Get
                Return CType(Me.Rows(index),LineRow)
            End Get
        End Property
        
        Public Event LineRowChanged As LineRowChangeEventHandler
        
        Public Event LineRowChanging As LineRowChangeEventHandler
        
        Public Event LineRowDeleted As LineRowChangeEventHandler
        
        Public Event LineRowDeleting As LineRowChangeEventHandler
        
        Public Overloads Sub AddLineRow(ByVal row As LineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLineRow(ByVal Line As String, ByVal Description As String, ByVal Brand As String, ByVal Style As String) As LineRow
            Dim rowLineRow As LineRow = CType(Me.NewRow,LineRow)
            rowLineRow.ItemArray = New Object() {Line, Description, Brand, Style}
            Me.Rows.Add(rowLineRow)
            Return rowLineRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LineDataTable = CType(MyBase.Clone,LineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLine = Me.Columns("Line")
            Me.columnDescription = Me.Columns("Description")
            Me.columnBrand = Me.Columns("Brand")
            Me.columnStyle = Me.Columns("Style")
        End Sub
        
        Private Sub InitClass()
            Me.columnLine = New DataColumn("Line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnBrand = New DataColumn("Brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBrand)
            Me.columnStyle = New DataColumn("Style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStyle)
        End Sub
        
        Public Function NewLineRow() As LineRow
            Return CType(Me.NewRow,LineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LineRowChangedEvent) Is Nothing) Then
                RaiseEvent LineRowChanged(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LineRowChangingEvent) Is Nothing) Then
                RaiseEvent LineRowChanging(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LineRowDeletedEvent) Is Nothing) Then
                RaiseEvent LineRowDeleted(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LineRowDeletingEvent) Is Nothing) Then
                RaiseEvent LineRowDeleting(Me, New LineRowChangeEvent(CType(e.Row,LineRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLineRow(ByVal row As LineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineRow
        Inherits DataRow
        
        Private tableLine As LineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLine = CType(Me.Table,LineDataTable)
        End Sub
        
        Public Property Line As String
            Get
                Try 
                    Return CType(Me(Me.tableLine.LineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLine.LineColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableLine.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLine.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Brand As String
            Get
                Try 
                    Return CType(Me(Me.tableLine.BrandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLine.BrandColumn) = value
            End Set
        End Property
        
        Public Property Style As String
            Get
                Try 
                    Return CType(Me(Me.tableLine.StyleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLine.StyleColumn) = value
            End Set
        End Property
        
        Public Function IsLineNull() As Boolean
            Return Me.IsNull(Me.tableLine.LineColumn)
        End Function
        
        Public Sub SetLineNull()
            Me(Me.tableLine.LineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableLine.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableLine.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBrandNull() As Boolean
            Return Me.IsNull(Me.tableLine.BrandColumn)
        End Function
        
        Public Sub SetBrandNull()
            Me(Me.tableLine.BrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStyleNull() As Boolean
            Return Me.IsNull(Me.tableLine.StyleColumn)
        End Function
        
        Public Sub SetStyleNull()
            Me(Me.tableLine.StyleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_main As DataColumn
        
        Private columncod_table_public As DataColumn
        
        Private columndesc_table As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_public")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_mainColumn As DataColumn
            Get
                Return Me.columncod_main
            End Get
        End Property
        
        Friend ReadOnly Property cod_table_publicColumn As DataColumn
            Get
                Return Me.columncod_table_public
            End Get
        End Property
        
        Friend ReadOnly Property desc_tableColumn As DataColumn
            Get
                Return Me.columndesc_table
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_publicRow
            Get
                Return CType(Me.Rows(index),inv_tab_publicRow)
            End Get
        End Property
        
        Public Event inv_tab_publicRowChanged As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowChanging As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowDeleted As inv_tab_publicRowChangeEventHandler
        
        Public Event inv_tab_publicRowDeleting As inv_tab_publicRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_publicRow(ByVal row As inv_tab_publicRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_publicRow(ByVal cod_main As String, ByVal cod_table_public As String, ByVal desc_table As String) As inv_tab_publicRow
            Dim rowinv_tab_publicRow As inv_tab_publicRow = CType(Me.NewRow,inv_tab_publicRow)
            rowinv_tab_publicRow.ItemArray = New Object() {cod_main, cod_table_public, desc_table}
            Me.Rows.Add(rowinv_tab_publicRow)
            Return rowinv_tab_publicRow
        End Function
        
        Public Function FindBycod_maincod_table_public(ByVal cod_main As String, ByVal cod_table_public As String) As inv_tab_publicRow
            Return CType(Me.Rows.Find(New Object() {cod_main, cod_table_public}),inv_tab_publicRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_publicDataTable = CType(MyBase.Clone,inv_tab_publicDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_publicDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_main = Me.Columns("cod_main")
            Me.columncod_table_public = Me.Columns("cod_table_public")
            Me.columndesc_table = Me.Columns("desc_table")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_main = New DataColumn("cod_main", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_main)
            Me.columncod_table_public = New DataColumn("cod_table_public", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_table_public)
            Me.columndesc_table = New DataColumn("desc_table", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_table)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_main, Me.columncod_table_public}, true))
            Me.columncod_main.AllowDBNull = false
            Me.columncod_table_public.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_publicRow() As inv_tab_publicRow
            Return CType(Me.NewRow,inv_tab_publicRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_publicRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_publicRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_publicRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowChanged(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_publicRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowChanging(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_publicRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowDeleted(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_publicRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_publicRowDeleting(Me, New inv_tab_publicRowChangeEvent(CType(e.Row,inv_tab_publicRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_publicRow(ByVal row As inv_tab_publicRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicRow
        Inherits DataRow
        
        Private tableinv_tab_public As inv_tab_publicDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_public = CType(Me.Table,inv_tab_publicDataTable)
        End Sub
        
        Public Property cod_main As String
            Get
                Return CType(Me(Me.tableinv_tab_public.cod_mainColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_public.cod_mainColumn) = value
            End Set
        End Property
        
        Public Property cod_table_public As String
            Get
                Return CType(Me(Me.tableinv_tab_public.cod_table_publicColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_public.cod_table_publicColumn) = value
            End Set
        End Property
        
        Public Property desc_table As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_public.desc_tableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_public.desc_tableColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_tableNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_public.desc_tableColumn)
        End Function
        
        Public Sub Setdesc_tableNull()
            Me(Me.tableinv_tab_public.desc_tableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_publicRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_publicRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_publicRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_publicRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsListingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Item_No_ As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnItem_Type As DataColumn
        
        Private columnSIZE As DataColumn
        
        Private columnBRAND As DataColumn
        
        Private columnLINE As DataColumn
        
        Private columnSTYLE As DataColumn
        
        Private columnVendor As DataColumn
        
        Private column_Quick_Ref_ As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private column_Store_No_ As DataColumn
        
        Private columnQty As DataColumn
        
        Private column_Rep__Cost As DataColumn
        
        Private columnFET As DataColumn
        
        Private columnList_Price As DataColumn
        
        Private columnPrice_Code As DataColumn
        
        Private columnCreated As DataColumn
        
        Friend Sub New()
            MyBase.New("ItemsListing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _Item_No_Column As DataColumn
            Get
                Return Me.column_Item_No_
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property Item_TypeColumn As DataColumn
            Get
                Return Me.columnItem_Type
            End Get
        End Property
        
        Friend ReadOnly Property SIZEColumn As DataColumn
            Get
                Return Me.columnSIZE
            End Get
        End Property
        
        Friend ReadOnly Property BRANDColumn As DataColumn
            Get
                Return Me.columnBRAND
            End Get
        End Property
        
        Friend ReadOnly Property LINEColumn As DataColumn
            Get
                Return Me.columnLINE
            End Get
        End Property
        
        Friend ReadOnly Property STYLEColumn As DataColumn
            Get
                Return Me.columnSTYLE
            End Get
        End Property
        
        Friend ReadOnly Property VendorColumn As DataColumn
            Get
                Return Me.columnVendor
            End Get
        End Property
        
        Friend ReadOnly Property _Quick_Ref_Column As DataColumn
            Get
                Return Me.column_Quick_Ref_
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property _Store_No_Column As DataColumn
            Get
                Return Me.column_Store_No_
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property _Rep__CostColumn As DataColumn
            Get
                Return Me.column_Rep__Cost
            End Get
        End Property
        
        Friend ReadOnly Property FETColumn As DataColumn
            Get
                Return Me.columnFET
            End Get
        End Property
        
        Friend ReadOnly Property List_PriceColumn As DataColumn
            Get
                Return Me.columnList_Price
            End Get
        End Property
        
        Friend ReadOnly Property Price_CodeColumn As DataColumn
            Get
                Return Me.columnPrice_Code
            End Get
        End Property
        
        Friend ReadOnly Property CreatedColumn As DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemsListingRow
            Get
                Return CType(Me.Rows(index),ItemsListingRow)
            End Get
        End Property
        
        Public Event ItemsListingRowChanged As ItemsListingRowChangeEventHandler
        
        Public Event ItemsListingRowChanging As ItemsListingRowChangeEventHandler
        
        Public Event ItemsListingRowDeleted As ItemsListingRowChangeEventHandler
        
        Public Event ItemsListingRowDeleting As ItemsListingRowChangeEventHandler
        
        Public Overloads Sub AddItemsListingRow(ByVal row As ItemsListingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddItemsListingRow( _
                    ByVal _Item_No_ As String,  _
                    ByVal Description As String,  _
                    ByVal Item_Type As String,  _
                    ByVal SIZE As String,  _
                    ByVal BRAND As String,  _
                    ByVal LINE As String,  _
                    ByVal STYLE As String,  _
                    ByVal Vendor As String,  _
                    ByVal _Quick_Ref_ As String,  _
                    ByVal Taxable As String,  _
                    ByVal _Store_No_ As String,  _
                    ByVal Qty As Double,  _
                    ByVal _Rep__Cost As String,  _
                    ByVal FET As String,  _
                    ByVal List_Price As Decimal,  _
                    ByVal Price_Code As String,  _
                    ByVal Created As Date) As ItemsListingRow
            Dim rowItemsListingRow As ItemsListingRow = CType(Me.NewRow,ItemsListingRow)
            rowItemsListingRow.ItemArray = New Object() {_Item_No_, Description, Item_Type, SIZE, BRAND, LINE, STYLE, Vendor, _Quick_Ref_, Taxable, _Store_No_, Qty, _Rep__Cost, FET, List_Price, Price_Code, Created}
            Me.Rows.Add(rowItemsListingRow)
            Return rowItemsListingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ItemsListingDataTable = CType(MyBase.Clone,ItemsListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ItemsListingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_Item_No_ = Me.Columns("Item No#")
            Me.columnDescription = Me.Columns("Description")
            Me.columnItem_Type = Me.Columns("Item Type")
            Me.columnSIZE = Me.Columns("SIZE")
            Me.columnBRAND = Me.Columns("BRAND")
            Me.columnLINE = Me.Columns("LINE")
            Me.columnSTYLE = Me.Columns("STYLE")
            Me.columnVendor = Me.Columns("Vendor")
            Me.column_Quick_Ref_ = Me.Columns("Quick Ref#")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.column_Store_No_ = Me.Columns("Store No#")
            Me.columnQty = Me.Columns("Qty")
            Me.column_Rep__Cost = Me.Columns("Rep# Cost")
            Me.columnFET = Me.Columns("FET")
            Me.columnList_Price = Me.Columns("List Price")
            Me.columnPrice_Code = Me.Columns("Price Code")
            Me.columnCreated = Me.Columns("Created")
        End Sub
        
        Private Sub InitClass()
            Me.column_Item_No_ = New DataColumn("Item No#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item_No_)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnItem_Type = New DataColumn("Item Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_Type)
            Me.columnSIZE = New DataColumn("SIZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSIZE)
            Me.columnBRAND = New DataColumn("BRAND", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRAND)
            Me.columnLINE = New DataColumn("LINE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLINE)
            Me.columnSTYLE = New DataColumn("STYLE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTYLE)
            Me.columnVendor = New DataColumn("Vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVendor)
            Me.column_Quick_Ref_ = New DataColumn("Quick Ref#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Quick_Ref_)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.column_Store_No_ = New DataColumn("Store No#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Store_No_)
            Me.columnQty = New DataColumn("Qty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.column_Rep__Cost = New DataColumn("Rep# Cost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Rep__Cost)
            Me.columnFET = New DataColumn("FET", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFET)
            Me.columnList_Price = New DataColumn("List Price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Price)
            Me.columnPrice_Code = New DataColumn("Price Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Code)
            Me.columnCreated = New DataColumn("Created", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreated)
        End Sub
        
        Public Function NewItemsListingRow() As ItemsListingRow
            Return CType(Me.NewRow,ItemsListingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ItemsListingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ItemsListingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemsListingRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemsListingRowChanged(Me, New ItemsListingRowChangeEvent(CType(e.Row,ItemsListingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemsListingRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemsListingRowChanging(Me, New ItemsListingRowChangeEvent(CType(e.Row,ItemsListingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemsListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemsListingRowDeleted(Me, New ItemsListingRowChangeEvent(CType(e.Row,ItemsListingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemsListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemsListingRowDeleting(Me, New ItemsListingRowChangeEvent(CType(e.Row,ItemsListingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveItemsListingRow(ByVal row As ItemsListingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsListingRow
        Inherits DataRow
        
        Private tableItemsListing As ItemsListingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemsListing = CType(Me.Table,ItemsListingDataTable)
        End Sub
        
        Public Property _Item_No_ As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing._Item_No_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing._Item_No_Column) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Item_Type As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.Item_TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.Item_TypeColumn) = value
            End Set
        End Property
        
        Public Property SIZE As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.SIZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.SIZEColumn) = value
            End Set
        End Property
        
        Public Property BRAND As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.BRANDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.BRANDColumn) = value
            End Set
        End Property
        
        Public Property LINE As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.LINEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.LINEColumn) = value
            End Set
        End Property
        
        Public Property STYLE As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.STYLEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.STYLEColumn) = value
            End Set
        End Property
        
        Public Property Vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.VendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.VendorColumn) = value
            End Set
        End Property
        
        Public Property _Quick_Ref_ As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing._Quick_Ref_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing._Quick_Ref_Column) = value
            End Set
        End Property
        
        Public Property Taxable As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.TaxableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.TaxableColumn) = value
            End Set
        End Property
        
        Public Property _Store_No_ As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing._Store_No_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing._Store_No_Column) = value
            End Set
        End Property
        
        Public Property Qty As Double
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.QtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.QtyColumn) = value
            End Set
        End Property
        
        Public Property _Rep__Cost As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing._Rep__CostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing._Rep__CostColumn) = value
            End Set
        End Property
        
        Public Property FET As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.FETColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.FETColumn) = value
            End Set
        End Property
        
        Public Property List_Price As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.List_PriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.List_PriceColumn) = value
            End Set
        End Property
        
        Public Property Price_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.Price_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.Price_CodeColumn) = value
            End Set
        End Property
        
        Public Property Created As Date
            Get
                Try 
                    Return CType(Me(Me.tableItemsListing.CreatedColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsListing.CreatedColumn) = value
            End Set
        End Property
        
        Public Function Is_Item_No_Null() As Boolean
            Return Me.IsNull(Me.tableItemsListing._Item_No_Column)
        End Function
        
        Public Sub Set_Item_No_Null()
            Me(Me.tableItemsListing._Item_No_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableItemsListing.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_TypeNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.Item_TypeColumn)
        End Function
        
        Public Sub SetItem_TypeNull()
            Me(Me.tableItemsListing.Item_TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSIZENull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.SIZEColumn)
        End Function
        
        Public Sub SetSIZENull()
            Me(Me.tableItemsListing.SIZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBRANDNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.BRANDColumn)
        End Function
        
        Public Sub SetBRANDNull()
            Me(Me.tableItemsListing.BRANDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLINENull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.LINEColumn)
        End Function
        
        Public Sub SetLINENull()
            Me(Me.tableItemsListing.LINEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTYLENull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.STYLEColumn)
        End Function
        
        Public Sub SetSTYLENull()
            Me(Me.tableItemsListing.STYLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVendorNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.VendorColumn)
        End Function
        
        Public Sub SetVendorNull()
            Me(Me.tableItemsListing.VendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Quick_Ref_Null() As Boolean
            Return Me.IsNull(Me.tableItemsListing._Quick_Ref_Column)
        End Function
        
        Public Sub Set_Quick_Ref_Null()
            Me(Me.tableItemsListing._Quick_Ref_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tableItemsListing.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Store_No_Null() As Boolean
            Return Me.IsNull(Me.tableItemsListing._Store_No_Column)
        End Function
        
        Public Sub Set_Store_No_Null()
            Me(Me.tableItemsListing._Store_No_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableItemsListing.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Rep__CostNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing._Rep__CostColumn)
        End Function
        
        Public Sub Set_Rep__CostNull()
            Me(Me.tableItemsListing._Rep__CostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFETNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.FETColumn)
        End Function
        
        Public Sub SetFETNull()
            Me(Me.tableItemsListing.FETColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_PriceNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.List_PriceColumn)
        End Function
        
        Public Sub SetList_PriceNull()
            Me(Me.tableItemsListing.List_PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_CodeNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.Price_CodeColumn)
        End Function
        
        Public Sub SetPrice_CodeNull()
            Me(Me.tableItemsListing.Price_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedNull() As Boolean
            Return Me.IsNull(Me.tableItemsListing.CreatedColumn)
        End Function
        
        Public Sub SetCreatedNull()
            Me(Me.tableItemsListing.CreatedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ItemsListingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ItemsListingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ItemsListingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ItemsListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_vendor As DataColumn
        
        Private columndesc_vendor As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzipcode As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnvendor_since As DataColumn
        
        Private columnvendor_type As DataColumn
        
        Private columnclass_vendor As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendorColumn As DataColumn
            Get
                Return Me.columndesc_vendor
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property vendor_sinceColumn As DataColumn
            Get
                Return Me.columnvendor_since
            End Get
        End Property
        
        Friend ReadOnly Property vendor_typeColumn As DataColumn
            Get
                Return Me.columnvendor_type
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_vendorRow
            Get
                Return CType(Me.Rows(index),inv_vendorRow)
            End Get
        End Property
        
        Public Event inv_vendorRowChanged As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowChanging As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleted As inv_vendorRowChangeEventHandler
        
        Public Event inv_vendorRowDeleting As inv_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_vendorRow(ByVal cod_vendor As String, ByVal desc_vendor As String, ByVal address As String, ByVal zipcode As String, ByVal phone_1 As String, ByVal extension_1 As String, ByVal phone_type_1 As String, ByVal phone_main_1 As Boolean, ByVal vendor_since As String, ByVal vendor_type As String, ByVal class_vendor As String) As inv_vendorRow
            Dim rowinv_vendorRow As inv_vendorRow = CType(Me.NewRow,inv_vendorRow)
            rowinv_vendorRow.ItemArray = New Object() {cod_vendor, desc_vendor, address, zipcode, phone_1, extension_1, phone_type_1, phone_main_1, vendor_since, vendor_type, class_vendor}
            Me.Rows.Add(rowinv_vendorRow)
            Return rowinv_vendorRow
        End Function
        
        Public Function FindBycod_vendor(ByVal cod_vendor As String) As inv_vendorRow
            Return CType(Me.Rows.Find(New Object() {cod_vendor}),inv_vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_vendorDataTable = CType(MyBase.Clone,inv_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columndesc_vendor = Me.Columns("desc_vendor")
            Me.columnaddress = Me.Columns("address")
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnvendor_since = Me.Columns("vendor_since")
            Me.columnvendor_type = Me.Columns("vendor_type")
            Me.columnclass_vendor = Me.Columns("class_vendor")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columndesc_vendor = New DataColumn("desc_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnvendor_since = New DataColumn("vendor_since", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_since)
            Me.columnvendor_type = New DataColumn("vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_type)
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_vendor}, true))
            Me.columncod_vendor.AllowDBNull = false
            Me.columncod_vendor.Unique = true
        End Sub
        
        Public Function Newinv_vendorRow() As inv_vendorRow
            Return CType(Me.NewRow,inv_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanged(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowChanging(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleted(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_vendorRowDeleting(Me, New inv_vendorRowChangeEvent(CType(e.Row,inv_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_vendorRow(ByVal row As inv_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRow
        Inherits DataRow
        
        Private tableinv_vendor As inv_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_vendor = CType(Me.Table,inv_vendorDataTable)
        End Sub
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.desc_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.desc_vendorColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.addressColumn) = value
            End Set
        End Property
        
        Public Property zipcode As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.zipcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property vendor_since As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.vendor_sinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.vendor_sinceColumn) = value
            End Set
        End Property
        
        Public Property vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property class_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_vendor.class_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_vendor.class_vendorColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.desc_vendorColumn)
        End Function
        
        Public Sub Setdesc_vendorNull()
            Me(Me.tableinv_vendor.desc_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableinv_vendor.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipcodeNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.zipcodeColumn)
        End Function
        
        Public Sub SetzipcodeNull()
            Me(Me.tableinv_vendor.zipcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableinv_vendor.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tableinv_vendor.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tableinv_vendor.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tableinv_vendor.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_sinceNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.vendor_sinceColumn)
        End Function
        
        Public Sub Setvendor_sinceNull()
            Me(Me.tableinv_vendor.vendor_sinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.vendor_typeColumn)
        End Function
        
        Public Sub Setvendor_typeNull()
            Me(Me.tableinv_vendor.vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isclass_vendorNull() As Boolean
            Return Me.IsNull(Me.tableinv_vendor.class_vendorColumn)
        End Function
        
        Public Sub Setclass_vendorNull()
            Me(Me.tableinv_vendor.class_vendorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnclass_vendor As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vendor_class")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property class_vendorColumn As DataColumn
            Get
                Return Me.columnclass_vendor
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vendor_classRow
            Get
                Return CType(Me.Rows(index),inv_tab_vendor_classRow)
            End Get
        End Property
        
        Public Event inv_tab_vendor_classRowChanged As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowChanging As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowDeleted As inv_tab_vendor_classRowChangeEventHandler
        
        Public Event inv_tab_vendor_classRowDeleting As inv_tab_vendor_classRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vendor_classRow(ByVal row As inv_tab_vendor_classRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vendor_classRow(ByVal class_vendor As String, ByVal desc_class As String) As inv_tab_vendor_classRow
            Dim rowinv_tab_vendor_classRow As inv_tab_vendor_classRow = CType(Me.NewRow,inv_tab_vendor_classRow)
            rowinv_tab_vendor_classRow.ItemArray = New Object() {class_vendor, desc_class}
            Me.Rows.Add(rowinv_tab_vendor_classRow)
            Return rowinv_tab_vendor_classRow
        End Function
        
        Public Function FindByclass_vendor(ByVal class_vendor As String) As inv_tab_vendor_classRow
            Return CType(Me.Rows.Find(New Object() {class_vendor}),inv_tab_vendor_classRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vendor_classDataTable = CType(MyBase.Clone,inv_tab_vendor_classDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vendor_classDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnclass_vendor = Me.Columns("class_vendor")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columnclass_vendor = New DataColumn("class_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_vendor)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnclass_vendor}, true))
            Me.columnclass_vendor.AllowDBNull = false
            Me.columnclass_vendor.Unique = true
        End Sub
        
        Public Function Newinv_tab_vendor_classRow() As inv_tab_vendor_classRow
            Return CType(Me.NewRow,inv_tab_vendor_classRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vendor_classRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vendor_classRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vendor_classRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowChanged(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vendor_classRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowChanging(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vendor_classRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowDeleted(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vendor_classRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_classRowDeleting(Me, New inv_tab_vendor_classRowChangeEvent(CType(e.Row,inv_tab_vendor_classRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vendor_classRow(ByVal row As inv_tab_vendor_classRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classRow
        Inherits DataRow
        
        Private tableinv_tab_vendor_class As inv_tab_vendor_classDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vendor_class = CType(Me.Table,inv_tab_vendor_classDataTable)
        End Sub
        
        Public Property class_vendor As String
            Get
                Return CType(Me(Me.tableinv_tab_vendor_class.class_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vendor_class.class_vendorColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_class.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_class.desc_classColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_class.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableinv_tab_vendor_class.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_classRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vendor_classRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vendor_classRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vendor_classRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnvendor_type As DataColumn
        
        Private columndesc_vendor_type As DataColumn
        
        Private columnGL_expense_account As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_vendor_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property vendor_typeColumn As DataColumn
            Get
                Return Me.columnvendor_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_vendor_typeColumn As DataColumn
            Get
                Return Me.columndesc_vendor_type
            End Get
        End Property
        
        Friend ReadOnly Property GL_expense_accountColumn As DataColumn
            Get
                Return Me.columnGL_expense_account
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_vendor_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_vendor_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_vendor_typeRowChanged As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowChanging As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowDeleted As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Event inv_tab_vendor_typeRowDeleting As inv_tab_vendor_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_vendor_typeRow(ByVal row As inv_tab_vendor_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_vendor_typeRow(ByVal vendor_type As String, ByVal desc_vendor_type As String, ByVal GL_expense_account As String) As inv_tab_vendor_typeRow
            Dim rowinv_tab_vendor_typeRow As inv_tab_vendor_typeRow = CType(Me.NewRow,inv_tab_vendor_typeRow)
            rowinv_tab_vendor_typeRow.ItemArray = New Object() {vendor_type, desc_vendor_type, GL_expense_account}
            Me.Rows.Add(rowinv_tab_vendor_typeRow)
            Return rowinv_tab_vendor_typeRow
        End Function
        
        Public Function FindByvendor_type(ByVal vendor_type As String) As inv_tab_vendor_typeRow
            Return CType(Me.Rows.Find(New Object() {vendor_type}),inv_tab_vendor_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_vendor_typeDataTable = CType(MyBase.Clone,inv_tab_vendor_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_vendor_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnvendor_type = Me.Columns("vendor_type")
            Me.columndesc_vendor_type = Me.Columns("desc_vendor_type")
            Me.columnGL_expense_account = Me.Columns("GL_expense_account")
        End Sub
        
        Private Sub InitClass()
            Me.columnvendor_type = New DataColumn("vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_type)
            Me.columndesc_vendor_type = New DataColumn("desc_vendor_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_vendor_type)
            Me.columnGL_expense_account = New DataColumn("GL_expense_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_expense_account)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnvendor_type}, true))
            Me.columnvendor_type.AllowDBNull = false
            Me.columnvendor_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_vendor_typeRow() As inv_tab_vendor_typeRow
            Return CType(Me.NewRow,inv_tab_vendor_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_vendor_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_vendor_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_vendor_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowChanged(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_vendor_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowChanging(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_vendor_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowDeleted(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_vendor_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_vendor_typeRowDeleting(Me, New inv_tab_vendor_typeRowChangeEvent(CType(e.Row,inv_tab_vendor_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_vendor_typeRow(ByVal row As inv_tab_vendor_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeRow
        Inherits DataRow
        
        Private tableinv_tab_vendor_type As inv_tab_vendor_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_vendor_type = CType(Me.Table,inv_tab_vendor_typeDataTable)
        End Sub
        
        Public Property vendor_type As String
            Get
                Return CType(Me(Me.tableinv_tab_vendor_type.vendor_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_vendor_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn) = value
            End Set
        End Property
        
        Public Property GL_expense_account As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_vendor_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn)
        End Function
        
        Public Sub Setdesc_vendor_typeNull()
            Me(Me.tableinv_tab_vendor_type.desc_vendor_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_expense_accountNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_vendor_type.GL_expense_accountColumn)
        End Function
        
        Public Sub SetGL_expense_accountNull()
            Me(Me.tableinv_tab_vendor_type.GL_expense_accountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_vendor_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_vendor_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_vendor_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_vendor_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnVendor As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZip_Code As DataColumn
        
        Private columnTelephone As DataColumn
        
        Private columnVendor_Since As DataColumn
        
        Private columnType As DataColumn
        
        Private column_Class As DataColumn
        
        Friend Sub New()
            MyBase.New("Vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property VendorColumn As DataColumn
            Get
                Return Me.columnVendor
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property Zip_CodeColumn As DataColumn
            Get
                Return Me.columnZip_Code
            End Get
        End Property
        
        Friend ReadOnly Property TelephoneColumn As DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        Friend ReadOnly Property Vendor_SinceColumn As DataColumn
            Get
                Return Me.columnVendor_Since
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property _ClassColumn As DataColumn
            Get
                Return Me.column_Class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VendorRow
            Get
                Return CType(Me.Rows(index),VendorRow)
            End Get
        End Property
        
        Public Event VendorRowChanged As VendorRowChangeEventHandler
        
        Public Event VendorRowChanging As VendorRowChangeEventHandler
        
        Public Event VendorRowDeleted As VendorRowChangeEventHandler
        
        Public Event VendorRowDeleting As VendorRowChangeEventHandler
        
        Public Overloads Sub AddVendorRow(ByVal row As VendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVendorRow(ByVal Vendor As Double, ByVal Company As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip_Code As Double, ByVal Telephone As String, ByVal Vendor_Since As Date, ByVal Type As String, ByVal _Class As String) As VendorRow
            Dim rowVendorRow As VendorRow = CType(Me.NewRow,VendorRow)
            rowVendorRow.ItemArray = New Object() {Vendor, Company, Address, City, State, Zip_Code, Telephone, Vendor_Since, Type, _Class}
            Me.Rows.Add(rowVendorRow)
            Return rowVendorRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VendorDataTable = CType(MyBase.Clone,VendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnVendor = Me.Columns("Vendor")
            Me.columnCompany = Me.Columns("Company")
            Me.columnAddress = Me.Columns("Address")
            Me.columnCity = Me.Columns("City")
            Me.columnState = Me.Columns("State")
            Me.columnZip_Code = Me.Columns("Zip Code")
            Me.columnTelephone = Me.Columns("Telephone")
            Me.columnVendor_Since = Me.Columns("Vendor Since")
            Me.columnType = Me.Columns("Type")
            Me.column_Class = Me.Columns("Class")
        End Sub
        
        Private Sub InitClass()
            Me.columnVendor = New DataColumn("Vendor", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVendor)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZip_Code = New DataColumn("Zip Code", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZip_Code)
            Me.columnTelephone = New DataColumn("Telephone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelephone)
            Me.columnVendor_Since = New DataColumn("Vendor Since", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVendor_Since)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.column_Class = New DataColumn("Class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Class)
        End Sub
        
        Public Function NewVendorRow() As VendorRow
            Return CType(Me.NewRow,VendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VendorRowChangedEvent) Is Nothing) Then
                RaiseEvent VendorRowChanged(Me, New VendorRowChangeEvent(CType(e.Row,VendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VendorRowChangingEvent) Is Nothing) Then
                RaiseEvent VendorRowChanging(Me, New VendorRowChangeEvent(CType(e.Row,VendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent VendorRowDeleted(Me, New VendorRowChangeEvent(CType(e.Row,VendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent VendorRowDeleting(Me, New VendorRowChangeEvent(CType(e.Row,VendorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVendorRow(ByVal row As VendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorRow
        Inherits DataRow
        
        Private tableVendor As VendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendor = CType(Me.Table,VendorDataTable)
        End Sub
        
        Public Property Vendor As Double
            Get
                Try 
                    Return CType(Me(Me.tableVendor.VendorColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.VendorColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.CompanyColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.CityColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.StateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.StateColumn) = value
            End Set
        End Property
        
        Public Property Zip_Code As Double
            Get
                Try 
                    Return CType(Me(Me.tableVendor.Zip_CodeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.Zip_CodeColumn) = value
            End Set
        End Property
        
        Public Property Telephone As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.TelephoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.TelephoneColumn) = value
            End Set
        End Property
        
        Public Property Vendor_Since As Date
            Get
                Try 
                    Return CType(Me(Me.tableVendor.Vendor_SinceColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.Vendor_SinceColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor.TypeColumn) = value
            End Set
        End Property
        
        Public Property _Class As String
            Get
                Try 
                    Return CType(Me(Me.tableVendor._ClassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendor._ClassColumn) = value
            End Set
        End Property
        
        Public Function IsVendorNull() As Boolean
            Return Me.IsNull(Me.tableVendor.VendorColumn)
        End Function
        
        Public Sub SetVendorNull()
            Me(Me.tableVendor.VendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableVendor.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableVendor.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableVendor.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableVendor.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableVendor.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableVendor.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableVendor.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tableVendor.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZip_CodeNull() As Boolean
            Return Me.IsNull(Me.tableVendor.Zip_CodeColumn)
        End Function
        
        Public Sub SetZip_CodeNull()
            Me(Me.tableVendor.Zip_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableVendor.TelephoneColumn)
        End Function
        
        Public Sub SetTelephoneNull()
            Me(Me.tableVendor.TelephoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVendor_SinceNull() As Boolean
            Return Me.IsNull(Me.tableVendor.Vendor_SinceColumn)
        End Function
        
        Public Sub SetVendor_SinceNull()
            Me(Me.tableVendor.Vendor_SinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableVendor.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableVendor.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_ClassNull() As Boolean
            Return Me.IsNull(Me.tableVendor._ClassColumn)
        End Function
        
        Public Sub Set_ClassNull()
            Me(Me.tableVendor._ClassColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnzipcode As DataColumn
        
        Private columncity As DataColumn
        
        Private columncounty As DataColumn
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_zipcode")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property countyColumn As DataColumn
            Get
                Return Me.columncounty
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_zipcodeRow
            Get
                Return CType(Me.Rows(index),bas_zipcodeRow)
            End Get
        End Property
        
        Public Event bas_zipcodeRowChanged As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowChanging As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleted As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleting As bas_zipcodeRowChangeEventHandler
        
        Public Overloads Sub Addbas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_zipcodeRow(ByVal zipcode As String, ByVal city As String, ByVal county As String, ByVal state As String) As bas_zipcodeRow
            Dim rowbas_zipcodeRow As bas_zipcodeRow = CType(Me.NewRow,bas_zipcodeRow)
            rowbas_zipcodeRow.ItemArray = New Object() {zipcode, city, county, state}
            Me.Rows.Add(rowbas_zipcodeRow)
            Return rowbas_zipcodeRow
        End Function
        
        Public Function FindByzipcode(ByVal zipcode As String) As bas_zipcodeRow
            Return CType(Me.Rows.Find(New Object() {zipcode}),bas_zipcodeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_zipcodeDataTable = CType(MyBase.Clone,bas_zipcodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_zipcodeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columncity = Me.Columns("city")
            Me.columncounty = Me.Columns("county")
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columncounty = New DataColumn("county", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncounty)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnzipcode}, true))
            Me.columnzipcode.AllowDBNull = false
            Me.columnzipcode.Unique = true
        End Sub
        
        Public Function Newbas_zipcodeRow() As bas_zipcodeRow
            Return CType(Me.NewRow,bas_zipcodeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_zipcodeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_zipcodeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_zipcodeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanged(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_zipcodeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanging(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_zipcodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleted(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_zipcodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleting(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRow
        Inherits DataRow
        
        Private tablebas_zipcode As bas_zipcodeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_zipcode = CType(Me.Table,bas_zipcodeDataTable)
        End Sub
        
        Public Property zipcode As String
            Get
                Return CType(Me(Me.tablebas_zipcode.zipcodeColumn),String)
            End Get
            Set
                Me(Me.tablebas_zipcode.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.cityColumn) = value
            End Set
        End Property
        
        Public Property county As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.countyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.countyColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.stateColumn) = value
            End Set
        End Property
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tablebas_zipcode.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscountyNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.countyColumn)
        End Function
        
        Public Sub SetcountyNull()
            Me(Me.tablebas_zipcode.countyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tablebas_zipcode.stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_zipcodeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_zipcodeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_zipcodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_quick_refrence As DataColumn
        
        Private columndesc_quick_refrence As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_quick_refrence")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property desc_quick_refrenceColumn As DataColumn
            Get
                Return Me.columndesc_quick_refrence
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_quick_refrenceRow
            Get
                Return CType(Me.Rows(index),inv_item_quick_refrenceRow)
            End Get
        End Property
        
        Public Event inv_item_quick_refrenceRowChanged As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowChanging As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleted As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Event inv_item_quick_refrenceRowDeleting As inv_item_quick_refrenceRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_quick_refrenceRow(ByVal cod_quick_refrence As String, ByVal desc_quick_refrence As String) As inv_item_quick_refrenceRow
            Dim rowinv_item_quick_refrenceRow As inv_item_quick_refrenceRow = CType(Me.NewRow,inv_item_quick_refrenceRow)
            rowinv_item_quick_refrenceRow.ItemArray = New Object() {cod_quick_refrence, desc_quick_refrence}
            Me.Rows.Add(rowinv_item_quick_refrenceRow)
            Return rowinv_item_quick_refrenceRow
        End Function
        
        Public Function FindBycod_quick_refrence(ByVal cod_quick_refrence As String) As inv_item_quick_refrenceRow
            Return CType(Me.Rows.Find(New Object() {cod_quick_refrence}),inv_item_quick_refrenceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_quick_refrenceDataTable = CType(MyBase.Clone,inv_item_quick_refrenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_quick_refrenceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columndesc_quick_refrence = Me.Columns("desc_quick_refrence")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columndesc_quick_refrence = New DataColumn("desc_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_quick_refrence)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_quick_refrence}, true))
            Me.columncod_quick_refrence.AllowDBNull = false
            Me.columncod_quick_refrence.Unique = true
        End Sub
        
        Public Function Newinv_item_quick_refrenceRow() As inv_item_quick_refrenceRow
            Return CType(Me.NewRow,inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_quick_refrenceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_quick_refrenceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_quick_refrenceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanged(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_quick_refrenceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowChanging(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleted(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_quick_refrenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_quick_refrenceRowDeleting(Me, New inv_item_quick_refrenceRowChangeEvent(CType(e.Row,inv_item_quick_refrenceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_quick_refrenceRow(ByVal row As inv_item_quick_refrenceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRow
        Inherits DataRow
        
        Private tableinv_item_quick_refrence As inv_item_quick_refrenceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_quick_refrence = CType(Me.Table,inv_item_quick_refrenceDataTable)
        End Sub
        
        Public Property cod_quick_refrence As String
            Get
                Return CType(Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property desc_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn)
        End Function
        
        Public Sub Setdesc_quick_refrenceNull()
            Me(Me.tableinv_item_quick_refrence.desc_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_quick_refrenceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_quick_refrenceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_quick_refrenceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_quick_refrenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columncod_quick_refrence As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnline As DataColumn
        
        Private columnnote As DataColumn
        
        Private columnpicture As DataColumn
        
        Private columnupc As DataColumn
        
        Private columnconsignment As DataColumn
        
        Private columndiscontinued As DataColumn
        
        Private columndiscontinued_date As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property cod_quick_refrenceColumn As DataColumn
            Get
                Return Me.columncod_quick_refrence
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property noteColumn As DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        Friend ReadOnly Property pictureColumn As DataColumn
            Get
                Return Me.columnpicture
            End Get
        End Property
        
        Friend ReadOnly Property upcColumn As DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        Friend ReadOnly Property consignmentColumn As DataColumn
            Get
                Return Me.columnconsignment
            End Get
        End Property
        
        Friend ReadOnly Property discontinuedColumn As DataColumn
            Get
                Return Me.columndiscontinued
            End Get
        End Property
        
        Friend ReadOnly Property discontinued_dateColumn As DataColumn
            Get
                Return Me.columndiscontinued_date
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemRow
            Get
                Return CType(Me.Rows(index),inv_itemRow)
            End Get
        End Property
        
        Public Event inv_itemRowChanged As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowChanging As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleted As inv_itemRowChangeEventHandler
        
        Public Event inv_itemRowDeleting As inv_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemRow(ByVal item_no As String, ByVal cod_item_type As String, ByVal desc_item As String, ByVal cod_quick_refrence As String, ByVal taxable As Boolean, ByVal line As String, ByVal note As String, ByVal picture() As Byte, ByVal upc As String, ByVal consignment As Boolean, ByVal discontinued As Boolean, ByVal discontinued_date As String, ByVal special_notice As String) As inv_itemRow
            Dim rowinv_itemRow As inv_itemRow = CType(Me.NewRow,inv_itemRow)
            rowinv_itemRow.ItemArray = New Object() {item_no, cod_item_type, desc_item, cod_quick_refrence, taxable, line, note, picture, upc, consignment, discontinued, discontinued_date, special_notice}
            Me.Rows.Add(rowinv_itemRow)
            Return rowinv_itemRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As inv_itemRow
            Return CType(Me.Rows.Find(New Object() {item_no}),inv_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemDataTable = CType(MyBase.Clone,inv_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columncod_quick_refrence = Me.Columns("cod_quick_refrence")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnline = Me.Columns("line")
            Me.columnnote = Me.Columns("note")
            Me.columnpicture = Me.Columns("picture")
            Me.columnupc = Me.Columns("upc")
            Me.columnconsignment = Me.Columns("consignment")
            Me.columndiscontinued = Me.Columns("discontinued")
            Me.columndiscontinued_date = Me.Columns("discontinued_date")
            Me.columnspecial_notice = Me.Columns("special_notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columncod_quick_refrence = New DataColumn("cod_quick_refrence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_quick_refrence)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columnnote = New DataColumn("note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnote)
            Me.columnpicture = New DataColumn("picture", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpicture)
            Me.columnupc = New DataColumn("upc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupc)
            Me.columnconsignment = New DataColumn("consignment", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconsignment)
            Me.columndiscontinued = New DataColumn("discontinued", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscontinued)
            Me.columndiscontinued_date = New DataColumn("discontinued_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscontinued_date)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
        End Sub
        
        Public Function Newinv_itemRow() As inv_itemRow
            Return CType(Me.NewRow,inv_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanged(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowChanging(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleted(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemRowDeleting(Me, New inv_itemRowChangeEvent(CType(e.Row,inv_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemRow(ByVal row As inv_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRow
        Inherits DataRow
        
        Private tableinv_item As inv_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item = CType(Me.Table,inv_itemDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property cod_quick_refrence As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.cod_quick_refrenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.cod_quick_refrenceColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.taxableColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.lineColumn) = value
            End Set
        End Property
        
        Public Property note As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.noteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.noteColumn) = value
            End Set
        End Property
        
        Public Property picture As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.pictureColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.pictureColumn) = value
            End Set
        End Property
        
        Public Property upc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.upcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.upcColumn) = value
            End Set
        End Property
        
        Public Property consignment As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.consignmentColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.consignmentColumn) = value
            End Set
        End Property
        
        Public Property discontinued As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.discontinuedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.discontinuedColumn) = value
            End Set
        End Property
        
        Public Property discontinued_date As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.discontinued_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.discontinued_dateColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item.special_noticeColumn) = value
            End Set
        End Property
        
        Public Function Iscod_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_item_typeColumn)
        End Function
        
        Public Sub Setcod_item_typeNull()
            Me(Me.tableinv_item.cod_item_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_item.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_quick_refrenceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.cod_quick_refrenceColumn)
        End Function
        
        Public Sub Setcod_quick_refrenceNull()
            Me(Me.tableinv_item.cod_quick_refrenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_item.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableinv_item.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.noteColumn)
        End Function
        
        Public Sub SetnoteNull()
            Me(Me.tableinv_item.noteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspictureNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.pictureColumn)
        End Function
        
        Public Sub SetpictureNull()
            Me(Me.tableinv_item.pictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.upcColumn)
        End Function
        
        Public Sub SetupcNull()
            Me(Me.tableinv_item.upcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconsignmentNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.consignmentColumn)
        End Function
        
        Public Sub SetconsignmentNull()
            Me(Me.tableinv_item.consignmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscontinuedNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.discontinuedColumn)
        End Function
        
        Public Sub SetdiscontinuedNull()
            Me(Me.tableinv_item.discontinuedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdiscontinued_dateNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.discontinued_dateColumn)
        End Function
        
        Public Sub Setdiscontinued_dateNull()
            Me(Me.tableinv_item.discontinued_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_item.special_noticeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_item_type As DataColumn
        
        Private columndesc_item_type As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_type_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_item_typeColumn As DataColumn
            Get
                Return Me.columncod_item_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_item_typeColumn As DataColumn
            Get
                Return Me.columndesc_item_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_type_itemRow
            Get
                Return CType(Me.Rows(index),inv_tab_type_itemRow)
            End Get
        End Property
        
        Public Event inv_tab_type_itemRowChanged As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowChanging As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleted As inv_tab_type_itemRowChangeEventHandler
        
        Public Event inv_tab_type_itemRowDeleting As inv_tab_type_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_type_itemRow(ByVal cod_item_type As String, ByVal desc_item_type As String) As inv_tab_type_itemRow
            Dim rowinv_tab_type_itemRow As inv_tab_type_itemRow = CType(Me.NewRow,inv_tab_type_itemRow)
            rowinv_tab_type_itemRow.ItemArray = New Object() {cod_item_type, desc_item_type}
            Me.Rows.Add(rowinv_tab_type_itemRow)
            Return rowinv_tab_type_itemRow
        End Function
        
        Public Function FindBycod_item_type(ByVal cod_item_type As String) As inv_tab_type_itemRow
            Return CType(Me.Rows.Find(New Object() {cod_item_type}),inv_tab_type_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_type_itemDataTable = CType(MyBase.Clone,inv_tab_type_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_type_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_item_type = Me.Columns("cod_item_type")
            Me.columndesc_item_type = Me.Columns("desc_item_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_item_type = New DataColumn("cod_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_item_type)
            Me.columndesc_item_type = New DataColumn("desc_item_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_item_type}, true))
            Me.columncod_item_type.AllowDBNull = false
            Me.columncod_item_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_type_itemRow() As inv_tab_type_itemRow
            Return CType(Me.NewRow,inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_type_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_type_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_type_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanged(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_type_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowChanging(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_type_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleted(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_type_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_type_itemRowDeleting(Me, New inv_tab_type_itemRowChangeEvent(CType(e.Row,inv_tab_type_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_type_itemRow(ByVal row As inv_tab_type_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRow
        Inherits DataRow
        
        Private tableinv_tab_type_item As inv_tab_type_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_type_item = CType(Me.Table,inv_tab_type_itemDataTable)
        End Sub
        
        Public Property cod_item_type As String
            Get
                Return CType(Me(Me.tableinv_tab_type_item.cod_item_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_type_item.cod_item_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_item_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_type_item.desc_item_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_item_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_type_item.desc_item_typeColumn)
        End Function
        
        Public Sub Setdesc_item_typeNull()
            Me(Me.tableinv_tab_type_item.desc_item_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_type_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_type_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_type_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_type_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_warehouse As DataColumn
        
        Private columnon_hand As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_item_warehouse")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_warehouseColumn As DataColumn
            Get
                Return Me.columncod_warehouse
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_item_warehouseRow
            Get
                Return CType(Me.Rows(index),inv_tab_item_warehouseRow)
            End Get
        End Property
        
        Public Event inv_tab_item_warehouseRowChanged As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowChanging As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowDeleted As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowDeleting As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_item_warehouseRow(ByVal row As inv_tab_item_warehouseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_item_warehouseRow(ByVal item_no As String, ByVal cod_warehouse As String, ByVal on_hand As Single) As inv_tab_item_warehouseRow
            Dim rowinv_tab_item_warehouseRow As inv_tab_item_warehouseRow = CType(Me.NewRow,inv_tab_item_warehouseRow)
            rowinv_tab_item_warehouseRow.ItemArray = New Object() {item_no, cod_warehouse, on_hand}
            Me.Rows.Add(rowinv_tab_item_warehouseRow)
            Return rowinv_tab_item_warehouseRow
        End Function
        
        Public Function FindByitem_nocod_warehouse(ByVal item_no As String, ByVal cod_warehouse As String) As inv_tab_item_warehouseRow
            Return CType(Me.Rows.Find(New Object() {item_no, cod_warehouse}),inv_tab_item_warehouseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_item_warehouseDataTable = CType(MyBase.Clone,inv_tab_item_warehouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_item_warehouseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_warehouse = Me.Columns("cod_warehouse")
            Me.columnon_hand = Me.Columns("on_hand")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_warehouse = New DataColumn("cod_warehouse", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_warehouse)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnitem_no, Me.columncod_warehouse}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columncod_warehouse.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_item_warehouseRow() As inv_tab_item_warehouseRow
            Return CType(Me.NewRow,inv_tab_item_warehouseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_item_warehouseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_item_warehouseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_item_warehouseRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowChanged(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_item_warehouseRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowChanging(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_item_warehouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowDeleted(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_item_warehouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowDeleting(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_item_warehouseRow(ByVal row As inv_tab_item_warehouseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseRow
        Inherits DataRow
        
        Private tableinv_tab_item_warehouse As inv_tab_item_warehouseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_item_warehouse = CType(Me.Table,inv_tab_item_warehouseDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_tab_item_warehouse.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_warehouse As String
            Get
                Return CType(Me(Me.tableinv_tab_item_warehouse.cod_warehouseColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.cod_warehouseColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.on_handColumn) = value
            End Set
        End Property
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableinv_tab_item_warehouse.on_handColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_item_warehouseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_item_warehouseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_item_warehouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnven_part_no As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_vendor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property ven_part_noColumn As DataColumn
            Get
                Return Me.columnven_part_no
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_vendorRow
            Get
                Return CType(Me.Rows(index),inv_item_vendorRow)
            End Get
        End Property
        
        Public Event inv_item_vendorRowChanged As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowChanging As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowDeleted As inv_item_vendorRowChangeEventHandler
        
        Public Event inv_item_vendorRowDeleting As inv_item_vendorRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_vendorRow(ByVal row As inv_item_vendorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_vendorRow(ByVal item_no As String, ByVal cod_vendor As String, ByVal ven_part_no As String, ByVal remark As String) As inv_item_vendorRow
            Dim rowinv_item_vendorRow As inv_item_vendorRow = CType(Me.NewRow,inv_item_vendorRow)
            rowinv_item_vendorRow.ItemArray = New Object() {item_no, cod_vendor, ven_part_no, remark}
            Me.Rows.Add(rowinv_item_vendorRow)
            Return rowinv_item_vendorRow
        End Function
        
        Public Function FindByitem_nocod_vendor(ByVal item_no As String, ByVal cod_vendor As String) As inv_item_vendorRow
            Return CType(Me.Rows.Find(New Object() {item_no, cod_vendor}),inv_item_vendorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_vendorDataTable = CType(MyBase.Clone,inv_item_vendorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_vendorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnven_part_no = Me.Columns("ven_part_no")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnven_part_no = New DataColumn("ven_part_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnven_part_no)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnitem_no, Me.columncod_vendor}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columncod_vendor.AllowDBNull = false
        End Sub
        
        Public Function Newinv_item_vendorRow() As inv_item_vendorRow
            Return CType(Me.NewRow,inv_item_vendorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_vendorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_vendorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_vendorRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowChanged(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_vendorRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowChanging(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_vendorRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowDeleted(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_vendorRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_vendorRowDeleting(Me, New inv_item_vendorRowChangeEvent(CType(e.Row,inv_item_vendorRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_vendorRow(ByVal row As inv_item_vendorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorRow
        Inherits DataRow
        
        Private tableinv_item_vendor As inv_item_vendorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_vendor = CType(Me.Table,inv_item_vendorDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item_vendor.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_vendor.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Return CType(Me(Me.tableinv_item_vendor.cod_vendorColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_vendor.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property ven_part_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_vendor.ven_part_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_vendor.ven_part_noColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_vendor.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_vendor.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isven_part_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_vendor.ven_part_noColumn)
        End Function
        
        Public Sub Setven_part_noNull()
            Me(Me.tableinv_item_vendor.ven_part_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_vendor.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tableinv_item_vendor.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_vendorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_vendorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_vendorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_vendorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndate_cost_change As DataColumn
        
        Private columncost As DataColumn
        
        Private columnlist_price As DataColumn
        
        Private columnfet As DataColumn
        
        Private columndelivery As DataColumn
        
        Private columnfrieght As DataColumn
        
        Private columnprice_code As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_item_cost_transaction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property date_cost_changeColumn As DataColumn
            Get
                Return Me.columndate_cost_change
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property list_priceColumn As DataColumn
            Get
                Return Me.columnlist_price
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property deliveryColumn As DataColumn
            Get
                Return Me.columndelivery
            End Get
        End Property
        
        Friend ReadOnly Property frieghtColumn As DataColumn
            Get
                Return Me.columnfrieght
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_item_cost_transactionRow
            Get
                Return CType(Me.Rows(index),inv_item_cost_transactionRow)
            End Get
        End Property
        
        Public Event inv_item_cost_transactionRowChanged As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowChanging As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowDeleted As inv_item_cost_transactionRowChangeEventHandler
        
        Public Event inv_item_cost_transactionRowDeleting As inv_item_cost_transactionRowChangeEventHandler
        
        Public Overloads Sub Addinv_item_cost_transactionRow(ByVal row As inv_item_cost_transactionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_item_cost_transactionRow(ByVal item_no As String, ByVal date_cost_change As String, ByVal cost As Single, ByVal list_price As Single, ByVal fet As Single, ByVal delivery As Single, ByVal frieght As Single, ByVal price_code As String) As inv_item_cost_transactionRow
            Dim rowinv_item_cost_transactionRow As inv_item_cost_transactionRow = CType(Me.NewRow,inv_item_cost_transactionRow)
            rowinv_item_cost_transactionRow.ItemArray = New Object() {item_no, date_cost_change, cost, list_price, fet, delivery, frieght, price_code}
            Me.Rows.Add(rowinv_item_cost_transactionRow)
            Return rowinv_item_cost_transactionRow
        End Function
        
        Public Function FindByitem_nodate_cost_change(ByVal item_no As String, ByVal date_cost_change As String) As inv_item_cost_transactionRow
            Return CType(Me.Rows.Find(New Object() {item_no, date_cost_change}),inv_item_cost_transactionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_item_cost_transactionDataTable = CType(MyBase.Clone,inv_item_cost_transactionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_item_cost_transactionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndate_cost_change = Me.Columns("date_cost_change")
            Me.columncost = Me.Columns("cost")
            Me.columnlist_price = Me.Columns("list_price")
            Me.columnfet = Me.Columns("fet")
            Me.columndelivery = Me.Columns("delivery")
            Me.columnfrieght = Me.Columns("frieght")
            Me.columnprice_code = Me.Columns("price_code")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndate_cost_change = New DataColumn("date_cost_change", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_cost_change)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnlist_price = New DataColumn("list_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlist_price)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columndelivery = New DataColumn("delivery", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndelivery)
            Me.columnfrieght = New DataColumn("frieght", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrieght)
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnitem_no, Me.columndate_cost_change}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columndate_cost_change.AllowDBNull = false
            Me.columncost.AllowDBNull = false
        End Sub
        
        Public Function Newinv_item_cost_transactionRow() As inv_item_cost_transactionRow
            Return CType(Me.NewRow,inv_item_cost_transactionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_item_cost_transactionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_item_cost_transactionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_item_cost_transactionRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowChanged(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_item_cost_transactionRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowChanging(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_item_cost_transactionRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowDeleted(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_item_cost_transactionRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_item_cost_transactionRowDeleting(Me, New inv_item_cost_transactionRowChangeEvent(CType(e.Row,inv_item_cost_transactionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_item_cost_transactionRow(ByVal row As inv_item_cost_transactionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionRow
        Inherits DataRow
        
        Private tableinv_item_cost_transaction As inv_item_cost_transactionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_item_cost_transaction = CType(Me.Table,inv_item_cost_transactionDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.item_noColumn) = value
            End Set
        End Property
        
        Public Property date_cost_change As String
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.date_cost_changeColumn),String)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.date_cost_changeColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Return CType(Me(Me.tableinv_item_cost_transaction.costColumn),Single)
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.costColumn) = value
            End Set
        End Property
        
        Public Property list_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.list_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.list_priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.fetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.fetColumn) = value
            End Set
        End Property
        
        Public Property delivery As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.deliveryColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.deliveryColumn) = value
            End Set
        End Property
        
        Public Property frieght As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.frieghtColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.frieghtColumn) = value
            End Set
        End Property
        
        Public Property price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_item_cost_transaction.price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_item_cost_transaction.price_codeColumn) = value
            End Set
        End Property
        
        Public Function Islist_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.list_priceColumn)
        End Function
        
        Public Sub Setlist_priceNull()
            Me(Me.tableinv_item_cost_transaction.list_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableinv_item_cost_transaction.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdeliveryNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.deliveryColumn)
        End Function
        
        Public Sub SetdeliveryNull()
            Me(Me.tableinv_item_cost_transaction.deliveryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfrieghtNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.frieghtColumn)
        End Function
        
        Public Sub SetfrieghtNull()
            Me(Me.tableinv_item_cost_transaction.frieghtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_item_cost_transaction.price_codeColumn)
        End Function
        
        Public Sub Setprice_codeNull()
            Me(Me.tableinv_item_cost_transaction.price_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_item_cost_transactionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_item_cost_transactionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_item_cost_transactionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_item_cost_transactionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_discount_itemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncounter As DataColumn
        
        Private columnitem_no As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_discount_item")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property counterColumn As DataColumn
            Get
                Return Me.columncounter
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_discount_itemRow
            Get
                Return CType(Me.Rows(index),inv_discount_itemRow)
            End Get
        End Property
        
        Public Event inv_discount_itemRowChanged As inv_discount_itemRowChangeEventHandler
        
        Public Event inv_discount_itemRowChanging As inv_discount_itemRowChangeEventHandler
        
        Public Event inv_discount_itemRowDeleted As inv_discount_itemRowChangeEventHandler
        
        Public Event inv_discount_itemRowDeleting As inv_discount_itemRowChangeEventHandler
        
        Public Overloads Sub Addinv_discount_itemRow(ByVal row As inv_discount_itemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_discount_itemRow(ByVal item_no As String) As inv_discount_itemRow
            Dim rowinv_discount_itemRow As inv_discount_itemRow = CType(Me.NewRow,inv_discount_itemRow)
            rowinv_discount_itemRow.ItemArray = New Object() {Nothing, item_no}
            Me.Rows.Add(rowinv_discount_itemRow)
            Return rowinv_discount_itemRow
        End Function
        
        Public Function FindBycounter(ByVal counter As Short) As inv_discount_itemRow
            Return CType(Me.Rows.Find(New Object() {counter}),inv_discount_itemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_discount_itemDataTable = CType(MyBase.Clone,inv_discount_itemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_discount_itemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncounter = Me.Columns("counter")
            Me.columnitem_no = Me.Columns("item_no")
        End Sub
        
        Private Sub InitClass()
            Me.columncounter = New DataColumn("counter", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncounter)
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncounter}, true))
            Me.columncounter.AutoIncrement = true
            Me.columncounter.AutoIncrementSeed = 1
            Me.columncounter.AllowDBNull = false
            Me.columncounter.ReadOnly = true
            Me.columncounter.Unique = true
        End Sub
        
        Public Function Newinv_discount_itemRow() As inv_discount_itemRow
            Return CType(Me.NewRow,inv_discount_itemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_discount_itemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_discount_itemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_discount_itemRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_discount_itemRowChanged(Me, New inv_discount_itemRowChangeEvent(CType(e.Row,inv_discount_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_discount_itemRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_discount_itemRowChanging(Me, New inv_discount_itemRowChangeEvent(CType(e.Row,inv_discount_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_discount_itemRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_discount_itemRowDeleted(Me, New inv_discount_itemRowChangeEvent(CType(e.Row,inv_discount_itemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_discount_itemRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_discount_itemRowDeleting(Me, New inv_discount_itemRowChangeEvent(CType(e.Row,inv_discount_itemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_discount_itemRow(ByVal row As inv_discount_itemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_discount_itemRow
        Inherits DataRow
        
        Private tableinv_discount_item As inv_discount_itemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_discount_item = CType(Me.Table,inv_discount_itemDataTable)
        End Sub
        
        Public Property counter As Short
            Get
                Return CType(Me(Me.tableinv_discount_item.counterColumn),Short)
            End Get
            Set
                Me(Me.tableinv_discount_item.counterColumn) = value
            End Set
        End Property
        
        Public Property item_no As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_discount_item.item_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_discount_item.item_noColumn) = value
            End Set
        End Property
        
        Public Function Isitem_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_discount_item.item_noColumn)
        End Function
        
        Public Sub Setitem_noNull()
            Me(Me.tableinv_discount_item.item_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_discount_itemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_discount_itemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_discount_itemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_discount_itemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PriceCodeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPrice_Code As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnPrice_Column1 As DataColumn
        
        Private columnList_or_Cost1 As DataColumn
        
        Private columnOperator1 As DataColumn
        
        Private column___or__1 As DataColumn
        
        Private columnAmount1 As DataColumn
        
        Private columnOdd_Price1 As DataColumn
        
        Private columnPrice_Column2 As DataColumn
        
        Private columnList_or_Cost2 As DataColumn
        
        Private columnOperator2 As DataColumn
        
        Private column___or__2 As DataColumn
        
        Private columnAmount2 As DataColumn
        
        Private columnOdd_Price2 As DataColumn
        
        Private columnPrice_Column3 As DataColumn
        
        Private columnList_or_Cost3 As DataColumn
        
        Private columnOperator3 As DataColumn
        
        Private column___or__3 As DataColumn
        
        Private columnAmount3 As DataColumn
        
        Private columnOdd_Price3 As DataColumn
        
        Private columnPrice_Column4 As DataColumn
        
        Private columnList_or_Cost4 As DataColumn
        
        Private columnOperator4 As DataColumn
        
        Private column___or__4 As DataColumn
        
        Private columnAmount4 As DataColumn
        
        Private columnOdd_Price4 As DataColumn
        
        Private columnPrice_Column5 As DataColumn
        
        Private columnList_or_Cost5 As DataColumn
        
        Private columnOperator5 As DataColumn
        
        Private column___or__5 As DataColumn
        
        Private columnAmount5 As DataColumn
        
        Private columnOdd_Price5 As DataColumn
        
        Private columnPrice_Column6 As DataColumn
        
        Private columnList_or_Cost6 As DataColumn
        
        Private columnOperator6 As DataColumn
        
        Private column___or__6 As DataColumn
        
        Private columnAmount6 As DataColumn
        
        Private columnOdd_Price6 As DataColumn
        
        Friend Sub New()
            MyBase.New("PriceCode")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Price_CodeColumn As DataColumn
            Get
                Return Me.columnPrice_Code
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column1Column As DataColumn
            Get
                Return Me.columnPrice_Column1
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost1Column As DataColumn
            Get
                Return Me.columnList_or_Cost1
            End Get
        End Property
        
        Friend ReadOnly Property Operator1Column As DataColumn
            Get
                Return Me.columnOperator1
            End Get
        End Property
        
        Friend ReadOnly Property ___or__1Column As DataColumn
            Get
                Return Me.column___or__1
            End Get
        End Property
        
        Friend ReadOnly Property Amount1Column As DataColumn
            Get
                Return Me.columnAmount1
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price1Column As DataColumn
            Get
                Return Me.columnOdd_Price1
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column2Column As DataColumn
            Get
                Return Me.columnPrice_Column2
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost2Column As DataColumn
            Get
                Return Me.columnList_or_Cost2
            End Get
        End Property
        
        Friend ReadOnly Property Operator2Column As DataColumn
            Get
                Return Me.columnOperator2
            End Get
        End Property
        
        Friend ReadOnly Property ___or__2Column As DataColumn
            Get
                Return Me.column___or__2
            End Get
        End Property
        
        Friend ReadOnly Property Amount2Column As DataColumn
            Get
                Return Me.columnAmount2
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price2Column As DataColumn
            Get
                Return Me.columnOdd_Price2
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column3Column As DataColumn
            Get
                Return Me.columnPrice_Column3
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost3Column As DataColumn
            Get
                Return Me.columnList_or_Cost3
            End Get
        End Property
        
        Friend ReadOnly Property Operator3Column As DataColumn
            Get
                Return Me.columnOperator3
            End Get
        End Property
        
        Friend ReadOnly Property ___or__3Column As DataColumn
            Get
                Return Me.column___or__3
            End Get
        End Property
        
        Friend ReadOnly Property Amount3Column As DataColumn
            Get
                Return Me.columnAmount3
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price3Column As DataColumn
            Get
                Return Me.columnOdd_Price3
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column4Column As DataColumn
            Get
                Return Me.columnPrice_Column4
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost4Column As DataColumn
            Get
                Return Me.columnList_or_Cost4
            End Get
        End Property
        
        Friend ReadOnly Property Operator4Column As DataColumn
            Get
                Return Me.columnOperator4
            End Get
        End Property
        
        Friend ReadOnly Property ___or__4Column As DataColumn
            Get
                Return Me.column___or__4
            End Get
        End Property
        
        Friend ReadOnly Property Amount4Column As DataColumn
            Get
                Return Me.columnAmount4
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price4Column As DataColumn
            Get
                Return Me.columnOdd_Price4
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column5Column As DataColumn
            Get
                Return Me.columnPrice_Column5
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost5Column As DataColumn
            Get
                Return Me.columnList_or_Cost5
            End Get
        End Property
        
        Friend ReadOnly Property Operator5Column As DataColumn
            Get
                Return Me.columnOperator5
            End Get
        End Property
        
        Friend ReadOnly Property ___or__5Column As DataColumn
            Get
                Return Me.column___or__5
            End Get
        End Property
        
        Friend ReadOnly Property Amount5Column As DataColumn
            Get
                Return Me.columnAmount5
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price5Column As DataColumn
            Get
                Return Me.columnOdd_Price5
            End Get
        End Property
        
        Friend ReadOnly Property Price_Column6Column As DataColumn
            Get
                Return Me.columnPrice_Column6
            End Get
        End Property
        
        Friend ReadOnly Property List_or_Cost6Column As DataColumn
            Get
                Return Me.columnList_or_Cost6
            End Get
        End Property
        
        Friend ReadOnly Property Operator6Column As DataColumn
            Get
                Return Me.columnOperator6
            End Get
        End Property
        
        Friend ReadOnly Property ___or__6Column As DataColumn
            Get
                Return Me.column___or__6
            End Get
        End Property
        
        Friend ReadOnly Property Amount6Column As DataColumn
            Get
                Return Me.columnAmount6
            End Get
        End Property
        
        Friend ReadOnly Property Odd_Price6Column As DataColumn
            Get
                Return Me.columnOdd_Price6
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PriceCodeRow
            Get
                Return CType(Me.Rows(index),PriceCodeRow)
            End Get
        End Property
        
        Public Event PriceCodeRowChanged As PriceCodeRowChangeEventHandler
        
        Public Event PriceCodeRowChanging As PriceCodeRowChangeEventHandler
        
        Public Event PriceCodeRowDeleted As PriceCodeRowChangeEventHandler
        
        Public Event PriceCodeRowDeleting As PriceCodeRowChangeEventHandler
        
        Public Overloads Sub AddPriceCodeRow(ByVal row As PriceCodeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPriceCodeRow( _
                    ByVal Price_Code As String,  _
                    ByVal Description As String,  _
                    ByVal Price_Column1 As String,  _
                    ByVal List_or_Cost1 As String,  _
                    ByVal Operator1 As String,  _
                    ByVal ___or__1 As String,  _
                    ByVal Amount1 As Double,  _
                    ByVal Odd_Price1 As Double,  _
                    ByVal Price_Column2 As String,  _
                    ByVal List_or_Cost2 As String,  _
                    ByVal Operator2 As String,  _
                    ByVal ___or__2 As String,  _
                    ByVal Amount2 As Double,  _
                    ByVal Odd_Price2 As Double,  _
                    ByVal Price_Column3 As String,  _
                    ByVal List_or_Cost3 As String,  _
                    ByVal Operator3 As String,  _
                    ByVal ___or__3 As String,  _
                    ByVal Amount3 As Double,  _
                    ByVal Odd_Price3 As Double,  _
                    ByVal Price_Column4 As String,  _
                    ByVal List_or_Cost4 As String,  _
                    ByVal Operator4 As String,  _
                    ByVal ___or__4 As String,  _
                    ByVal Amount4 As Double,  _
                    ByVal Odd_Price4 As Double,  _
                    ByVal Price_Column5 As String,  _
                    ByVal List_or_Cost5 As String,  _
                    ByVal Operator5 As String,  _
                    ByVal ___or__5 As String,  _
                    ByVal Amount5 As Double,  _
                    ByVal Odd_Price5 As Double,  _
                    ByVal Price_Column6 As String,  _
                    ByVal List_or_Cost6 As String,  _
                    ByVal Operator6 As String,  _
                    ByVal ___or__6 As String,  _
                    ByVal Amount6 As Double,  _
                    ByVal Odd_Price6 As Double) As PriceCodeRow
            Dim rowPriceCodeRow As PriceCodeRow = CType(Me.NewRow,PriceCodeRow)
            rowPriceCodeRow.ItemArray = New Object() {Price_Code, Description, Price_Column1, List_or_Cost1, Operator1, ___or__1, Amount1, Odd_Price1, Price_Column2, List_or_Cost2, Operator2, ___or__2, Amount2, Odd_Price2, Price_Column3, List_or_Cost3, Operator3, ___or__3, Amount3, Odd_Price3, Price_Column4, List_or_Cost4, Operator4, ___or__4, Amount4, Odd_Price4, Price_Column5, List_or_Cost5, Operator5, ___or__5, Amount5, Odd_Price5, Price_Column6, List_or_Cost6, Operator6, ___or__6, Amount6, Odd_Price6}
            Me.Rows.Add(rowPriceCodeRow)
            Return rowPriceCodeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PriceCodeDataTable = CType(MyBase.Clone,PriceCodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PriceCodeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPrice_Code = Me.Columns("Price Code")
            Me.columnDescription = Me.Columns("Description")
            Me.columnPrice_Column1 = Me.Columns("Price Column1")
            Me.columnList_or_Cost1 = Me.Columns("List or Cost1")
            Me.columnOperator1 = Me.Columns("Operator1")
            Me.column___or__1 = Me.Columns("% or $1")
            Me.columnAmount1 = Me.Columns("Amount1")
            Me.columnOdd_Price1 = Me.Columns("Odd Price1")
            Me.columnPrice_Column2 = Me.Columns("Price Column2")
            Me.columnList_or_Cost2 = Me.Columns("List or Cost2")
            Me.columnOperator2 = Me.Columns("Operator2")
            Me.column___or__2 = Me.Columns("% or $2")
            Me.columnAmount2 = Me.Columns("Amount2")
            Me.columnOdd_Price2 = Me.Columns("Odd Price2")
            Me.columnPrice_Column3 = Me.Columns("Price Column3")
            Me.columnList_or_Cost3 = Me.Columns("List or Cost3")
            Me.columnOperator3 = Me.Columns("Operator3")
            Me.column___or__3 = Me.Columns("% or $3")
            Me.columnAmount3 = Me.Columns("Amount3")
            Me.columnOdd_Price3 = Me.Columns("Odd Price3")
            Me.columnPrice_Column4 = Me.Columns("Price Column4")
            Me.columnList_or_Cost4 = Me.Columns("List or Cost4")
            Me.columnOperator4 = Me.Columns("Operator4")
            Me.column___or__4 = Me.Columns("% or $4")
            Me.columnAmount4 = Me.Columns("Amount4")
            Me.columnOdd_Price4 = Me.Columns("Odd Price4")
            Me.columnPrice_Column5 = Me.Columns("Price Column5")
            Me.columnList_or_Cost5 = Me.Columns("List or Cost5")
            Me.columnOperator5 = Me.Columns("Operator5")
            Me.column___or__5 = Me.Columns("% or $5")
            Me.columnAmount5 = Me.Columns("Amount5")
            Me.columnOdd_Price5 = Me.Columns("Odd Price5")
            Me.columnPrice_Column6 = Me.Columns("Price Column6")
            Me.columnList_or_Cost6 = Me.Columns("List or Cost6")
            Me.columnOperator6 = Me.Columns("Operator6")
            Me.column___or__6 = Me.Columns("% or $6")
            Me.columnAmount6 = Me.Columns("Amount6")
            Me.columnOdd_Price6 = Me.Columns("Odd Price6")
        End Sub
        
        Private Sub InitClass()
            Me.columnPrice_Code = New DataColumn("Price Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Code)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnPrice_Column1 = New DataColumn("Price Column1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column1)
            Me.columnList_or_Cost1 = New DataColumn("List or Cost1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost1)
            Me.columnOperator1 = New DataColumn("Operator1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator1)
            Me.column___or__1 = New DataColumn("% or $1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__1)
            Me.columnAmount1 = New DataColumn("Amount1", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount1)
            Me.columnOdd_Price1 = New DataColumn("Odd Price1", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price1)
            Me.columnPrice_Column2 = New DataColumn("Price Column2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column2)
            Me.columnList_or_Cost2 = New DataColumn("List or Cost2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost2)
            Me.columnOperator2 = New DataColumn("Operator2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator2)
            Me.column___or__2 = New DataColumn("% or $2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__2)
            Me.columnAmount2 = New DataColumn("Amount2", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount2)
            Me.columnOdd_Price2 = New DataColumn("Odd Price2", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price2)
            Me.columnPrice_Column3 = New DataColumn("Price Column3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column3)
            Me.columnList_or_Cost3 = New DataColumn("List or Cost3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost3)
            Me.columnOperator3 = New DataColumn("Operator3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator3)
            Me.column___or__3 = New DataColumn("% or $3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__3)
            Me.columnAmount3 = New DataColumn("Amount3", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount3)
            Me.columnOdd_Price3 = New DataColumn("Odd Price3", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price3)
            Me.columnPrice_Column4 = New DataColumn("Price Column4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column4)
            Me.columnList_or_Cost4 = New DataColumn("List or Cost4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost4)
            Me.columnOperator4 = New DataColumn("Operator4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator4)
            Me.column___or__4 = New DataColumn("% or $4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__4)
            Me.columnAmount4 = New DataColumn("Amount4", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount4)
            Me.columnOdd_Price4 = New DataColumn("Odd Price4", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price4)
            Me.columnPrice_Column5 = New DataColumn("Price Column5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column5)
            Me.columnList_or_Cost5 = New DataColumn("List or Cost5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost5)
            Me.columnOperator5 = New DataColumn("Operator5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator5)
            Me.column___or__5 = New DataColumn("% or $5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__5)
            Me.columnAmount5 = New DataColumn("Amount5", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount5)
            Me.columnOdd_Price5 = New DataColumn("Odd Price5", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price5)
            Me.columnPrice_Column6 = New DataColumn("Price Column6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_Column6)
            Me.columnList_or_Cost6 = New DataColumn("List or Cost6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_or_Cost6)
            Me.columnOperator6 = New DataColumn("Operator6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperator6)
            Me.column___or__6 = New DataColumn("% or $6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column___or__6)
            Me.columnAmount6 = New DataColumn("Amount6", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount6)
            Me.columnOdd_Price6 = New DataColumn("Odd Price6", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOdd_Price6)
        End Sub
        
        Public Function NewPriceCodeRow() As PriceCodeRow
            Return CType(Me.NewRow,PriceCodeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PriceCodeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PriceCodeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PriceCodeRowChangedEvent) Is Nothing) Then
                RaiseEvent PriceCodeRowChanged(Me, New PriceCodeRowChangeEvent(CType(e.Row,PriceCodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PriceCodeRowChangingEvent) Is Nothing) Then
                RaiseEvent PriceCodeRowChanging(Me, New PriceCodeRowChangeEvent(CType(e.Row,PriceCodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PriceCodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PriceCodeRowDeleted(Me, New PriceCodeRowChangeEvent(CType(e.Row,PriceCodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PriceCodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PriceCodeRowDeleting(Me, New PriceCodeRowChangeEvent(CType(e.Row,PriceCodeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePriceCodeRow(ByVal row As PriceCodeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PriceCodeRow
        Inherits DataRow
        
        Private tablePriceCode As PriceCodeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePriceCode = CType(Me.Table,PriceCodeDataTable)
        End Sub
        
        Public Property Price_Code As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_CodeColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Price_Column1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column1Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost1Column) = value
            End Set
        End Property
        
        Public Property Operator1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator1Column) = value
            End Set
        End Property
        
        Public Property ___or__1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__1Column) = value
            End Set
        End Property
        
        Public Property Amount1 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount1Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount1Column) = value
            End Set
        End Property
        
        Public Property Odd_Price1 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price1Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price1Column) = value
            End Set
        End Property
        
        Public Property Price_Column2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column2Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost2Column) = value
            End Set
        End Property
        
        Public Property Operator2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator2Column) = value
            End Set
        End Property
        
        Public Property ___or__2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__2Column) = value
            End Set
        End Property
        
        Public Property Amount2 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount2Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount2Column) = value
            End Set
        End Property
        
        Public Property Odd_Price2 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price2Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price2Column) = value
            End Set
        End Property
        
        Public Property Price_Column3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column3Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost3Column) = value
            End Set
        End Property
        
        Public Property Operator3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator3Column) = value
            End Set
        End Property
        
        Public Property ___or__3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__3Column) = value
            End Set
        End Property
        
        Public Property Amount3 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount3Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount3Column) = value
            End Set
        End Property
        
        Public Property Odd_Price3 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price3Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price3Column) = value
            End Set
        End Property
        
        Public Property Price_Column4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column4Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost4Column) = value
            End Set
        End Property
        
        Public Property Operator4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator4Column) = value
            End Set
        End Property
        
        Public Property ___or__4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__4Column) = value
            End Set
        End Property
        
        Public Property Amount4 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount4Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount4Column) = value
            End Set
        End Property
        
        Public Property Odd_Price4 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price4Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price4Column) = value
            End Set
        End Property
        
        Public Property Price_Column5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column5Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost5Column) = value
            End Set
        End Property
        
        Public Property Operator5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator5Column) = value
            End Set
        End Property
        
        Public Property ___or__5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__5Column) = value
            End Set
        End Property
        
        Public Property Amount5 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount5Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount5Column) = value
            End Set
        End Property
        
        Public Property Odd_Price5 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price5Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price5Column) = value
            End Set
        End Property
        
        Public Property Price_Column6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Price_Column6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Price_Column6Column) = value
            End Set
        End Property
        
        Public Property List_or_Cost6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.List_or_Cost6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.List_or_Cost6Column) = value
            End Set
        End Property
        
        Public Property Operator6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Operator6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Operator6Column) = value
            End Set
        End Property
        
        Public Property ___or__6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.___or__6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.___or__6Column) = value
            End Set
        End Property
        
        Public Property Amount6 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Amount6Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Amount6Column) = value
            End Set
        End Property
        
        Public Property Odd_Price6 As Double
            Get
                Try 
                    Return CType(Me(Me.tablePriceCode.Odd_Price6Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePriceCode.Odd_Price6Column) = value
            End Set
        End Property
        
        Public Function IsPrice_CodeNull() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_CodeColumn)
        End Function
        
        Public Sub SetPrice_CodeNull()
            Me(Me.tablePriceCode.Price_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePriceCode.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tablePriceCode.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column1Column)
        End Function
        
        Public Sub SetPrice_Column1Null()
            Me(Me.tablePriceCode.Price_Column1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost1Column)
        End Function
        
        Public Sub SetList_or_Cost1Null()
            Me(Me.tablePriceCode.List_or_Cost1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator1Column)
        End Function
        
        Public Sub SetOperator1Null()
            Me(Me.tablePriceCode.Operator1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__1Column)
        End Function
        
        Public Sub Set___or__1Null()
            Me(Me.tablePriceCode.___or__1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount1Column)
        End Function
        
        Public Sub SetAmount1Null()
            Me(Me.tablePriceCode.Amount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price1Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price1Column)
        End Function
        
        Public Sub SetOdd_Price1Null()
            Me(Me.tablePriceCode.Odd_Price1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column2Column)
        End Function
        
        Public Sub SetPrice_Column2Null()
            Me(Me.tablePriceCode.Price_Column2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost2Column)
        End Function
        
        Public Sub SetList_or_Cost2Null()
            Me(Me.tablePriceCode.List_or_Cost2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator2Column)
        End Function
        
        Public Sub SetOperator2Null()
            Me(Me.tablePriceCode.Operator2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__2Column)
        End Function
        
        Public Sub Set___or__2Null()
            Me(Me.tablePriceCode.___or__2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount2Column)
        End Function
        
        Public Sub SetAmount2Null()
            Me(Me.tablePriceCode.Amount2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price2Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price2Column)
        End Function
        
        Public Sub SetOdd_Price2Null()
            Me(Me.tablePriceCode.Odd_Price2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column3Column)
        End Function
        
        Public Sub SetPrice_Column3Null()
            Me(Me.tablePriceCode.Price_Column3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost3Column)
        End Function
        
        Public Sub SetList_or_Cost3Null()
            Me(Me.tablePriceCode.List_or_Cost3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator3Column)
        End Function
        
        Public Sub SetOperator3Null()
            Me(Me.tablePriceCode.Operator3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__3Column)
        End Function
        
        Public Sub Set___or__3Null()
            Me(Me.tablePriceCode.___or__3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount3Column)
        End Function
        
        Public Sub SetAmount3Null()
            Me(Me.tablePriceCode.Amount3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price3Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price3Column)
        End Function
        
        Public Sub SetOdd_Price3Null()
            Me(Me.tablePriceCode.Odd_Price3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column4Column)
        End Function
        
        Public Sub SetPrice_Column4Null()
            Me(Me.tablePriceCode.Price_Column4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost4Column)
        End Function
        
        Public Sub SetList_or_Cost4Null()
            Me(Me.tablePriceCode.List_or_Cost4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator4Column)
        End Function
        
        Public Sub SetOperator4Null()
            Me(Me.tablePriceCode.Operator4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__4Column)
        End Function
        
        Public Sub Set___or__4Null()
            Me(Me.tablePriceCode.___or__4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount4Column)
        End Function
        
        Public Sub SetAmount4Null()
            Me(Me.tablePriceCode.Amount4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price4Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price4Column)
        End Function
        
        Public Sub SetOdd_Price4Null()
            Me(Me.tablePriceCode.Odd_Price4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column5Column)
        End Function
        
        Public Sub SetPrice_Column5Null()
            Me(Me.tablePriceCode.Price_Column5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost5Column)
        End Function
        
        Public Sub SetList_or_Cost5Null()
            Me(Me.tablePriceCode.List_or_Cost5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator5Column)
        End Function
        
        Public Sub SetOperator5Null()
            Me(Me.tablePriceCode.Operator5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__5Column)
        End Function
        
        Public Sub Set___or__5Null()
            Me(Me.tablePriceCode.___or__5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount5Column)
        End Function
        
        Public Sub SetAmount5Null()
            Me(Me.tablePriceCode.Amount5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price5Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price5Column)
        End Function
        
        Public Sub SetOdd_Price5Null()
            Me(Me.tablePriceCode.Odd_Price5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_Column6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Price_Column6Column)
        End Function
        
        Public Sub SetPrice_Column6Null()
            Me(Me.tablePriceCode.Price_Column6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_or_Cost6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.List_or_Cost6Column)
        End Function
        
        Public Sub SetList_or_Cost6Null()
            Me(Me.tablePriceCode.List_or_Cost6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperator6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Operator6Column)
        End Function
        
        Public Sub SetOperator6Null()
            Me(Me.tablePriceCode.Operator6Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is___or__6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.___or__6Column)
        End Function
        
        Public Sub Set___or__6Null()
            Me(Me.tablePriceCode.___or__6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmount6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Amount6Column)
        End Function
        
        Public Sub SetAmount6Null()
            Me(Me.tablePriceCode.Amount6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOdd_Price6Null() As Boolean
            Return Me.IsNull(Me.tablePriceCode.Odd_Price6Column)
        End Function
        
        Public Sub SetOdd_Price6Null()
            Me(Me.tablePriceCode.Odd_Price6Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PriceCodeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PriceCodeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PriceCodeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PriceCodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BRANDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBrand As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("BRAND")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BrandColumn As DataColumn
            Get
                Return Me.columnBrand
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BRANDRow
            Get
                Return CType(Me.Rows(index),BRANDRow)
            End Get
        End Property
        
        Public Event BRANDRowChanged As BRANDRowChangeEventHandler
        
        Public Event BRANDRowChanging As BRANDRowChangeEventHandler
        
        Public Event BRANDRowDeleted As BRANDRowChangeEventHandler
        
        Public Event BRANDRowDeleting As BRANDRowChangeEventHandler
        
        Public Overloads Sub AddBRANDRow(ByVal row As BRANDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBRANDRow(ByVal Brand As String, ByVal Description As String) As BRANDRow
            Dim rowBRANDRow As BRANDRow = CType(Me.NewRow,BRANDRow)
            rowBRANDRow.ItemArray = New Object() {Brand, Description}
            Me.Rows.Add(rowBRANDRow)
            Return rowBRANDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BRANDDataTable = CType(MyBase.Clone,BRANDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BRANDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBrand = Me.Columns("Brand")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnBrand = New DataColumn("Brand", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBrand)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
        End Sub
        
        Public Function NewBRANDRow() As BRANDRow
            Return CType(Me.NewRow,BRANDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BRANDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BRANDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BRANDRowChangedEvent) Is Nothing) Then
                RaiseEvent BRANDRowChanged(Me, New BRANDRowChangeEvent(CType(e.Row,BRANDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BRANDRowChangingEvent) Is Nothing) Then
                RaiseEvent BRANDRowChanging(Me, New BRANDRowChangeEvent(CType(e.Row,BRANDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BRANDRowDeletedEvent) Is Nothing) Then
                RaiseEvent BRANDRowDeleted(Me, New BRANDRowChangeEvent(CType(e.Row,BRANDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BRANDRowDeletingEvent) Is Nothing) Then
                RaiseEvent BRANDRowDeleting(Me, New BRANDRowChangeEvent(CType(e.Row,BRANDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBRANDRow(ByVal row As BRANDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BRANDRow
        Inherits DataRow
        
        Private tableBRAND As BRANDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBRAND = CType(Me.Table,BRANDDataTable)
        End Sub
        
        Public Property Brand As String
            Get
                Try 
                    Return CType(Me(Me.tableBRAND.BrandColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBRAND.BrandColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableBRAND.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBRAND.DescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsBrandNull() As Boolean
            Return Me.IsNull(Me.tableBRAND.BrandColumn)
        End Function
        
        Public Sub SetBrandNull()
            Me(Me.tableBRAND.BrandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBRAND.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableBRAND.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BRANDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BRANDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BRANDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BRANDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnprice_code As DataColumn
        
        Private columndesc_price_code As DataColumn
        
        Private columnprice1_c_l_a_p As DataColumn
        
        Private columnprice1_operator As DataColumn
        
        Private columnprice1_d_persent As DataColumn
        
        Private columnprice1_amount As DataColumn
        
        Private columnprice1_odd_price As DataColumn
        
        Private columnprice1_price_level As DataColumn
        
        Private columnprice2_c_l_a_p As DataColumn
        
        Private columnprice2_operator As DataColumn
        
        Private columnprice2_d_persent As DataColumn
        
        Private columnprice2_amount As DataColumn
        
        Private columnprice2_odd_price As DataColumn
        
        Private columnprice2_price_level As DataColumn
        
        Private columnprice3_c_l_a_p As DataColumn
        
        Private columnprice3_operator As DataColumn
        
        Private columnprice3_d_persent As DataColumn
        
        Private columnprice3_amount As DataColumn
        
        Private columnprice3_odd_price As DataColumn
        
        Private columnprice3_price_level As DataColumn
        
        Private columnprice4_c_l_a_p As DataColumn
        
        Private columnprice4_operator As DataColumn
        
        Private columnprice4_d_persent As DataColumn
        
        Private columnprice4_amount As DataColumn
        
        Private columnprice4_odd_price As DataColumn
        
        Private columnprice4_price_level As DataColumn
        
        Private columnprice5_c_l_a_p As DataColumn
        
        Private columnprice5_operator As DataColumn
        
        Private columnprice5_d_persent As DataColumn
        
        Private columnprice5_amount As DataColumn
        
        Private columnprice5_odd_price As DataColumn
        
        Private columnprice5_price_level As DataColumn
        
        Private columnprice6_c_l_a_p As DataColumn
        
        Private columnprice6_operator As DataColumn
        
        Private columnprice6_d_persent As DataColumn
        
        Private columnprice6_amount As DataColumn
        
        Private columnprice6_odd_price As DataColumn
        
        Private columnprice6_price_level As DataColumn
        
        Private columnspecial_notice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_price_code")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property price_codeColumn As DataColumn
            Get
                Return Me.columnprice_code
            End Get
        End Property
        
        Friend ReadOnly Property desc_price_codeColumn As DataColumn
            Get
                Return Me.columndesc_price_code
            End Get
        End Property
        
        Friend ReadOnly Property price1_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice1_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price1_operatorColumn As DataColumn
            Get
                Return Me.columnprice1_operator
            End Get
        End Property
        
        Friend ReadOnly Property price1_d_persentColumn As DataColumn
            Get
                Return Me.columnprice1_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price1_amountColumn As DataColumn
            Get
                Return Me.columnprice1_amount
            End Get
        End Property
        
        Friend ReadOnly Property price1_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice1_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price1_price_levelColumn As DataColumn
            Get
                Return Me.columnprice1_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price2_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice2_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price2_operatorColumn As DataColumn
            Get
                Return Me.columnprice2_operator
            End Get
        End Property
        
        Friend ReadOnly Property price2_d_persentColumn As DataColumn
            Get
                Return Me.columnprice2_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price2_amountColumn As DataColumn
            Get
                Return Me.columnprice2_amount
            End Get
        End Property
        
        Friend ReadOnly Property price2_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice2_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price2_price_levelColumn As DataColumn
            Get
                Return Me.columnprice2_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price3_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice3_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price3_operatorColumn As DataColumn
            Get
                Return Me.columnprice3_operator
            End Get
        End Property
        
        Friend ReadOnly Property price3_d_persentColumn As DataColumn
            Get
                Return Me.columnprice3_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price3_amountColumn As DataColumn
            Get
                Return Me.columnprice3_amount
            End Get
        End Property
        
        Friend ReadOnly Property price3_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice3_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price3_price_levelColumn As DataColumn
            Get
                Return Me.columnprice3_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price4_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice4_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price4_operatorColumn As DataColumn
            Get
                Return Me.columnprice4_operator
            End Get
        End Property
        
        Friend ReadOnly Property price4_d_persentColumn As DataColumn
            Get
                Return Me.columnprice4_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price4_amountColumn As DataColumn
            Get
                Return Me.columnprice4_amount
            End Get
        End Property
        
        Friend ReadOnly Property price4_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice4_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price4_price_levelColumn As DataColumn
            Get
                Return Me.columnprice4_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price5_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice5_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price5_operatorColumn As DataColumn
            Get
                Return Me.columnprice5_operator
            End Get
        End Property
        
        Friend ReadOnly Property price5_d_persentColumn As DataColumn
            Get
                Return Me.columnprice5_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price5_amountColumn As DataColumn
            Get
                Return Me.columnprice5_amount
            End Get
        End Property
        
        Friend ReadOnly Property price5_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice5_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price5_price_levelColumn As DataColumn
            Get
                Return Me.columnprice5_price_level
            End Get
        End Property
        
        Friend ReadOnly Property price6_c_l_a_pColumn As DataColumn
            Get
                Return Me.columnprice6_c_l_a_p
            End Get
        End Property
        
        Friend ReadOnly Property price6_operatorColumn As DataColumn
            Get
                Return Me.columnprice6_operator
            End Get
        End Property
        
        Friend ReadOnly Property price6_d_persentColumn As DataColumn
            Get
                Return Me.columnprice6_d_persent
            End Get
        End Property
        
        Friend ReadOnly Property price6_amountColumn As DataColumn
            Get
                Return Me.columnprice6_amount
            End Get
        End Property
        
        Friend ReadOnly Property price6_odd_priceColumn As DataColumn
            Get
                Return Me.columnprice6_odd_price
            End Get
        End Property
        
        Friend ReadOnly Property price6_price_levelColumn As DataColumn
            Get
                Return Me.columnprice6_price_level
            End Get
        End Property
        
        Friend ReadOnly Property special_noticeColumn As DataColumn
            Get
                Return Me.columnspecial_notice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_price_codeRow
            Get
                Return CType(Me.Rows(index),inv_price_codeRow)
            End Get
        End Property
        
        Public Event inv_price_codeRowChanged As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowChanging As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleted As inv_price_codeRowChangeEventHandler
        
        Public Event inv_price_codeRowDeleting As inv_price_codeRowChangeEventHandler
        
        Public Overloads Sub Addinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_price_codeRow( _
                    ByVal price_code As String,  _
                    ByVal desc_price_code As String,  _
                    ByVal price1_c_l_a_p As String,  _
                    ByVal price1_operator As String,  _
                    ByVal price1_d_persent As String,  _
                    ByVal price1_amount As Single,  _
                    ByVal price1_odd_price As Single,  _
                    ByVal price1_price_level As String,  _
                    ByVal price2_c_l_a_p As String,  _
                    ByVal price2_operator As String,  _
                    ByVal price2_d_persent As String,  _
                    ByVal price2_amount As Single,  _
                    ByVal price2_odd_price As Single,  _
                    ByVal price2_price_level As String,  _
                    ByVal price3_c_l_a_p As String,  _
                    ByVal price3_operator As String,  _
                    ByVal price3_d_persent As String,  _
                    ByVal price3_amount As Single,  _
                    ByVal price3_odd_price As Single,  _
                    ByVal price3_price_level As String,  _
                    ByVal price4_c_l_a_p As String,  _
                    ByVal price4_operator As String,  _
                    ByVal price4_d_persent As String,  _
                    ByVal price4_amount As Single,  _
                    ByVal price4_odd_price As Single,  _
                    ByVal price4_price_level As String,  _
                    ByVal price5_c_l_a_p As String,  _
                    ByVal price5_operator As String,  _
                    ByVal price5_d_persent As String,  _
                    ByVal price5_amount As Single,  _
                    ByVal price5_odd_price As Single,  _
                    ByVal price5_price_level As String,  _
                    ByVal price6_c_l_a_p As String,  _
                    ByVal price6_operator As String,  _
                    ByVal price6_d_persent As String,  _
                    ByVal price6_amount As Single,  _
                    ByVal price6_odd_price As Single,  _
                    ByVal price6_price_level As String,  _
                    ByVal special_notice As String) As inv_price_codeRow
            Dim rowinv_price_codeRow As inv_price_codeRow = CType(Me.NewRow,inv_price_codeRow)
            rowinv_price_codeRow.ItemArray = New Object() {price_code, desc_price_code, price1_c_l_a_p, price1_operator, price1_d_persent, price1_amount, price1_odd_price, price1_price_level, price2_c_l_a_p, price2_operator, price2_d_persent, price2_amount, price2_odd_price, price2_price_level, price3_c_l_a_p, price3_operator, price3_d_persent, price3_amount, price3_odd_price, price3_price_level, price4_c_l_a_p, price4_operator, price4_d_persent, price4_amount, price4_odd_price, price4_price_level, price5_c_l_a_p, price5_operator, price5_d_persent, price5_amount, price5_odd_price, price5_price_level, price6_c_l_a_p, price6_operator, price6_d_persent, price6_amount, price6_odd_price, price6_price_level, special_notice}
            Me.Rows.Add(rowinv_price_codeRow)
            Return rowinv_price_codeRow
        End Function
        
        Public Function FindByprice_code(ByVal price_code As String) As inv_price_codeRow
            Return CType(Me.Rows.Find(New Object() {price_code}),inv_price_codeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_price_codeDataTable = CType(MyBase.Clone,inv_price_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_price_codeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnprice_code = Me.Columns("price_code")
            Me.columndesc_price_code = Me.Columns("desc_price_code")
            Me.columnprice1_c_l_a_p = Me.Columns("price1_c_l_a_p")
            Me.columnprice1_operator = Me.Columns("price1_operator")
            Me.columnprice1_d_persent = Me.Columns("price1_d_persent")
            Me.columnprice1_amount = Me.Columns("price1_amount")
            Me.columnprice1_odd_price = Me.Columns("price1_odd_price")
            Me.columnprice1_price_level = Me.Columns("price1_price_level")
            Me.columnprice2_c_l_a_p = Me.Columns("price2_c_l_a_p")
            Me.columnprice2_operator = Me.Columns("price2_operator")
            Me.columnprice2_d_persent = Me.Columns("price2_d_persent")
            Me.columnprice2_amount = Me.Columns("price2_amount")
            Me.columnprice2_odd_price = Me.Columns("price2_odd_price")
            Me.columnprice2_price_level = Me.Columns("price2_price_level")
            Me.columnprice3_c_l_a_p = Me.Columns("price3_c_l_a_p")
            Me.columnprice3_operator = Me.Columns("price3_operator")
            Me.columnprice3_d_persent = Me.Columns("price3_d_persent")
            Me.columnprice3_amount = Me.Columns("price3_amount")
            Me.columnprice3_odd_price = Me.Columns("price3_odd_price")
            Me.columnprice3_price_level = Me.Columns("price3_price_level")
            Me.columnprice4_c_l_a_p = Me.Columns("price4_c_l_a_p")
            Me.columnprice4_operator = Me.Columns("price4_operator")
            Me.columnprice4_d_persent = Me.Columns("price4_d_persent")
            Me.columnprice4_amount = Me.Columns("price4_amount")
            Me.columnprice4_odd_price = Me.Columns("price4_odd_price")
            Me.columnprice4_price_level = Me.Columns("price4_price_level")
            Me.columnprice5_c_l_a_p = Me.Columns("price5_c_l_a_p")
            Me.columnprice5_operator = Me.Columns("price5_operator")
            Me.columnprice5_d_persent = Me.Columns("price5_d_persent")
            Me.columnprice5_amount = Me.Columns("price5_amount")
            Me.columnprice5_odd_price = Me.Columns("price5_odd_price")
            Me.columnprice5_price_level = Me.Columns("price5_price_level")
            Me.columnprice6_c_l_a_p = Me.Columns("price6_c_l_a_p")
            Me.columnprice6_operator = Me.Columns("price6_operator")
            Me.columnprice6_d_persent = Me.Columns("price6_d_persent")
            Me.columnprice6_amount = Me.Columns("price6_amount")
            Me.columnprice6_odd_price = Me.Columns("price6_odd_price")
            Me.columnprice6_price_level = Me.Columns("price6_price_level")
            Me.columnspecial_notice = Me.Columns("special_notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnprice_code = New DataColumn("price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_code)
            Me.columndesc_price_code = New DataColumn("desc_price_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_price_code)
            Me.columnprice1_c_l_a_p = New DataColumn("price1_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_c_l_a_p)
            Me.columnprice1_operator = New DataColumn("price1_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_operator)
            Me.columnprice1_d_persent = New DataColumn("price1_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_d_persent)
            Me.columnprice1_amount = New DataColumn("price1_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_amount)
            Me.columnprice1_odd_price = New DataColumn("price1_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_odd_price)
            Me.columnprice1_price_level = New DataColumn("price1_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice1_price_level)
            Me.columnprice2_c_l_a_p = New DataColumn("price2_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_c_l_a_p)
            Me.columnprice2_operator = New DataColumn("price2_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_operator)
            Me.columnprice2_d_persent = New DataColumn("price2_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_d_persent)
            Me.columnprice2_amount = New DataColumn("price2_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_amount)
            Me.columnprice2_odd_price = New DataColumn("price2_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_odd_price)
            Me.columnprice2_price_level = New DataColumn("price2_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice2_price_level)
            Me.columnprice3_c_l_a_p = New DataColumn("price3_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_c_l_a_p)
            Me.columnprice3_operator = New DataColumn("price3_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_operator)
            Me.columnprice3_d_persent = New DataColumn("price3_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_d_persent)
            Me.columnprice3_amount = New DataColumn("price3_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_amount)
            Me.columnprice3_odd_price = New DataColumn("price3_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_odd_price)
            Me.columnprice3_price_level = New DataColumn("price3_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice3_price_level)
            Me.columnprice4_c_l_a_p = New DataColumn("price4_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_c_l_a_p)
            Me.columnprice4_operator = New DataColumn("price4_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_operator)
            Me.columnprice4_d_persent = New DataColumn("price4_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_d_persent)
            Me.columnprice4_amount = New DataColumn("price4_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_amount)
            Me.columnprice4_odd_price = New DataColumn("price4_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_odd_price)
            Me.columnprice4_price_level = New DataColumn("price4_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice4_price_level)
            Me.columnprice5_c_l_a_p = New DataColumn("price5_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_c_l_a_p)
            Me.columnprice5_operator = New DataColumn("price5_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_operator)
            Me.columnprice5_d_persent = New DataColumn("price5_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_d_persent)
            Me.columnprice5_amount = New DataColumn("price5_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_amount)
            Me.columnprice5_odd_price = New DataColumn("price5_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_odd_price)
            Me.columnprice5_price_level = New DataColumn("price5_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice5_price_level)
            Me.columnprice6_c_l_a_p = New DataColumn("price6_c_l_a_p", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_c_l_a_p)
            Me.columnprice6_operator = New DataColumn("price6_operator", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_operator)
            Me.columnprice6_d_persent = New DataColumn("price6_d_persent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_d_persent)
            Me.columnprice6_amount = New DataColumn("price6_amount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_amount)
            Me.columnprice6_odd_price = New DataColumn("price6_odd_price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_odd_price)
            Me.columnprice6_price_level = New DataColumn("price6_price_level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice6_price_level)
            Me.columnspecial_notice = New DataColumn("special_notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspecial_notice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnprice_code}, true))
            Me.columnprice_code.AllowDBNull = false
            Me.columnprice_code.Unique = true
        End Sub
        
        Public Function Newinv_price_codeRow() As inv_price_codeRow
            Return CType(Me.NewRow,inv_price_codeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_price_codeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_price_codeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_price_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanged(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_price_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowChanging(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_price_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleted(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_price_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_price_codeRowDeleting(Me, New inv_price_codeRowChangeEvent(CType(e.Row,inv_price_codeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_price_codeRow(ByVal row As inv_price_codeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRow
        Inherits DataRow
        
        Private tableinv_price_code As inv_price_codeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_price_code = CType(Me.Table,inv_price_codeDataTable)
        End Sub
        
        Public Property price_code As String
            Get
                Return CType(Me(Me.tableinv_price_code.price_codeColumn),String)
            End Get
            Set
                Me(Me.tableinv_price_code.price_codeColumn) = value
            End Set
        End Property
        
        Public Property desc_price_code As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.desc_price_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.desc_price_codeColumn) = value
            End Set
        End Property
        
        Public Property price1_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price1_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_operatorColumn) = value
            End Set
        End Property
        
        Public Property price1_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price1_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_amountColumn) = value
            End Set
        End Property
        
        Public Property price1_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price1_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price1_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price1_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price2_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price2_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_operatorColumn) = value
            End Set
        End Property
        
        Public Property price2_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price2_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_amountColumn) = value
            End Set
        End Property
        
        Public Property price2_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price2_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price2_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price2_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price3_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price3_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_operatorColumn) = value
            End Set
        End Property
        
        Public Property price3_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price3_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_amountColumn) = value
            End Set
        End Property
        
        Public Property price3_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price3_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price3_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price3_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price4_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price4_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_operatorColumn) = value
            End Set
        End Property
        
        Public Property price4_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price4_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_amountColumn) = value
            End Set
        End Property
        
        Public Property price4_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price4_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price4_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price4_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price5_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price5_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_operatorColumn) = value
            End Set
        End Property
        
        Public Property price5_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price5_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_amountColumn) = value
            End Set
        End Property
        
        Public Property price5_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price5_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price5_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price5_price_levelColumn) = value
            End Set
        End Property
        
        Public Property price6_c_l_a_p As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_c_l_a_pColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = value
            End Set
        End Property
        
        Public Property price6_operator As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_operatorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_operatorColumn) = value
            End Set
        End Property
        
        Public Property price6_d_persent As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_d_persentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_d_persentColumn) = value
            End Set
        End Property
        
        Public Property price6_amount As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_amountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_amountColumn) = value
            End Set
        End Property
        
        Public Property price6_odd_price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_odd_priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_odd_priceColumn) = value
            End Set
        End Property
        
        Public Property price6_price_level As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.price6_price_levelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.price6_price_levelColumn) = value
            End Set
        End Property
        
        Public Property special_notice As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_price_code.special_noticeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_price_code.special_noticeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_price_codeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.desc_price_codeColumn)
        End Function
        
        Public Sub Setdesc_price_codeNull()
            Me(Me.tableinv_price_code.desc_price_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice1_c_l_a_pNull()
            Me(Me.tableinv_price_code.price1_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_operatorColumn)
        End Function
        
        Public Sub Setprice1_operatorNull()
            Me(Me.tableinv_price_code.price1_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_d_persentColumn)
        End Function
        
        Public Sub Setprice1_d_persentNull()
            Me(Me.tableinv_price_code.price1_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_amountColumn)
        End Function
        
        Public Sub Setprice1_amountNull()
            Me(Me.tableinv_price_code.price1_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_odd_priceColumn)
        End Function
        
        Public Sub Setprice1_odd_priceNull()
            Me(Me.tableinv_price_code.price1_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice1_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price1_price_levelColumn)
        End Function
        
        Public Sub Setprice1_price_levelNull()
            Me(Me.tableinv_price_code.price1_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice2_c_l_a_pNull()
            Me(Me.tableinv_price_code.price2_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_operatorColumn)
        End Function
        
        Public Sub Setprice2_operatorNull()
            Me(Me.tableinv_price_code.price2_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_d_persentColumn)
        End Function
        
        Public Sub Setprice2_d_persentNull()
            Me(Me.tableinv_price_code.price2_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_amountColumn)
        End Function
        
        Public Sub Setprice2_amountNull()
            Me(Me.tableinv_price_code.price2_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_odd_priceColumn)
        End Function
        
        Public Sub Setprice2_odd_priceNull()
            Me(Me.tableinv_price_code.price2_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice2_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price2_price_levelColumn)
        End Function
        
        Public Sub Setprice2_price_levelNull()
            Me(Me.tableinv_price_code.price2_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice3_c_l_a_pNull()
            Me(Me.tableinv_price_code.price3_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_operatorColumn)
        End Function
        
        Public Sub Setprice3_operatorNull()
            Me(Me.tableinv_price_code.price3_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_d_persentColumn)
        End Function
        
        Public Sub Setprice3_d_persentNull()
            Me(Me.tableinv_price_code.price3_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_amountColumn)
        End Function
        
        Public Sub Setprice3_amountNull()
            Me(Me.tableinv_price_code.price3_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_odd_priceColumn)
        End Function
        
        Public Sub Setprice3_odd_priceNull()
            Me(Me.tableinv_price_code.price3_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice3_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price3_price_levelColumn)
        End Function
        
        Public Sub Setprice3_price_levelNull()
            Me(Me.tableinv_price_code.price3_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice4_c_l_a_pNull()
            Me(Me.tableinv_price_code.price4_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_operatorColumn)
        End Function
        
        Public Sub Setprice4_operatorNull()
            Me(Me.tableinv_price_code.price4_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_d_persentColumn)
        End Function
        
        Public Sub Setprice4_d_persentNull()
            Me(Me.tableinv_price_code.price4_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_amountColumn)
        End Function
        
        Public Sub Setprice4_amountNull()
            Me(Me.tableinv_price_code.price4_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_odd_priceColumn)
        End Function
        
        Public Sub Setprice4_odd_priceNull()
            Me(Me.tableinv_price_code.price4_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice4_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price4_price_levelColumn)
        End Function
        
        Public Sub Setprice4_price_levelNull()
            Me(Me.tableinv_price_code.price4_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice5_c_l_a_pNull()
            Me(Me.tableinv_price_code.price5_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_operatorColumn)
        End Function
        
        Public Sub Setprice5_operatorNull()
            Me(Me.tableinv_price_code.price5_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_d_persentColumn)
        End Function
        
        Public Sub Setprice5_d_persentNull()
            Me(Me.tableinv_price_code.price5_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_amountColumn)
        End Function
        
        Public Sub Setprice5_amountNull()
            Me(Me.tableinv_price_code.price5_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_odd_priceColumn)
        End Function
        
        Public Sub Setprice5_odd_priceNull()
            Me(Me.tableinv_price_code.price5_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice5_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price5_price_levelColumn)
        End Function
        
        Public Sub Setprice5_price_levelNull()
            Me(Me.tableinv_price_code.price5_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_c_l_a_pNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_c_l_a_pColumn)
        End Function
        
        Public Sub Setprice6_c_l_a_pNull()
            Me(Me.tableinv_price_code.price6_c_l_a_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_operatorNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_operatorColumn)
        End Function
        
        Public Sub Setprice6_operatorNull()
            Me(Me.tableinv_price_code.price6_operatorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_d_persentNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_d_persentColumn)
        End Function
        
        Public Sub Setprice6_d_persentNull()
            Me(Me.tableinv_price_code.price6_d_persentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_amountNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_amountColumn)
        End Function
        
        Public Sub Setprice6_amountNull()
            Me(Me.tableinv_price_code.price6_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_odd_priceNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_odd_priceColumn)
        End Function
        
        Public Sub Setprice6_odd_priceNull()
            Me(Me.tableinv_price_code.price6_odd_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice6_price_levelNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.price6_price_levelColumn)
        End Function
        
        Public Sub Setprice6_price_levelNull()
            Me(Me.tableinv_price_code.price6_price_levelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isspecial_noticeNull() As Boolean
            Return Me.IsNull(Me.tableinv_price_code.special_noticeColumn)
        End Function
        
        Public Sub Setspecial_noticeNull()
            Me(Me.tableinv_price_code.special_noticeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_price_codeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_price_codeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_price_codeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_price_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ITQtyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItem_No As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnLOCATION As DataColumn
        
        Private columnQTY As DataColumn
        
        Friend Sub New()
            MyBase.New("ITQty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Item_NoColumn As DataColumn
            Get
                Return Me.columnItem_No
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property LOCATIONColumn As DataColumn
            Get
                Return Me.columnLOCATION
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITQtyRow
            Get
                Return CType(Me.Rows(index),ITQtyRow)
            End Get
        End Property
        
        Public Event ITQtyRowChanged As ITQtyRowChangeEventHandler
        
        Public Event ITQtyRowChanging As ITQtyRowChangeEventHandler
        
        Public Event ITQtyRowDeleted As ITQtyRowChangeEventHandler
        
        Public Event ITQtyRowDeleting As ITQtyRowChangeEventHandler
        
        Public Overloads Sub AddITQtyRow(ByVal row As ITQtyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddITQtyRow(ByVal Item_No As String, ByVal DESCRIPTION As String, ByVal LOCATION As String, ByVal QTY As String) As ITQtyRow
            Dim rowITQtyRow As ITQtyRow = CType(Me.NewRow,ITQtyRow)
            rowITQtyRow.ItemArray = New Object() {Item_No, DESCRIPTION, LOCATION, QTY}
            Me.Rows.Add(rowITQtyRow)
            Return rowITQtyRow
        End Function
        
        Public Function FindByItem_No(ByVal Item_No As String) As ITQtyRow
            Return CType(Me.Rows.Find(New Object() {Item_No}),ITQtyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ITQtyDataTable = CType(MyBase.Clone,ITQtyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ITQtyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItem_No = Me.Columns("Item No")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnLOCATION = Me.Columns("LOCATION")
            Me.columnQTY = Me.Columns("QTY")
        End Sub
        
        Private Sub InitClass()
            Me.columnItem_No = New DataColumn("Item No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_No)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnLOCATION = New DataColumn("LOCATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCATION)
            Me.columnQTY = New DataColumn("QTY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.Constraints.Add(New UniqueConstraint("dsItemsKey1", New DataColumn() {Me.columnItem_No}, true))
            Me.columnItem_No.AllowDBNull = false
            Me.columnItem_No.Unique = true
        End Sub
        
        Public Function NewITQtyRow() As ITQtyRow
            Return CType(Me.NewRow,ITQtyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ITQtyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ITQtyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITQtyRowChangedEvent) Is Nothing) Then
                RaiseEvent ITQtyRowChanged(Me, New ITQtyRowChangeEvent(CType(e.Row,ITQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITQtyRowChangingEvent) Is Nothing) Then
                RaiseEvent ITQtyRowChanging(Me, New ITQtyRowChangeEvent(CType(e.Row,ITQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITQtyRowDeletedEvent) Is Nothing) Then
                RaiseEvent ITQtyRowDeleted(Me, New ITQtyRowChangeEvent(CType(e.Row,ITQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITQtyRowDeletingEvent) Is Nothing) Then
                RaiseEvent ITQtyRowDeleting(Me, New ITQtyRowChangeEvent(CType(e.Row,ITQtyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveITQtyRow(ByVal row As ITQtyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ITQtyRow
        Inherits DataRow
        
        Private tableITQty As ITQtyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableITQty = CType(Me.Table,ITQtyDataTable)
        End Sub
        
        Public Property Item_No As String
            Get
                Return CType(Me(Me.tableITQty.Item_NoColumn),String)
            End Get
            Set
                Me(Me.tableITQty.Item_NoColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tableITQty.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITQty.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property LOCATION As String
            Get
                Try 
                    Return CType(Me(Me.tableITQty.LOCATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITQty.LOCATIONColumn) = value
            End Set
        End Property
        
        Public Property QTY As String
            Get
                Try 
                    Return CType(Me(Me.tableITQty.QTYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITQty.QTYColumn) = value
            End Set
        End Property
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableITQty.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableITQty.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableITQty.LOCATIONColumn)
        End Function
        
        Public Sub SetLOCATIONNull()
            Me(Me.tableITQty.LOCATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableITQty.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableITQty.QTYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ITQtyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ITQtyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ITQtyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ITQtyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServiceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnService As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnType_of_Service As DataColumn
        
        Private columnCategory As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columnAttachment_Service As DataColumn
        
        Private columnStyle As DataColumn
        
        Private columnPrice_1 As DataColumn
        
        Private columnPrice_2 As DataColumn
        
        Private columnPrice_3 As DataColumn
        
        Private columnPrice_4 As DataColumn
        
        Private columnPrice_5 As DataColumn
        
        Private columnPrice_6 As DataColumn
        
        Private columnRequire_Technician As DataColumn
        
        Private columnCharge_Shop_Supplies As DataColumn
        
        Private columnReminder As DataColumn
        
        Private columnSchedule As DataColumn
        
        Private columnCost As DataColumn
        
        Private columnAverage_Time As DataColumn
        
        Private columnBay_No As DataColumn
        
        Private columnMiles As DataColumn
        
        Private columnDays As DataColumn
        
        Friend Sub New()
            MyBase.New("Service")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ServiceColumn As DataColumn
            Get
                Return Me.columnService
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property Type_of_ServiceColumn As DataColumn
            Get
                Return Me.columnType_of_Service
            End Get
        End Property
        
        Friend ReadOnly Property CategoryColumn As DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property Attachment_ServiceColumn As DataColumn
            Get
                Return Me.columnAttachment_Service
            End Get
        End Property
        
        Friend ReadOnly Property StyleColumn As DataColumn
            Get
                Return Me.columnStyle
            End Get
        End Property
        
        Friend ReadOnly Property Price_1Column As DataColumn
            Get
                Return Me.columnPrice_1
            End Get
        End Property
        
        Friend ReadOnly Property Price_2Column As DataColumn
            Get
                Return Me.columnPrice_2
            End Get
        End Property
        
        Friend ReadOnly Property Price_3Column As DataColumn
            Get
                Return Me.columnPrice_3
            End Get
        End Property
        
        Friend ReadOnly Property Price_4Column As DataColumn
            Get
                Return Me.columnPrice_4
            End Get
        End Property
        
        Friend ReadOnly Property Price_5Column As DataColumn
            Get
                Return Me.columnPrice_5
            End Get
        End Property
        
        Friend ReadOnly Property Price_6Column As DataColumn
            Get
                Return Me.columnPrice_6
            End Get
        End Property
        
        Friend ReadOnly Property Require_TechnicianColumn As DataColumn
            Get
                Return Me.columnRequire_Technician
            End Get
        End Property
        
        Friend ReadOnly Property Charge_Shop_SuppliesColumn As DataColumn
            Get
                Return Me.columnCharge_Shop_Supplies
            End Get
        End Property
        
        Friend ReadOnly Property ReminderColumn As DataColumn
            Get
                Return Me.columnReminder
            End Get
        End Property
        
        Friend ReadOnly Property ScheduleColumn As DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Friend ReadOnly Property Average_TimeColumn As DataColumn
            Get
                Return Me.columnAverage_Time
            End Get
        End Property
        
        Friend ReadOnly Property Bay_NoColumn As DataColumn
            Get
                Return Me.columnBay_No
            End Get
        End Property
        
        Friend ReadOnly Property MilesColumn As DataColumn
            Get
                Return Me.columnMiles
            End Get
        End Property
        
        Friend ReadOnly Property DaysColumn As DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ServiceRow
            Get
                Return CType(Me.Rows(index),ServiceRow)
            End Get
        End Property
        
        Public Event ServiceRowChanged As ServiceRowChangeEventHandler
        
        Public Event ServiceRowChanging As ServiceRowChangeEventHandler
        
        Public Event ServiceRowDeleted As ServiceRowChangeEventHandler
        
        Public Event ServiceRowDeleting As ServiceRowChangeEventHandler
        
        Public Overloads Sub AddServiceRow(ByVal row As ServiceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddServiceRow( _
                    ByVal Service As String,  _
                    ByVal Description As String,  _
                    ByVal Type_of_Service As String,  _
                    ByVal Category As String,  _
                    ByVal Taxable As String,  _
                    ByVal Attachment_Service As String,  _
                    ByVal Style As String,  _
                    ByVal Price_1 As Decimal,  _
                    ByVal Price_2 As Decimal,  _
                    ByVal Price_3 As Decimal,  _
                    ByVal Price_4 As Decimal,  _
                    ByVal Price_5 As Decimal,  _
                    ByVal Price_6 As Decimal,  _
                    ByVal Require_Technician As String,  _
                    ByVal Charge_Shop_Supplies As String,  _
                    ByVal Reminder As String,  _
                    ByVal Schedule As String,  _
                    ByVal Cost As Decimal,  _
                    ByVal Average_Time As String,  _
                    ByVal Bay_No As String,  _
                    ByVal Miles As String,  _
                    ByVal Days As String) As ServiceRow
            Dim rowServiceRow As ServiceRow = CType(Me.NewRow,ServiceRow)
            rowServiceRow.ItemArray = New Object() {Service, Description, Type_of_Service, Category, Taxable, Attachment_Service, Style, Price_1, Price_2, Price_3, Price_4, Price_5, Price_6, Require_Technician, Charge_Shop_Supplies, Reminder, Schedule, Cost, Average_Time, Bay_No, Miles, Days}
            Me.Rows.Add(rowServiceRow)
            Return rowServiceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ServiceDataTable = CType(MyBase.Clone,ServiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ServiceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnService = Me.Columns("Service")
            Me.columnDescription = Me.Columns("Description")
            Me.columnType_of_Service = Me.Columns("Type of Service")
            Me.columnCategory = Me.Columns("Category")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columnAttachment_Service = Me.Columns("Attachment Service")
            Me.columnStyle = Me.Columns("Style")
            Me.columnPrice_1 = Me.Columns("Price 1")
            Me.columnPrice_2 = Me.Columns("Price 2")
            Me.columnPrice_3 = Me.Columns("Price 3")
            Me.columnPrice_4 = Me.Columns("Price 4")
            Me.columnPrice_5 = Me.Columns("Price 5")
            Me.columnPrice_6 = Me.Columns("Price 6")
            Me.columnRequire_Technician = Me.Columns("Require Technician")
            Me.columnCharge_Shop_Supplies = Me.Columns("Charge Shop Supplies")
            Me.columnReminder = Me.Columns("Reminder")
            Me.columnSchedule = Me.Columns("Schedule")
            Me.columnCost = Me.Columns("Cost")
            Me.columnAverage_Time = Me.Columns("Average Time")
            Me.columnBay_No = Me.Columns("Bay No")
            Me.columnMiles = Me.Columns("Miles")
            Me.columnDays = Me.Columns("Days")
        End Sub
        
        Private Sub InitClass()
            Me.columnService = New DataColumn("Service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnType_of_Service = New DataColumn("Type of Service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType_of_Service)
            Me.columnCategory = New DataColumn("Category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columnAttachment_Service = New DataColumn("Attachment Service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttachment_Service)
            Me.columnStyle = New DataColumn("Style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStyle)
            Me.columnPrice_1 = New DataColumn("Price 1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_1)
            Me.columnPrice_2 = New DataColumn("Price 2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_2)
            Me.columnPrice_3 = New DataColumn("Price 3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_3)
            Me.columnPrice_4 = New DataColumn("Price 4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_4)
            Me.columnPrice_5 = New DataColumn("Price 5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_5)
            Me.columnPrice_6 = New DataColumn("Price 6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice_6)
            Me.columnRequire_Technician = New DataColumn("Require Technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRequire_Technician)
            Me.columnCharge_Shop_Supplies = New DataColumn("Charge Shop Supplies", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Shop_Supplies)
            Me.columnReminder = New DataColumn("Reminder", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReminder)
            Me.columnSchedule = New DataColumn("Schedule", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchedule)
            Me.columnCost = New DataColumn("Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.columnAverage_Time = New DataColumn("Average Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAverage_Time)
            Me.columnBay_No = New DataColumn("Bay No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBay_No)
            Me.columnMiles = New DataColumn("Miles", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiles)
            Me.columnDays = New DataColumn("Days", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDays)
        End Sub
        
        Public Function NewServiceRow() As ServiceRow
            Return CType(Me.NewRow,ServiceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ServiceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ServiceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ServiceRowChangedEvent) Is Nothing) Then
                RaiseEvent ServiceRowChanged(Me, New ServiceRowChangeEvent(CType(e.Row,ServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ServiceRowChangingEvent) Is Nothing) Then
                RaiseEvent ServiceRowChanging(Me, New ServiceRowChangeEvent(CType(e.Row,ServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ServiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent ServiceRowDeleted(Me, New ServiceRowChangeEvent(CType(e.Row,ServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ServiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent ServiceRowDeleting(Me, New ServiceRowChangeEvent(CType(e.Row,ServiceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveServiceRow(ByVal row As ServiceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServiceRow
        Inherits DataRow
        
        Private tableService As ServiceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableService = CType(Me.Table,ServiceDataTable)
        End Sub
        
        Public Property Service As String
            Get
                Try 
                    Return CType(Me(Me.tableService.ServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.ServiceColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableService.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Type_of_Service As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Type_of_ServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Type_of_ServiceColumn) = value
            End Set
        End Property
        
        Public Property Category As String
            Get
                Try 
                    Return CType(Me(Me.tableService.CategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.CategoryColumn) = value
            End Set
        End Property
        
        Public Property Taxable As String
            Get
                Try 
                    Return CType(Me(Me.tableService.TaxableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.TaxableColumn) = value
            End Set
        End Property
        
        Public Property Attachment_Service As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Attachment_ServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Attachment_ServiceColumn) = value
            End Set
        End Property
        
        Public Property Style As String
            Get
                Try 
                    Return CType(Me(Me.tableService.StyleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.StyleColumn) = value
            End Set
        End Property
        
        Public Property Price_1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_1Column) = value
            End Set
        End Property
        
        Public Property Price_2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_2Column) = value
            End Set
        End Property
        
        Public Property Price_3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_3Column) = value
            End Set
        End Property
        
        Public Property Price_4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_4Column) = value
            End Set
        End Property
        
        Public Property Price_5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_5Column) = value
            End Set
        End Property
        
        Public Property Price_6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.Price_6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Price_6Column) = value
            End Set
        End Property
        
        Public Property Require_Technician As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Require_TechnicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Require_TechnicianColumn) = value
            End Set
        End Property
        
        Public Property Charge_Shop_Supplies As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Charge_Shop_SuppliesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Charge_Shop_SuppliesColumn) = value
            End Set
        End Property
        
        Public Property Reminder As String
            Get
                Try 
                    Return CType(Me(Me.tableService.ReminderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.ReminderColumn) = value
            End Set
        End Property
        
        Public Property Schedule As String
            Get
                Try 
                    Return CType(Me(Me.tableService.ScheduleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.ScheduleColumn) = value
            End Set
        End Property
        
        Public Property Cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableService.CostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.CostColumn) = value
            End Set
        End Property
        
        Public Property Average_Time As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Average_TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Average_TimeColumn) = value
            End Set
        End Property
        
        Public Property Bay_No As String
            Get
                Try 
                    Return CType(Me(Me.tableService.Bay_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.Bay_NoColumn) = value
            End Set
        End Property
        
        Public Property Miles As String
            Get
                Try 
                    Return CType(Me(Me.tableService.MilesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.MilesColumn) = value
            End Set
        End Property
        
        Public Property Days As String
            Get
                Try 
                    Return CType(Me(Me.tableService.DaysColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableService.DaysColumn) = value
            End Set
        End Property
        
        Public Function IsServiceNull() As Boolean
            Return Me.IsNull(Me.tableService.ServiceColumn)
        End Function
        
        Public Sub SetServiceNull()
            Me(Me.tableService.ServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableService.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableService.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsType_of_ServiceNull() As Boolean
            Return Me.IsNull(Me.tableService.Type_of_ServiceColumn)
        End Function
        
        Public Sub SetType_of_ServiceNull()
            Me(Me.tableService.Type_of_ServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tableService.CategoryColumn)
        End Function
        
        Public Sub SetCategoryNull()
            Me(Me.tableService.CategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tableService.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tableService.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttachment_ServiceNull() As Boolean
            Return Me.IsNull(Me.tableService.Attachment_ServiceColumn)
        End Function
        
        Public Sub SetAttachment_ServiceNull()
            Me(Me.tableService.Attachment_ServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStyleNull() As Boolean
            Return Me.IsNull(Me.tableService.StyleColumn)
        End Function
        
        Public Sub SetStyleNull()
            Me(Me.tableService.StyleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_1Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_1Column)
        End Function
        
        Public Sub SetPrice_1Null()
            Me(Me.tableService.Price_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_2Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_2Column)
        End Function
        
        Public Sub SetPrice_2Null()
            Me(Me.tableService.Price_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_3Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_3Column)
        End Function
        
        Public Sub SetPrice_3Null()
            Me(Me.tableService.Price_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_4Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_4Column)
        End Function
        
        Public Sub SetPrice_4Null()
            Me(Me.tableService.Price_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_5Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_5Column)
        End Function
        
        Public Sub SetPrice_5Null()
            Me(Me.tableService.Price_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrice_6Null() As Boolean
            Return Me.IsNull(Me.tableService.Price_6Column)
        End Function
        
        Public Sub SetPrice_6Null()
            Me(Me.tableService.Price_6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRequire_TechnicianNull() As Boolean
            Return Me.IsNull(Me.tableService.Require_TechnicianColumn)
        End Function
        
        Public Sub SetRequire_TechnicianNull()
            Me(Me.tableService.Require_TechnicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_Shop_SuppliesNull() As Boolean
            Return Me.IsNull(Me.tableService.Charge_Shop_SuppliesColumn)
        End Function
        
        Public Sub SetCharge_Shop_SuppliesNull()
            Me(Me.tableService.Charge_Shop_SuppliesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReminderNull() As Boolean
            Return Me.IsNull(Me.tableService.ReminderColumn)
        End Function
        
        Public Sub SetReminderNull()
            Me(Me.tableService.ReminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScheduleNull() As Boolean
            Return Me.IsNull(Me.tableService.ScheduleColumn)
        End Function
        
        Public Sub SetScheduleNull()
            Me(Me.tableService.ScheduleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableService.CostColumn)
        End Function
        
        Public Sub SetCostNull()
            Me(Me.tableService.CostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAverage_TimeNull() As Boolean
            Return Me.IsNull(Me.tableService.Average_TimeColumn)
        End Function
        
        Public Sub SetAverage_TimeNull()
            Me(Me.tableService.Average_TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBay_NoNull() As Boolean
            Return Me.IsNull(Me.tableService.Bay_NoColumn)
        End Function
        
        Public Sub SetBay_NoNull()
            Me(Me.tableService.Bay_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMilesNull() As Boolean
            Return Me.IsNull(Me.tableService.MilesColumn)
        End Function
        
        Public Sub SetMilesNull()
            Me(Me.tableService.MilesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDaysNull() As Boolean
            Return Me.IsNull(Me.tableService.DaysColumn)
        End Function
        
        Public Sub SetDaysNull()
            Me(Me.tableService.DaysColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServiceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ServiceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ServiceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ServiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnservice_type As DataColumn
        
        Private columnservice_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_service_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property service_typeColumn As DataColumn
            Get
                Return Me.columnservice_type
            End Get
        End Property
        
        Friend ReadOnly Property service_type_descColumn As DataColumn
            Get
                Return Me.columnservice_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_service_typeRow
            Get
                Return CType(Me.Rows(index),inv_tab_service_typeRow)
            End Get
        End Property
        
        Public Event inv_tab_service_typeRowChanged As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowChanging As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleted As inv_tab_service_typeRowChangeEventHandler
        
        Public Event inv_tab_service_typeRowDeleting As inv_tab_service_typeRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_service_typeRow(ByVal service_type As String, ByVal service_type_desc As String) As inv_tab_service_typeRow
            Dim rowinv_tab_service_typeRow As inv_tab_service_typeRow = CType(Me.NewRow,inv_tab_service_typeRow)
            rowinv_tab_service_typeRow.ItemArray = New Object() {service_type, service_type_desc}
            Me.Rows.Add(rowinv_tab_service_typeRow)
            Return rowinv_tab_service_typeRow
        End Function
        
        Public Function FindByservice_type(ByVal service_type As String) As inv_tab_service_typeRow
            Return CType(Me.Rows.Find(New Object() {service_type}),inv_tab_service_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_service_typeDataTable = CType(MyBase.Clone,inv_tab_service_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_service_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnservice_type = Me.Columns("service_type")
            Me.columnservice_type_desc = Me.Columns("service_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnservice_type = New DataColumn("service_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type)
            Me.columnservice_type_desc = New DataColumn("service_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnservice_type}, true))
            Me.columnservice_type.AllowDBNull = false
            Me.columnservice_type.Unique = true
        End Sub
        
        Public Function Newinv_tab_service_typeRow() As inv_tab_service_typeRow
            Return CType(Me.NewRow,inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_service_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_service_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_service_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanged(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_service_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowChanging(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_service_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleted(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_service_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_service_typeRowDeleting(Me, New inv_tab_service_typeRowChangeEvent(CType(e.Row,inv_tab_service_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_service_typeRow(ByVal row As inv_tab_service_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRow
        Inherits DataRow
        
        Private tableinv_tab_service_type As inv_tab_service_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_service_type = CType(Me.Table,inv_tab_service_typeDataTable)
        End Sub
        
        Public Property service_type As String
            Get
                Return CType(Me(Me.tableinv_tab_service_type.service_typeColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_typeColumn) = value
            End Set
        End Property
        
        Public Property service_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_service_type.service_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_service_type.service_type_descColumn) = value
            End Set
        End Property
        
        Public Function Isservice_type_descNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_service_type.service_type_descColumn)
        End Function
        
        Public Sub Setservice_type_descNull()
            Me(Me.tableinv_tab_service_type.service_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_service_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_service_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_service_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_service_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_service As DataColumn
        
        Private columndesc_service As DataColumn
        
        Private columnext_desc As DataColumn
        
        Private columnservice_type As DataColumn
        
        Private columnservice_category As DataColumn
        
        Private columncost As DataColumn
        
        Private columnuse_cost As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columnrequire_technician As DataColumn
        
        Private columncharge_shop_supply As DataColumn
        
        Private columnschedule As DataColumn
        
        Private columnavg_time As DataColumn
        
        Private columnuse_avg_time As DataColumn
        
        Private columnbay_no As DataColumn
        
        Private columnuse_bay_no As DataColumn
        
        Private columnreminder As DataColumn
        
        Private columnmiles As DataColumn
        
        Private columndays As DataColumn
        
        Private columntype_b_t_d_v_r As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_labor_service")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_serviceColumn As DataColumn
            Get
                Return Me.columncod_service
            End Get
        End Property
        
        Friend ReadOnly Property desc_serviceColumn As DataColumn
            Get
                Return Me.columndesc_service
            End Get
        End Property
        
        Friend ReadOnly Property ext_descColumn As DataColumn
            Get
                Return Me.columnext_desc
            End Get
        End Property
        
        Friend ReadOnly Property service_typeColumn As DataColumn
            Get
                Return Me.columnservice_type
            End Get
        End Property
        
        Friend ReadOnly Property service_categoryColumn As DataColumn
            Get
                Return Me.columnservice_category
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property use_costColumn As DataColumn
            Get
                Return Me.columnuse_cost
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property require_technicianColumn As DataColumn
            Get
                Return Me.columnrequire_technician
            End Get
        End Property
        
        Friend ReadOnly Property charge_shop_supplyColumn As DataColumn
            Get
                Return Me.columncharge_shop_supply
            End Get
        End Property
        
        Friend ReadOnly Property scheduleColumn As DataColumn
            Get
                Return Me.columnschedule
            End Get
        End Property
        
        Friend ReadOnly Property avg_timeColumn As DataColumn
            Get
                Return Me.columnavg_time
            End Get
        End Property
        
        Friend ReadOnly Property use_avg_timeColumn As DataColumn
            Get
                Return Me.columnuse_avg_time
            End Get
        End Property
        
        Friend ReadOnly Property bay_noColumn As DataColumn
            Get
                Return Me.columnbay_no
            End Get
        End Property
        
        Friend ReadOnly Property use_bay_noColumn As DataColumn
            Get
                Return Me.columnuse_bay_no
            End Get
        End Property
        
        Friend ReadOnly Property reminderColumn As DataColumn
            Get
                Return Me.columnreminder
            End Get
        End Property
        
        Friend ReadOnly Property milesColumn As DataColumn
            Get
                Return Me.columnmiles
            End Get
        End Property
        
        Friend ReadOnly Property daysColumn As DataColumn
            Get
                Return Me.columndays
            End Get
        End Property
        
        Friend ReadOnly Property type_b_t_d_v_rColumn As DataColumn
            Get
                Return Me.columntype_b_t_d_v_r
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_labor_serviceRow
            Get
                Return CType(Me.Rows(index),inv_tab_labor_serviceRow)
            End Get
        End Property
        
        Public Event inv_tab_labor_serviceRowChanged As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowChanging As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleted As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Event inv_tab_labor_serviceRowDeleting As inv_tab_labor_serviceRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_labor_serviceRow( _
                    ByVal cod_service As String,  _
                    ByVal desc_service As String,  _
                    ByVal ext_desc As String,  _
                    ByVal service_type As String,  _
                    ByVal service_category As String,  _
                    ByVal cost As Single,  _
                    ByVal use_cost As Boolean,  _
                    ByVal taxable As Boolean,  _
                    ByVal require_technician As Boolean,  _
                    ByVal charge_shop_supply As Boolean,  _
                    ByVal schedule As Boolean,  _
                    ByVal avg_time As Single,  _
                    ByVal use_avg_time As Boolean,  _
                    ByVal bay_no As Short,  _
                    ByVal use_bay_no As Boolean,  _
                    ByVal reminder As Boolean,  _
                    ByVal miles As Single,  _
                    ByVal days As Single,  _
                    ByVal type_b_t_d_v_r As String) As inv_tab_labor_serviceRow
            Dim rowinv_tab_labor_serviceRow As inv_tab_labor_serviceRow = CType(Me.NewRow,inv_tab_labor_serviceRow)
            rowinv_tab_labor_serviceRow.ItemArray = New Object() {cod_service, desc_service, ext_desc, service_type, service_category, cost, use_cost, taxable, require_technician, charge_shop_supply, schedule, avg_time, use_avg_time, bay_no, use_bay_no, reminder, miles, days, type_b_t_d_v_r}
            Me.Rows.Add(rowinv_tab_labor_serviceRow)
            Return rowinv_tab_labor_serviceRow
        End Function
        
        Public Function FindBycod_service(ByVal cod_service As String) As inv_tab_labor_serviceRow
            Return CType(Me.Rows.Find(New Object() {cod_service}),inv_tab_labor_serviceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_labor_serviceDataTable = CType(MyBase.Clone,inv_tab_labor_serviceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_labor_serviceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_service = Me.Columns("cod_service")
            Me.columndesc_service = Me.Columns("desc_service")
            Me.columnext_desc = Me.Columns("ext_desc")
            Me.columnservice_type = Me.Columns("service_type")
            Me.columnservice_category = Me.Columns("service_category")
            Me.columncost = Me.Columns("cost")
            Me.columnuse_cost = Me.Columns("use_cost")
            Me.columntaxable = Me.Columns("taxable")
            Me.columnrequire_technician = Me.Columns("require_technician")
            Me.columncharge_shop_supply = Me.Columns("charge_shop_supply")
            Me.columnschedule = Me.Columns("schedule")
            Me.columnavg_time = Me.Columns("avg_time")
            Me.columnuse_avg_time = Me.Columns("use_avg_time")
            Me.columnbay_no = Me.Columns("bay_no")
            Me.columnuse_bay_no = Me.Columns("use_bay_no")
            Me.columnreminder = Me.Columns("reminder")
            Me.columnmiles = Me.Columns("miles")
            Me.columndays = Me.Columns("days")
            Me.columntype_b_t_d_v_r = Me.Columns("type_b_t_d_v_r")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_service = New DataColumn("cod_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_service)
            Me.columndesc_service = New DataColumn("desc_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_service)
            Me.columnext_desc = New DataColumn("ext_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnext_desc)
            Me.columnservice_type = New DataColumn("service_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_type)
            Me.columnservice_category = New DataColumn("service_category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_category)
            Me.columncost = New DataColumn("cost", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnuse_cost = New DataColumn("use_cost", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuse_cost)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columnrequire_technician = New DataColumn("require_technician", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrequire_technician)
            Me.columncharge_shop_supply = New DataColumn("charge_shop_supply", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge_shop_supply)
            Me.columnschedule = New DataColumn("schedule", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnschedule)
            Me.columnavg_time = New DataColumn("avg_time", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnavg_time)
            Me.columnuse_avg_time = New DataColumn("use_avg_time", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuse_avg_time)
            Me.columnbay_no = New DataColumn("bay_no", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbay_no)
            Me.columnuse_bay_no = New DataColumn("use_bay_no", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuse_bay_no)
            Me.columnreminder = New DataColumn("reminder", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreminder)
            Me.columnmiles = New DataColumn("miles", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmiles)
            Me.columndays = New DataColumn("days", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays)
            Me.columntype_b_t_d_v_r = New DataColumn("type_b_t_d_v_r", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_b_t_d_v_r)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_service}, true))
            Me.columncod_service.AllowDBNull = false
            Me.columncod_service.Unique = true
        End Sub
        
        Public Function Newinv_tab_labor_serviceRow() As inv_tab_labor_serviceRow
            Return CType(Me.NewRow,inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_labor_serviceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_labor_serviceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_labor_serviceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanged(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_labor_serviceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowChanging(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleted(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_labor_serviceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_serviceRowDeleting(Me, New inv_tab_labor_serviceRowChangeEvent(CType(e.Row,inv_tab_labor_serviceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_labor_serviceRow(ByVal row As inv_tab_labor_serviceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRow
        Inherits DataRow
        
        Private tableinv_tab_labor_service As inv_tab_labor_serviceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_labor_service = CType(Me.Table,inv_tab_labor_serviceDataTable)
        End Sub
        
        Public Property cod_service As String
            Get
                Return CType(Me(Me.tableinv_tab_labor_service.cod_serviceColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.cod_serviceColumn) = value
            End Set
        End Property
        
        Public Property desc_service As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.desc_serviceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.desc_serviceColumn) = value
            End Set
        End Property
        
        Public Property ext_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.ext_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.ext_descColumn) = value
            End Set
        End Property
        
        Public Property service_type As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.service_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.service_typeColumn) = value
            End Set
        End Property
        
        Public Property service_category As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.service_categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.service_categoryColumn) = value
            End Set
        End Property
        
        Public Property cost As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.costColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.costColumn) = value
            End Set
        End Property
        
        Public Property use_cost As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.use_costColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.use_costColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.taxableColumn) = value
            End Set
        End Property
        
        Public Property require_technician As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.require_technicianColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.require_technicianColumn) = value
            End Set
        End Property
        
        Public Property charge_shop_supply As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn) = value
            End Set
        End Property
        
        Public Property schedule As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.scheduleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.scheduleColumn) = value
            End Set
        End Property
        
        Public Property avg_time As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.avg_timeColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.avg_timeColumn) = value
            End Set
        End Property
        
        Public Property use_avg_time As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.use_avg_timeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.use_avg_timeColumn) = value
            End Set
        End Property
        
        Public Property bay_no As Short
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.bay_noColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.bay_noColumn) = value
            End Set
        End Property
        
        Public Property use_bay_no As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.use_bay_noColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.use_bay_noColumn) = value
            End Set
        End Property
        
        Public Property reminder As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.reminderColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.reminderColumn) = value
            End Set
        End Property
        
        Public Property miles As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.milesColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.milesColumn) = value
            End Set
        End Property
        
        Public Property days As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.daysColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.daysColumn) = value
            End Set
        End Property
        
        Public Property type_b_t_d_v_r As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service.type_b_t_d_v_rColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service.type_b_t_d_v_rColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_serviceNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.desc_serviceColumn)
        End Function
        
        Public Sub Setdesc_serviceNull()
            Me(Me.tableinv_tab_labor_service.desc_serviceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isext_descNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.ext_descColumn)
        End Function
        
        Public Sub Setext_descNull()
            Me(Me.tableinv_tab_labor_service.ext_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_typeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.service_typeColumn)
        End Function
        
        Public Sub Setservice_typeNull()
            Me(Me.tableinv_tab_labor_service.service_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_categoryNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.service_categoryColumn)
        End Function
        
        Public Sub Setservice_categoryNull()
            Me(Me.tableinv_tab_labor_service.service_categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableinv_tab_labor_service.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuse_costNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.use_costColumn)
        End Function
        
        Public Sub Setuse_costNull()
            Me(Me.tableinv_tab_labor_service.use_costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableinv_tab_labor_service.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrequire_technicianNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.require_technicianColumn)
        End Function
        
        Public Sub Setrequire_technicianNull()
            Me(Me.tableinv_tab_labor_service.require_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischarge_shop_supplyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.charge_shop_supplyColumn)
        End Function
        
        Public Sub Setcharge_shop_supplyNull()
            Me(Me.tableinv_tab_labor_service.charge_shop_supplyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscheduleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.scheduleColumn)
        End Function
        
        Public Sub SetscheduleNull()
            Me(Me.tableinv_tab_labor_service.scheduleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isavg_timeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.avg_timeColumn)
        End Function
        
        Public Sub Setavg_timeNull()
            Me(Me.tableinv_tab_labor_service.avg_timeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuse_avg_timeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.use_avg_timeColumn)
        End Function
        
        Public Sub Setuse_avg_timeNull()
            Me(Me.tableinv_tab_labor_service.use_avg_timeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbay_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.bay_noColumn)
        End Function
        
        Public Sub Setbay_noNull()
            Me(Me.tableinv_tab_labor_service.bay_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuse_bay_noNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.use_bay_noColumn)
        End Function
        
        Public Sub Setuse_bay_noNull()
            Me(Me.tableinv_tab_labor_service.use_bay_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreminderNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.reminderColumn)
        End Function
        
        Public Sub SetreminderNull()
            Me(Me.tableinv_tab_labor_service.reminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmilesNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.milesColumn)
        End Function
        
        Public Sub SetmilesNull()
            Me(Me.tableinv_tab_labor_service.milesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdaysNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.daysColumn)
        End Function
        
        Public Sub SetdaysNull()
            Me(Me.tableinv_tab_labor_service.daysColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype_b_t_d_v_rNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service.type_b_t_d_v_rColumn)
        End Function
        
        Public Sub Settype_b_t_d_v_rNull()
            Me(Me.tableinv_tab_labor_service.type_b_t_d_v_rColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_serviceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_labor_serviceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_labor_serviceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_labor_serviceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_service_priceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_price_labor_service As DataColumn
        
        Private columncod_service As DataColumn
        
        Private columnstyle As DataColumn
        
        Private columnprice_rate As DataColumn
        
        Private columnprice_level1 As DataColumn
        
        Private columnprice_level2 As DataColumn
        
        Private columnprice_level3 As DataColumn
        
        Private columnprice_level4 As DataColumn
        
        Private columnprice_level5 As DataColumn
        
        Private columnprice_level6 As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_labor_service_price")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_price_labor_serviceColumn As DataColumn
            Get
                Return Me.columnid_price_labor_service
            End Get
        End Property
        
        Friend ReadOnly Property cod_serviceColumn As DataColumn
            Get
                Return Me.columncod_service
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property price_rateColumn As DataColumn
            Get
                Return Me.columnprice_rate
            End Get
        End Property
        
        Friend ReadOnly Property price_level1Column As DataColumn
            Get
                Return Me.columnprice_level1
            End Get
        End Property
        
        Friend ReadOnly Property price_level2Column As DataColumn
            Get
                Return Me.columnprice_level2
            End Get
        End Property
        
        Friend ReadOnly Property price_level3Column As DataColumn
            Get
                Return Me.columnprice_level3
            End Get
        End Property
        
        Friend ReadOnly Property price_level4Column As DataColumn
            Get
                Return Me.columnprice_level4
            End Get
        End Property
        
        Friend ReadOnly Property price_level5Column As DataColumn
            Get
                Return Me.columnprice_level5
            End Get
        End Property
        
        Friend ReadOnly Property price_level6Column As DataColumn
            Get
                Return Me.columnprice_level6
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_labor_service_priceRow
            Get
                Return CType(Me.Rows(index),inv_tab_labor_service_priceRow)
            End Get
        End Property
        
        Public Event inv_tab_labor_service_priceRowChanged As inv_tab_labor_service_priceRowChangeEventHandler
        
        Public Event inv_tab_labor_service_priceRowChanging As inv_tab_labor_service_priceRowChangeEventHandler
        
        Public Event inv_tab_labor_service_priceRowDeleted As inv_tab_labor_service_priceRowChangeEventHandler
        
        Public Event inv_tab_labor_service_priceRowDeleting As inv_tab_labor_service_priceRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_labor_service_priceRow(ByVal row As inv_tab_labor_service_priceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_labor_service_priceRow(ByVal cod_service As String, ByVal style As String, ByVal price_rate As Decimal, ByVal price_level1 As Decimal, ByVal price_level2 As Decimal, ByVal price_level3 As Decimal, ByVal price_level4 As Decimal, ByVal price_level5 As Decimal, ByVal price_level6 As Decimal) As inv_tab_labor_service_priceRow
            Dim rowinv_tab_labor_service_priceRow As inv_tab_labor_service_priceRow = CType(Me.NewRow,inv_tab_labor_service_priceRow)
            rowinv_tab_labor_service_priceRow.ItemArray = New Object() {Nothing, cod_service, style, price_rate, price_level1, price_level2, price_level3, price_level4, price_level5, price_level6}
            Me.Rows.Add(rowinv_tab_labor_service_priceRow)
            Return rowinv_tab_labor_service_priceRow
        End Function
        
        Public Function FindByid_price_labor_service(ByVal id_price_labor_service As Short) As inv_tab_labor_service_priceRow
            Return CType(Me.Rows.Find(New Object() {id_price_labor_service}),inv_tab_labor_service_priceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_labor_service_priceDataTable = CType(MyBase.Clone,inv_tab_labor_service_priceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_labor_service_priceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_price_labor_service = Me.Columns("id_price_labor_service")
            Me.columncod_service = Me.Columns("cod_service")
            Me.columnstyle = Me.Columns("style")
            Me.columnprice_rate = Me.Columns("price_rate")
            Me.columnprice_level1 = Me.Columns("price_level1")
            Me.columnprice_level2 = Me.Columns("price_level2")
            Me.columnprice_level3 = Me.Columns("price_level3")
            Me.columnprice_level4 = Me.Columns("price_level4")
            Me.columnprice_level5 = Me.Columns("price_level5")
            Me.columnprice_level6 = Me.Columns("price_level6")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_price_labor_service = New DataColumn("id_price_labor_service", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_price_labor_service)
            Me.columncod_service = New DataColumn("cod_service", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_service)
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columnprice_rate = New DataColumn("price_rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_rate)
            Me.columnprice_level1 = New DataColumn("price_level1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level1)
            Me.columnprice_level2 = New DataColumn("price_level2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level2)
            Me.columnprice_level3 = New DataColumn("price_level3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level3)
            Me.columnprice_level4 = New DataColumn("price_level4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level4)
            Me.columnprice_level5 = New DataColumn("price_level5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level5)
            Me.columnprice_level6 = New DataColumn("price_level6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice_level6)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_price_labor_service}, true))
            Me.columnid_price_labor_service.AutoIncrement = true
            Me.columnid_price_labor_service.AutoIncrementSeed = 1
            Me.columnid_price_labor_service.AllowDBNull = false
            Me.columnid_price_labor_service.ReadOnly = true
            Me.columnid_price_labor_service.Unique = true
            Me.columncod_service.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_labor_service_priceRow() As inv_tab_labor_service_priceRow
            Return CType(Me.NewRow,inv_tab_labor_service_priceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_labor_service_priceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_labor_service_priceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_labor_service_priceRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_service_priceRowChanged(Me, New inv_tab_labor_service_priceRowChangeEvent(CType(e.Row,inv_tab_labor_service_priceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_labor_service_priceRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_service_priceRowChanging(Me, New inv_tab_labor_service_priceRowChangeEvent(CType(e.Row,inv_tab_labor_service_priceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_labor_service_priceRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_service_priceRowDeleted(Me, New inv_tab_labor_service_priceRowChangeEvent(CType(e.Row,inv_tab_labor_service_priceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_labor_service_priceRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_labor_service_priceRowDeleting(Me, New inv_tab_labor_service_priceRowChangeEvent(CType(e.Row,inv_tab_labor_service_priceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_labor_service_priceRow(ByVal row As inv_tab_labor_service_priceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_service_priceRow
        Inherits DataRow
        
        Private tableinv_tab_labor_service_price As inv_tab_labor_service_priceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_labor_service_price = CType(Me.Table,inv_tab_labor_service_priceDataTable)
        End Sub
        
        Public Property id_price_labor_service As Short
            Get
                Return CType(Me(Me.tableinv_tab_labor_service_price.id_price_labor_serviceColumn),Short)
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.id_price_labor_serviceColumn) = value
            End Set
        End Property
        
        Public Property cod_service As String
            Get
                Return CType(Me(Me.tableinv_tab_labor_service_price.cod_serviceColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.cod_serviceColumn) = value
            End Set
        End Property
        
        Public Property style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.styleColumn) = value
            End Set
        End Property
        
        Public Property price_rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_rateColumn) = value
            End Set
        End Property
        
        Public Property price_level1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level1Column) = value
            End Set
        End Property
        
        Public Property price_level2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level2Column) = value
            End Set
        End Property
        
        Public Property price_level3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level3Column) = value
            End Set
        End Property
        
        Public Property price_level4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level4Column) = value
            End Set
        End Property
        
        Public Property price_level5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level5Column) = value
            End Set
        End Property
        
        Public Property price_level6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_labor_service_price.price_level6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_labor_service_price.price_level6Column) = value
            End Set
        End Property
        
        Public Function IsstyleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.styleColumn)
        End Function
        
        Public Sub SetstyleNull()
            Me(Me.tableinv_tab_labor_service_price.styleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_rateNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_rateColumn)
        End Function
        
        Public Sub Setprice_rateNull()
            Me(Me.tableinv_tab_labor_service_price.price_rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level1Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level1Column)
        End Function
        
        Public Sub Setprice_level1Null()
            Me(Me.tableinv_tab_labor_service_price.price_level1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level2Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level2Column)
        End Function
        
        Public Sub Setprice_level2Null()
            Me(Me.tableinv_tab_labor_service_price.price_level2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level3Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level3Column)
        End Function
        
        Public Sub Setprice_level3Null()
            Me(Me.tableinv_tab_labor_service_price.price_level3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level4Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level4Column)
        End Function
        
        Public Sub Setprice_level4Null()
            Me(Me.tableinv_tab_labor_service_price.price_level4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level5Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level5Column)
        End Function
        
        Public Sub Setprice_level5Null()
            Me(Me.tableinv_tab_labor_service_price.price_level5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isprice_level6Null() As Boolean
            Return Me.IsNull(Me.tableinv_tab_labor_service_price.price_level6Column)
        End Function
        
        Public Sub Setprice_level6Null()
            Me(Me.tableinv_tab_labor_service_price.price_level6Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_labor_service_priceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_labor_service_priceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_labor_service_priceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_labor_service_priceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemtempDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columndesc_item As DataColumn
        
        Private columnBeginQty As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_itemtemp")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property desc_itemColumn As DataColumn
            Get
                Return Me.columndesc_item
            End Get
        End Property
        
        Friend ReadOnly Property BeginQtyColumn As DataColumn
            Get
                Return Me.columnBeginQty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_itemtempRow
            Get
                Return CType(Me.Rows(index),inv_itemtempRow)
            End Get
        End Property
        
        Public Event inv_itemtempRowChanged As inv_itemtempRowChangeEventHandler
        
        Public Event inv_itemtempRowChanging As inv_itemtempRowChangeEventHandler
        
        Public Event inv_itemtempRowDeleted As inv_itemtempRowChangeEventHandler
        
        Public Event inv_itemtempRowDeleting As inv_itemtempRowChangeEventHandler
        
        Public Overloads Sub Addinv_itemtempRow(ByVal row As inv_itemtempRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_itemtempRow(ByVal item_no As String, ByVal desc_item As String, ByVal BeginQty As Decimal) As inv_itemtempRow
            Dim rowinv_itemtempRow As inv_itemtempRow = CType(Me.NewRow,inv_itemtempRow)
            rowinv_itemtempRow.ItemArray = New Object() {item_no, desc_item, BeginQty}
            Me.Rows.Add(rowinv_itemtempRow)
            Return rowinv_itemtempRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_itemtempDataTable = CType(MyBase.Clone,inv_itemtempDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_itemtempDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columndesc_item = Me.Columns("desc_item")
            Me.columnBeginQty = Me.Columns("BeginQty")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columndesc_item = New DataColumn("desc_item", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_item)
            Me.columnBeginQty = New DataColumn("BeginQty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeginQty)
            Me.columnitem_no.AllowDBNull = false
        End Sub
        
        Public Function Newinv_itemtempRow() As inv_itemtempRow
            Return CType(Me.NewRow,inv_itemtempRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_itemtempRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_itemtempRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_itemtempRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_itemtempRowChanged(Me, New inv_itemtempRowChangeEvent(CType(e.Row,inv_itemtempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_itemtempRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_itemtempRowChanging(Me, New inv_itemtempRowChangeEvent(CType(e.Row,inv_itemtempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_itemtempRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_itemtempRowDeleted(Me, New inv_itemtempRowChangeEvent(CType(e.Row,inv_itemtempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_itemtempRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_itemtempRowDeleting(Me, New inv_itemtempRowChangeEvent(CType(e.Row,inv_itemtempRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_itemtempRow(ByVal row As inv_itemtempRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemtempRow
        Inherits DataRow
        
        Private tableinv_itemtemp As inv_itemtempDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_itemtemp = CType(Me.Table,inv_itemtempDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_itemtemp.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_itemtemp.item_noColumn) = value
            End Set
        End Property
        
        Public Property desc_item As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_itemtemp.desc_itemColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_itemtemp.desc_itemColumn) = value
            End Set
        End Property
        
        Public Property BeginQty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_itemtemp.BeginQtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_itemtemp.BeginQtyColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_itemNull() As Boolean
            Return Me.IsNull(Me.tableinv_itemtemp.desc_itemColumn)
        End Function
        
        Public Sub Setdesc_itemNull()
            Me(Me.tableinv_itemtemp.desc_itemColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeginQtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_itemtemp.BeginQtyColumn)
        End Function
        
        Public Sub SetBeginQtyNull()
            Me(Me.tableinv_itemtemp.BeginQtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_itemtempRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_itemtempRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_itemtempRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_itemtempRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
