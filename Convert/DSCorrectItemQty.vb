'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSCorrectItemQty
    Inherits DataSet
    
    Private tableinv_adjustment_dtl As inv_adjustment_dtlDataTable
    
    Private tableReceipt As ReceiptDataTable
    
    Private table_Return As _ReturnDataTable
    
    Private tableinv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableinv_tab_item_warehouse As inv_tab_item_warehouseDataTable
    
    Private tableCommitedQty As CommitedQtyDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("inv_adjustment_dtl")) Is Nothing) Then
                Me.Tables.Add(New inv_adjustment_dtlDataTable(ds.Tables("inv_adjustment_dtl")))
            End If
            If (Not (ds.Tables("Receipt")) Is Nothing) Then
                Me.Tables.Add(New ReceiptDataTable(ds.Tables("Receipt")))
            End If
            If (Not (ds.Tables("Return")) Is Nothing) Then
                Me.Tables.Add(New _ReturnDataTable(ds.Tables("Return")))
            End If
            If (Not (ds.Tables("inv_sales_transfer_dtl")) Is Nothing) Then
                Me.Tables.Add(New inv_sales_transfer_dtlDataTable(ds.Tables("inv_sales_transfer_dtl")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("inv_tab_item_warehouse")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_item_warehouseDataTable(ds.Tables("inv_tab_item_warehouse")))
            End If
            If (Not (ds.Tables("CommitedQty")) Is Nothing) Then
                Me.Tables.Add(New CommitedQtyDataTable(ds.Tables("CommitedQty")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_adjustment_dtl As inv_adjustment_dtlDataTable
        Get
            Return Me.tableinv_adjustment_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Receipt As ReceiptDataTable
        Get
            Return Me.tableReceipt
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Return As _ReturnDataTable
        Get
            Return Me.table_Return
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
        Get
            Return Me.tableinv_sales_transfer_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_item_warehouse As inv_tab_item_warehouseDataTable
        Get
            Return Me.tableinv_tab_item_warehouse
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CommitedQty As CommitedQtyDataTable
        Get
            Return Me.tableCommitedQty
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSCorrectItemQty = CType(MyBase.Clone,DSCorrectItemQty)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("inv_adjustment_dtl")) Is Nothing) Then
            Me.Tables.Add(New inv_adjustment_dtlDataTable(ds.Tables("inv_adjustment_dtl")))
        End If
        If (Not (ds.Tables("Receipt")) Is Nothing) Then
            Me.Tables.Add(New ReceiptDataTable(ds.Tables("Receipt")))
        End If
        If (Not (ds.Tables("Return")) Is Nothing) Then
            Me.Tables.Add(New _ReturnDataTable(ds.Tables("Return")))
        End If
        If (Not (ds.Tables("inv_sales_transfer_dtl")) Is Nothing) Then
            Me.Tables.Add(New inv_sales_transfer_dtlDataTable(ds.Tables("inv_sales_transfer_dtl")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("inv_tab_item_warehouse")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_item_warehouseDataTable(ds.Tables("inv_tab_item_warehouse")))
        End If
        If (Not (ds.Tables("CommitedQty")) Is Nothing) Then
            Me.Tables.Add(New CommitedQtyDataTable(ds.Tables("CommitedQty")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableinv_adjustment_dtl = CType(Me.Tables("inv_adjustment_dtl"),inv_adjustment_dtlDataTable)
        If (Not (Me.tableinv_adjustment_dtl) Is Nothing) Then
            Me.tableinv_adjustment_dtl.InitVars
        End If
        Me.tableReceipt = CType(Me.Tables("Receipt"),ReceiptDataTable)
        If (Not (Me.tableReceipt) Is Nothing) Then
            Me.tableReceipt.InitVars
        End If
        Me.table_Return = CType(Me.Tables("Return"),_ReturnDataTable)
        If (Not (Me.table_Return) Is Nothing) Then
            Me.table_Return.InitVars
        End If
        Me.tableinv_sales_transfer_dtl = CType(Me.Tables("inv_sales_transfer_dtl"),inv_sales_transfer_dtlDataTable)
        If (Not (Me.tableinv_sales_transfer_dtl) Is Nothing) Then
            Me.tableinv_sales_transfer_dtl.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableinv_tab_item_warehouse = CType(Me.Tables("inv_tab_item_warehouse"),inv_tab_item_warehouseDataTable)
        If (Not (Me.tableinv_tab_item_warehouse) Is Nothing) Then
            Me.tableinv_tab_item_warehouse.InitVars
        End If
        Me.tableCommitedQty = CType(Me.Tables("CommitedQty"),CommitedQtyDataTable)
        If (Not (Me.tableCommitedQty) Is Nothing) Then
            Me.tableCommitedQty.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSCorrectItemQty"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSCorrectItemQty.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableinv_adjustment_dtl = New inv_adjustment_dtlDataTable
        Me.Tables.Add(Me.tableinv_adjustment_dtl)
        Me.tableReceipt = New ReceiptDataTable
        Me.Tables.Add(Me.tableReceipt)
        Me.table_Return = New _ReturnDataTable
        Me.Tables.Add(Me.table_Return)
        Me.tableinv_sales_transfer_dtl = New inv_sales_transfer_dtlDataTable
        Me.Tables.Add(Me.tableinv_sales_transfer_dtl)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableinv_tab_item_warehouse = New inv_tab_item_warehouseDataTable
        Me.Tables.Add(Me.tableinv_tab_item_warehouse)
        Me.tableCommitedQty = New CommitedQtyDataTable
        Me.Tables.Add(Me.tableCommitedQty)
    End Sub
    
    Private Function ShouldSerializeinv_adjustment_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReceipt() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Return() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_sales_transfer_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_item_warehouse() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCommitedQty() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub inv_adjustment_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_adjustment_dtlRowChangeEvent)
    
    Public Delegate Sub ReceiptRowChangeEventHandler(ByVal sender As Object, ByVal e As ReceiptRowChangeEvent)
    
    Public Delegate Sub _ReturnRowChangeEventHandler(ByVal sender As Object, ByVal e As _ReturnRowChangeEvent)
    
    Public Delegate Sub inv_sales_transfer_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_sales_transfer_dtlRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub inv_tab_item_warehouseRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_item_warehouseRowChangeEvent)
    
    Public Delegate Sub CommitedQtyRowChangeEventHandler(ByVal sender As Object, ByVal e As CommitedQtyRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_adjustment_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnQty As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_adjustment_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_adjustment_dtlRow
            Get
                Return CType(Me.Rows(index),inv_adjustment_dtlRow)
            End Get
        End Property
        
        Public Event inv_adjustment_dtlRowChanged As inv_adjustment_dtlRowChangeEventHandler
        
        Public Event inv_adjustment_dtlRowChanging As inv_adjustment_dtlRowChangeEventHandler
        
        Public Event inv_adjustment_dtlRowDeleted As inv_adjustment_dtlRowChangeEventHandler
        
        Public Event inv_adjustment_dtlRowDeleting As inv_adjustment_dtlRowChangeEventHandler
        
        Public Overloads Sub Addinv_adjustment_dtlRow(ByVal row As inv_adjustment_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_adjustment_dtlRow(ByVal item_no As String, ByVal Qty As Integer) As inv_adjustment_dtlRow
            Dim rowinv_adjustment_dtlRow As inv_adjustment_dtlRow = CType(Me.NewRow,inv_adjustment_dtlRow)
            rowinv_adjustment_dtlRow.ItemArray = New Object() {item_no, Qty}
            Me.Rows.Add(rowinv_adjustment_dtlRow)
            Return rowinv_adjustment_dtlRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As inv_adjustment_dtlRow
            Return CType(Me.Rows.Find(New Object() {item_no}),inv_adjustment_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_adjustment_dtlDataTable = CType(MyBase.Clone,inv_adjustment_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_adjustment_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnQty = Me.Columns("Qty")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnQty = New DataColumn("Qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey2", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnQty.ReadOnly = true
        End Sub
        
        Public Function Newinv_adjustment_dtlRow() As inv_adjustment_dtlRow
            Return CType(Me.NewRow,inv_adjustment_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_adjustment_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_adjustment_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_adjustment_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_adjustment_dtlRowChanged(Me, New inv_adjustment_dtlRowChangeEvent(CType(e.Row,inv_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_adjustment_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_adjustment_dtlRowChanging(Me, New inv_adjustment_dtlRowChangeEvent(CType(e.Row,inv_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_adjustment_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_adjustment_dtlRowDeleted(Me, New inv_adjustment_dtlRowChangeEvent(CType(e.Row,inv_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_adjustment_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_adjustment_dtlRowDeleting(Me, New inv_adjustment_dtlRowChangeEvent(CType(e.Row,inv_adjustment_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_adjustment_dtlRow(ByVal row As inv_adjustment_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_adjustment_dtlRow
        Inherits DataRow
        
        Private tableinv_adjustment_dtl As inv_adjustment_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_adjustment_dtl = CType(Me.Table,inv_adjustment_dtlDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_adjustment_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_adjustment_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property Qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinv_adjustment_dtl.QtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_adjustment_dtl.QtyColumn) = value
            End Set
        End Property
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_adjustment_dtl.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableinv_adjustment_dtl.QtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_adjustment_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_adjustment_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_adjustment_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_adjustment_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReceiptDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("Receipt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReceiptRow
            Get
                Return CType(Me.Rows(index),ReceiptRow)
            End Get
        End Property
        
        Public Event ReceiptRowChanged As ReceiptRowChangeEventHandler
        
        Public Event ReceiptRowChanging As ReceiptRowChangeEventHandler
        
        Public Event ReceiptRowDeleted As ReceiptRowChangeEventHandler
        
        Public Event ReceiptRowDeleting As ReceiptRowChangeEventHandler
        
        Public Overloads Sub AddReceiptRow(ByVal row As ReceiptRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReceiptRow(ByVal item_no As String, ByVal qty As Double) As ReceiptRow
            Dim rowReceiptRow As ReceiptRow = CType(Me.NewRow,ReceiptRow)
            rowReceiptRow.ItemArray = New Object() {item_no, qty}
            Me.Rows.Add(rowReceiptRow)
            Return rowReceiptRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As ReceiptRow
            Return CType(Me.Rows.Find(New Object() {item_no}),ReceiptRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReceiptDataTable = CType(MyBase.Clone,ReceiptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReceiptDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey1", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnqty.ReadOnly = true
        End Sub
        
        Public Function NewReceiptRow() As ReceiptRow
            Return CType(Me.NewRow,ReceiptRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReceiptRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReceiptRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReceiptRowChangedEvent) Is Nothing) Then
                RaiseEvent ReceiptRowChanged(Me, New ReceiptRowChangeEvent(CType(e.Row,ReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReceiptRowChangingEvent) Is Nothing) Then
                RaiseEvent ReceiptRowChanging(Me, New ReceiptRowChangeEvent(CType(e.Row,ReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReceiptRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReceiptRowDeleted(Me, New ReceiptRowChangeEvent(CType(e.Row,ReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReceiptRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReceiptRowDeleting(Me, New ReceiptRowChangeEvent(CType(e.Row,ReceiptRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReceiptRow(ByVal row As ReceiptRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReceiptRow
        Inherits DataRow
        
        Private tableReceipt As ReceiptDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReceipt = CType(Me.Table,ReceiptDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableReceipt.item_noColumn),String)
            End Get
            Set
                Me(Me.tableReceipt.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Double
            Get
                Try 
                    Return CType(Me(Me.tableReceipt.qtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceipt.qtyColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableReceipt.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableReceipt.qtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReceiptRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReceiptRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReceiptRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReceiptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ReturnDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("Return")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ReturnRow
            Get
                Return CType(Me.Rows(index),_ReturnRow)
            End Get
        End Property
        
        Public Event _ReturnRowChanged As _ReturnRowChangeEventHandler
        
        Public Event _ReturnRowChanging As _ReturnRowChangeEventHandler
        
        Public Event _ReturnRowDeleted As _ReturnRowChangeEventHandler
        
        Public Event _ReturnRowDeleting As _ReturnRowChangeEventHandler
        
        Public Overloads Sub Add_ReturnRow(ByVal row As _ReturnRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ReturnRow(ByVal item_no As String, ByVal qty As Double) As _ReturnRow
            Dim row_ReturnRow As _ReturnRow = CType(Me.NewRow,_ReturnRow)
            row_ReturnRow.ItemArray = New Object() {item_no, qty}
            Me.Rows.Add(row_ReturnRow)
            Return row_ReturnRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As _ReturnRow
            Return CType(Me.Rows.Find(New Object() {item_no}),_ReturnRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ReturnDataTable = CType(MyBase.Clone,_ReturnDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ReturnDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnqty = New DataColumn("qty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey3", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnqty.ReadOnly = true
        End Sub
        
        Public Function New_ReturnRow() As _ReturnRow
            Return CType(Me.NewRow,_ReturnRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ReturnRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ReturnRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ReturnRowChangedEvent) Is Nothing) Then
                RaiseEvent _ReturnRowChanged(Me, New _ReturnRowChangeEvent(CType(e.Row,_ReturnRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ReturnRowChangingEvent) Is Nothing) Then
                RaiseEvent _ReturnRowChanging(Me, New _ReturnRowChangeEvent(CType(e.Row,_ReturnRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ReturnRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ReturnRowDeleted(Me, New _ReturnRowChangeEvent(CType(e.Row,_ReturnRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ReturnRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ReturnRowDeleting(Me, New _ReturnRowChangeEvent(CType(e.Row,_ReturnRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ReturnRow(ByVal row As _ReturnRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ReturnRow
        Inherits DataRow
        
        Private table_Return As _ReturnDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Return = CType(Me.Table,_ReturnDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.table_Return.item_noColumn),String)
            End Get
            Set
                Me(Me.table_Return.item_noColumn) = value
            End Set
        End Property
        
        Public Property qty As Double
            Get
                Try 
                    Return CType(Me(Me.table_Return.qtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Return.qtyColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.table_Return.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.table_Return.qtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ReturnRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ReturnRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ReturnRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ReturnRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columnQty As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_sales_transfer_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_sales_transfer_dtlRow
            Get
                Return CType(Me.Rows(index),inv_sales_transfer_dtlRow)
            End Get
        End Property
        
        Public Event inv_sales_transfer_dtlRowChanged As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowChanging As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowDeleted As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Event inv_sales_transfer_dtlRowDeleting As inv_sales_transfer_dtlRowChangeEventHandler
        
        Public Overloads Sub Addinv_sales_transfer_dtlRow(ByVal row As inv_sales_transfer_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_sales_transfer_dtlRow(ByVal item_no As String, ByVal Qty As Decimal) As inv_sales_transfer_dtlRow
            Dim rowinv_sales_transfer_dtlRow As inv_sales_transfer_dtlRow = CType(Me.NewRow,inv_sales_transfer_dtlRow)
            rowinv_sales_transfer_dtlRow.ItemArray = New Object() {item_no, Qty}
            Me.Rows.Add(rowinv_sales_transfer_dtlRow)
            Return rowinv_sales_transfer_dtlRow
        End Function
        
        Public Function FindByitem_no(ByVal item_no As String) As inv_sales_transfer_dtlRow
            Return CType(Me.Rows.Find(New Object() {item_no}),inv_sales_transfer_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_sales_transfer_dtlDataTable = CType(MyBase.Clone,inv_sales_transfer_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_sales_transfer_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columnQty = Me.Columns("Qty")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columnQty = New DataColumn("Qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey4", New DataColumn() {Me.columnitem_no}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columnitem_no.Unique = true
            Me.columnQty.ReadOnly = true
        End Sub
        
        Public Function Newinv_sales_transfer_dtlRow() As inv_sales_transfer_dtlRow
            Return CType(Me.NewRow,inv_sales_transfer_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_sales_transfer_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_sales_transfer_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_sales_transfer_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowChanged(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_sales_transfer_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowChanging(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_sales_transfer_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowDeleted(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_sales_transfer_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_sales_transfer_dtlRowDeleting(Me, New inv_sales_transfer_dtlRowChangeEvent(CType(e.Row,inv_sales_transfer_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_sales_transfer_dtlRow(ByVal row As inv_sales_transfer_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlRow
        Inherits DataRow
        
        Private tableinv_sales_transfer_dtl As inv_sales_transfer_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_sales_transfer_dtl = CType(Me.Table,inv_sales_transfer_dtlDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_sales_transfer_dtl.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.item_noColumn) = value
            End Set
        End Property
        
        Public Property Qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableinv_sales_transfer_dtl.QtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_sales_transfer_dtl.QtyColumn) = value
            End Set
        End Property
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_sales_transfer_dtl.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableinv_sales_transfer_dtl.QtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_sales_transfer_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_sales_transfer_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_sales_transfer_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_sales_transfer_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_select As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow(ByVal cod_select As String, ByVal qty As Decimal) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {cod_select, qty}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function FindBycod_select(ByVal cod_select As String) As service_center_dtlRow
            Return CType(Me.Rows.Find(New Object() {cod_select}),service_center_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey5", New DataColumn() {Me.columncod_select}, true))
            Me.columncod_select.AllowDBNull = false
            Me.columncod_select.Unique = true
            Me.columncod_select.DefaultValue = "  "
            Me.columnqty.ReadOnly = true
            Me.columnqty.DefaultValue = 0
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property cod_select As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.cod_selectColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                If Me.IsqtyNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableservice_center_dtl.qtyColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableservice_center_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableservice_center_dtl.qtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitem_no As DataColumn
        
        Private columncod_warehouse As DataColumn
        
        Private columnon_hand As DataColumn
        
        Private columnBegining_Balance_Qty As DataColumn
        
        Private columncod_location As DataColumn
        
        Private columncomitted As DataColumn
        
        Private columnon_order As DataColumn
        
        Private columnmin_stock As DataColumn
        
        Private columnmax_stock As DataColumn
        
        Private columnreorde As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_item_warehouse")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property item_noColumn As DataColumn
            Get
                Return Me.columnitem_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_warehouseColumn As DataColumn
            Get
                Return Me.columncod_warehouse
            End Get
        End Property
        
        Friend ReadOnly Property on_handColumn As DataColumn
            Get
                Return Me.columnon_hand
            End Get
        End Property
        
        Friend ReadOnly Property Begining_Balance_QtyColumn As DataColumn
            Get
                Return Me.columnBegining_Balance_Qty
            End Get
        End Property
        
        Friend ReadOnly Property cod_locationColumn As DataColumn
            Get
                Return Me.columncod_location
            End Get
        End Property
        
        Friend ReadOnly Property comittedColumn As DataColumn
            Get
                Return Me.columncomitted
            End Get
        End Property
        
        Friend ReadOnly Property on_orderColumn As DataColumn
            Get
                Return Me.columnon_order
            End Get
        End Property
        
        Friend ReadOnly Property min_stockColumn As DataColumn
            Get
                Return Me.columnmin_stock
            End Get
        End Property
        
        Friend ReadOnly Property max_stockColumn As DataColumn
            Get
                Return Me.columnmax_stock
            End Get
        End Property
        
        Friend ReadOnly Property reordeColumn As DataColumn
            Get
                Return Me.columnreorde
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_item_warehouseRow
            Get
                Return CType(Me.Rows(index),inv_tab_item_warehouseRow)
            End Get
        End Property
        
        Public Event inv_tab_item_warehouseRowChanged As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowChanging As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowDeleted As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Event inv_tab_item_warehouseRowDeleting As inv_tab_item_warehouseRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_item_warehouseRow(ByVal row As inv_tab_item_warehouseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_item_warehouseRow(ByVal item_no As String, ByVal cod_warehouse As String, ByVal on_hand As Single, ByVal Begining_Balance_Qty As Single, ByVal cod_location As String, ByVal comitted As Single, ByVal on_order As Single, ByVal min_stock As Single, ByVal max_stock As Single, ByVal reorde As Single) As inv_tab_item_warehouseRow
            Dim rowinv_tab_item_warehouseRow As inv_tab_item_warehouseRow = CType(Me.NewRow,inv_tab_item_warehouseRow)
            rowinv_tab_item_warehouseRow.ItemArray = New Object() {item_no, cod_warehouse, on_hand, Begining_Balance_Qty, cod_location, comitted, on_order, min_stock, max_stock, reorde}
            Me.Rows.Add(rowinv_tab_item_warehouseRow)
            Return rowinv_tab_item_warehouseRow
        End Function
        
        Public Function FindByitem_nocod_warehouse(ByVal item_no As String, ByVal cod_warehouse As String) As inv_tab_item_warehouseRow
            Return CType(Me.Rows.Find(New Object() {item_no, cod_warehouse}),inv_tab_item_warehouseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_item_warehouseDataTable = CType(MyBase.Clone,inv_tab_item_warehouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_item_warehouseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitem_no = Me.Columns("item_no")
            Me.columncod_warehouse = Me.Columns("cod_warehouse")
            Me.columnon_hand = Me.Columns("on_hand")
            Me.columnBegining_Balance_Qty = Me.Columns("Begining_Balance_Qty")
            Me.columncod_location = Me.Columns("cod_location")
            Me.columncomitted = Me.Columns("comitted")
            Me.columnon_order = Me.Columns("on_order")
            Me.columnmin_stock = Me.Columns("min_stock")
            Me.columnmax_stock = Me.Columns("max_stock")
            Me.columnreorde = Me.Columns("reorde")
        End Sub
        
        Private Sub InitClass()
            Me.columnitem_no = New DataColumn("item_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_no)
            Me.columncod_warehouse = New DataColumn("cod_warehouse", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_warehouse)
            Me.columnon_hand = New DataColumn("on_hand", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_hand)
            Me.columnBegining_Balance_Qty = New DataColumn("Begining_Balance_Qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBegining_Balance_Qty)
            Me.columncod_location = New DataColumn("cod_location", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_location)
            Me.columncomitted = New DataColumn("comitted", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomitted)
            Me.columnon_order = New DataColumn("on_order", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnon_order)
            Me.columnmin_stock = New DataColumn("min_stock", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmin_stock)
            Me.columnmax_stock = New DataColumn("max_stock", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmax_stock)
            Me.columnreorde = New DataColumn("reorde", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreorde)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnitem_no, Me.columncod_warehouse}, true))
            Me.columnitem_no.AllowDBNull = false
            Me.columncod_warehouse.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_item_warehouseRow() As inv_tab_item_warehouseRow
            Return CType(Me.NewRow,inv_tab_item_warehouseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_item_warehouseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_item_warehouseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_item_warehouseRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowChanged(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_item_warehouseRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowChanging(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_item_warehouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowDeleted(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_item_warehouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_item_warehouseRowDeleting(Me, New inv_tab_item_warehouseRowChangeEvent(CType(e.Row,inv_tab_item_warehouseRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_item_warehouseRow(ByVal row As inv_tab_item_warehouseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseRow
        Inherits DataRow
        
        Private tableinv_tab_item_warehouse As inv_tab_item_warehouseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_item_warehouse = CType(Me.Table,inv_tab_item_warehouseDataTable)
        End Sub
        
        Public Property item_no As String
            Get
                Return CType(Me(Me.tableinv_tab_item_warehouse.item_noColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.item_noColumn) = value
            End Set
        End Property
        
        Public Property cod_warehouse As String
            Get
                Return CType(Me(Me.tableinv_tab_item_warehouse.cod_warehouseColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.cod_warehouseColumn) = value
            End Set
        End Property
        
        Public Property on_hand As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.on_handColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.on_handColumn) = value
            End Set
        End Property
        
        Public Property Begining_Balance_Qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.Begining_Balance_QtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.Begining_Balance_QtyColumn) = value
            End Set
        End Property
        
        Public Property cod_location As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.cod_locationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.cod_locationColumn) = value
            End Set
        End Property
        
        Public Property comitted As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.comittedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.comittedColumn) = value
            End Set
        End Property
        
        Public Property on_order As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.on_orderColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.on_orderColumn) = value
            End Set
        End Property
        
        Public Property min_stock As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.min_stockColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.min_stockColumn) = value
            End Set
        End Property
        
        Public Property max_stock As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.max_stockColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.max_stockColumn) = value
            End Set
        End Property
        
        Public Property reorde As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_item_warehouse.reordeColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_item_warehouse.reordeColumn) = value
            End Set
        End Property
        
        Public Function Ison_handNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.on_handColumn)
        End Function
        
        Public Sub Seton_handNull()
            Me(Me.tableinv_tab_item_warehouse.on_handColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBegining_Balance_QtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.Begining_Balance_QtyColumn)
        End Function
        
        Public Sub SetBegining_Balance_QtyNull()
            Me(Me.tableinv_tab_item_warehouse.Begining_Balance_QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_locationNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.cod_locationColumn)
        End Function
        
        Public Sub Setcod_locationNull()
            Me(Me.tableinv_tab_item_warehouse.cod_locationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscomittedNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.comittedColumn)
        End Function
        
        Public Sub SetcomittedNull()
            Me(Me.tableinv_tab_item_warehouse.comittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ison_orderNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.on_orderColumn)
        End Function
        
        Public Sub Seton_orderNull()
            Me(Me.tableinv_tab_item_warehouse.on_orderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismin_stockNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.min_stockColumn)
        End Function
        
        Public Sub Setmin_stockNull()
            Me(Me.tableinv_tab_item_warehouse.min_stockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismax_stockNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.max_stockColumn)
        End Function
        
        Public Sub Setmax_stockNull()
            Me(Me.tableinv_tab_item_warehouse.max_stockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreordeNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_item_warehouse.reordeColumn)
        End Function
        
        Public Sub SetreordeNull()
            Me(Me.tableinv_tab_item_warehouse.reordeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_item_warehouseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_item_warehouseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_item_warehouseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_item_warehouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CommitedQtyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_select As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("CommitedQty")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CommitedQtyRow
            Get
                Return CType(Me.Rows(index),CommitedQtyRow)
            End Get
        End Property
        
        Public Event CommitedQtyRowChanged As CommitedQtyRowChangeEventHandler
        
        Public Event CommitedQtyRowChanging As CommitedQtyRowChangeEventHandler
        
        Public Event CommitedQtyRowDeleted As CommitedQtyRowChangeEventHandler
        
        Public Event CommitedQtyRowDeleting As CommitedQtyRowChangeEventHandler
        
        Public Overloads Sub AddCommitedQtyRow(ByVal row As CommitedQtyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCommitedQtyRow(ByVal cod_select As String, ByVal qty As Decimal) As CommitedQtyRow
            Dim rowCommitedQtyRow As CommitedQtyRow = CType(Me.NewRow,CommitedQtyRow)
            rowCommitedQtyRow.ItemArray = New Object() {cod_select, qty}
            Me.Rows.Add(rowCommitedQtyRow)
            Return rowCommitedQtyRow
        End Function
        
        Public Function FindBycod_select(ByVal cod_select As String) As CommitedQtyRow
            Return CType(Me.Rows.Find(New Object() {cod_select}),CommitedQtyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CommitedQtyDataTable = CType(MyBase.Clone,CommitedQtyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CommitedQtyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.Constraints.Add(New UniqueConstraint("DSCorrectItemQtyKey6", New DataColumn() {Me.columncod_select}, true))
            Me.columncod_select.AllowDBNull = false
            Me.columncod_select.Unique = true
            Me.columnqty.ReadOnly = true
        End Sub
        
        Public Function NewCommitedQtyRow() As CommitedQtyRow
            Return CType(Me.NewRow,CommitedQtyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CommitedQtyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CommitedQtyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CommitedQtyRowChangedEvent) Is Nothing) Then
                RaiseEvent CommitedQtyRowChanged(Me, New CommitedQtyRowChangeEvent(CType(e.Row,CommitedQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CommitedQtyRowChangingEvent) Is Nothing) Then
                RaiseEvent CommitedQtyRowChanging(Me, New CommitedQtyRowChangeEvent(CType(e.Row,CommitedQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CommitedQtyRowDeletedEvent) Is Nothing) Then
                RaiseEvent CommitedQtyRowDeleted(Me, New CommitedQtyRowChangeEvent(CType(e.Row,CommitedQtyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CommitedQtyRowDeletingEvent) Is Nothing) Then
                RaiseEvent CommitedQtyRowDeleting(Me, New CommitedQtyRowChangeEvent(CType(e.Row,CommitedQtyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCommitedQtyRow(ByVal row As CommitedQtyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CommitedQtyRow
        Inherits DataRow
        
        Private tableCommitedQty As CommitedQtyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCommitedQty = CType(Me.Table,CommitedQtyDataTable)
        End Sub
        
        Public Property cod_select As String
            Get
                Return CType(Me(Me.tableCommitedQty.cod_selectColumn),String)
            End Get
            Set
                Me(Me.tableCommitedQty.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCommitedQty.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommitedQty.qtyColumn) = value
            End Set
        End Property
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableCommitedQty.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableCommitedQty.qtyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CommitedQtyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CommitedQtyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CommitedQtyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CommitedQtyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
