'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCus
    Inherits DataSet
    
    Private tableCustomer As CustomerDataTable
    
    Private tablebas_tab_phone_type As bas_tab_phone_typeDataTable
    
    Private tablecust_company As cust_companyDataTable
    
    Private tablecust_sales_tax As cust_sales_taxDataTable
    
    Private tablecust_tab_class As cust_tab_classDataTable
    
    Private tablecust_tab_source As cust_tab_sourceDataTable
    
    Private tablecust_tab_type As cust_tab_typeDataTable
    
    Private tablecust_trtab_main As cust_trtab_mainDataTable
    
    Private tablebas_zipcode As bas_zipcodeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                Me.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("bas_tab_phone_type")) Is Nothing) Then
                Me.Tables.Add(New bas_tab_phone_typeDataTable(ds.Tables("bas_tab_phone_type")))
            End If
            If (Not (ds.Tables("cust_company")) Is Nothing) Then
                Me.Tables.Add(New cust_companyDataTable(ds.Tables("cust_company")))
            End If
            If (Not (ds.Tables("cust_sales_tax")) Is Nothing) Then
                Me.Tables.Add(New cust_sales_taxDataTable(ds.Tables("cust_sales_tax")))
            End If
            If (Not (ds.Tables("cust_tab_class")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_classDataTable(ds.Tables("cust_tab_class")))
            End If
            If (Not (ds.Tables("cust_tab_source")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_sourceDataTable(ds.Tables("cust_tab_source")))
            End If
            If (Not (ds.Tables("cust_tab_type")) Is Nothing) Then
                Me.Tables.Add(New cust_tab_typeDataTable(ds.Tables("cust_tab_type")))
            End If
            If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
                Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
            End If
            If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
                Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer As CustomerDataTable
        Get
            Return Me.tableCustomer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_tab_phone_type As bas_tab_phone_typeDataTable
        Get
            Return Me.tablebas_tab_phone_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_company As cust_companyDataTable
        Get
            Return Me.tablecust_company
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_sales_tax As cust_sales_taxDataTable
        Get
            Return Me.tablecust_sales_tax
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_class As cust_tab_classDataTable
        Get
            Return Me.tablecust_tab_class
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_source As cust_tab_sourceDataTable
        Get
            Return Me.tablecust_tab_source
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_tab_type As cust_tab_typeDataTable
        Get
            Return Me.tablecust_tab_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_trtab_main As cust_trtab_mainDataTable
        Get
            Return Me.tablecust_trtab_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_zipcode As bas_zipcodeDataTable
        Get
            Return Me.tablebas_zipcode
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCus = CType(MyBase.Clone,dsCus)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Customer")) Is Nothing) Then
            Me.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
        End If
        If (Not (ds.Tables("bas_tab_phone_type")) Is Nothing) Then
            Me.Tables.Add(New bas_tab_phone_typeDataTable(ds.Tables("bas_tab_phone_type")))
        End If
        If (Not (ds.Tables("cust_company")) Is Nothing) Then
            Me.Tables.Add(New cust_companyDataTable(ds.Tables("cust_company")))
        End If
        If (Not (ds.Tables("cust_sales_tax")) Is Nothing) Then
            Me.Tables.Add(New cust_sales_taxDataTable(ds.Tables("cust_sales_tax")))
        End If
        If (Not (ds.Tables("cust_tab_class")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_classDataTable(ds.Tables("cust_tab_class")))
        End If
        If (Not (ds.Tables("cust_tab_source")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_sourceDataTable(ds.Tables("cust_tab_source")))
        End If
        If (Not (ds.Tables("cust_tab_type")) Is Nothing) Then
            Me.Tables.Add(New cust_tab_typeDataTable(ds.Tables("cust_tab_type")))
        End If
        If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
            Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
        End If
        If (Not (ds.Tables("bas_zipcode")) Is Nothing) Then
            Me.Tables.Add(New bas_zipcodeDataTable(ds.Tables("bas_zipcode")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCustomer = CType(Me.Tables("Customer"),CustomerDataTable)
        If (Not (Me.tableCustomer) Is Nothing) Then
            Me.tableCustomer.InitVars
        End If
        Me.tablebas_tab_phone_type = CType(Me.Tables("bas_tab_phone_type"),bas_tab_phone_typeDataTable)
        If (Not (Me.tablebas_tab_phone_type) Is Nothing) Then
            Me.tablebas_tab_phone_type.InitVars
        End If
        Me.tablecust_company = CType(Me.Tables("cust_company"),cust_companyDataTable)
        If (Not (Me.tablecust_company) Is Nothing) Then
            Me.tablecust_company.InitVars
        End If
        Me.tablecust_sales_tax = CType(Me.Tables("cust_sales_tax"),cust_sales_taxDataTable)
        If (Not (Me.tablecust_sales_tax) Is Nothing) Then
            Me.tablecust_sales_tax.InitVars
        End If
        Me.tablecust_tab_class = CType(Me.Tables("cust_tab_class"),cust_tab_classDataTable)
        If (Not (Me.tablecust_tab_class) Is Nothing) Then
            Me.tablecust_tab_class.InitVars
        End If
        Me.tablecust_tab_source = CType(Me.Tables("cust_tab_source"),cust_tab_sourceDataTable)
        If (Not (Me.tablecust_tab_source) Is Nothing) Then
            Me.tablecust_tab_source.InitVars
        End If
        Me.tablecust_tab_type = CType(Me.Tables("cust_tab_type"),cust_tab_typeDataTable)
        If (Not (Me.tablecust_tab_type) Is Nothing) Then
            Me.tablecust_tab_type.InitVars
        End If
        Me.tablecust_trtab_main = CType(Me.Tables("cust_trtab_main"),cust_trtab_mainDataTable)
        If (Not (Me.tablecust_trtab_main) Is Nothing) Then
            Me.tablecust_trtab_main.InitVars
        End If
        Me.tablebas_zipcode = CType(Me.Tables("bas_zipcode"),bas_zipcodeDataTable)
        If (Not (Me.tablebas_zipcode) Is Nothing) Then
            Me.tablebas_zipcode.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCus"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsCus.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCustomer = New CustomerDataTable
        Me.Tables.Add(Me.tableCustomer)
        Me.tablebas_tab_phone_type = New bas_tab_phone_typeDataTable
        Me.Tables.Add(Me.tablebas_tab_phone_type)
        Me.tablecust_company = New cust_companyDataTable
        Me.Tables.Add(Me.tablecust_company)
        Me.tablecust_sales_tax = New cust_sales_taxDataTable
        Me.Tables.Add(Me.tablecust_sales_tax)
        Me.tablecust_tab_class = New cust_tab_classDataTable
        Me.Tables.Add(Me.tablecust_tab_class)
        Me.tablecust_tab_source = New cust_tab_sourceDataTable
        Me.Tables.Add(Me.tablecust_tab_source)
        Me.tablecust_tab_type = New cust_tab_typeDataTable
        Me.Tables.Add(Me.tablecust_tab_type)
        Me.tablecust_trtab_main = New cust_trtab_mainDataTable
        Me.Tables.Add(Me.tablecust_trtab_main)
        Me.tablebas_zipcode = New bas_zipcodeDataTable
        Me.Tables.Add(Me.tablebas_zipcode)
    End Sub
    
    Private Function ShouldSerializeCustomer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_tab_phone_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_company() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_sales_tax() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_class() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_source() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_tab_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_trtab_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebas_zipcode() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CustomerRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerRowChangeEvent)
    
    Public Delegate Sub bas_tab_phone_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_tab_phone_typeRowChangeEvent)
    
    Public Delegate Sub cust_companyRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_companyRowChangeEvent)
    
    Public Delegate Sub cust_sales_taxRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_sales_taxRowChangeEvent)
    
    Public Delegate Sub cust_tab_classRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_classRowChangeEvent)
    
    Public Delegate Sub cust_tab_sourceRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_sourceRowChangeEvent)
    
    Public Delegate Sub cust_tab_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_tab_typeRowChangeEvent)
    
    Public Delegate Sub cust_trtab_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_trtab_mainRowChangeEvent)
    
    Public Delegate Sub bas_zipcodeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_zipcodeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomer As DataColumn
        
        Private columnName As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnAddress1 As DataColumn
        
        Private columnAddress2 As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnST As DataColumn
        
        Private columnZipCode As DataColumn
        
        Private columnPhone As DataColumn
        
        Private columnTypeofPhone As DataColumn
        
        Private columnCharge As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columnSalesTax As DataColumn
        
        Private column_CLASS As DataColumn
        
        Private columnType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCustomerSince As DataColumn
        
        Private columnStatement As DataColumn
        
        Private columnAcceptCheck As DataColumn
        
        Private columnFinanceCharge As DataColumn
        
        Private columnVIP As DataColumn
        
        Private columnARTerms As DataColumn
        
        Private columnPriceLevel As DataColumn
        
        Friend Sub New()
            MyBase.New("Customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerColumn As DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property Address1Column As DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        Friend ReadOnly Property Address2Column As DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property STColumn As DataColumn
            Get
                Return Me.columnST
            End Get
        End Property
        
        Friend ReadOnly Property ZipCodeColumn As DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        Friend ReadOnly Property PhoneColumn As DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Friend ReadOnly Property TypeofPhoneColumn As DataColumn
            Get
                Return Me.columnTypeofPhone
            End Get
        End Property
        
        Friend ReadOnly Property ChargeColumn As DataColumn
            Get
                Return Me.columnCharge
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property SalesTaxColumn As DataColumn
            Get
                Return Me.columnSalesTax
            End Get
        End Property
        
        Friend ReadOnly Property _CLASSColumn As DataColumn
            Get
                Return Me.column_CLASS
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Friend ReadOnly Property CustomerSinceColumn As DataColumn
            Get
                Return Me.columnCustomerSince
            End Get
        End Property
        
        Friend ReadOnly Property StatementColumn As DataColumn
            Get
                Return Me.columnStatement
            End Get
        End Property
        
        Friend ReadOnly Property AcceptCheckColumn As DataColumn
            Get
                Return Me.columnAcceptCheck
            End Get
        End Property
        
        Friend ReadOnly Property FinanceChargeColumn As DataColumn
            Get
                Return Me.columnFinanceCharge
            End Get
        End Property
        
        Friend ReadOnly Property VIPColumn As DataColumn
            Get
                Return Me.columnVIP
            End Get
        End Property
        
        Friend ReadOnly Property ARTermsColumn As DataColumn
            Get
                Return Me.columnARTerms
            End Get
        End Property
        
        Friend ReadOnly Property PriceLevelColumn As DataColumn
            Get
                Return Me.columnPriceLevel
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerRow
            Get
                Return CType(Me.Rows(index),CustomerRow)
            End Get
        End Property
        
        Public Event CustomerRowChanged As CustomerRowChangeEventHandler
        
        Public Event CustomerRowChanging As CustomerRowChangeEventHandler
        
        Public Event CustomerRowDeleted As CustomerRowChangeEventHandler
        
        Public Event CustomerRowDeleting As CustomerRowChangeEventHandler
        
        Public Overloads Sub AddCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerRow( _
                    ByVal Customer As String,  _
                    ByVal Name As String,  _
                    ByVal Company As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal ST As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Phone As String,  _
                    ByVal TypeofPhone As String,  _
                    ByVal Charge As String,  _
                    ByVal Taxable As String,  _
                    ByVal SalesTax As String,  _
                    ByVal _CLASS As String,  _
                    ByVal Type As String,  _
                    ByVal Source As String,  _
                    ByVal CustomerSince As Date,  _
                    ByVal Statement As String,  _
                    ByVal AcceptCheck As String,  _
                    ByVal FinanceCharge As String,  _
                    ByVal VIP As String,  _
                    ByVal ARTerms As String,  _
                    ByVal PriceLevel As String) As CustomerRow
            Dim rowCustomerRow As CustomerRow = CType(Me.NewRow,CustomerRow)
            rowCustomerRow.ItemArray = New Object() {Customer, Name, Company, Address1, Address2, City, ST, ZipCode, Phone, TypeofPhone, Charge, Taxable, SalesTax, _CLASS, Type, Source, CustomerSince, Statement, AcceptCheck, FinanceCharge, VIP, ARTerms, PriceLevel}
            Me.Rows.Add(rowCustomerRow)
            Return rowCustomerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerDataTable = CType(MyBase.Clone,CustomerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomer = Me.Columns("Customer")
            Me.columnName = Me.Columns("Name")
            Me.columnCompany = Me.Columns("Company")
            Me.columnAddress1 = Me.Columns("Address1")
            Me.columnAddress2 = Me.Columns("Address2")
            Me.columnCity = Me.Columns("City")
            Me.columnST = Me.Columns("ST")
            Me.columnZipCode = Me.Columns("ZipCode")
            Me.columnPhone = Me.Columns("Phone")
            Me.columnTypeofPhone = Me.Columns("TypeofPhone")
            Me.columnCharge = Me.Columns("Charge")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columnSalesTax = Me.Columns("SalesTax")
            Me.column_CLASS = Me.Columns("CLASS")
            Me.columnType = Me.Columns("Type")
            Me.columnSource = Me.Columns("Source")
            Me.columnCustomerSince = Me.Columns("CustomerSince")
            Me.columnStatement = Me.Columns("Statement")
            Me.columnAcceptCheck = Me.Columns("AcceptCheck")
            Me.columnFinanceCharge = Me.Columns("FinanceCharge")
            Me.columnVIP = Me.Columns("VIP")
            Me.columnARTerms = Me.Columns("ARTerms")
            Me.columnPriceLevel = Me.Columns("PriceLevel")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomer = New DataColumn("Customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomer)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnAddress1 = New DataColumn("Address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New DataColumn("Address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress2)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnST = New DataColumn("ST", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST)
            Me.columnZipCode = New DataColumn("ZipCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZipCode)
            Me.columnPhone = New DataColumn("Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhone)
            Me.columnTypeofPhone = New DataColumn("TypeofPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeofPhone)
            Me.columnCharge = New DataColumn("Charge", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columnSalesTax = New DataColumn("SalesTax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesTax)
            Me.column_CLASS = New DataColumn("CLASS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_CLASS)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCustomerSince = New DataColumn("CustomerSince", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerSince)
            Me.columnStatement = New DataColumn("Statement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatement)
            Me.columnAcceptCheck = New DataColumn("AcceptCheck", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcceptCheck)
            Me.columnFinanceCharge = New DataColumn("FinanceCharge", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFinanceCharge)
            Me.columnVIP = New DataColumn("VIP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVIP)
            Me.columnARTerms = New DataColumn("ARTerms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARTerms)
            Me.columnPriceLevel = New DataColumn("PriceLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPriceLevel)
        End Sub
        
        Public Function NewCustomerRow() As CustomerRow
            Return CType(Me.NewRow,CustomerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanged(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanging(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleted(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleting(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRow
        Inherits DataRow
        
        Private tableCustomer As CustomerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer = CType(Me.Table,CustomerDataTable)
        End Sub
        
        Public Property Customer As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CustomerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CustomerColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.NameColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CompanyColumn) = value
            End Set
        End Property
        
        Public Property Address1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.Address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.Address1Column) = value
            End Set
        End Property
        
        Public Property Address2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.Address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.Address2Column) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CityColumn) = value
            End Set
        End Property
        
        Public Property ST As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.STColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.STColumn) = value
            End Set
        End Property
        
        Public Property ZipCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.ZipCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.ZipCodeColumn) = value
            End Set
        End Property
        
        Public Property Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.PhoneColumn) = value
            End Set
        End Property
        
        Public Property TypeofPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.TypeofPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.TypeofPhoneColumn) = value
            End Set
        End Property
        
        Public Property Charge As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.ChargeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.ChargeColumn) = value
            End Set
        End Property
        
        Public Property Taxable As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.TaxableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.TaxableColumn) = value
            End Set
        End Property
        
        Public Property SalesTax As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.SalesTaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.SalesTaxColumn) = value
            End Set
        End Property
        
        Public Property _CLASS As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer._CLASSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer._CLASSColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.TypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.SourceColumn) = value
            End Set
        End Property
        
        Public Property CustomerSince As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CustomerSinceColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CustomerSinceColumn) = value
            End Set
        End Property
        
        Public Property Statement As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.StatementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.StatementColumn) = value
            End Set
        End Property
        
        Public Property AcceptCheck As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.AcceptCheckColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.AcceptCheckColumn) = value
            End Set
        End Property
        
        Public Property FinanceCharge As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.FinanceChargeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.FinanceChargeColumn) = value
            End Set
        End Property
        
        Public Property VIP As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.VIPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.VIPColumn) = value
            End Set
        End Property
        
        Public Property ARTerms As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.ARTermsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.ARTermsColumn) = value
            End Set
        End Property
        
        Public Property PriceLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.PriceLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.PriceLevelColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CustomerColumn)
        End Function
        
        Public Sub SetCustomerNull()
            Me(Me.tableCustomer.CustomerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableCustomer.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableCustomer.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableCustomer.Address1Column)
        End Function
        
        Public Sub SetAddress1Null()
            Me(Me.tableCustomer.Address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tableCustomer.Address2Column)
        End Function
        
        Public Sub SetAddress2Null()
            Me(Me.tableCustomer.Address2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableCustomer.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.STColumn)
        End Function
        
        Public Sub SetSTNull()
            Me(Me.tableCustomer.STColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.ZipCodeColumn)
        End Function
        
        Public Sub SetZipCodeNull()
            Me(Me.tableCustomer.ZipCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableCustomer.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeofPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.TypeofPhoneColumn)
        End Function
        
        Public Sub SetTypeofPhoneNull()
            Me(Me.tableCustomer.TypeofPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargeNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.ChargeColumn)
        End Function
        
        Public Sub SetChargeNull()
            Me(Me.tableCustomer.ChargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tableCustomer.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesTaxNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.SalesTaxColumn)
        End Function
        
        Public Sub SetSalesTaxNull()
            Me(Me.tableCustomer.SalesTaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_CLASSNull() As Boolean
            Return Me.IsNull(Me.tableCustomer._CLASSColumn)
        End Function
        
        Public Sub Set_CLASSNull()
            Me(Me.tableCustomer._CLASSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableCustomer.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableCustomer.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerSinceNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CustomerSinceColumn)
        End Function
        
        Public Sub SetCustomerSinceNull()
            Me(Me.tableCustomer.CustomerSinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatementNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.StatementColumn)
        End Function
        
        Public Sub SetStatementNull()
            Me(Me.tableCustomer.StatementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcceptCheckNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.AcceptCheckColumn)
        End Function
        
        Public Sub SetAcceptCheckNull()
            Me(Me.tableCustomer.AcceptCheckColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFinanceChargeNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.FinanceChargeColumn)
        End Function
        
        Public Sub SetFinanceChargeNull()
            Me(Me.tableCustomer.FinanceChargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVIPNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.VIPColumn)
        End Function
        
        Public Sub SetVIPNull()
            Me(Me.tableCustomer.VIPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARTermsNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.ARTermsColumn)
        End Function
        
        Public Sub SetARTermsNull()
            Me(Me.tableCustomer.ARTermsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceLevelNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.PriceLevelColumn)
        End Function
        
        Public Sub SetPriceLevelNull()
            Me(Me.tableCustomer.PriceLevelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type_phone As DataColumn
        
        Private columndesc_type_phone As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_tab_phone_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_type_phoneColumn As DataColumn
            Get
                Return Me.columncod_type_phone
            End Get
        End Property
        
        Friend ReadOnly Property desc_type_phoneColumn As DataColumn
            Get
                Return Me.columndesc_type_phone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_tab_phone_typeRow
            Get
                Return CType(Me.Rows(index),bas_tab_phone_typeRow)
            End Get
        End Property
        
        Public Event bas_tab_phone_typeRowChanged As bas_tab_phone_typeRowChangeEventHandler
        
        Public Event bas_tab_phone_typeRowChanging As bas_tab_phone_typeRowChangeEventHandler
        
        Public Event bas_tab_phone_typeRowDeleted As bas_tab_phone_typeRowChangeEventHandler
        
        Public Event bas_tab_phone_typeRowDeleting As bas_tab_phone_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_tab_phone_typeRow(ByVal row As bas_tab_phone_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_tab_phone_typeRow(ByVal cod_type_phone As String, ByVal desc_type_phone As String) As bas_tab_phone_typeRow
            Dim rowbas_tab_phone_typeRow As bas_tab_phone_typeRow = CType(Me.NewRow,bas_tab_phone_typeRow)
            rowbas_tab_phone_typeRow.ItemArray = New Object() {cod_type_phone, desc_type_phone}
            Me.Rows.Add(rowbas_tab_phone_typeRow)
            Return rowbas_tab_phone_typeRow
        End Function
        
        Public Function FindBycod_type_phone(ByVal cod_type_phone As String) As bas_tab_phone_typeRow
            Return CType(Me.Rows.Find(New Object() {cod_type_phone}),bas_tab_phone_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_tab_phone_typeDataTable = CType(MyBase.Clone,bas_tab_phone_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_tab_phone_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type_phone = Me.Columns("cod_type_phone")
            Me.columndesc_type_phone = Me.Columns("desc_type_phone")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type_phone = New DataColumn("cod_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type_phone)
            Me.columndesc_type_phone = New DataColumn("desc_type_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type_phone)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_type_phone}, true))
            Me.columncod_type_phone.AllowDBNull = false
            Me.columncod_type_phone.Unique = true
        End Sub
        
        Public Function Newbas_tab_phone_typeRow() As bas_tab_phone_typeRow
            Return CType(Me.NewRow,bas_tab_phone_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_tab_phone_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_tab_phone_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_tab_phone_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_typeRowChanged(Me, New bas_tab_phone_typeRowChangeEvent(CType(e.Row,bas_tab_phone_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_tab_phone_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_typeRowChanging(Me, New bas_tab_phone_typeRowChangeEvent(CType(e.Row,bas_tab_phone_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_tab_phone_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_typeRowDeleted(Me, New bas_tab_phone_typeRowChangeEvent(CType(e.Row,bas_tab_phone_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_tab_phone_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_tab_phone_typeRowDeleting(Me, New bas_tab_phone_typeRowChangeEvent(CType(e.Row,bas_tab_phone_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_tab_phone_typeRow(ByVal row As bas_tab_phone_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_typeRow
        Inherits DataRow
        
        Private tablebas_tab_phone_type As bas_tab_phone_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_tab_phone_type = CType(Me.Table,bas_tab_phone_typeDataTable)
        End Sub
        
        Public Property cod_type_phone As String
            Get
                Return CType(Me(Me.tablebas_tab_phone_type.cod_type_phoneColumn),String)
            End Get
            Set
                Me(Me.tablebas_tab_phone_type.cod_type_phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_type_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_tab_phone_type.desc_type_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_tab_phone_type.desc_type_phoneColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_type_phoneNull() As Boolean
            Return Me.IsNull(Me.tablebas_tab_phone_type.desc_type_phoneColumn)
        End Function
        
        Public Sub Setdesc_type_phoneNull()
            Me(Me.tablebas_tab_phone_type.desc_type_phoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_tab_phone_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_tab_phone_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_tab_phone_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_tab_phone_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_company As DataColumn
        
        Private columnabbreviation_name As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzip_code As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_company")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_nameColumn As DataColumn
            Get
                Return Me.columnabbreviation_name
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zip_codeColumn As DataColumn
            Get
                Return Me.columnzip_code
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_companyRow
            Get
                Return CType(Me.Rows(index),cust_companyRow)
            End Get
        End Property
        
        Public Event cust_companyRowChanged As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowChanging As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowDeleted As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowDeleting As cust_companyRowChangeEventHandler
        
        Public Overloads Sub Addcust_companyRow(ByVal row As cust_companyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_companyRow(ByVal cod_company As String, ByVal abbreviation_name As String, ByVal complete_name As String, ByVal address As String, ByVal zip_code As String, ByVal remark As String) As cust_companyRow
            Dim rowcust_companyRow As cust_companyRow = CType(Me.NewRow,cust_companyRow)
            rowcust_companyRow.ItemArray = New Object() {cod_company, abbreviation_name, complete_name, address, zip_code, remark}
            Me.Rows.Add(rowcust_companyRow)
            Return rowcust_companyRow
        End Function
        
        Public Function FindBycod_company(ByVal cod_company As String) As cust_companyRow
            Return CType(Me.Rows.Find(New Object() {cod_company}),cust_companyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_companyDataTable = CType(MyBase.Clone,cust_companyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_companyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnabbreviation_name = Me.Columns("abbreviation_name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnzip_code = Me.Columns("zip_code")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnabbreviation_name = New DataColumn("abbreviation_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_name)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzip_code = New DataColumn("zip_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip_code)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_company}, true))
            Me.columncod_company.AllowDBNull = false
            Me.columncod_company.Unique = true
        End Sub
        
        Public Function Newcust_companyRow() As cust_companyRow
            Return CType(Me.NewRow,cust_companyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_companyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_companyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_companyRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_companyRowChanged(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_companyRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_companyRowChanging(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_companyRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_companyRowDeleted(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_companyRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_companyRowDeleting(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_companyRow(ByVal row As cust_companyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyRow
        Inherits DataRow
        
        Private tablecust_company As cust_companyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_company = CType(Me.Table,cust_companyDataTable)
        End Sub
        
        Public Property cod_company As String
            Get
                Return CType(Me(Me.tablecust_company.cod_companyColumn),String)
            End Get
            Set
                Me(Me.tablecust_company.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.abbreviation_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.abbreviation_nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.addressColumn) = value
            End Set
        End Property
        
        Public Property zip_code As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.zip_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.zip_codeColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isabbreviation_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.abbreviation_nameColumn)
        End Function
        
        Public Sub Setabbreviation_nameNull()
            Me(Me.tablecust_company.abbreviation_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecust_company.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablecust_company.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iszip_codeNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.zip_codeColumn)
        End Function
        
        Public Sub Setzip_codeNull()
            Me(Me.tablecust_company.zip_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tablecust_company.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_companyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_companyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_companyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sales_tax As DataColumn
        
        Private columndesc_sales_tax As DataColumn
        
        Private columnAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_sales_tax")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_taxColumn As DataColumn
            Get
                Return Me.columndesc_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_sales_taxRow
            Get
                Return CType(Me.Rows(index),cust_sales_taxRow)
            End Get
        End Property
        
        Public Event cust_sales_taxRowChanged As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowChanging As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowDeleted As cust_sales_taxRowChangeEventHandler
        
        Public Event cust_sales_taxRowDeleting As cust_sales_taxRowChangeEventHandler
        
        Public Overloads Sub Addcust_sales_taxRow(ByVal row As cust_sales_taxRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_sales_taxRow(ByVal cod_sales_tax As String, ByVal desc_sales_tax As String, ByVal Amount As Decimal) As cust_sales_taxRow
            Dim rowcust_sales_taxRow As cust_sales_taxRow = CType(Me.NewRow,cust_sales_taxRow)
            rowcust_sales_taxRow.ItemArray = New Object() {cod_sales_tax, desc_sales_tax, Amount}
            Me.Rows.Add(rowcust_sales_taxRow)
            Return rowcust_sales_taxRow
        End Function
        
        Public Function FindBycod_sales_tax(ByVal cod_sales_tax As String) As cust_sales_taxRow
            Return CType(Me.Rows.Find(New Object() {cod_sales_tax}),cust_sales_taxRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_sales_taxDataTable = CType(MyBase.Clone,cust_sales_taxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_sales_taxDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columndesc_sales_tax = Me.Columns("desc_sales_tax")
            Me.columnAmount = Me.Columns("Amount")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columndesc_sales_tax = New DataColumn("desc_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_tax)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_sales_tax}, true))
            Me.columncod_sales_tax.AllowDBNull = false
            Me.columncod_sales_tax.Unique = true
            Me.columnAmount.AllowDBNull = false
        End Sub
        
        Public Function Newcust_sales_taxRow() As cust_sales_taxRow
            Return CType(Me.NewRow,cust_sales_taxRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_sales_taxRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_sales_taxRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_sales_taxRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowChanged(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_sales_taxRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowChanging(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_sales_taxRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowDeleted(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_sales_taxRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_sales_taxRowDeleting(Me, New cust_sales_taxRowChangeEvent(CType(e.Row,cust_sales_taxRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_sales_taxRow(ByVal row As cust_sales_taxRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxRow
        Inherits DataRow
        
        Private tablecust_sales_tax As cust_sales_taxDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_sales_tax = CType(Me.Table,cust_sales_taxDataTable)
        End Sub
        
        Public Property cod_sales_tax As String
            Get
                Return CType(Me(Me.tablecust_sales_tax.cod_sales_taxColumn),String)
            End Get
            Set
                Me(Me.tablecust_sales_tax.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_sales_tax.desc_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_sales_tax.desc_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Return CType(Me(Me.tablecust_sales_tax.AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tablecust_sales_tax.AmountColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_sales_tax.desc_sales_taxColumn)
        End Function
        
        Public Sub Setdesc_sales_taxNull()
            Me(Me.tablecust_sales_tax.desc_sales_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_sales_taxRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_sales_taxRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_sales_taxRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_sales_taxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_class As DataColumn
        
        Private columndesc_class As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_class")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_classRow
            Get
                Return CType(Me.Rows(index),cust_tab_classRow)
            End Get
        End Property
        
        Public Event cust_tab_classRowChanged As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowChanging As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowDeleted As cust_tab_classRowChangeEventHandler
        
        Public Event cust_tab_classRowDeleting As cust_tab_classRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_classRow(ByVal row As cust_tab_classRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_classRow(ByVal cod_class As String, ByVal desc_class As String) As cust_tab_classRow
            Dim rowcust_tab_classRow As cust_tab_classRow = CType(Me.NewRow,cust_tab_classRow)
            rowcust_tab_classRow.ItemArray = New Object() {cod_class, desc_class}
            Me.Rows.Add(rowcust_tab_classRow)
            Return rowcust_tab_classRow
        End Function
        
        Public Function FindBycod_class(ByVal cod_class As String) As cust_tab_classRow
            Return CType(Me.Rows.Find(New Object() {cod_class}),cust_tab_classRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_classDataTable = CType(MyBase.Clone,cust_tab_classDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_classDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_class = Me.Columns("cod_class")
            Me.columndesc_class = Me.Columns("desc_class")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_class}, true))
            Me.columncod_class.AllowDBNull = false
            Me.columncod_class.Unique = true
        End Sub
        
        Public Function Newcust_tab_classRow() As cust_tab_classRow
            Return CType(Me.NewRow,cust_tab_classRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_classRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_classRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_classRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowChanged(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_classRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowChanging(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_classRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowDeleted(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_classRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_classRowDeleting(Me, New cust_tab_classRowChangeEvent(CType(e.Row,cust_tab_classRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_classRow(ByVal row As cust_tab_classRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classRow
        Inherits DataRow
        
        Private tablecust_tab_class As cust_tab_classDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_class = CType(Me.Table,cust_tab_classDataTable)
        End Sub
        
        Public Property cod_class As String
            Get
                Return CType(Me(Me.tablecust_tab_class.cod_classColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_class.cod_classColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_class.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_class.desc_classColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_class.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tablecust_tab_class.desc_classColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_classRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_classRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_classRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_classRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_source As DataColumn
        
        Private columndesc_source As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_source")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property desc_sourceColumn As DataColumn
            Get
                Return Me.columndesc_source
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_sourceRow
            Get
                Return CType(Me.Rows(index),cust_tab_sourceRow)
            End Get
        End Property
        
        Public Event cust_tab_sourceRowChanged As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowChanging As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowDeleted As cust_tab_sourceRowChangeEventHandler
        
        Public Event cust_tab_sourceRowDeleting As cust_tab_sourceRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_sourceRow(ByVal row As cust_tab_sourceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_sourceRow(ByVal cod_source As String, ByVal desc_source As String) As cust_tab_sourceRow
            Dim rowcust_tab_sourceRow As cust_tab_sourceRow = CType(Me.NewRow,cust_tab_sourceRow)
            rowcust_tab_sourceRow.ItemArray = New Object() {cod_source, desc_source}
            Me.Rows.Add(rowcust_tab_sourceRow)
            Return rowcust_tab_sourceRow
        End Function
        
        Public Function FindBycod_source(ByVal cod_source As String) As cust_tab_sourceRow
            Return CType(Me.Rows.Find(New Object() {cod_source}),cust_tab_sourceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_sourceDataTable = CType(MyBase.Clone,cust_tab_sourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_sourceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_source = Me.Columns("cod_source")
            Me.columndesc_source = Me.Columns("desc_source")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columndesc_source = New DataColumn("desc_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_source)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_source}, true))
            Me.columncod_source.AllowDBNull = false
            Me.columncod_source.Unique = true
        End Sub
        
        Public Function Newcust_tab_sourceRow() As cust_tab_sourceRow
            Return CType(Me.NewRow,cust_tab_sourceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_sourceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_sourceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_sourceRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowChanged(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_sourceRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowChanging(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_sourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowDeleted(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_sourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_sourceRowDeleting(Me, New cust_tab_sourceRowChangeEvent(CType(e.Row,cust_tab_sourceRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_sourceRow(ByVal row As cust_tab_sourceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceRow
        Inherits DataRow
        
        Private tablecust_tab_source As cust_tab_sourceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_source = CType(Me.Table,cust_tab_sourceDataTable)
        End Sub
        
        Public Property cod_source As String
            Get
                Return CType(Me(Me.tablecust_tab_source.cod_sourceColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_source.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property desc_source As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_source.desc_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_source.desc_sourceColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_sourceNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_source.desc_sourceColumn)
        End Function
        
        Public Sub Setdesc_sourceNull()
            Me(Me.tablecust_tab_source.desc_sourceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_sourceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_sourceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_sourceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_sourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_type As DataColumn
        
        Private columndesc_type As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_tab_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_typeColumn As DataColumn
            Get
                Return Me.columndesc_type
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_tab_typeRow
            Get
                Return CType(Me.Rows(index),cust_tab_typeRow)
            End Get
        End Property
        
        Public Event cust_tab_typeRowChanged As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowChanging As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowDeleted As cust_tab_typeRowChangeEventHandler
        
        Public Event cust_tab_typeRowDeleting As cust_tab_typeRowChangeEventHandler
        
        Public Overloads Sub Addcust_tab_typeRow(ByVal row As cust_tab_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_tab_typeRow(ByVal cod_type As String, ByVal desc_type As String) As cust_tab_typeRow
            Dim rowcust_tab_typeRow As cust_tab_typeRow = CType(Me.NewRow,cust_tab_typeRow)
            rowcust_tab_typeRow.ItemArray = New Object() {cod_type, desc_type}
            Me.Rows.Add(rowcust_tab_typeRow)
            Return rowcust_tab_typeRow
        End Function
        
        Public Function FindBycod_type(ByVal cod_type As String) As cust_tab_typeRow
            Return CType(Me.Rows.Find(New Object() {cod_type}),cust_tab_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_tab_typeDataTable = CType(MyBase.Clone,cust_tab_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_tab_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_type = Me.Columns("cod_type")
            Me.columndesc_type = Me.Columns("desc_type")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columndesc_type = New DataColumn("desc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_type}, true))
            Me.columncod_type.AllowDBNull = false
            Me.columncod_type.Unique = true
        End Sub
        
        Public Function Newcust_tab_typeRow() As cust_tab_typeRow
            Return CType(Me.NewRow,cust_tab_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_tab_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_tab_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_tab_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowChanged(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_tab_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowChanging(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_tab_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowDeleted(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_tab_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_tab_typeRowDeleting(Me, New cust_tab_typeRowChangeEvent(CType(e.Row,cust_tab_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_tab_typeRow(ByVal row As cust_tab_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeRow
        Inherits DataRow
        
        Private tablecust_tab_type As cust_tab_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_tab_type = CType(Me.Table,cust_tab_typeDataTable)
        End Sub
        
        Public Property cod_type As String
            Get
                Return CType(Me(Me.tablecust_tab_type.cod_typeColumn),String)
            End Get
            Set
                Me(Me.tablecust_tab_type.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_type As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_tab_type.desc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_tab_type.desc_typeColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_typeNull() As Boolean
            Return Me.IsNull(Me.tablecust_tab_type.desc_typeColumn)
        End Function
        
        Public Sub Setdesc_typeNull()
            Me(Me.tablecust_tab_type.desc_typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_tab_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_tab_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_tab_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_tab_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnvip_code As DataColumn
        
        Private columncod_company As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columndriver_name1 As DataColumn
        
        Private columndriver_name2 As DataColumn
        
        Private columndriver_name3 As DataColumn
        
        Private columndriver_name4 As DataColumn
        
        Private columnDriverLicense As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnemail As DataColumn
        
        Private columncod_sales_rep As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columncust_exempt_tax As DataColumn
        
        Private columnscrap_check As DataColumn
        
        Private columnscrap_value As DataColumn
        
        Private columncredit_card_no As DataColumn
        
        Private columnexpiration_credit_date As DataColumn
        
        Private columncredit_limited As DataColumn
        
        Private columnAR_charge As DataColumn
        
        Private columnAR_term As DataColumn
        
        Private columncod_sales_tax As DataColumn
        
        Private columncod_price As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columncod_source As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_territory As DataColumn
        
        Private columndesc_sales_report As DataColumn
        
        Private columnuser_id As DataColumn
        
        Private columnuser_password As DataColumn
        
        Private columnAR_statement As DataColumn
        
        Private columnAR_send_copy As DataColumn
        
        Private columnAR_finance_charge As DataColumn
        
        Private columnAR_require_PO As DataColumn
        
        Private columnAR_credit_hold As DataColumn
        
        Private columnAR_accept_check As DataColumn
        
        Private columncust_notes As DataColumn
        
        Private columnTaxable As DataColumn
        
        Private columninactive As DataColumn
        
        Private columncustomer_no As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_trtab_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property vip_codeColumn As DataColumn
            Get
                Return Me.columnvip_code
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property driver_name1Column As DataColumn
            Get
                Return Me.columndriver_name1
            End Get
        End Property
        
        Friend ReadOnly Property driver_name2Column As DataColumn
            Get
                Return Me.columndriver_name2
            End Get
        End Property
        
        Friend ReadOnly Property driver_name3Column As DataColumn
            Get
                Return Me.columndriver_name3
            End Get
        End Property
        
        Friend ReadOnly Property driver_name4Column As DataColumn
            Get
                Return Me.columndriver_name4
            End Get
        End Property
        
        Friend ReadOnly Property DriverLicenseColumn As DataColumn
            Get
                Return Me.columnDriverLicense
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_repColumn As DataColumn
            Get
                Return Me.columncod_sales_rep
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property cust_exempt_taxColumn As DataColumn
            Get
                Return Me.columncust_exempt_tax
            End Get
        End Property
        
        Friend ReadOnly Property scrap_checkColumn As DataColumn
            Get
                Return Me.columnscrap_check
            End Get
        End Property
        
        Friend ReadOnly Property scrap_valueColumn As DataColumn
            Get
                Return Me.columnscrap_value
            End Get
        End Property
        
        Friend ReadOnly Property credit_card_noColumn As DataColumn
            Get
                Return Me.columncredit_card_no
            End Get
        End Property
        
        Friend ReadOnly Property expiration_credit_dateColumn As DataColumn
            Get
                Return Me.columnexpiration_credit_date
            End Get
        End Property
        
        Friend ReadOnly Property credit_limitedColumn As DataColumn
            Get
                Return Me.columncredit_limited
            End Get
        End Property
        
        Friend ReadOnly Property AR_chargeColumn As DataColumn
            Get
                Return Me.columnAR_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_termColumn As DataColumn
            Get
                Return Me.columnAR_term
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_taxColumn As DataColumn
            Get
                Return Me.columncod_sales_tax
            End Get
        End Property
        
        Friend ReadOnly Property cod_priceColumn As DataColumn
            Get
                Return Me.columncod_price
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property desc_sales_reportColumn As DataColumn
            Get
                Return Me.columndesc_sales_report
            End Get
        End Property
        
        Friend ReadOnly Property user_idColumn As DataColumn
            Get
                Return Me.columnuser_id
            End Get
        End Property
        
        Friend ReadOnly Property user_passwordColumn As DataColumn
            Get
                Return Me.columnuser_password
            End Get
        End Property
        
        Friend ReadOnly Property AR_statementColumn As DataColumn
            Get
                Return Me.columnAR_statement
            End Get
        End Property
        
        Friend ReadOnly Property AR_send_copyColumn As DataColumn
            Get
                Return Me.columnAR_send_copy
            End Get
        End Property
        
        Friend ReadOnly Property AR_finance_chargeColumn As DataColumn
            Get
                Return Me.columnAR_finance_charge
            End Get
        End Property
        
        Friend ReadOnly Property AR_require_POColumn As DataColumn
            Get
                Return Me.columnAR_require_PO
            End Get
        End Property
        
        Friend ReadOnly Property AR_credit_holdColumn As DataColumn
            Get
                Return Me.columnAR_credit_hold
            End Get
        End Property
        
        Friend ReadOnly Property AR_accept_checkColumn As DataColumn
            Get
                Return Me.columnAR_accept_check
            End Get
        End Property
        
        Friend ReadOnly Property cust_notesColumn As DataColumn
            Get
                Return Me.columncust_notes
            End Get
        End Property
        
        Friend ReadOnly Property TaxableColumn As DataColumn
            Get
                Return Me.columnTaxable
            End Get
        End Property
        
        Friend ReadOnly Property inactiveColumn As DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        Friend ReadOnly Property customer_noColumn As DataColumn
            Get
                Return Me.columncustomer_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_trtab_mainRow
            Get
                Return CType(Me.Rows(index),cust_trtab_mainRow)
            End Get
        End Property
        
        Public Event cust_trtab_mainRowChanged As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowChanging As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleted As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleting As cust_trtab_mainRowChangeEventHandler
        
        Public Overloads Sub Addcust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_trtab_mainRow( _
                    ByVal cod_customer As String,  _
                    ByVal vip_code As String,  _
                    ByVal cod_company As String,  _
                    ByVal f_name As String,  _
                    ByVal m_name As String,  _
                    ByVal l_name As String,  _
                    ByVal address As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal driver_name1 As String,  _
                    ByVal driver_name2 As String,  _
                    ByVal driver_name3 As String,  _
                    ByVal driver_name4 As String,  _
                    ByVal DriverLicense As String,  _
                    ByVal zip As String,  _
                    ByVal email As String,  _
                    ByVal cod_sales_rep As String,  _
                    ByVal social_security_no As String,  _
                    ByVal cust_exempt_tax As Single,  _
                    ByVal scrap_check As Boolean,  _
                    ByVal scrap_value As Single,  _
                    ByVal credit_card_no As String,  _
                    ByVal expiration_credit_date As String,  _
                    ByVal credit_limited As Single,  _
                    ByVal AR_charge As Boolean,  _
                    ByVal AR_term As String,  _
                    ByVal cod_sales_tax As String,  _
                    ByVal cod_price As String,  _
                    ByVal discount As Single,  _
                    ByVal cod_type As String,  _
                    ByVal cod_source As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_territory As String,  _
                    ByVal desc_sales_report As String,  _
                    ByVal user_id As String,  _
                    ByVal user_password As String,  _
                    ByVal AR_statement As Boolean,  _
                    ByVal AR_send_copy As Boolean,  _
                    ByVal AR_finance_charge As Boolean,  _
                    ByVal AR_require_PO As Boolean,  _
                    ByVal AR_credit_hold As Boolean,  _
                    ByVal AR_accept_check As Boolean,  _
                    ByVal cust_notes As String,  _
                    ByVal Taxable As Boolean,  _
                    ByVal inactive As Boolean,  _
                    ByVal customer_no As String) As cust_trtab_mainRow
            Dim rowcust_trtab_mainRow As cust_trtab_mainRow = CType(Me.NewRow,cust_trtab_mainRow)
            rowcust_trtab_mainRow.ItemArray = New Object() {cod_customer, vip_code, cod_company, f_name, m_name, l_name, address, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, driver_name1, driver_name2, driver_name3, driver_name4, DriverLicense, zip, email, cod_sales_rep, social_security_no, cust_exempt_tax, scrap_check, scrap_value, credit_card_no, expiration_credit_date, credit_limited, AR_charge, AR_term, cod_sales_tax, cod_price, discount, cod_type, cod_source, cod_class, cod_territory, desc_sales_report, user_id, user_password, AR_statement, AR_send_copy, AR_finance_charge, AR_require_PO, AR_credit_hold, AR_accept_check, cust_notes, Taxable, inactive, customer_no}
            Me.Rows.Add(rowcust_trtab_mainRow)
            Return rowcust_trtab_mainRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As cust_trtab_mainRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),cust_trtab_mainRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_trtab_mainDataTable = CType(MyBase.Clone,cust_trtab_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_trtab_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnvip_code = Me.Columns("vip_code")
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columndriver_name1 = Me.Columns("driver_name1")
            Me.columndriver_name2 = Me.Columns("driver_name2")
            Me.columndriver_name3 = Me.Columns("driver_name3")
            Me.columndriver_name4 = Me.Columns("driver_name4")
            Me.columnDriverLicense = Me.Columns("DriverLicense")
            Me.columnzip = Me.Columns("zip")
            Me.columnemail = Me.Columns("email")
            Me.columncod_sales_rep = Me.Columns("cod_sales_rep")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columncust_exempt_tax = Me.Columns("cust_exempt_tax")
            Me.columnscrap_check = Me.Columns("scrap_check")
            Me.columnscrap_value = Me.Columns("scrap_value")
            Me.columncredit_card_no = Me.Columns("credit_card_no")
            Me.columnexpiration_credit_date = Me.Columns("expiration_credit_date")
            Me.columncredit_limited = Me.Columns("credit_limited")
            Me.columnAR_charge = Me.Columns("AR_charge")
            Me.columnAR_term = Me.Columns("AR_term")
            Me.columncod_sales_tax = Me.Columns("cod_sales_tax")
            Me.columncod_price = Me.Columns("cod_price")
            Me.columndiscount = Me.Columns("discount")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columncod_source = Me.Columns("cod_source")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columndesc_sales_report = Me.Columns("desc_sales_report")
            Me.columnuser_id = Me.Columns("user_id")
            Me.columnuser_password = Me.Columns("user_password")
            Me.columnAR_statement = Me.Columns("AR_statement")
            Me.columnAR_send_copy = Me.Columns("AR_send_copy")
            Me.columnAR_finance_charge = Me.Columns("AR_finance_charge")
            Me.columnAR_require_PO = Me.Columns("AR_require_PO")
            Me.columnAR_credit_hold = Me.Columns("AR_credit_hold")
            Me.columnAR_accept_check = Me.Columns("AR_accept_check")
            Me.columncust_notes = Me.Columns("cust_notes")
            Me.columnTaxable = Me.Columns("Taxable")
            Me.columninactive = Me.Columns("inactive")
            Me.columncustomer_no = Me.Columns("customer_no")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnvip_code = New DataColumn("vip_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvip_code)
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columndriver_name1 = New DataColumn("driver_name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name1)
            Me.columndriver_name2 = New DataColumn("driver_name2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name2)
            Me.columndriver_name3 = New DataColumn("driver_name3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name3)
            Me.columndriver_name4 = New DataColumn("driver_name4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndriver_name4)
            Me.columnDriverLicense = New DataColumn("DriverLicense", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDriverLicense)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncod_sales_rep = New DataColumn("cod_sales_rep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_rep)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columncust_exempt_tax = New DataColumn("cust_exempt_tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_exempt_tax)
            Me.columnscrap_check = New DataColumn("scrap_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_check)
            Me.columnscrap_value = New DataColumn("scrap_value", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscrap_value)
            Me.columncredit_card_no = New DataColumn("credit_card_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_card_no)
            Me.columnexpiration_credit_date = New DataColumn("expiration_credit_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnexpiration_credit_date)
            Me.columncredit_limited = New DataColumn("credit_limited", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit_limited)
            Me.columnAR_charge = New DataColumn("AR_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_charge)
            Me.columnAR_term = New DataColumn("AR_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_term)
            Me.columncod_sales_tax = New DataColumn("cod_sales_tax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_tax)
            Me.columncod_price = New DataColumn("cod_price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_price)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columndesc_sales_report = New DataColumn("desc_sales_report", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_sales_report)
            Me.columnuser_id = New DataColumn("user_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_id)
            Me.columnuser_password = New DataColumn("user_password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuser_password)
            Me.columnAR_statement = New DataColumn("AR_statement", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_statement)
            Me.columnAR_send_copy = New DataColumn("AR_send_copy", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_send_copy)
            Me.columnAR_finance_charge = New DataColumn("AR_finance_charge", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_finance_charge)
            Me.columnAR_require_PO = New DataColumn("AR_require_PO", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_require_PO)
            Me.columnAR_credit_hold = New DataColumn("AR_credit_hold", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_credit_hold)
            Me.columnAR_accept_check = New DataColumn("AR_accept_check", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_accept_check)
            Me.columncust_notes = New DataColumn("cust_notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_notes)
            Me.columnTaxable = New DataColumn("Taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxable)
            Me.columninactive = New DataColumn("inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninactive)
            Me.columncustomer_no = New DataColumn("customer_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function Newcust_trtab_mainRow() As cust_trtab_mainRow
            Return CType(Me.NewRow,cust_trtab_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_trtab_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_trtab_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_trtab_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanged(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_trtab_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanging(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_trtab_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleted(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_trtab_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleting(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRow
        Inherits DataRow
        
        Private tablecust_trtab_main As cust_trtab_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_trtab_main = CType(Me.Table,cust_trtab_mainDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecust_trtab_main.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property vip_code As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.vip_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.vip_codeColumn) = value
            End Set
        End Property
        
        Public Property cod_company As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.f_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.m_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.l_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.addressColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property driver_name1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name1Column) = value
            End Set
        End Property
        
        Public Property driver_name2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name2Column) = value
            End Set
        End Property
        
        Public Property driver_name3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name3Column) = value
            End Set
        End Property
        
        Public Property driver_name4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.driver_name4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.driver_name4Column) = value
            End Set
        End Property
        
        Public Property DriverLicense As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.DriverLicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.DriverLicenseColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.zipColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.emailColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_rep As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_repColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_repColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property cust_exempt_tax As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_exempt_taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = value
            End Set
        End Property
        
        Public Property scrap_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_checkColumn) = value
            End Set
        End Property
        
        Public Property scrap_value As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.scrap_valueColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.scrap_valueColumn) = value
            End Set
        End Property
        
        Public Property credit_card_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_card_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_card_noColumn) = value
            End Set
        End Property
        
        Public Property expiration_credit_date As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.expiration_credit_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = value
            End Set
        End Property
        
        Public Property credit_limited As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.credit_limitedColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.credit_limitedColumn) = value
            End Set
        End Property
        
        Public Property AR_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_term As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_termColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_tax As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sales_taxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = value
            End Set
        End Property
        
        Public Property cod_price As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_priceColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.discountColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_source As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_territory As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cod_territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property desc_sales_report As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.desc_sales_reportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = value
            End Set
        End Property
        
        Public Property user_id As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_idColumn) = value
            End Set
        End Property
        
        Public Property user_password As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.user_passwordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.user_passwordColumn) = value
            End Set
        End Property
        
        Public Property AR_statement As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_statementColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_statementColumn) = value
            End Set
        End Property
        
        Public Property AR_send_copy As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_send_copyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_send_copyColumn) = value
            End Set
        End Property
        
        Public Property AR_finance_charge As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_finance_chargeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = value
            End Set
        End Property
        
        Public Property AR_require_PO As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_require_POColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_require_POColumn) = value
            End Set
        End Property
        
        Public Property AR_credit_hold As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_credit_holdColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = value
            End Set
        End Property
        
        Public Property AR_accept_check As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.AR_accept_checkColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = value
            End Set
        End Property
        
        Public Property cust_notes As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.cust_notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.cust_notesColumn) = value
            End Set
        End Property
        
        Public Property Taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.TaxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.TaxableColumn) = value
            End Set
        End Property
        
        Public Property inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.inactiveColumn) = value
            End Set
        End Property
        
        Public Property customer_no As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.customer_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.customer_noColumn) = value
            End Set
        End Property
        
        Public Function Isvip_codeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.vip_codeColumn)
        End Function
        
        Public Sub Setvip_codeNull()
            Me(Me.tablecust_trtab_main.vip_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_companyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_companyColumn)
        End Function
        
        Public Sub Setcod_companyNull()
            Me(Me.tablecust_trtab_main.cod_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecust_trtab_main.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tablecust_trtab_main.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecust_trtab_main.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablecust_trtab_main.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablecust_trtab_main.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tablecust_trtab_main.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tablecust_trtab_main.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tablecust_trtab_main.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tablecust_trtab_main.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tablecust_trtab_main.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tablecust_trtab_main.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tablecust_trtab_main.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tablecust_trtab_main.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tablecust_trtab_main.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tablecust_trtab_main.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tablecust_trtab_main.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tablecust_trtab_main.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tablecust_trtab_main.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tablecust_trtab_main.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tablecust_trtab_main.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tablecust_trtab_main.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tablecust_trtab_main.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tablecust_trtab_main.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tablecust_trtab_main.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name1Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name1Column)
        End Function
        
        Public Sub Setdriver_name1Null()
            Me(Me.tablecust_trtab_main.driver_name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name2Column)
        End Function
        
        Public Sub Setdriver_name2Null()
            Me(Me.tablecust_trtab_main.driver_name2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name3Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name3Column)
        End Function
        
        Public Sub Setdriver_name3Null()
            Me(Me.tablecust_trtab_main.driver_name3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdriver_name4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.driver_name4Column)
        End Function
        
        Public Sub Setdriver_name4Null()
            Me(Me.tablecust_trtab_main.driver_name4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDriverLicenseNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.DriverLicenseColumn)
        End Function
        
        Public Sub SetDriverLicenseNull()
            Me(Me.tablecust_trtab_main.DriverLicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablecust_trtab_main.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablecust_trtab_main.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_repNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_repColumn)
        End Function
        
        Public Sub Setcod_sales_repNull()
            Me(Me.tablecust_trtab_main.cod_sales_repColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tablecust_trtab_main.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_exempt_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_exempt_taxColumn)
        End Function
        
        Public Sub Setcust_exempt_taxNull()
            Me(Me.tablecust_trtab_main.cust_exempt_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_checkColumn)
        End Function
        
        Public Sub Setscrap_checkNull()
            Me(Me.tablecust_trtab_main.scrap_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isscrap_valueNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.scrap_valueColumn)
        End Function
        
        Public Sub Setscrap_valueNull()
            Me(Me.tablecust_trtab_main.scrap_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_card_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_card_noColumn)
        End Function
        
        Public Sub Setcredit_card_noNull()
            Me(Me.tablecust_trtab_main.credit_card_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isexpiration_credit_dateNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.expiration_credit_dateColumn)
        End Function
        
        Public Sub Setexpiration_credit_dateNull()
            Me(Me.tablecust_trtab_main.expiration_credit_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscredit_limitedNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.credit_limitedColumn)
        End Function
        
        Public Sub Setcredit_limitedNull()
            Me(Me.tablecust_trtab_main.credit_limitedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_chargeColumn)
        End Function
        
        Public Sub SetAR_chargeNull()
            Me(Me.tablecust_trtab_main.AR_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_termColumn)
        End Function
        
        Public Sub SetAR_termNull()
            Me(Me.tablecust_trtab_main.AR_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_taxNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sales_taxColumn)
        End Function
        
        Public Sub Setcod_sales_taxNull()
            Me(Me.tablecust_trtab_main.cod_sales_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_priceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_priceColumn)
        End Function
        
        Public Sub Setcod_priceNull()
            Me(Me.tablecust_trtab_main.cod_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tablecust_trtab_main.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tablecust_trtab_main.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sourceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_sourceColumn)
        End Function
        
        Public Sub Setcod_sourceNull()
            Me(Me.tablecust_trtab_main.cod_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tablecust_trtab_main.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_territoryNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cod_territoryColumn)
        End Function
        
        Public Sub Setcod_territoryNull()
            Me(Me.tablecust_trtab_main.cod_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sales_reportNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.desc_sales_reportColumn)
        End Function
        
        Public Sub Setdesc_sales_reportNull()
            Me(Me.tablecust_trtab_main.desc_sales_reportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_idNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_idColumn)
        End Function
        
        Public Sub Setuser_idNull()
            Me(Me.tablecust_trtab_main.user_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isuser_passwordNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.user_passwordColumn)
        End Function
        
        Public Sub Setuser_passwordNull()
            Me(Me.tablecust_trtab_main.user_passwordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_statementNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_statementColumn)
        End Function
        
        Public Sub SetAR_statementNull()
            Me(Me.tablecust_trtab_main.AR_statementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_send_copyNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_send_copyColumn)
        End Function
        
        Public Sub SetAR_send_copyNull()
            Me(Me.tablecust_trtab_main.AR_send_copyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_finance_chargeNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_finance_chargeColumn)
        End Function
        
        Public Sub SetAR_finance_chargeNull()
            Me(Me.tablecust_trtab_main.AR_finance_chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_require_PONull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_require_POColumn)
        End Function
        
        Public Sub SetAR_require_PONull()
            Me(Me.tablecust_trtab_main.AR_require_POColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_credit_holdNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_credit_holdColumn)
        End Function
        
        Public Sub SetAR_credit_holdNull()
            Me(Me.tablecust_trtab_main.AR_credit_holdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_accept_checkNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.AR_accept_checkColumn)
        End Function
        
        Public Sub SetAR_accept_checkNull()
            Me(Me.tablecust_trtab_main.AR_accept_checkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_notesNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.cust_notesColumn)
        End Function
        
        Public Sub Setcust_notesNull()
            Me(Me.tablecust_trtab_main.cust_notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxableNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.TaxableColumn)
        End Function
        
        Public Sub SetTaxableNull()
            Me(Me.tablecust_trtab_main.TaxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.inactiveColumn)
        End Function
        
        Public Sub SetinactiveNull()
            Me(Me.tablecust_trtab_main.inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscustomer_noNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.customer_noColumn)
        End Function
        
        Public Sub Setcustomer_noNull()
            Me(Me.tablecust_trtab_main.customer_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_trtab_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_trtab_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_trtab_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnzipcode As DataColumn
        
        Private columncity As DataColumn
        
        Private columncounty As DataColumn
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_zipcode")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property countyColumn As DataColumn
            Get
                Return Me.columncounty
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_zipcodeRow
            Get
                Return CType(Me.Rows(index),bas_zipcodeRow)
            End Get
        End Property
        
        Public Event bas_zipcodeRowChanged As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowChanging As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleted As bas_zipcodeRowChangeEventHandler
        
        Public Event bas_zipcodeRowDeleting As bas_zipcodeRowChangeEventHandler
        
        Public Overloads Sub Addbas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_zipcodeRow(ByVal zipcode As String, ByVal city As String, ByVal county As String, ByVal state As String) As bas_zipcodeRow
            Dim rowbas_zipcodeRow As bas_zipcodeRow = CType(Me.NewRow,bas_zipcodeRow)
            rowbas_zipcodeRow.ItemArray = New Object() {zipcode, city, county, state}
            Me.Rows.Add(rowbas_zipcodeRow)
            Return rowbas_zipcodeRow
        End Function
        
        Public Function FindByzipcode(ByVal zipcode As String) As bas_zipcodeRow
            Return CType(Me.Rows.Find(New Object() {zipcode}),bas_zipcodeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_zipcodeDataTable = CType(MyBase.Clone,bas_zipcodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_zipcodeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columncity = Me.Columns("city")
            Me.columncounty = Me.Columns("county")
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columncounty = New DataColumn("county", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncounty)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnzipcode}, true))
            Me.columnzipcode.AllowDBNull = false
            Me.columnzipcode.Unique = true
        End Sub
        
        Public Function Newbas_zipcodeRow() As bas_zipcodeRow
            Return CType(Me.NewRow,bas_zipcodeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_zipcodeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_zipcodeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_zipcodeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanged(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_zipcodeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowChanging(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_zipcodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleted(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_zipcodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_zipcodeRowDeleting(Me, New bas_zipcodeRowChangeEvent(CType(e.Row,bas_zipcodeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_zipcodeRow(ByVal row As bas_zipcodeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRow
        Inherits DataRow
        
        Private tablebas_zipcode As bas_zipcodeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_zipcode = CType(Me.Table,bas_zipcodeDataTable)
        End Sub
        
        Public Property zipcode As String
            Get
                Return CType(Me(Me.tablebas_zipcode.zipcodeColumn),String)
            End Get
            Set
                Me(Me.tablebas_zipcode.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.cityColumn) = value
            End Set
        End Property
        
        Public Property county As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.countyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.countyColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_zipcode.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_zipcode.stateColumn) = value
            End Set
        End Property
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tablebas_zipcode.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscountyNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.countyColumn)
        End Function
        
        Public Sub SetcountyNull()
            Me(Me.tablebas_zipcode.countyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablebas_zipcode.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tablebas_zipcode.stateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_zipcodeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_zipcodeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_zipcodeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_zipcodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
