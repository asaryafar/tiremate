'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsConvertFromText
    Inherits DataSet
    
    Private tableFile_Destination As File_DestinationDataTable
    
    Private tableFile_Destination_DTL As File_Destination_DTLDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("File_Destination")) Is Nothing) Then
                Me.Tables.Add(New File_DestinationDataTable(ds.Tables("File_Destination")))
            End If
            If (Not (ds.Tables("File_Destination_DTL")) Is Nothing) Then
                Me.Tables.Add(New File_Destination_DTLDataTable(ds.Tables("File_Destination_DTL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property File_Destination As File_DestinationDataTable
        Get
            Return Me.tableFile_Destination
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property File_Destination_DTL As File_Destination_DTLDataTable
        Get
            Return Me.tableFile_Destination_DTL
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsConvertFromText = CType(MyBase.Clone,dsConvertFromText)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("File_Destination")) Is Nothing) Then
            Me.Tables.Add(New File_DestinationDataTable(ds.Tables("File_Destination")))
        End If
        If (Not (ds.Tables("File_Destination_DTL")) Is Nothing) Then
            Me.Tables.Add(New File_Destination_DTLDataTable(ds.Tables("File_Destination_DTL")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableFile_Destination = CType(Me.Tables("File_Destination"),File_DestinationDataTable)
        If (Not (Me.tableFile_Destination) Is Nothing) Then
            Me.tableFile_Destination.InitVars
        End If
        Me.tableFile_Destination_DTL = CType(Me.Tables("File_Destination_DTL"),File_Destination_DTLDataTable)
        If (Not (Me.tableFile_Destination_DTL) Is Nothing) Then
            Me.tableFile_Destination_DTL.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsConvertFromText"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsConvertFromText.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableFile_Destination = New File_DestinationDataTable
        Me.Tables.Add(Me.tableFile_Destination)
        Me.tableFile_Destination_DTL = New File_Destination_DTLDataTable
        Me.Tables.Add(Me.tableFile_Destination_DTL)
    End Sub
    
    Private Function ShouldSerializeFile_Destination() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFile_Destination_DTL() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub File_DestinationRowChangeEventHandler(ByVal sender As Object, ByVal e As File_DestinationRowChangeEvent)
    
    Public Delegate Sub File_Destination_DTLRowChangeEventHandler(ByVal sender As Object, ByVal e As File_Destination_DTLRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_DestinationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDesFileCode As DataColumn
        
        Private columnDesFileName As DataColumn
        
        Private columnTarTableName As DataColumn
        
        Private columnIsActive As DataColumn
        
        Private columnPriority As DataColumn
        
        Friend Sub New()
            MyBase.New("File_Destination")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DesFileCodeColumn As DataColumn
            Get
                Return Me.columnDesFileCode
            End Get
        End Property
        
        Friend ReadOnly Property DesFileNameColumn As DataColumn
            Get
                Return Me.columnDesFileName
            End Get
        End Property
        
        Friend ReadOnly Property TarTableNameColumn As DataColumn
            Get
                Return Me.columnTarTableName
            End Get
        End Property
        
        Friend ReadOnly Property IsActiveColumn As DataColumn
            Get
                Return Me.columnIsActive
            End Get
        End Property
        
        Friend ReadOnly Property PriorityColumn As DataColumn
            Get
                Return Me.columnPriority
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As File_DestinationRow
            Get
                Return CType(Me.Rows(index),File_DestinationRow)
            End Get
        End Property
        
        Public Event File_DestinationRowChanged As File_DestinationRowChangeEventHandler
        
        Public Event File_DestinationRowChanging As File_DestinationRowChangeEventHandler
        
        Public Event File_DestinationRowDeleted As File_DestinationRowChangeEventHandler
        
        Public Event File_DestinationRowDeleting As File_DestinationRowChangeEventHandler
        
        Public Overloads Sub AddFile_DestinationRow(ByVal row As File_DestinationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFile_DestinationRow(ByVal DesFileCode As String, ByVal DesFileName As String, ByVal TarTableName As String, ByVal IsActive As Boolean, ByVal Priority As Byte) As File_DestinationRow
            Dim rowFile_DestinationRow As File_DestinationRow = CType(Me.NewRow,File_DestinationRow)
            rowFile_DestinationRow.ItemArray = New Object() {DesFileCode, DesFileName, TarTableName, IsActive, Priority}
            Me.Rows.Add(rowFile_DestinationRow)
            Return rowFile_DestinationRow
        End Function
        
        Public Function FindByDesFileCode(ByVal DesFileCode As String) As File_DestinationRow
            Return CType(Me.Rows.Find(New Object() {DesFileCode}),File_DestinationRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As File_DestinationDataTable = CType(MyBase.Clone,File_DestinationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New File_DestinationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDesFileCode = Me.Columns("DesFileCode")
            Me.columnDesFileName = Me.Columns("DesFileName")
            Me.columnTarTableName = Me.Columns("TarTableName")
            Me.columnIsActive = Me.Columns("IsActive")
            Me.columnPriority = Me.Columns("Priority")
        End Sub
        
        Private Sub InitClass()
            Me.columnDesFileCode = New DataColumn("DesFileCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesFileCode)
            Me.columnDesFileName = New DataColumn("DesFileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesFileName)
            Me.columnTarTableName = New DataColumn("TarTableName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarTableName)
            Me.columnIsActive = New DataColumn("IsActive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsActive)
            Me.columnPriority = New DataColumn("Priority", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPriority)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDesFileCode}, true))
            Me.columnDesFileCode.AllowDBNull = false
            Me.columnDesFileCode.Unique = true
        End Sub
        
        Public Function NewFile_DestinationRow() As File_DestinationRow
            Return CType(Me.NewRow,File_DestinationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New File_DestinationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(File_DestinationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.File_DestinationRowChangedEvent) Is Nothing) Then
                RaiseEvent File_DestinationRowChanged(Me, New File_DestinationRowChangeEvent(CType(e.Row,File_DestinationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.File_DestinationRowChangingEvent) Is Nothing) Then
                RaiseEvent File_DestinationRowChanging(Me, New File_DestinationRowChangeEvent(CType(e.Row,File_DestinationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.File_DestinationRowDeletedEvent) Is Nothing) Then
                RaiseEvent File_DestinationRowDeleted(Me, New File_DestinationRowChangeEvent(CType(e.Row,File_DestinationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.File_DestinationRowDeletingEvent) Is Nothing) Then
                RaiseEvent File_DestinationRowDeleting(Me, New File_DestinationRowChangeEvent(CType(e.Row,File_DestinationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFile_DestinationRow(ByVal row As File_DestinationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_DestinationRow
        Inherits DataRow
        
        Private tableFile_Destination As File_DestinationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFile_Destination = CType(Me.Table,File_DestinationDataTable)
        End Sub
        
        Public Property DesFileCode As String
            Get
                Return CType(Me(Me.tableFile_Destination.DesFileCodeColumn),String)
            End Get
            Set
                Me(Me.tableFile_Destination.DesFileCodeColumn) = value
            End Set
        End Property
        
        Public Property DesFileName As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination.DesFileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination.DesFileNameColumn) = value
            End Set
        End Property
        
        Public Property TarTableName As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination.TarTableNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination.TarTableNameColumn) = value
            End Set
        End Property
        
        Public Property IsActive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination.IsActiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination.IsActiveColumn) = value
            End Set
        End Property
        
        Public Property Priority As Byte
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination.PriorityColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination.PriorityColumn) = value
            End Set
        End Property
        
        Public Function IsDesFileNameNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination.DesFileNameColumn)
        End Function
        
        Public Sub SetDesFileNameNull()
            Me(Me.tableFile_Destination.DesFileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTarTableNameNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination.TarTableNameColumn)
        End Function
        
        Public Sub SetTarTableNameNull()
            Me(Me.tableFile_Destination.TarTableNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsActiveNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination.IsActiveColumn)
        End Function
        
        Public Sub SetIsActiveNull()
            Me(Me.tableFile_Destination.IsActiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriorityNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination.PriorityColumn)
        End Function
        
        Public Sub SetPriorityNull()
            Me(Me.tableFile_Destination.PriorityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_DestinationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As File_DestinationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As File_DestinationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As File_DestinationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_Destination_DTLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDesFileCode As DataColumn
        
        Private columnDesFieldCode As DataColumn
        
        Private columnDesFieldName As DataColumn
        
        Private columnBegin As DataColumn
        
        Private columnLen As DataColumn
        
        Private columnTargetFieldType As DataColumn
        
        Friend Sub New()
            MyBase.New("File_Destination_DTL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DesFileCodeColumn As DataColumn
            Get
                Return Me.columnDesFileCode
            End Get
        End Property
        
        Friend ReadOnly Property DesFieldCodeColumn As DataColumn
            Get
                Return Me.columnDesFieldCode
            End Get
        End Property
        
        Friend ReadOnly Property DesFieldNameColumn As DataColumn
            Get
                Return Me.columnDesFieldName
            End Get
        End Property
        
        Friend ReadOnly Property BeginColumn As DataColumn
            Get
                Return Me.columnBegin
            End Get
        End Property
        
        Friend ReadOnly Property LenColumn As DataColumn
            Get
                Return Me.columnLen
            End Get
        End Property
        
        Friend ReadOnly Property TargetFieldTypeColumn As DataColumn
            Get
                Return Me.columnTargetFieldType
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As File_Destination_DTLRow
            Get
                Return CType(Me.Rows(index),File_Destination_DTLRow)
            End Get
        End Property
        
        Public Event File_Destination_DTLRowChanged As File_Destination_DTLRowChangeEventHandler
        
        Public Event File_Destination_DTLRowChanging As File_Destination_DTLRowChangeEventHandler
        
        Public Event File_Destination_DTLRowDeleted As File_Destination_DTLRowChangeEventHandler
        
        Public Event File_Destination_DTLRowDeleting As File_Destination_DTLRowChangeEventHandler
        
        Public Overloads Sub AddFile_Destination_DTLRow(ByVal row As File_Destination_DTLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFile_Destination_DTLRow(ByVal DesFileCode As String, ByVal DesFieldCode As String, ByVal DesFieldName As String, ByVal Begin As String, ByVal Len As String, ByVal TargetFieldType As String) As File_Destination_DTLRow
            Dim rowFile_Destination_DTLRow As File_Destination_DTLRow = CType(Me.NewRow,File_Destination_DTLRow)
            rowFile_Destination_DTLRow.ItemArray = New Object() {DesFileCode, DesFieldCode, DesFieldName, Begin, Len, TargetFieldType}
            Me.Rows.Add(rowFile_Destination_DTLRow)
            Return rowFile_Destination_DTLRow
        End Function
        
        Public Function FindByDesFileCodeDesFieldCode(ByVal DesFileCode As String, ByVal DesFieldCode As String) As File_Destination_DTLRow
            Return CType(Me.Rows.Find(New Object() {DesFileCode, DesFieldCode}),File_Destination_DTLRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As File_Destination_DTLDataTable = CType(MyBase.Clone,File_Destination_DTLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New File_Destination_DTLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDesFileCode = Me.Columns("DesFileCode")
            Me.columnDesFieldCode = Me.Columns("DesFieldCode")
            Me.columnDesFieldName = Me.Columns("DesFieldName")
            Me.columnBegin = Me.Columns("Begin")
            Me.columnLen = Me.Columns("Len")
            Me.columnTargetFieldType = Me.Columns("TargetFieldType")
        End Sub
        
        Private Sub InitClass()
            Me.columnDesFileCode = New DataColumn("DesFileCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesFileCode)
            Me.columnDesFieldCode = New DataColumn("DesFieldCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesFieldCode)
            Me.columnDesFieldName = New DataColumn("DesFieldName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesFieldName)
            Me.columnBegin = New DataColumn("Begin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBegin)
            Me.columnLen = New DataColumn("Len", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLen)
            Me.columnTargetFieldType = New DataColumn("TargetFieldType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTargetFieldType)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDesFileCode, Me.columnDesFieldCode}, true))
            Me.columnDesFileCode.AllowDBNull = false
            Me.columnDesFieldCode.AllowDBNull = false
        End Sub
        
        Public Function NewFile_Destination_DTLRow() As File_Destination_DTLRow
            Return CType(Me.NewRow,File_Destination_DTLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New File_Destination_DTLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(File_Destination_DTLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.File_Destination_DTLRowChangedEvent) Is Nothing) Then
                RaiseEvent File_Destination_DTLRowChanged(Me, New File_Destination_DTLRowChangeEvent(CType(e.Row,File_Destination_DTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.File_Destination_DTLRowChangingEvent) Is Nothing) Then
                RaiseEvent File_Destination_DTLRowChanging(Me, New File_Destination_DTLRowChangeEvent(CType(e.Row,File_Destination_DTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.File_Destination_DTLRowDeletedEvent) Is Nothing) Then
                RaiseEvent File_Destination_DTLRowDeleted(Me, New File_Destination_DTLRowChangeEvent(CType(e.Row,File_Destination_DTLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.File_Destination_DTLRowDeletingEvent) Is Nothing) Then
                RaiseEvent File_Destination_DTLRowDeleting(Me, New File_Destination_DTLRowChangeEvent(CType(e.Row,File_Destination_DTLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFile_Destination_DTLRow(ByVal row As File_Destination_DTLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_Destination_DTLRow
        Inherits DataRow
        
        Private tableFile_Destination_DTL As File_Destination_DTLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFile_Destination_DTL = CType(Me.Table,File_Destination_DTLDataTable)
        End Sub
        
        Public Property DesFileCode As String
            Get
                Return CType(Me(Me.tableFile_Destination_DTL.DesFileCodeColumn),String)
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.DesFileCodeColumn) = value
            End Set
        End Property
        
        Public Property DesFieldCode As String
            Get
                Return CType(Me(Me.tableFile_Destination_DTL.DesFieldCodeColumn),String)
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.DesFieldCodeColumn) = value
            End Set
        End Property
        
        Public Property DesFieldName As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination_DTL.DesFieldNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.DesFieldNameColumn) = value
            End Set
        End Property
        
        Public Property Begin As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination_DTL.BeginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.BeginColumn) = value
            End Set
        End Property
        
        Public Property Len As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination_DTL.LenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.LenColumn) = value
            End Set
        End Property
        
        Public Property TargetFieldType As String
            Get
                Try 
                    Return CType(Me(Me.tableFile_Destination_DTL.TargetFieldTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFile_Destination_DTL.TargetFieldTypeColumn) = value
            End Set
        End Property
        
        Public Function IsDesFieldNameNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination_DTL.DesFieldNameColumn)
        End Function
        
        Public Sub SetDesFieldNameNull()
            Me(Me.tableFile_Destination_DTL.DesFieldNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeginNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination_DTL.BeginColumn)
        End Function
        
        Public Sub SetBeginNull()
            Me(Me.tableFile_Destination_DTL.BeginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLenNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination_DTL.LenColumn)
        End Function
        
        Public Sub SetLenNull()
            Me(Me.tableFile_Destination_DTL.LenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetFieldTypeNull() As Boolean
            Return Me.IsNull(Me.tableFile_Destination_DTL.TargetFieldTypeColumn)
        End Function
        
        Public Sub SetTargetFieldTypeNull()
            Me(Me.tableFile_Destination_DTL.TargetFieldTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class File_Destination_DTLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As File_Destination_DTLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As File_Destination_DTLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As File_Destination_DTLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
