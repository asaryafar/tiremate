'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmWorkOrders
    Inherits DataSet
    
    Private tableemployee As employeeDataTable
    
    Private tableservice_center_dtl As service_center_dtlDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Private tableinv_tab_style As inv_tab_styleDataTable
    
    Private tableLOGO As LOGODataTable
    
    Private tableinv_tab_pakage As inv_tab_pakageDataTable
    
    Private tableservice_out_purchases As service_out_purchasesDataTable
    
    Private tableType_select As Type_selectDataTable
    
    Private tableservice_tire_adjustment As service_tire_adjustmentDataTable
    
    Private tableAddUsers As AddUsersDataTable
    
    Private tableChgUsers As ChgUsersDataTable
    
    Private tableTempTable As TempTableDataTable
    
    Private tableservice_center_dtl_Temp As service_center_dtl_TempDataTable
    
    Private tableService_out_purchases_Dtl As Service_out_purchases_DtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            If (Not (ds.Tables("inv_tab_pakage")) Is Nothing) Then
                Me.Tables.Add(New inv_tab_pakageDataTable(ds.Tables("inv_tab_pakage")))
            End If
            If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
                Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
            End If
            If (Not (ds.Tables("Type_select")) Is Nothing) Then
                Me.Tables.Add(New Type_selectDataTable(ds.Tables("Type_select")))
            End If
            If (Not (ds.Tables("service_tire_adjustment")) Is Nothing) Then
                Me.Tables.Add(New service_tire_adjustmentDataTable(ds.Tables("service_tire_adjustment")))
            End If
            If (Not (ds.Tables("AddUsers")) Is Nothing) Then
                Me.Tables.Add(New AddUsersDataTable(ds.Tables("AddUsers")))
            End If
            If (Not (ds.Tables("ChgUsers")) Is Nothing) Then
                Me.Tables.Add(New ChgUsersDataTable(ds.Tables("ChgUsers")))
            End If
            If (Not (ds.Tables("TempTable")) Is Nothing) Then
                Me.Tables.Add(New TempTableDataTable(ds.Tables("TempTable")))
            End If
            If (Not (ds.Tables("service_center_dtl_Temp")) Is Nothing) Then
                Me.Tables.Add(New service_center_dtl_TempDataTable(ds.Tables("service_center_dtl_Temp")))
            End If
            If (Not (ds.Tables("Service_out_purchases_Dtl")) Is Nothing) Then
                Me.Tables.Add(New Service_out_purchases_DtlDataTable(ds.Tables("Service_out_purchases_Dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl As service_center_dtlDataTable
        Get
            Return Me.tableservice_center_dtl
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_style As inv_tab_styleDataTable
        Get
            Return Me.tableinv_tab_style
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property inv_tab_pakage As inv_tab_pakageDataTable
        Get
            Return Me.tableinv_tab_pakage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_out_purchases As service_out_purchasesDataTable
        Get
            Return Me.tableservice_out_purchases
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Type_select As Type_selectDataTable
        Get
            Return Me.tableType_select
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_tire_adjustment As service_tire_adjustmentDataTable
        Get
            Return Me.tableservice_tire_adjustment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AddUsers As AddUsersDataTable
        Get
            Return Me.tableAddUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ChgUsers As ChgUsersDataTable
        Get
            Return Me.tableChgUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TempTable As TempTableDataTable
        Get
            Return Me.tableTempTable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_dtl_Temp As service_center_dtl_TempDataTable
        Get
            Return Me.tableservice_center_dtl_Temp
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Service_out_purchases_Dtl As Service_out_purchases_DtlDataTable
        Get
            Return Me.tableService_out_purchases_Dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmWorkOrders = CType(MyBase.Clone,DSFrmWorkOrders)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("service_center_dtl")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtlDataTable(ds.Tables("service_center_dtl")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        If (Not (ds.Tables("inv_tab_style")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_styleDataTable(ds.Tables("inv_tab_style")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        If (Not (ds.Tables("inv_tab_pakage")) Is Nothing) Then
            Me.Tables.Add(New inv_tab_pakageDataTable(ds.Tables("inv_tab_pakage")))
        End If
        If (Not (ds.Tables("service_out_purchases")) Is Nothing) Then
            Me.Tables.Add(New service_out_purchasesDataTable(ds.Tables("service_out_purchases")))
        End If
        If (Not (ds.Tables("Type_select")) Is Nothing) Then
            Me.Tables.Add(New Type_selectDataTable(ds.Tables("Type_select")))
        End If
        If (Not (ds.Tables("service_tire_adjustment")) Is Nothing) Then
            Me.Tables.Add(New service_tire_adjustmentDataTable(ds.Tables("service_tire_adjustment")))
        End If
        If (Not (ds.Tables("AddUsers")) Is Nothing) Then
            Me.Tables.Add(New AddUsersDataTable(ds.Tables("AddUsers")))
        End If
        If (Not (ds.Tables("ChgUsers")) Is Nothing) Then
            Me.Tables.Add(New ChgUsersDataTable(ds.Tables("ChgUsers")))
        End If
        If (Not (ds.Tables("TempTable")) Is Nothing) Then
            Me.Tables.Add(New TempTableDataTable(ds.Tables("TempTable")))
        End If
        If (Not (ds.Tables("service_center_dtl_Temp")) Is Nothing) Then
            Me.Tables.Add(New service_center_dtl_TempDataTable(ds.Tables("service_center_dtl_Temp")))
        End If
        If (Not (ds.Tables("Service_out_purchases_Dtl")) Is Nothing) Then
            Me.Tables.Add(New Service_out_purchases_DtlDataTable(ds.Tables("Service_out_purchases_Dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableservice_center_dtl = CType(Me.Tables("service_center_dtl"),service_center_dtlDataTable)
        If (Not (Me.tableservice_center_dtl) Is Nothing) Then
            Me.tableservice_center_dtl.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
        Me.tableinv_tab_style = CType(Me.Tables("inv_tab_style"),inv_tab_styleDataTable)
        If (Not (Me.tableinv_tab_style) Is Nothing) Then
            Me.tableinv_tab_style.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
        Me.tableinv_tab_pakage = CType(Me.Tables("inv_tab_pakage"),inv_tab_pakageDataTable)
        If (Not (Me.tableinv_tab_pakage) Is Nothing) Then
            Me.tableinv_tab_pakage.InitVars
        End If
        Me.tableservice_out_purchases = CType(Me.Tables("service_out_purchases"),service_out_purchasesDataTable)
        If (Not (Me.tableservice_out_purchases) Is Nothing) Then
            Me.tableservice_out_purchases.InitVars
        End If
        Me.tableType_select = CType(Me.Tables("Type_select"),Type_selectDataTable)
        If (Not (Me.tableType_select) Is Nothing) Then
            Me.tableType_select.InitVars
        End If
        Me.tableservice_tire_adjustment = CType(Me.Tables("service_tire_adjustment"),service_tire_adjustmentDataTable)
        If (Not (Me.tableservice_tire_adjustment) Is Nothing) Then
            Me.tableservice_tire_adjustment.InitVars
        End If
        Me.tableAddUsers = CType(Me.Tables("AddUsers"),AddUsersDataTable)
        If (Not (Me.tableAddUsers) Is Nothing) Then
            Me.tableAddUsers.InitVars
        End If
        Me.tableChgUsers = CType(Me.Tables("ChgUsers"),ChgUsersDataTable)
        If (Not (Me.tableChgUsers) Is Nothing) Then
            Me.tableChgUsers.InitVars
        End If
        Me.tableTempTable = CType(Me.Tables("TempTable"),TempTableDataTable)
        If (Not (Me.tableTempTable) Is Nothing) Then
            Me.tableTempTable.InitVars
        End If
        Me.tableservice_center_dtl_Temp = CType(Me.Tables("service_center_dtl_Temp"),service_center_dtl_TempDataTable)
        If (Not (Me.tableservice_center_dtl_Temp) Is Nothing) Then
            Me.tableservice_center_dtl_Temp.InitVars
        End If
        Me.tableService_out_purchases_Dtl = CType(Me.Tables("Service_out_purchases_Dtl"),Service_out_purchases_DtlDataTable)
        If (Not (Me.tableService_out_purchases_Dtl) Is Nothing) Then
            Me.tableService_out_purchases_Dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmWorkOrders"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmWorkOrders.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableservice_center_dtl = New service_center_dtlDataTable
        Me.Tables.Add(Me.tableservice_center_dtl)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
        Me.tableinv_tab_style = New inv_tab_styleDataTable
        Me.Tables.Add(Me.tableinv_tab_style)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
        Me.tableinv_tab_pakage = New inv_tab_pakageDataTable
        Me.Tables.Add(Me.tableinv_tab_pakage)
        Me.tableservice_out_purchases = New service_out_purchasesDataTable
        Me.Tables.Add(Me.tableservice_out_purchases)
        Me.tableType_select = New Type_selectDataTable
        Me.Tables.Add(Me.tableType_select)
        Me.tableservice_tire_adjustment = New service_tire_adjustmentDataTable
        Me.Tables.Add(Me.tableservice_tire_adjustment)
        Me.tableAddUsers = New AddUsersDataTable
        Me.Tables.Add(Me.tableAddUsers)
        Me.tableChgUsers = New ChgUsersDataTable
        Me.Tables.Add(Me.tableChgUsers)
        Me.tableTempTable = New TempTableDataTable
        Me.Tables.Add(Me.tableTempTable)
        Me.tableservice_center_dtl_Temp = New service_center_dtl_TempDataTable
        Me.Tables.Add(Me.tableservice_center_dtl_Temp)
        Me.tableService_out_purchases_Dtl = New Service_out_purchases_DtlDataTable
        Me.Tables.Add(Me.tableService_out_purchases_Dtl)
    End Sub
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_style() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeinv_tab_pakage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_out_purchases() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeType_select() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_tire_adjustment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAddUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChgUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTempTable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_dtl_Temp() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeService_out_purchases_Dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub service_center_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtlRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    Public Delegate Sub inv_tab_styleRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_styleRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    Public Delegate Sub inv_tab_pakageRowChangeEventHandler(ByVal sender As Object, ByVal e As inv_tab_pakageRowChangeEvent)
    
    Public Delegate Sub service_out_purchasesRowChangeEventHandler(ByVal sender As Object, ByVal e As service_out_purchasesRowChangeEvent)
    
    Public Delegate Sub Type_selectRowChangeEventHandler(ByVal sender As Object, ByVal e As Type_selectRowChangeEvent)
    
    Public Delegate Sub service_tire_adjustmentRowChangeEventHandler(ByVal sender As Object, ByVal e As service_tire_adjustmentRowChangeEvent)
    
    Public Delegate Sub AddUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As AddUsersRowChangeEvent)
    
    Public Delegate Sub ChgUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As ChgUsersRowChangeEvent)
    
    Public Delegate Sub TempTableRowChangeEventHandler(ByVal sender As Object, ByVal e As TempTableRowChangeEvent)
    
    Public Delegate Sub service_center_dtl_TempRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_dtl_TempRowChangeEvent)
    
    Public Delegate Sub Service_out_purchases_DtlRowChangeEventHandler(ByVal sender As Object, ByVal e As Service_out_purchases_DtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnemployee_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property employee_NameColumn As DataColumn
            Get
                Return Me.columnemployee_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal employee_code As String, ByVal employee_Name As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, employee_Name}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnemployee_Name = Me.Columns("employee_Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnemployee_Name = New DataColumn("employee_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_Name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
            Me.columnemployee_Name.ReadOnly = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property employee_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.employee_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.employee_NameColumn) = value
            End Set
        End Property
        
        Public Function Isemployee_NameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.employee_NameColumn)
        End Function
        
        Public Sub Setemployee_NameNull()
            Me(Me.tableemployee.employee_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnfet As DataColumn
        
        Private columntaxable As DataColumn
        
        Private columncod_technician As DataColumn
        
        Private columnCOMMENT_ARTICLE As DataColumn
        
        Private columnExt_Price As DataColumn
        
        Private columnFlagIsPackage As DataColumn
        
        Private columnPricePlusFet As DataColumn
        
        Private columnAVERAGE_COST As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property taxableColumn As DataColumn
            Get
                Return Me.columntaxable
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property COMMENT_ARTICLEColumn As DataColumn
            Get
                Return Me.columnCOMMENT_ARTICLE
            End Get
        End Property
        
        Friend ReadOnly Property Ext_PriceColumn As DataColumn
            Get
                Return Me.columnExt_Price
            End Get
        End Property
        
        Friend ReadOnly Property FlagIsPackageColumn As DataColumn
            Get
                Return Me.columnFlagIsPackage
            End Get
        End Property
        
        Friend ReadOnly Property PricePlusFetColumn As DataColumn
            Get
                Return Me.columnPricePlusFet
            End Get
        End Property
        
        Friend ReadOnly Property AVERAGE_COSTColumn As DataColumn
            Get
                Return Me.columnAVERAGE_COST
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtlRow
            Get
                Return CType(Me.Rows(index),service_center_dtlRow)
            End Get
        End Property
        
        Public Event service_center_dtlRowChanged As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowChanging As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleted As service_center_dtlRowChangeEventHandler
        
        Public Event service_center_dtlRowDeleting As service_center_dtlRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtlRow(ByVal id_service_center As String, ByVal radif As Short, ByVal type_select As String, ByVal cod_select As String, ByVal desc_radif As String, ByVal qty As Single, ByVal price As Single, ByVal fet As Single, ByVal taxable As Boolean, ByVal cod_technician As String, ByVal COMMENT_ARTICLE As String, ByVal Ext_Price As Single, ByVal FlagIsPackage As Integer, ByVal PricePlusFet As Single, ByVal AVERAGE_COST As Single) As service_center_dtlRow
            Dim rowservice_center_dtlRow As service_center_dtlRow = CType(Me.NewRow,service_center_dtlRow)
            rowservice_center_dtlRow.ItemArray = New Object() {id_service_center, radif, type_select, cod_select, desc_radif, qty, price, fet, taxable, cod_technician, COMMENT_ARTICLE, Ext_Price, FlagIsPackage, PricePlusFet, AVERAGE_COST}
            Me.Rows.Add(rowservice_center_dtlRow)
            Return rowservice_center_dtlRow
        End Function
        
        Public Function FindByradif(ByVal radif As Short) As service_center_dtlRow
            Return CType(Me.Rows.Find(New Object() {radif}),service_center_dtlRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtlDataTable = CType(MyBase.Clone,service_center_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columntype_select = Me.Columns("type_select")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
            Me.columnfet = Me.Columns("fet")
            Me.columntaxable = Me.Columns("taxable")
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columnCOMMENT_ARTICLE = Me.Columns("COMMENT_ARTICLE")
            Me.columnExt_Price = Me.Columns("Ext_Price")
            Me.columnFlagIsPackage = Me.Columns("FlagIsPackage")
            Me.columnPricePlusFet = Me.Columns("PricePlusFet")
            Me.columnAVERAGE_COST = Me.Columns("AVERAGE_COST")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnfet = New DataColumn("fet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columntaxable = New DataColumn("taxable", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxable)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columnCOMMENT_ARTICLE = New DataColumn("COMMENT_ARTICLE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMMENT_ARTICLE)
            Me.columnExt_Price = New DataColumn("Ext_Price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt_Price)
            Me.columnFlagIsPackage = New DataColumn("FlagIsPackage", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagIsPackage)
            Me.columnPricePlusFet = New DataColumn("PricePlusFet", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPricePlusFet)
            Me.columnAVERAGE_COST = New DataColumn("AVERAGE_COST", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVERAGE_COST)
            Me.Constraints.Add(New UniqueConstraint("DSFrmWorkOrdersKey2", New DataColumn() {Me.columnradif}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnradif.Unique = true
            Me.columnqty.AllowDBNull = false
            Me.columnprice.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
            Me.columnFlagIsPackage.DefaultValue = 0
        End Sub
        
        Public Function Newservice_center_dtlRow() As service_center_dtlRow
            Return CType(Me.NewRow,service_center_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanged(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowChanging(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleted(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtlRowDeleting(Me, New service_center_dtlRowChangeEvent(CType(e.Row,service_center_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtlRow(ByVal row As service_center_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRow
        Inherits DataRow
        
        Private tableservice_center_dtl As service_center_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl = CType(Me.Table,service_center_dtlDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_dtl.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_dtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_center_dtl.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_center_dtl.radifColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.type_selectColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Return CType(Me(Me.tableservice_center_dtl.qtyColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_dtl.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Single
            Get
                Return CType(Me(Me.tableservice_center_dtl.priceColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_dtl.priceColumn) = value
            End Set
        End Property
        
        Public Property fet As Single
            Get
                Return CType(Me(Me.tableservice_center_dtl.fetColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_dtl.fetColumn) = value
            End Set
        End Property
        
        Public Property taxable As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.taxableColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.taxableColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property COMMENT_ARTICLE As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn) = value
            End Set
        End Property
        
        Public Property Ext_Price As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.Ext_PriceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.Ext_PriceColumn) = value
            End Set
        End Property
        
        Public Property FlagIsPackage As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.FlagIsPackageColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.FlagIsPackageColumn) = value
            End Set
        End Property
        
        Public Property PricePlusFet As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.PricePlusFetColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.PricePlusFetColumn) = value
            End Set
        End Property
        
        Public Property AVERAGE_COST As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn) = value
            End Set
        End Property
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableservice_center_dtl.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_dtl.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableservice_center_dtl.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxableNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.taxableColumn)
        End Function
        
        Public Sub SettaxableNull()
            Me(Me.tableservice_center_dtl.taxableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableservice_center_dtl.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMMENT_ARTICLENull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn)
        End Function
        
        Public Sub SetCOMMENT_ARTICLENull()
            Me(Me.tableservice_center_dtl.COMMENT_ARTICLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExt_PriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.Ext_PriceColumn)
        End Function
        
        Public Sub SetExt_PriceNull()
            Me(Me.tableservice_center_dtl.Ext_PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagIsPackageNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.FlagIsPackageColumn)
        End Function
        
        Public Sub SetFlagIsPackageNull()
            Me(Me.tableservice_center_dtl.FlagIsPackageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPricePlusFetNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.PricePlusFetColumn)
        End Function
        
        Public Sub SetPricePlusFetNull()
            Me(Me.tableservice_center_dtl.PricePlusFetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVERAGE_COSTNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl.AVERAGE_COSTColumn)
        End Function
        
        Public Sub SetAVERAGE_COSTNull()
            Me(Me.tableservice_center_dtl.AVERAGE_COSTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columntype_of_form As DataColumn
        
        Private columncod_customer As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntax As DataColumn
        
        Private columnhouse_comment As DataColumn
        
        Private columncust_comment As DataColumn
        
        Private columnadd_user As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnabbreviation_name As DataColumn
        
        Private columnchg_user As DataColumn
        
        Private columnid_vehicle As DataColumn
        
        Private columnid_service_center_before As DataColumn
        
        Private columnlicense_no_vehicle As DataColumn
        
        Private columncurrent_mileage As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnid_GL_journal As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property type_of_formColumn As DataColumn
            Get
                Return Me.columntype_of_form
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property house_commentColumn As DataColumn
            Get
                Return Me.columnhouse_comment
            End Get
        End Property
        
        Friend ReadOnly Property cust_commentColumn As DataColumn
            Get
                Return Me.columncust_comment
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_nameColumn As DataColumn
            Get
                Return Me.columnabbreviation_name
            End Get
        End Property
        
        Friend ReadOnly Property chg_userColumn As DataColumn
            Get
                Return Me.columnchg_user
            End Get
        End Property
        
        Friend ReadOnly Property id_vehicleColumn As DataColumn
            Get
                Return Me.columnid_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property id_service_center_beforeColumn As DataColumn
            Get
                Return Me.columnid_service_center_before
            End Get
        End Property
        
        Friend ReadOnly Property license_no_vehicleColumn As DataColumn
            Get
                Return Me.columnlicense_no_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property current_mileageColumn As DataColumn
            Get
                Return Me.columncurrent_mileage
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property id_GL_journalColumn As DataColumn
            Get
                Return Me.columnid_GL_journal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow( _
                    ByVal id_service_center As String,  _
                    ByVal type_of_form As String,  _
                    ByVal cod_customer As String,  _
                    ByVal date_refer As String,  _
                    ByVal discount As Single,  _
                    ByVal tax As Single,  _
                    ByVal house_comment As String,  _
                    ByVal cust_comment As String,  _
                    ByVal add_user As Short,  _
                    ByVal po_no As String,  _
                    ByVal complete_name As String,  _
                    ByVal abbreviation_name As String,  _
                    ByVal chg_user As Short,  _
                    ByVal id_vehicle As Integer,  _
                    ByVal id_service_center_before As String,  _
                    ByVal license_no_vehicle As String,  _
                    ByVal current_mileage As Single,  _
                    ByVal Total As Single,  _
                    ByVal id_GL_journal As Integer) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {id_service_center, type_of_form, cod_customer, date_refer, discount, tax, house_comment, cust_comment, add_user, po_no, complete_name, abbreviation_name, chg_user, id_vehicle, id_service_center_before, license_no_vehicle, current_mileage, Total, id_GL_journal}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columntype_of_form = Me.Columns("type_of_form")
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columndiscount = Me.Columns("discount")
            Me.columntax = Me.Columns("tax")
            Me.columnhouse_comment = Me.Columns("house_comment")
            Me.columncust_comment = Me.Columns("cust_comment")
            Me.columnadd_user = Me.Columns("add_user")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnabbreviation_name = Me.Columns("abbreviation_name")
            Me.columnchg_user = Me.Columns("chg_user")
            Me.columnid_vehicle = Me.Columns("id_vehicle")
            Me.columnid_service_center_before = Me.Columns("id_service_center_before")
            Me.columnlicense_no_vehicle = Me.Columns("license_no_vehicle")
            Me.columncurrent_mileage = Me.Columns("current_mileage")
            Me.columnTotal = Me.Columns("Total")
            Me.columnid_GL_journal = Me.Columns("id_GL_journal")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columntype_of_form = New DataColumn("type_of_form", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_of_form)
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntax = New DataColumn("tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnhouse_comment = New DataColumn("house_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comment)
            Me.columncust_comment = New DataColumn("cust_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_comment)
            Me.columnadd_user = New DataColumn("add_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnabbreviation_name = New DataColumn("abbreviation_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_name)
            Me.columnchg_user = New DataColumn("chg_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchg_user)
            Me.columnid_vehicle = New DataColumn("id_vehicle", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_vehicle)
            Me.columnid_service_center_before = New DataColumn("id_service_center_before", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center_before)
            Me.columnlicense_no_vehicle = New DataColumn("license_no_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlicense_no_vehicle)
            Me.columncurrent_mileage = New DataColumn("current_mileage", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurrent_mileage)
            Me.columnTotal = New DataColumn("Total", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnid_GL_journal = New DataColumn("id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_GL_journal)
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_head.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property type_of_form As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.type_of_formColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.type_of_formColumn) = value
            End Set
        End Property
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.discountColumn) = value
            End Set
        End Property
        
        Public Property tax As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.taxColumn) = value
            End Set
        End Property
        
        Public Property house_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.house_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.house_commentColumn) = value
            End Set
        End Property
        
        Public Property cust_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cust_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cust_commentColumn) = value
            End Set
        End Property
        
        Public Property add_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.add_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.add_userColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_name As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.abbreviation_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.abbreviation_nameColumn) = value
            End Set
        End Property
        
        Public Property chg_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.chg_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.chg_userColumn) = value
            End Set
        End Property
        
        Public Property id_vehicle As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_vehicleColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_vehicleColumn) = value
            End Set
        End Property
        
        Public Property id_service_center_before As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_service_center_beforeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_center_beforeColumn) = value
            End Set
        End Property
        
        Public Property license_no_vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.license_no_vehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.license_no_vehicleColumn) = value
            End Set
        End Property
        
        Public Property current_mileage As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.current_mileageColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.current_mileageColumn) = value
            End Set
        End Property
        
        Public Property Total As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.TotalColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.TotalColumn) = value
            End Set
        End Property
        
        Public Property id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Function Istype_of_formNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.type_of_formColumn)
        End Function
        
        Public Sub Settype_of_formNull()
            Me(Me.tableservice_center_head.type_of_formColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableservice_center_head.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_head.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableservice_center_head.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableservice_center_head.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.house_commentColumn)
        End Function
        
        Public Sub Sethouse_commentNull()
            Me(Me.tableservice_center_head.house_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cust_commentColumn)
        End Function
        
        Public Sub Setcust_commentNull()
            Me(Me.tableservice_center_head.cust_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableservice_center_head.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableservice_center_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableservice_center_head.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isabbreviation_nameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.abbreviation_nameColumn)
        End Function
        
        Public Sub Setabbreviation_nameNull()
            Me(Me.tableservice_center_head.abbreviation_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischg_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.chg_userColumn)
        End Function
        
        Public Sub Setchg_userNull()
            Me(Me.tableservice_center_head.chg_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_vehicleColumn)
        End Function
        
        Public Sub Setid_vehicleNull()
            Me(Me.tableservice_center_head.id_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_center_beforeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_service_center_beforeColumn)
        End Function
        
        Public Sub Setid_service_center_beforeNull()
            Me(Me.tableservice_center_head.id_service_center_beforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islicense_no_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.license_no_vehicleColumn)
        End Function
        
        Public Sub Setlicense_no_vehicleNull()
            Me(Me.tableservice_center_head.license_no_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscurrent_mileageNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.current_mileageColumn)
        End Function
        
        Public Sub Setcurrent_mileageNull()
            Me(Me.tableservice_center_head.current_mileageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_head.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_GL_journalColumn)
        End Function
        
        Public Sub Setid_GL_journalNull()
            Me(Me.tableservice_center_head.id_GL_journalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstyle As DataColumn
        
        Private columndesc_style As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_style")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property styleColumn As DataColumn
            Get
                Return Me.columnstyle
            End Get
        End Property
        
        Friend ReadOnly Property desc_styleColumn As DataColumn
            Get
                Return Me.columndesc_style
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_styleRow
            Get
                Return CType(Me.Rows(index),inv_tab_styleRow)
            End Get
        End Property
        
        Public Event inv_tab_styleRowChanged As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowChanging As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleted As inv_tab_styleRowChangeEventHandler
        
        Public Event inv_tab_styleRowDeleting As inv_tab_styleRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_styleRow(ByVal style As String, ByVal desc_style As String) As inv_tab_styleRow
            Dim rowinv_tab_styleRow As inv_tab_styleRow = CType(Me.NewRow,inv_tab_styleRow)
            rowinv_tab_styleRow.ItemArray = New Object() {style, desc_style}
            Me.Rows.Add(rowinv_tab_styleRow)
            Return rowinv_tab_styleRow
        End Function
        
        Public Function FindBystyle(ByVal style As String) As inv_tab_styleRow
            Return CType(Me.Rows.Find(New Object() {style}),inv_tab_styleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_styleDataTable = CType(MyBase.Clone,inv_tab_styleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_styleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstyle = Me.Columns("style")
            Me.columndesc_style = Me.Columns("desc_style")
        End Sub
        
        Private Sub InitClass()
            Me.columnstyle = New DataColumn("style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstyle)
            Me.columndesc_style = New DataColumn("desc_style", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_style)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstyle}, true))
            Me.columnstyle.AllowDBNull = false
            Me.columnstyle.Unique = true
        End Sub
        
        Public Function Newinv_tab_styleRow() As inv_tab_styleRow
            Return CType(Me.NewRow,inv_tab_styleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_styleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_styleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_styleRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanged(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_styleRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowChanging(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_styleRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleted(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_styleRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_styleRowDeleting(Me, New inv_tab_styleRowChangeEvent(CType(e.Row,inv_tab_styleRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_styleRow(ByVal row As inv_tab_styleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRow
        Inherits DataRow
        
        Private tableinv_tab_style As inv_tab_styleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_style = CType(Me.Table,inv_tab_styleDataTable)
        End Sub
        
        Public Property style As String
            Get
                Return CType(Me(Me.tableinv_tab_style.styleColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_style.styleColumn) = value
            End Set
        End Property
        
        Public Property desc_style As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_style.desc_styleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_style.desc_styleColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_styleNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_style.desc_styleColumn)
        End Function
        
        Public Sub Setdesc_styleNull()
            Me(Me.tableinv_tab_style.desc_styleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_styleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_styleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_styleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_styleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_pakage As DataColumn
        
        Private columnradif As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprice As DataColumn
        
        Friend Sub New()
            MyBase.New("inv_tab_pakage")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_pakageColumn As DataColumn
            Get
                Return Me.columncod_pakage
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As inv_tab_pakageRow
            Get
                Return CType(Me.Rows(index),inv_tab_pakageRow)
            End Get
        End Property
        
        Public Event inv_tab_pakageRowChanged As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowChanging As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowDeleted As inv_tab_pakageRowChangeEventHandler
        
        Public Event inv_tab_pakageRowDeleting As inv_tab_pakageRowChangeEventHandler
        
        Public Overloads Sub Addinv_tab_pakageRow(ByVal row As inv_tab_pakageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addinv_tab_pakageRow(ByVal cod_pakage As String, ByVal radif As Short, ByVal type_select As String, ByVal cod_select As String, ByVal desc_radif As String, ByVal qty As Single, ByVal price As Single) As inv_tab_pakageRow
            Dim rowinv_tab_pakageRow As inv_tab_pakageRow = CType(Me.NewRow,inv_tab_pakageRow)
            rowinv_tab_pakageRow.ItemArray = New Object() {cod_pakage, radif, type_select, cod_select, desc_radif, qty, price}
            Me.Rows.Add(rowinv_tab_pakageRow)
            Return rowinv_tab_pakageRow
        End Function
        
        Public Function FindBycod_pakageradif(ByVal cod_pakage As String, ByVal radif As Short) As inv_tab_pakageRow
            Return CType(Me.Rows.Find(New Object() {cod_pakage, radif}),inv_tab_pakageRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As inv_tab_pakageDataTable = CType(MyBase.Clone,inv_tab_pakageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New inv_tab_pakageDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_pakage = Me.Columns("cod_pakage")
            Me.columnradif = Me.Columns("radif")
            Me.columntype_select = Me.Columns("type_select")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnqty = Me.Columns("qty")
            Me.columnprice = Me.Columns("price")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_pakage = New DataColumn("cod_pakage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_pakage)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprice = New DataColumn("price", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_pakage, Me.columnradif}, true))
            Me.columncod_pakage.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
        End Sub
        
        Public Function Newinv_tab_pakageRow() As inv_tab_pakageRow
            Return CType(Me.NewRow,inv_tab_pakageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New inv_tab_pakageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(inv_tab_pakageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.inv_tab_pakageRowChangedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowChanged(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.inv_tab_pakageRowChangingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowChanging(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.inv_tab_pakageRowDeletedEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowDeleted(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.inv_tab_pakageRowDeletingEvent) Is Nothing) Then
                RaiseEvent inv_tab_pakageRowDeleting(Me, New inv_tab_pakageRowChangeEvent(CType(e.Row,inv_tab_pakageRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeinv_tab_pakageRow(ByVal row As inv_tab_pakageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageRow
        Inherits DataRow
        
        Private tableinv_tab_pakage As inv_tab_pakageDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableinv_tab_pakage = CType(Me.Table,inv_tab_pakageDataTable)
        End Sub
        
        Public Property cod_pakage As String
            Get
                Return CType(Me(Me.tableinv_tab_pakage.cod_pakageColumn),String)
            End Get
            Set
                Me(Me.tableinv_tab_pakage.cod_pakageColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableinv_tab_pakage.radifColumn),Short)
            End Get
            Set
                Me(Me.tableinv_tab_pakage.radifColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.type_selectColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.qtyColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.qtyColumn) = value
            End Set
        End Property
        
        Public Property price As Single
            Get
                Try 
                    Return CType(Me(Me.tableinv_tab_pakage.priceColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinv_tab_pakage.priceColumn) = value
            End Set
        End Property
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableinv_tab_pakage.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableinv_tab_pakage.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableinv_tab_pakage.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableinv_tab_pakage.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableinv_tab_pakage.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableinv_tab_pakage.priceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class inv_tab_pakageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As inv_tab_pakageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As inv_tab_pakageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As inv_tab_pakageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnpart_no As DataColumn
        
        Private columndescription As DataColumn
        
        Private columncost As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnmarkup As DataColumn
        
        Private columncod_vendor As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnline As DataColumn
        
        Private columninvoice_no As DataColumn
        
        Private columninvoice_date As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columntracking_warranty As DataColumn
        
        Private columnin_day As DataColumn
        
        Private columnin_mile As DataColumn
        
        Private columntracking_core As DataColumn
        
        Private columncore_value As DataColumn
        
        Private columnPaidFlag As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Friend Sub New()
            MyBase.New("service_out_purchases")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property part_noColumn As DataColumn
            Get
                Return Me.columnpart_no
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property costColumn As DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property markupColumn As DataColumn
            Get
                Return Me.columnmarkup
            End Get
        End Property
        
        Friend ReadOnly Property cod_vendorColumn As DataColumn
            Get
                Return Me.columncod_vendor
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property lineColumn As DataColumn
            Get
                Return Me.columnline
            End Get
        End Property
        
        Friend ReadOnly Property invoice_noColumn As DataColumn
            Get
                Return Me.columninvoice_no
            End Get
        End Property
        
        Friend ReadOnly Property invoice_dateColumn As DataColumn
            Get
                Return Me.columninvoice_date
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property tracking_warrantyColumn As DataColumn
            Get
                Return Me.columntracking_warranty
            End Get
        End Property
        
        Friend ReadOnly Property in_dayColumn As DataColumn
            Get
                Return Me.columnin_day
            End Get
        End Property
        
        Friend ReadOnly Property in_mileColumn As DataColumn
            Get
                Return Me.columnin_mile
            End Get
        End Property
        
        Friend ReadOnly Property tracking_coreColumn As DataColumn
            Get
                Return Me.columntracking_core
            End Get
        End Property
        
        Friend ReadOnly Property core_valueColumn As DataColumn
            Get
                Return Me.columncore_value
            End Get
        End Property
        
        Friend ReadOnly Property PaidFlagColumn As DataColumn
            Get
                Return Me.columnPaidFlag
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_out_purchasesRow
            Get
                Return CType(Me.Rows(index),service_out_purchasesRow)
            End Get
        End Property
        
        Public Event service_out_purchasesRowChanged As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowChanging As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleted As service_out_purchasesRowChangeEventHandler
        
        Public Event service_out_purchasesRowDeleting As service_out_purchasesRowChangeEventHandler
        
        Public Overloads Sub Addservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_out_purchasesRow( _
                    ByVal id_service_center As String,  _
                    ByVal radif As Short,  _
                    ByVal part_no As String,  _
                    ByVal description As String,  _
                    ByVal cost As Decimal,  _
                    ByVal fet As Decimal,  _
                    ByVal price As String,  _
                    ByVal markup As Decimal,  _
                    ByVal cod_vendor As String,  _
                    ByVal po_no As String,  _
                    ByVal line As String,  _
                    ByVal invoice_no As String,  _
                    ByVal invoice_date As String,  _
                    ByVal due_date As String,  _
                    ByVal tracking_warranty As Boolean,  _
                    ByVal in_day As Short,  _
                    ByVal in_mile As Short,  _
                    ByVal tracking_core As Boolean,  _
                    ByVal core_value As Decimal,  _
                    ByVal PaidFlag As Boolean,  _
                    ByVal AR_terms As String) As service_out_purchasesRow
            Dim rowservice_out_purchasesRow As service_out_purchasesRow = CType(Me.NewRow,service_out_purchasesRow)
            rowservice_out_purchasesRow.ItemArray = New Object() {id_service_center, radif, part_no, description, cost, fet, price, markup, cod_vendor, po_no, line, invoice_no, invoice_date, due_date, tracking_warranty, in_day, in_mile, tracking_core, core_value, PaidFlag, AR_terms}
            Me.Rows.Add(rowservice_out_purchasesRow)
            Return rowservice_out_purchasesRow
        End Function
        
        Public Function FindByradif(ByVal radif As Short) As service_out_purchasesRow
            Return CType(Me.Rows.Find(New Object() {radif}),service_out_purchasesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_out_purchasesDataTable = CType(MyBase.Clone,service_out_purchasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_out_purchasesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columnpart_no = Me.Columns("part_no")
            Me.columndescription = Me.Columns("description")
            Me.columncost = Me.Columns("cost")
            Me.columnfet = Me.Columns("fet")
            Me.columnprice = Me.Columns("price")
            Me.columnmarkup = Me.Columns("markup")
            Me.columncod_vendor = Me.Columns("cod_vendor")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnline = Me.Columns("line")
            Me.columninvoice_no = Me.Columns("invoice_no")
            Me.columninvoice_date = Me.Columns("invoice_date")
            Me.columndue_date = Me.Columns("due_date")
            Me.columntracking_warranty = Me.Columns("tracking_warranty")
            Me.columnin_day = Me.Columns("in_day")
            Me.columnin_mile = Me.Columns("in_mile")
            Me.columntracking_core = Me.Columns("tracking_core")
            Me.columncore_value = Me.Columns("core_value")
            Me.columnPaidFlag = Me.Columns("PaidFlag")
            Me.columnAR_terms = Me.Columns("AR_terms")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnpart_no = New DataColumn("part_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpart_no)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columncost = New DataColumn("cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncost)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnprice = New DataColumn("price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columnmarkup = New DataColumn("markup", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmarkup)
            Me.columncod_vendor = New DataColumn("cod_vendor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_vendor)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnline = New DataColumn("line", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline)
            Me.columninvoice_no = New DataColumn("invoice_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvoice_no)
            Me.columninvoice_date = New DataColumn("invoice_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninvoice_date)
            Me.columndue_date = New DataColumn("due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columntracking_warranty = New DataColumn("tracking_warranty", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntracking_warranty)
            Me.columnin_day = New DataColumn("in_day", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnin_day)
            Me.columnin_mile = New DataColumn("in_mile", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnin_mile)
            Me.columntracking_core = New DataColumn("tracking_core", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntracking_core)
            Me.columncore_value = New DataColumn("core_value", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncore_value)
            Me.columnPaidFlag = New DataColumn("PaidFlag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaidFlag)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.Constraints.Add(New UniqueConstraint("DSFrmWorkOrdersKey1", New DataColumn() {Me.columnradif}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnradif.Unique = true
        End Sub
        
        Public Function Newservice_out_purchasesRow() As service_out_purchasesRow
            Return CType(Me.NewRow,service_out_purchasesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_out_purchasesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_out_purchasesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_out_purchasesRowChangedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanged(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_out_purchasesRowChangingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowChanging(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_out_purchasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleted(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_out_purchasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_out_purchasesRowDeleting(Me, New service_out_purchasesRowChangeEvent(CType(e.Row,service_out_purchasesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_out_purchasesRow(ByVal row As service_out_purchasesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRow
        Inherits DataRow
        
        Private tableservice_out_purchases As service_out_purchasesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_out_purchases = CType(Me.Table,service_out_purchasesDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_out_purchases.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_out_purchases.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_out_purchases.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_out_purchases.radifColumn) = value
            End Set
        End Property
        
        Public Property part_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.part_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.part_noColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.descriptionColumn) = value
            End Set
        End Property
        
        Public Property cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.costColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.costColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.fetColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.fetColumn) = value
            End Set
        End Property
        
        Public Property price As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.priceColumn) = value
            End Set
        End Property
        
        Public Property markup As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.markupColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.markupColumn) = value
            End Set
        End Property
        
        Public Property cod_vendor As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.cod_vendorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.cod_vendorColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.po_noColumn) = value
            End Set
        End Property
        
        Public Property line As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.lineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.lineColumn) = value
            End Set
        End Property
        
        Public Property invoice_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.invoice_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.invoice_noColumn) = value
            End Set
        End Property
        
        Public Property invoice_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.invoice_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.invoice_dateColumn) = value
            End Set
        End Property
        
        Public Property due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.due_dateColumn) = value
            End Set
        End Property
        
        Public Property tracking_warranty As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.tracking_warrantyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.tracking_warrantyColumn) = value
            End Set
        End Property
        
        Public Property in_day As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.in_dayColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.in_dayColumn) = value
            End Set
        End Property
        
        Public Property in_mile As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.in_mileColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.in_mileColumn) = value
            End Set
        End Property
        
        Public Property tracking_core As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.tracking_coreColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.tracking_coreColumn) = value
            End Set
        End Property
        
        Public Property core_value As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.core_valueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.core_valueColumn) = value
            End Set
        End Property
        
        Public Property PaidFlag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.PaidFlagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.PaidFlagColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_out_purchases.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_out_purchases.AR_termsColumn) = value
            End Set
        End Property
        
        Public Function Ispart_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.part_noColumn)
        End Function
        
        Public Sub Setpart_noNull()
            Me(Me.tableservice_out_purchases.part_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableservice_out_purchases.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.costColumn)
        End Function
        
        Public Sub SetcostNull()
            Me(Me.tableservice_out_purchases.costColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfetNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.fetColumn)
        End Function
        
        Public Sub SetfetNull()
            Me(Me.tableservice_out_purchases.fetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.priceColumn)
        End Function
        
        Public Sub SetpriceNull()
            Me(Me.tableservice_out_purchases.priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmarkupNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.markupColumn)
        End Function
        
        Public Sub SetmarkupNull()
            Me(Me.tableservice_out_purchases.markupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_vendorNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.cod_vendorColumn)
        End Function
        
        Public Sub Setcod_vendorNull()
            Me(Me.tableservice_out_purchases.cod_vendorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableservice_out_purchases.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslineNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.lineColumn)
        End Function
        
        Public Sub SetlineNull()
            Me(Me.tableservice_out_purchases.lineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isinvoice_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.invoice_noColumn)
        End Function
        
        Public Sub Setinvoice_noNull()
            Me(Me.tableservice_out_purchases.invoice_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isinvoice_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.invoice_dateColumn)
        End Function
        
        Public Sub Setinvoice_dateNull()
            Me(Me.tableservice_out_purchases.invoice_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableservice_out_purchases.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istracking_warrantyNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.tracking_warrantyColumn)
        End Function
        
        Public Sub Settracking_warrantyNull()
            Me(Me.tableservice_out_purchases.tracking_warrantyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isin_dayNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.in_dayColumn)
        End Function
        
        Public Sub Setin_dayNull()
            Me(Me.tableservice_out_purchases.in_dayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isin_mileNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.in_mileColumn)
        End Function
        
        Public Sub Setin_mileNull()
            Me(Me.tableservice_out_purchases.in_mileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istracking_coreNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.tracking_coreColumn)
        End Function
        
        Public Sub Settracking_coreNull()
            Me(Me.tableservice_out_purchases.tracking_coreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscore_valueNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.core_valueColumn)
        End Function
        
        Public Sub Setcore_valueNull()
            Me(Me.tableservice_out_purchases.core_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaidFlagNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.PaidFlagColumn)
        End Function
        
        Public Sub SetPaidFlagNull()
            Me(Me.tableservice_out_purchases.PaidFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableservice_out_purchases.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableservice_out_purchases.AR_termsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_out_purchasesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_out_purchasesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_out_purchasesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_out_purchasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Type_selectDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCode As DataColumn
        
        Private columnDesc As DataColumn
        
        Friend Sub New()
            MyBase.New("Type_select")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodeColumn As DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        Friend ReadOnly Property DescColumn As DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Type_selectRow
            Get
                Return CType(Me.Rows(index),Type_selectRow)
            End Get
        End Property
        
        Public Event Type_selectRowChanged As Type_selectRowChangeEventHandler
        
        Public Event Type_selectRowChanging As Type_selectRowChangeEventHandler
        
        Public Event Type_selectRowDeleted As Type_selectRowChangeEventHandler
        
        Public Event Type_selectRowDeleting As Type_selectRowChangeEventHandler
        
        Public Overloads Sub AddType_selectRow(ByVal row As Type_selectRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddType_selectRow(ByVal Code As String, ByVal Desc As String) As Type_selectRow
            Dim rowType_selectRow As Type_selectRow = CType(Me.NewRow,Type_selectRow)
            rowType_selectRow.ItemArray = New Object() {Code, Desc}
            Me.Rows.Add(rowType_selectRow)
            Return rowType_selectRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Type_selectDataTable = CType(MyBase.Clone,Type_selectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Type_selectDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCode = Me.Columns("Code")
            Me.columnDesc = Me.Columns("Desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnCode = New DataColumn("Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCode)
            Me.columnDesc = New DataColumn("Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc)
        End Sub
        
        Public Function NewType_selectRow() As Type_selectRow
            Return CType(Me.NewRow,Type_selectRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Type_selectRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Type_selectRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Type_selectRowChangedEvent) Is Nothing) Then
                RaiseEvent Type_selectRowChanged(Me, New Type_selectRowChangeEvent(CType(e.Row,Type_selectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Type_selectRowChangingEvent) Is Nothing) Then
                RaiseEvent Type_selectRowChanging(Me, New Type_selectRowChangeEvent(CType(e.Row,Type_selectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Type_selectRowDeletedEvent) Is Nothing) Then
                RaiseEvent Type_selectRowDeleted(Me, New Type_selectRowChangeEvent(CType(e.Row,Type_selectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Type_selectRowDeletingEvent) Is Nothing) Then
                RaiseEvent Type_selectRowDeleting(Me, New Type_selectRowChangeEvent(CType(e.Row,Type_selectRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveType_selectRow(ByVal row As Type_selectRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Type_selectRow
        Inherits DataRow
        
        Private tableType_select As Type_selectDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableType_select = CType(Me.Table,Type_selectDataTable)
        End Sub
        
        Public Property Code As String
            Get
                Try 
                    Return CType(Me(Me.tableType_select.CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableType_select.CodeColumn) = value
            End Set
        End Property
        
        Public Property Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableType_select.DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableType_select.DescColumn) = value
            End Set
        End Property
        
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableType_select.CodeColumn)
        End Function
        
        Public Sub SetCodeNull()
            Me(Me.tableType_select.CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tableType_select.DescColumn)
        End Function
        
        Public Sub SetDescNull()
            Me(Me.tableType_select.DescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Type_selectRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Type_selectRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Type_selectRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Type_selectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_tire_adjustmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_service_center As DataColumn
        
        Private columnradif As DataColumn
        
        Private columnDOT_safety_code As DataColumn
        
        Private columnDOT_serial_no As DataColumn
        
        Private columnmeasured_tread_depth As DataColumn
        
        Private columncondition_code As DataColumn
        
        Private columnsupplier_percent As DataColumn
        
        Private columncostomer_portion As DataColumn
        
        Friend Sub New()
            MyBase.New("service_tire_adjustment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property radifColumn As DataColumn
            Get
                Return Me.columnradif
            End Get
        End Property
        
        Friend ReadOnly Property DOT_safety_codeColumn As DataColumn
            Get
                Return Me.columnDOT_safety_code
            End Get
        End Property
        
        Friend ReadOnly Property DOT_serial_noColumn As DataColumn
            Get
                Return Me.columnDOT_serial_no
            End Get
        End Property
        
        Friend ReadOnly Property measured_tread_depthColumn As DataColumn
            Get
                Return Me.columnmeasured_tread_depth
            End Get
        End Property
        
        Friend ReadOnly Property condition_codeColumn As DataColumn
            Get
                Return Me.columncondition_code
            End Get
        End Property
        
        Friend ReadOnly Property supplier_percentColumn As DataColumn
            Get
                Return Me.columnsupplier_percent
            End Get
        End Property
        
        Friend ReadOnly Property costomer_portionColumn As DataColumn
            Get
                Return Me.columncostomer_portion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_tire_adjustmentRow
            Get
                Return CType(Me.Rows(index),service_tire_adjustmentRow)
            End Get
        End Property
        
        Public Event service_tire_adjustmentRowChanged As service_tire_adjustmentRowChangeEventHandler
        
        Public Event service_tire_adjustmentRowChanging As service_tire_adjustmentRowChangeEventHandler
        
        Public Event service_tire_adjustmentRowDeleted As service_tire_adjustmentRowChangeEventHandler
        
        Public Event service_tire_adjustmentRowDeleting As service_tire_adjustmentRowChangeEventHandler
        
        Public Overloads Sub Addservice_tire_adjustmentRow(ByVal row As service_tire_adjustmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_tire_adjustmentRow(ByVal id_service_center As String, ByVal radif As Short, ByVal DOT_safety_code As String, ByVal DOT_serial_no As String, ByVal measured_tread_depth As String, ByVal condition_code As String, ByVal supplier_percent As Decimal, ByVal costomer_portion As Decimal) As service_tire_adjustmentRow
            Dim rowservice_tire_adjustmentRow As service_tire_adjustmentRow = CType(Me.NewRow,service_tire_adjustmentRow)
            rowservice_tire_adjustmentRow.ItemArray = New Object() {id_service_center, radif, DOT_safety_code, DOT_serial_no, measured_tread_depth, condition_code, supplier_percent, costomer_portion}
            Me.Rows.Add(rowservice_tire_adjustmentRow)
            Return rowservice_tire_adjustmentRow
        End Function
        
        Public Function FindByradif(ByVal radif As Short) As service_tire_adjustmentRow
            Return CType(Me.Rows.Find(New Object() {radif}),service_tire_adjustmentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_tire_adjustmentDataTable = CType(MyBase.Clone,service_tire_adjustmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_tire_adjustmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnradif = Me.Columns("radif")
            Me.columnDOT_safety_code = Me.Columns("DOT_safety_code")
            Me.columnDOT_serial_no = Me.Columns("DOT_serial_no")
            Me.columnmeasured_tread_depth = Me.Columns("measured_tread_depth")
            Me.columncondition_code = Me.Columns("condition_code")
            Me.columnsupplier_percent = Me.Columns("supplier_percent")
            Me.columncostomer_portion = Me.Columns("costomer_portion")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnradif = New DataColumn("radif", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnradif)
            Me.columnDOT_safety_code = New DataColumn("DOT_safety_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOT_safety_code)
            Me.columnDOT_serial_no = New DataColumn("DOT_serial_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOT_serial_no)
            Me.columnmeasured_tread_depth = New DataColumn("measured_tread_depth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmeasured_tread_depth)
            Me.columncondition_code = New DataColumn("condition_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncondition_code)
            Me.columnsupplier_percent = New DataColumn("supplier_percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsupplier_percent)
            Me.columncostomer_portion = New DataColumn("costomer_portion", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncostomer_portion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnradif}, true))
            Me.columnid_service_center.AllowDBNull = false
            Me.columnradif.AllowDBNull = false
            Me.columnradif.Unique = true
        End Sub
        
        Public Function Newservice_tire_adjustmentRow() As service_tire_adjustmentRow
            Return CType(Me.NewRow,service_tire_adjustmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_tire_adjustmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_tire_adjustmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_tire_adjustmentRowChangedEvent) Is Nothing) Then
                RaiseEvent service_tire_adjustmentRowChanged(Me, New service_tire_adjustmentRowChangeEvent(CType(e.Row,service_tire_adjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_tire_adjustmentRowChangingEvent) Is Nothing) Then
                RaiseEvent service_tire_adjustmentRowChanging(Me, New service_tire_adjustmentRowChangeEvent(CType(e.Row,service_tire_adjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_tire_adjustmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_tire_adjustmentRowDeleted(Me, New service_tire_adjustmentRowChangeEvent(CType(e.Row,service_tire_adjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_tire_adjustmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_tire_adjustmentRowDeleting(Me, New service_tire_adjustmentRowChangeEvent(CType(e.Row,service_tire_adjustmentRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_tire_adjustmentRow(ByVal row As service_tire_adjustmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_tire_adjustmentRow
        Inherits DataRow
        
        Private tableservice_tire_adjustment As service_tire_adjustmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_tire_adjustment = CType(Me.Table,service_tire_adjustmentDataTable)
        End Sub
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_tire_adjustment.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property radif As Short
            Get
                Return CType(Me(Me.tableservice_tire_adjustment.radifColumn),Short)
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.radifColumn) = value
            End Set
        End Property
        
        Public Property DOT_safety_code As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.DOT_safety_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.DOT_safety_codeColumn) = value
            End Set
        End Property
        
        Public Property DOT_serial_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.DOT_serial_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.DOT_serial_noColumn) = value
            End Set
        End Property
        
        Public Property measured_tread_depth As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.measured_tread_depthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.measured_tread_depthColumn) = value
            End Set
        End Property
        
        Public Property condition_code As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.condition_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.condition_codeColumn) = value
            End Set
        End Property
        
        Public Property supplier_percent As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.supplier_percentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.supplier_percentColumn) = value
            End Set
        End Property
        
        Public Property costomer_portion As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_tire_adjustment.costomer_portionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_tire_adjustment.costomer_portionColumn) = value
            End Set
        End Property
        
        Public Function IsDOT_safety_codeNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.DOT_safety_codeColumn)
        End Function
        
        Public Sub SetDOT_safety_codeNull()
            Me(Me.tableservice_tire_adjustment.DOT_safety_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOT_serial_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.DOT_serial_noColumn)
        End Function
        
        Public Sub SetDOT_serial_noNull()
            Me(Me.tableservice_tire_adjustment.DOT_serial_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismeasured_tread_depthNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.measured_tread_depthColumn)
        End Function
        
        Public Sub Setmeasured_tread_depthNull()
            Me(Me.tableservice_tire_adjustment.measured_tread_depthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscondition_codeNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.condition_codeColumn)
        End Function
        
        Public Sub Setcondition_codeNull()
            Me(Me.tableservice_tire_adjustment.condition_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issupplier_percentNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.supplier_percentColumn)
        End Function
        
        Public Sub Setsupplier_percentNull()
            Me(Me.tableservice_tire_adjustment.supplier_percentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscostomer_portionNull() As Boolean
            Return Me.IsNull(Me.tableservice_tire_adjustment.costomer_portionColumn)
        End Function
        
        Public Sub Setcostomer_portionNull()
            Me(Me.tableservice_tire_adjustment.costomer_portionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_tire_adjustmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_tire_adjustmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_tire_adjustmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_tire_adjustmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AddUsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserLogin As DataColumn
        
        Private columnUserId As DataColumn
        
        Friend Sub New()
            MyBase.New("AddUsers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AddUsersRow
            Get
                Return CType(Me.Rows(index),AddUsersRow)
            End Get
        End Property
        
        Public Event AddUsersRowChanged As AddUsersRowChangeEventHandler
        
        Public Event AddUsersRowChanging As AddUsersRowChangeEventHandler
        
        Public Event AddUsersRowDeleted As AddUsersRowChangeEventHandler
        
        Public Event AddUsersRowDeleting As AddUsersRowChangeEventHandler
        
        Public Overloads Sub AddAddUsersRow(ByVal row As AddUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAddUsersRow(ByVal UserLogin As String, ByVal UserId As Integer) As AddUsersRow
            Dim rowAddUsersRow As AddUsersRow = CType(Me.NewRow,AddUsersRow)
            rowAddUsersRow.ItemArray = New Object() {UserLogin, UserId}
            Me.Rows.Add(rowAddUsersRow)
            Return rowAddUsersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AddUsersDataTable = CType(MyBase.Clone,AddUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AddUsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserLogin = Me.Columns("UserLogin")
            Me.columnUserId = Me.Columns("UserId")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
        End Sub
        
        Public Function NewAddUsersRow() As AddUsersRow
            Return CType(Me.NewRow,AddUsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AddUsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AddUsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AddUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent AddUsersRowChanged(Me, New AddUsersRowChangeEvent(CType(e.Row,AddUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AddUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent AddUsersRowChanging(Me, New AddUsersRowChangeEvent(CType(e.Row,AddUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AddUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent AddUsersRowDeleted(Me, New AddUsersRowChangeEvent(CType(e.Row,AddUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AddUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent AddUsersRowDeleting(Me, New AddUsersRowChangeEvent(CType(e.Row,AddUsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAddUsersRow(ByVal row As AddUsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AddUsersRow
        Inherits DataRow
        
        Private tableAddUsers As AddUsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAddUsers = CType(Me.Table,AddUsersDataTable)
        End Sub
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableAddUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAddUsers.UserIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableAddUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableAddUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableAddUsers.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableAddUsers.UserIdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AddUsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AddUsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AddUsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AddUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChgUsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserLogin As DataColumn
        
        Private columnUserId As DataColumn
        
        Friend Sub New()
            MyBase.New("ChgUsers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChgUsersRow
            Get
                Return CType(Me.Rows(index),ChgUsersRow)
            End Get
        End Property
        
        Public Event ChgUsersRowChanged As ChgUsersRowChangeEventHandler
        
        Public Event ChgUsersRowChanging As ChgUsersRowChangeEventHandler
        
        Public Event ChgUsersRowDeleted As ChgUsersRowChangeEventHandler
        
        Public Event ChgUsersRowDeleting As ChgUsersRowChangeEventHandler
        
        Public Overloads Sub AddChgUsersRow(ByVal row As ChgUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChgUsersRow(ByVal UserLogin As String, ByVal UserId As Integer) As ChgUsersRow
            Dim rowChgUsersRow As ChgUsersRow = CType(Me.NewRow,ChgUsersRow)
            rowChgUsersRow.ItemArray = New Object() {UserLogin, UserId}
            Me.Rows.Add(rowChgUsersRow)
            Return rowChgUsersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ChgUsersDataTable = CType(MyBase.Clone,ChgUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ChgUsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserLogin = Me.Columns("UserLogin")
            Me.columnUserId = Me.Columns("UserId")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
        End Sub
        
        Public Function NewChgUsersRow() As ChgUsersRow
            Return CType(Me.NewRow,ChgUsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ChgUsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ChgUsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChgUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent ChgUsersRowChanged(Me, New ChgUsersRowChangeEvent(CType(e.Row,ChgUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChgUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent ChgUsersRowChanging(Me, New ChgUsersRowChangeEvent(CType(e.Row,ChgUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChgUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChgUsersRowDeleted(Me, New ChgUsersRowChangeEvent(CType(e.Row,ChgUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChgUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChgUsersRowDeleting(Me, New ChgUsersRowChangeEvent(CType(e.Row,ChgUsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChgUsersRow(ByVal row As ChgUsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChgUsersRow
        Inherits DataRow
        
        Private tableChgUsers As ChgUsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChgUsers = CType(Me.Table,ChgUsersDataTable)
        End Sub
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableChgUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChgUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Property UserId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChgUsers.UserIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChgUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableChgUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableChgUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableChgUsers.UserIdColumn)
        End Function
        
        Public Sub SetUserIdNull()
            Me(Me.tableChgUsers.UserIdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChgUsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ChgUsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ChgUsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ChgUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerSigniture As DataColumn
        
        Friend Sub New()
            MyBase.New("TempTable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerSignitureColumn As DataColumn
            Get
                Return Me.columnCustomerSigniture
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TempTableRow
            Get
                Return CType(Me.Rows(index),TempTableRow)
            End Get
        End Property
        
        Public Event TempTableRowChanged As TempTableRowChangeEventHandler
        
        Public Event TempTableRowChanging As TempTableRowChangeEventHandler
        
        Public Event TempTableRowDeleted As TempTableRowChangeEventHandler
        
        Public Event TempTableRowDeleting As TempTableRowChangeEventHandler
        
        Public Overloads Sub AddTempTableRow(ByVal row As TempTableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTempTableRow(ByVal CustomerSigniture As String) As TempTableRow
            Dim rowTempTableRow As TempTableRow = CType(Me.NewRow,TempTableRow)
            rowTempTableRow.ItemArray = New Object() {CustomerSigniture}
            Me.Rows.Add(rowTempTableRow)
            Return rowTempTableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TempTableDataTable = CType(MyBase.Clone,TempTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TempTableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerSigniture = Me.Columns("CustomerSigniture")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerSigniture = New DataColumn("CustomerSigniture", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerSigniture)
        End Sub
        
        Public Function NewTempTableRow() As TempTableRow
            Return CType(Me.NewRow,TempTableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TempTableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TempTableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TempTableRowChangedEvent) Is Nothing) Then
                RaiseEvent TempTableRowChanged(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TempTableRowChangingEvent) Is Nothing) Then
                RaiseEvent TempTableRowChanging(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TempTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent TempTableRowDeleted(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TempTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent TempTableRowDeleting(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTempTableRow(ByVal row As TempTableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableRow
        Inherits DataRow
        
        Private tableTempTable As TempTableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTempTable = CType(Me.Table,TempTableDataTable)
        End Sub
        
        Public Property CustomerSigniture As String
            Get
                Try 
                    Return CType(Me(Me.tableTempTable.CustomerSignitureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempTable.CustomerSignitureColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerSignitureNull() As Boolean
            Return Me.IsNull(Me.tableTempTable.CustomerSignitureColumn)
        End Function
        
        Public Sub SetCustomerSignitureNull()
            Me(Me.tableTempTable.CustomerSignitureColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TempTableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TempTableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TempTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_TempDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_select As DataColumn
        
        Private columnqty As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_dtl_Temp")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_dtl_TempRow
            Get
                Return CType(Me.Rows(index),service_center_dtl_TempRow)
            End Get
        End Property
        
        Public Event service_center_dtl_TempRowChanged As service_center_dtl_TempRowChangeEventHandler
        
        Public Event service_center_dtl_TempRowChanging As service_center_dtl_TempRowChangeEventHandler
        
        Public Event service_center_dtl_TempRowDeleted As service_center_dtl_TempRowChangeEventHandler
        
        Public Event service_center_dtl_TempRowDeleting As service_center_dtl_TempRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_dtl_TempRow(ByVal row As service_center_dtl_TempRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_dtl_TempRow(ByVal cod_select As String, ByVal qty As Single) As service_center_dtl_TempRow
            Dim rowservice_center_dtl_TempRow As service_center_dtl_TempRow = CType(Me.NewRow,service_center_dtl_TempRow)
            rowservice_center_dtl_TempRow.ItemArray = New Object() {cod_select, qty}
            Me.Rows.Add(rowservice_center_dtl_TempRow)
            Return rowservice_center_dtl_TempRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_dtl_TempDataTable = CType(MyBase.Clone,service_center_dtl_TempDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_dtl_TempDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_select = Me.Columns("cod_select")
            Me.columnqty = Me.Columns("qty")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columnqty = New DataColumn("qty", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnqty.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_dtl_TempRow() As service_center_dtl_TempRow
            Return CType(Me.NewRow,service_center_dtl_TempRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_dtl_TempRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_dtl_TempRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_dtl_TempRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_TempRowChanged(Me, New service_center_dtl_TempRowChangeEvent(CType(e.Row,service_center_dtl_TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_dtl_TempRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_TempRowChanging(Me, New service_center_dtl_TempRowChangeEvent(CType(e.Row,service_center_dtl_TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_dtl_TempRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_TempRowDeleted(Me, New service_center_dtl_TempRowChangeEvent(CType(e.Row,service_center_dtl_TempRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_dtl_TempRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_dtl_TempRowDeleting(Me, New service_center_dtl_TempRowChangeEvent(CType(e.Row,service_center_dtl_TempRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_dtl_TempRow(ByVal row As service_center_dtl_TempRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_TempRow
        Inherits DataRow
        
        Private tableservice_center_dtl_Temp As service_center_dtl_TempDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_dtl_Temp = CType(Me.Table,service_center_dtl_TempDataTable)
        End Sub
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_dtl_Temp.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_dtl_Temp.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property qty As Single
            Get
                Return CType(Me(Me.tableservice_center_dtl_Temp.qtyColumn),Single)
            End Get
            Set
                Me(Me.tableservice_center_dtl_Temp.qtyColumn) = value
            End Set
        End Property
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_dtl_Temp.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_dtl_Temp.cod_selectColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_dtl_TempRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_dtl_TempRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_dtl_TempRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_dtl_TempRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDue_Date As DataColumn
        
        Private columnCost As DataColumn
        
        Friend Sub New()
            MyBase.New("Service_out_purchases_Dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Service_out_purchases_DtlRow
            Get
                Return CType(Me.Rows(index),Service_out_purchases_DtlRow)
            End Get
        End Property
        
        Public Event Service_out_purchases_DtlRowChanged As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowChanging As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowDeleted As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Event Service_out_purchases_DtlRowDeleting As Service_out_purchases_DtlRowChangeEventHandler
        
        Public Overloads Sub AddService_out_purchases_DtlRow(ByVal row As Service_out_purchases_DtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddService_out_purchases_DtlRow(ByVal Due_Date As String, ByVal Cost As Decimal) As Service_out_purchases_DtlRow
            Dim rowService_out_purchases_DtlRow As Service_out_purchases_DtlRow = CType(Me.NewRow,Service_out_purchases_DtlRow)
            rowService_out_purchases_DtlRow.ItemArray = New Object() {Due_Date, Cost}
            Me.Rows.Add(rowService_out_purchases_DtlRow)
            Return rowService_out_purchases_DtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Service_out_purchases_DtlDataTable = CType(MyBase.Clone,Service_out_purchases_DtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Service_out_purchases_DtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columnCost = Me.Columns("Cost")
        End Sub
        
        Private Sub InitClass()
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columnCost = New DataColumn("Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.columnDue_Date.AllowDBNull = false
            Me.columnCost.AllowDBNull = false
        End Sub
        
        Public Function NewService_out_purchases_DtlRow() As Service_out_purchases_DtlRow
            Return CType(Me.NewRow,Service_out_purchases_DtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Service_out_purchases_DtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Service_out_purchases_DtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Service_out_purchases_DtlRowChangedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowChanged(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Service_out_purchases_DtlRowChangingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowChanging(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Service_out_purchases_DtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowDeleted(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Service_out_purchases_DtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Service_out_purchases_DtlRowDeleting(Me, New Service_out_purchases_DtlRowChangeEvent(CType(e.Row,Service_out_purchases_DtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveService_out_purchases_DtlRow(ByVal row As Service_out_purchases_DtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlRow
        Inherits DataRow
        
        Private tableService_out_purchases_Dtl As Service_out_purchases_DtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableService_out_purchases_Dtl = CType(Me.Table,Service_out_purchases_DtlDataTable)
        End Sub
        
        Public Property Due_Date As String
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.Due_DateColumn),String)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property Cost As Decimal
            Get
                Return CType(Me(Me.tableService_out_purchases_Dtl.CostColumn),Decimal)
            End Get
            Set
                Me(Me.tableService_out_purchases_Dtl.CostColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Service_out_purchases_DtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Service_out_purchases_DtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Service_out_purchases_DtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Service_out_purchases_DtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
