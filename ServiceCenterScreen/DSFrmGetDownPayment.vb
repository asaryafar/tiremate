'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmGetDownPayment
    Inherits DataSet
    
    Private tablebas_cc_type As bas_cc_typeDataTable
    
    Private tableGL_Paid_received As GL_Paid_receivedDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
                Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
            End If
            If (Not (ds.Tables("GL_Paid_received")) Is Nothing) Then
                Me.Tables.Add(New GL_Paid_receivedDataTable(ds.Tables("GL_Paid_received")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_cc_type As bas_cc_typeDataTable
        Get
            Return Me.tablebas_cc_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_Paid_received As GL_Paid_receivedDataTable
        Get
            Return Me.tableGL_Paid_received
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmGetDownPayment = CType(MyBase.Clone,DSFrmGetDownPayment)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
            Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
        End If
        If (Not (ds.Tables("GL_Paid_received")) Is Nothing) Then
            Me.Tables.Add(New GL_Paid_receivedDataTable(ds.Tables("GL_Paid_received")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_cc_type = CType(Me.Tables("bas_cc_type"),bas_cc_typeDataTable)
        If (Not (Me.tablebas_cc_type) Is Nothing) Then
            Me.tablebas_cc_type.InitVars
        End If
        Me.tableGL_Paid_received = CType(Me.Tables("GL_Paid_received"),GL_Paid_receivedDataTable)
        If (Not (Me.tableGL_Paid_received) Is Nothing) Then
            Me.tableGL_Paid_received.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmGetDownPayment"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmGetDownPayment.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_cc_type = New bas_cc_typeDataTable
        Me.Tables.Add(Me.tablebas_cc_type)
        Me.tableGL_Paid_received = New GL_Paid_receivedDataTable
        Me.Tables.Add(Me.tableGL_Paid_received)
    End Sub
    
    Private Function ShouldSerializebas_cc_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_Paid_received() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_cc_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_cc_typeRowChangeEvent)
    
    Public Delegate Sub GL_Paid_receivedRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_Paid_receivedRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncc_type As DataColumn
        
        Private columncc_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_cc_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_type_descColumn As DataColumn
            Get
                Return Me.columncc_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_cc_typeRow
            Get
                Return CType(Me.Rows(index),bas_cc_typeRow)
            End Get
        End Property
        
        Public Event bas_cc_typeRowChanged As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowChanging As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleted As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleting As bas_cc_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_cc_typeRow(ByVal cc_type As String, ByVal cc_type_desc As String) As bas_cc_typeRow
            Dim rowbas_cc_typeRow As bas_cc_typeRow = CType(Me.NewRow,bas_cc_typeRow)
            rowbas_cc_typeRow.ItemArray = New Object() {cc_type, cc_type_desc}
            Me.Rows.Add(rowbas_cc_typeRow)
            Return rowbas_cc_typeRow
        End Function
        
        Public Function FindBycc_type(ByVal cc_type As String) As bas_cc_typeRow
            Return CType(Me.Rows.Find(New Object() {cc_type}),bas_cc_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_cc_typeDataTable = CType(MyBase.Clone,bas_cc_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_cc_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_type_desc = Me.Columns("cc_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_type_desc = New DataColumn("cc_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncc_type}, true))
            Me.columncc_type.AllowDBNull = false
            Me.columncc_type.Unique = true
        End Sub
        
        Public Function Newbas_cc_typeRow() As bas_cc_typeRow
            Return CType(Me.NewRow,bas_cc_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_cc_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_cc_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_cc_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanged(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_cc_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanging(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_cc_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleted(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_cc_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleting(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRow
        Inherits DataRow
        
        Private tablebas_cc_type As bas_cc_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_cc_type = CType(Me.Table,bas_cc_typeDataTable)
        End Sub
        
        Public Property cc_type As String
            Get
                Return CType(Me(Me.tablebas_cc_type.cc_typeColumn),String)
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_cc_type.cc_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_type_descColumn) = value
            End Set
        End Property
        
        Public Function Iscc_type_descNull() As Boolean
            Return Me.IsNull(Me.tablebas_cc_type.cc_type_descColumn)
        End Function
        
        Public Sub Setcc_type_descNull()
            Me(Me.tablebas_cc_type.cc_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_cc_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_cc_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_cc_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnrefrence_code As DataColumn
        
        Private columntran_type As DataColumn
        
        Private columnaction_date As DataColumn
        
        Private columncustomer_code As DataColumn
        
        Private columnvendor_code As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnmemo As DataColumn
        
        Private columnId_GL_journal As DataColumn
        
        Private columnOtherReceipType As DataColumn
        
        Private columnId_debit_deposit_head As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columncc_type As DataColumn
        
        Private columncc_card_no As DataColumn
        
        Private columncc_expire_date_year As DataColumn
        
        Private columncc_expire_date_month As DataColumn
        
        Private columncc_auth_no As DataColumn
        
        Private columncheck_no As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_Paid_received")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property refrence_codeColumn As DataColumn
            Get
                Return Me.columnrefrence_code
            End Get
        End Property
        
        Friend ReadOnly Property tran_typeColumn As DataColumn
            Get
                Return Me.columntran_type
            End Get
        End Property
        
        Friend ReadOnly Property action_dateColumn As DataColumn
            Get
                Return Me.columnaction_date
            End Get
        End Property
        
        Friend ReadOnly Property customer_codeColumn As DataColumn
            Get
                Return Me.columncustomer_code
            End Get
        End Property
        
        Friend ReadOnly Property vendor_codeColumn As DataColumn
            Get
                Return Me.columnvendor_code
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property memoColumn As DataColumn
            Get
                Return Me.columnmemo
            End Get
        End Property
        
        Friend ReadOnly Property Id_GL_journalColumn As DataColumn
            Get
                Return Me.columnId_GL_journal
            End Get
        End Property
        
        Friend ReadOnly Property OtherReceipTypeColumn As DataColumn
            Get
                Return Me.columnOtherReceipType
            End Get
        End Property
        
        Friend ReadOnly Property Id_debit_deposit_headColumn As DataColumn
            Get
                Return Me.columnId_debit_deposit_head
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_card_noColumn As DataColumn
            Get
                Return Me.columncc_card_no
            End Get
        End Property
        
        Friend ReadOnly Property cc_expire_date_yearColumn As DataColumn
            Get
                Return Me.columncc_expire_date_year
            End Get
        End Property
        
        Friend ReadOnly Property cc_expire_date_monthColumn As DataColumn
            Get
                Return Me.columncc_expire_date_month
            End Get
        End Property
        
        Friend ReadOnly Property cc_auth_noColumn As DataColumn
            Get
                Return Me.columncc_auth_no
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_Paid_receivedRow
            Get
                Return CType(Me.Rows(index),GL_Paid_receivedRow)
            End Get
        End Property
        
        Public Event GL_Paid_receivedRowChanged As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowChanging As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowDeleted As GL_Paid_receivedRowChangeEventHandler
        
        Public Event GL_Paid_receivedRowDeleting As GL_Paid_receivedRowChangeEventHandler
        
        Public Overloads Sub AddGL_Paid_receivedRow(ByVal row As GL_Paid_receivedRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_Paid_receivedRow( _
                    ByVal refrence_code As String,  _
                    ByVal tran_type As String,  _
                    ByVal action_date As String,  _
                    ByVal customer_code As String,  _
                    ByVal vendor_code As String,  _
                    ByVal amount As Decimal,  _
                    ByVal GL_account As String,  _
                    ByVal memo As String,  _
                    ByVal Id_GL_journal As Integer,  _
                    ByVal OtherReceipType As String,  _
                    ByVal Id_debit_deposit_head As Integer,  _
                    ByVal id_service_center As String,  _
                    ByVal cc_type As String,  _
                    ByVal cc_card_no As String,  _
                    ByVal cc_expire_date_year As String,  _
                    ByVal cc_expire_date_month As String,  _
                    ByVal cc_auth_no As String,  _
                    ByVal check_no As String) As GL_Paid_receivedRow
            Dim rowGL_Paid_receivedRow As GL_Paid_receivedRow = CType(Me.NewRow,GL_Paid_receivedRow)
            rowGL_Paid_receivedRow.ItemArray = New Object() {refrence_code, tran_type, action_date, customer_code, vendor_code, amount, GL_account, memo, Id_GL_journal, OtherReceipType, Id_debit_deposit_head, id_service_center, cc_type, cc_card_no, cc_expire_date_year, cc_expire_date_month, cc_auth_no, check_no}
            Me.Rows.Add(rowGL_Paid_receivedRow)
            Return rowGL_Paid_receivedRow
        End Function
        
        Public Function FindByrefrence_code(ByVal refrence_code As String) As GL_Paid_receivedRow
            Return CType(Me.Rows.Find(New Object() {refrence_code}),GL_Paid_receivedRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_Paid_receivedDataTable = CType(MyBase.Clone,GL_Paid_receivedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_Paid_receivedDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnrefrence_code = Me.Columns("refrence_code")
            Me.columntran_type = Me.Columns("tran_type")
            Me.columnaction_date = Me.Columns("action_date")
            Me.columncustomer_code = Me.Columns("customer_code")
            Me.columnvendor_code = Me.Columns("vendor_code")
            Me.columnamount = Me.Columns("amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnmemo = Me.Columns("memo")
            Me.columnId_GL_journal = Me.Columns("Id_GL_journal")
            Me.columnOtherReceipType = Me.Columns("OtherReceipType")
            Me.columnId_debit_deposit_head = Me.Columns("Id_debit_deposit_head")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_card_no = Me.Columns("cc_card_no")
            Me.columncc_expire_date_year = Me.Columns("cc_expire_date_year")
            Me.columncc_expire_date_month = Me.Columns("cc_expire_date_month")
            Me.columncc_auth_no = Me.Columns("cc_auth_no")
            Me.columncheck_no = Me.Columns("check_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnrefrence_code = New DataColumn("refrence_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_code)
            Me.columntran_type = New DataColumn("tran_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntran_type)
            Me.columnaction_date = New DataColumn("action_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaction_date)
            Me.columncustomer_code = New DataColumn("customer_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_code)
            Me.columnvendor_code = New DataColumn("vendor_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendor_code)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnmemo = New DataColumn("memo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemo)
            Me.columnId_GL_journal = New DataColumn("Id_GL_journal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_GL_journal)
            Me.columnOtherReceipType = New DataColumn("OtherReceipType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherReceipType)
            Me.columnId_debit_deposit_head = New DataColumn("Id_debit_deposit_head", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_debit_deposit_head)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_card_no = New DataColumn("cc_card_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_card_no)
            Me.columncc_expire_date_year = New DataColumn("cc_expire_date_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_expire_date_year)
            Me.columncc_expire_date_month = New DataColumn("cc_expire_date_month", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_expire_date_month)
            Me.columncc_auth_no = New DataColumn("cc_auth_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_auth_no)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnrefrence_code}, true))
            Me.columnrefrence_code.AllowDBNull = false
            Me.columnrefrence_code.Unique = true
        End Sub
        
        Public Function NewGL_Paid_receivedRow() As GL_Paid_receivedRow
            Return CType(Me.NewRow,GL_Paid_receivedRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_Paid_receivedRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_Paid_receivedRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_Paid_receivedRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowChanged(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_Paid_receivedRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowChanging(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_Paid_receivedRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowDeleted(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_Paid_receivedRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_Paid_receivedRowDeleting(Me, New GL_Paid_receivedRowChangeEvent(CType(e.Row,GL_Paid_receivedRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_Paid_receivedRow(ByVal row As GL_Paid_receivedRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedRow
        Inherits DataRow
        
        Private tableGL_Paid_received As GL_Paid_receivedDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_Paid_received = CType(Me.Table,GL_Paid_receivedDataTable)
        End Sub
        
        Public Property refrence_code As String
            Get
                Return CType(Me(Me.tableGL_Paid_received.refrence_codeColumn),String)
            End Get
            Set
                Me(Me.tableGL_Paid_received.refrence_codeColumn) = value
            End Set
        End Property
        
        Public Property tran_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.tran_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.tran_typeColumn) = value
            End Set
        End Property
        
        Public Property action_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.action_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.action_dateColumn) = value
            End Set
        End Property
        
        Public Property customer_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.customer_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.customer_codeColumn) = value
            End Set
        End Property
        
        Public Property vendor_code As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.vendor_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.vendor_codeColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property memo As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.memoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.memoColumn) = value
            End Set
        End Property
        
        Public Property Id_GL_journal As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.Id_GL_journalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.Id_GL_journalColumn) = value
            End Set
        End Property
        
        Public Property OtherReceipType As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.OtherReceipTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.OtherReceipTypeColumn) = value
            End Set
        End Property
        
        Public Property Id_debit_deposit_head As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.Id_debit_deposit_headColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.Id_debit_deposit_headColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_card_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.cc_card_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.cc_card_noColumn) = value
            End Set
        End Property
        
        Public Property cc_expire_date_year As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.cc_expire_date_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.cc_expire_date_yearColumn) = value
            End Set
        End Property
        
        Public Property cc_expire_date_month As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.cc_expire_date_monthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.cc_expire_date_monthColumn) = value
            End Set
        End Property
        
        Public Property cc_auth_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.cc_auth_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.cc_auth_noColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_Paid_received.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_Paid_received.check_noColumn) = value
            End Set
        End Property
        
        Public Function Istran_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.tran_typeColumn)
        End Function
        
        Public Sub Settran_typeNull()
            Me(Me.tableGL_Paid_received.tran_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaction_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.action_dateColumn)
        End Function
        
        Public Sub Setaction_dateNull()
            Me(Me.tableGL_Paid_received.action_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscustomer_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.customer_codeColumn)
        End Function
        
        Public Sub Setcustomer_codeNull()
            Me(Me.tableGL_Paid_received.customer_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isvendor_codeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.vendor_codeColumn)
        End Function
        
        Public Sub Setvendor_codeNull()
            Me(Me.tableGL_Paid_received.vendor_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableGL_Paid_received.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableGL_Paid_received.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemoNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.memoColumn)
        End Function
        
        Public Sub SetmemoNull()
            Me(Me.tableGL_Paid_received.memoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_GL_journalNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.Id_GL_journalColumn)
        End Function
        
        Public Sub SetId_GL_journalNull()
            Me(Me.tableGL_Paid_received.Id_GL_journalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherReceipTypeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.OtherReceipTypeColumn)
        End Function
        
        Public Sub SetOtherReceipTypeNull()
            Me(Me.tableGL_Paid_received.OtherReceipTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_debit_deposit_headNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.Id_debit_deposit_headColumn)
        End Function
        
        Public Sub SetId_debit_deposit_headNull()
            Me(Me.tableGL_Paid_received.Id_debit_deposit_headColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_Paid_received.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableGL_Paid_received.cc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_card_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.cc_card_noColumn)
        End Function
        
        Public Sub Setcc_card_noNull()
            Me(Me.tableGL_Paid_received.cc_card_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_expire_date_yearNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.cc_expire_date_yearColumn)
        End Function
        
        Public Sub Setcc_expire_date_yearNull()
            Me(Me.tableGL_Paid_received.cc_expire_date_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_expire_date_monthNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.cc_expire_date_monthColumn)
        End Function
        
        Public Sub Setcc_expire_date_monthNull()
            Me(Me.tableGL_Paid_received.cc_expire_date_monthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_auth_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.cc_auth_noColumn)
        End Function
        
        Public Sub Setcc_auth_noNull()
            Me(Me.tableGL_Paid_received.cc_auth_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_Paid_received.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableGL_Paid_received.check_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_Paid_receivedRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_Paid_receivedRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_Paid_receivedRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_Paid_receivedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
