'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmCashier
    Inherits DataSet
    
    Private tablebas_cc_type As bas_cc_typeDataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
                Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
                Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bas_cc_type As bas_cc_typeDataTable
        Get
            Return Me.tablebas_cc_type
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        Get
            Return Me.tableGL_TAB_AR_TERM
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmCashier = CType(MyBase.Clone,DSFrmCashier)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("bas_cc_type")) Is Nothing) Then
            Me.Tables.Add(New bas_cc_typeDataTable(ds.Tables("bas_cc_type")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("GL_TAB_AR_TERM")) Is Nothing) Then
            Me.Tables.Add(New GL_TAB_AR_TERMDataTable(ds.Tables("GL_TAB_AR_TERM")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebas_cc_type = CType(Me.Tables("bas_cc_type"),bas_cc_typeDataTable)
        If (Not (Me.tablebas_cc_type) Is Nothing) Then
            Me.tablebas_cc_type.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tableGL_TAB_AR_TERM = CType(Me.Tables("GL_TAB_AR_TERM"),GL_TAB_AR_TERMDataTable)
        If (Not (Me.tableGL_TAB_AR_TERM) Is Nothing) Then
            Me.tableGL_TAB_AR_TERM.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmCashier"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmCashier.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebas_cc_type = New bas_cc_typeDataTable
        Me.Tables.Add(Me.tablebas_cc_type)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tableGL_TAB_AR_TERM = New GL_TAB_AR_TERMDataTable
        Me.Tables.Add(Me.tableGL_TAB_AR_TERM)
    End Sub
    
    Private Function ShouldSerializebas_cc_type() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_TAB_AR_TERM() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub bas_cc_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As bas_cc_typeRowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub GL_TAB_AR_TERMRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_TAB_AR_TERMRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncc_type As DataColumn
        
        Private columncc_type_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("bas_cc_type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_type_descColumn As DataColumn
            Get
                Return Me.columncc_type_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As bas_cc_typeRow
            Get
                Return CType(Me.Rows(index),bas_cc_typeRow)
            End Get
        End Property
        
        Public Event bas_cc_typeRowChanged As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowChanging As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleted As bas_cc_typeRowChangeEventHandler
        
        Public Event bas_cc_typeRowDeleting As bas_cc_typeRowChangeEventHandler
        
        Public Overloads Sub Addbas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbas_cc_typeRow(ByVal cc_type As String, ByVal cc_type_desc As String) As bas_cc_typeRow
            Dim rowbas_cc_typeRow As bas_cc_typeRow = CType(Me.NewRow,bas_cc_typeRow)
            rowbas_cc_typeRow.ItemArray = New Object() {cc_type, cc_type_desc}
            Me.Rows.Add(rowbas_cc_typeRow)
            Return rowbas_cc_typeRow
        End Function
        
        Public Function FindBycc_type(ByVal cc_type As String) As bas_cc_typeRow
            Return CType(Me.Rows.Find(New Object() {cc_type}),bas_cc_typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As bas_cc_typeDataTable = CType(MyBase.Clone,bas_cc_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New bas_cc_typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_type_desc = Me.Columns("cc_type_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_type_desc = New DataColumn("cc_type_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type_desc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncc_type}, true))
            Me.columncc_type.AllowDBNull = false
            Me.columncc_type.Unique = true
        End Sub
        
        Public Function Newbas_cc_typeRow() As bas_cc_typeRow
            Return CType(Me.NewRow,bas_cc_typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New bas_cc_typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bas_cc_typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bas_cc_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanged(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bas_cc_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowChanging(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bas_cc_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleted(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bas_cc_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent bas_cc_typeRowDeleting(Me, New bas_cc_typeRowChangeEvent(CType(e.Row,bas_cc_typeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removebas_cc_typeRow(ByVal row As bas_cc_typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRow
        Inherits DataRow
        
        Private tablebas_cc_type As bas_cc_typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebas_cc_type = CType(Me.Table,bas_cc_typeDataTable)
        End Sub
        
        Public Property cc_type As String
            Get
                Return CType(Me(Me.tablebas_cc_type.cc_typeColumn),String)
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_type_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablebas_cc_type.cc_type_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebas_cc_type.cc_type_descColumn) = value
            End Set
        End Property
        
        Public Function Iscc_type_descNull() As Boolean
            Return Me.IsNull(Me.tablebas_cc_type.cc_type_descColumn)
        End Function
        
        Public Sub Setcc_type_descNull()
            Me(Me.tablebas_cc_type.cc_type_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class bas_cc_typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As bas_cc_typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As bas_cc_typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As bas_cc_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_payment As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnrefer_type As DataColumn
        
        Private columnpayment_type As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columncash_rendered As DataColumn
        
        Private columnchange_due As DataColumn
        
        Private columncheck_no As DataColumn
        
        Private columncheck_date As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columncc_type As DataColumn
        
        Private columncc_card_no As DataColumn
        
        Private columncc_expire_date_year As DataColumn
        
        Private columncc_expire_date_month As DataColumn
        
        Private columncc_auth_no As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property refer_typeColumn As DataColumn
            Get
                Return Me.columnrefer_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_typeColumn As DataColumn
            Get
                Return Me.columnpayment_type
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property cash_renderedColumn As DataColumn
            Get
                Return Me.columncash_rendered
            End Get
        End Property
        
        Friend ReadOnly Property change_dueColumn As DataColumn
            Get
                Return Me.columnchange_due
            End Get
        End Property
        
        Friend ReadOnly Property check_noColumn As DataColumn
            Get
                Return Me.columncheck_no
            End Get
        End Property
        
        Friend ReadOnly Property check_dateColumn As DataColumn
            Get
                Return Me.columncheck_date
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property cc_typeColumn As DataColumn
            Get
                Return Me.columncc_type
            End Get
        End Property
        
        Friend ReadOnly Property cc_card_noColumn As DataColumn
            Get
                Return Me.columncc_card_no
            End Get
        End Property
        
        Friend ReadOnly Property cc_expire_date_yearColumn As DataColumn
            Get
                Return Me.columncc_expire_date_year
            End Get
        End Property
        
        Friend ReadOnly Property cc_expire_date_monthColumn As DataColumn
            Get
                Return Me.columncc_expire_date_month
            End Get
        End Property
        
        Friend ReadOnly Property cc_auth_noColumn As DataColumn
            Get
                Return Me.columncc_auth_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow( _
                    ByVal id_service_center As String,  _
                    ByVal refrence_no As String,  _
                    ByVal refer_type As String,  _
                    ByVal payment_type As String,  _
                    ByVal payment_amount As Decimal,  _
                    ByVal cash_rendered As Decimal,  _
                    ByVal change_due As Decimal,  _
                    ByVal check_no As String,  _
                    ByVal check_date As String,  _
                    ByVal AR_terms As String,  _
                    ByVal AR_due_date As String,  _
                    ByVal cc_type As String,  _
                    ByVal cc_card_no As String,  _
                    ByVal cc_expire_date_year As String,  _
                    ByVal cc_expire_date_month As String,  _
                    ByVal cc_auth_no As String) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {Nothing, id_service_center, refrence_no, refer_type, payment_type, payment_amount, cash_rendered, change_due, check_no, check_date, AR_terms, AR_due_date, cc_type, cc_card_no, cc_expire_date_year, cc_expire_date_month, cc_auth_no}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnrefer_type = Me.Columns("refer_type")
            Me.columnpayment_type = Me.Columns("payment_type")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columncash_rendered = Me.Columns("cash_rendered")
            Me.columnchange_due = Me.Columns("change_due")
            Me.columncheck_no = Me.Columns("check_no")
            Me.columncheck_date = Me.Columns("check_date")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columncc_type = Me.Columns("cc_type")
            Me.columncc_card_no = Me.Columns("cc_card_no")
            Me.columncc_expire_date_year = Me.Columns("cc_expire_date_year")
            Me.columncc_expire_date_month = Me.Columns("cc_expire_date_month")
            Me.columncc_auth_no = Me.Columns("cc_auth_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnrefer_type = New DataColumn("refer_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefer_type)
            Me.columnpayment_type = New DataColumn("payment_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_type)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columncash_rendered = New DataColumn("cash_rendered", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncash_rendered)
            Me.columnchange_due = New DataColumn("change_due", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchange_due)
            Me.columncheck_no = New DataColumn("check_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_no)
            Me.columncheck_date = New DataColumn("check_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncheck_date)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columncc_type = New DataColumn("cc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_type)
            Me.columncc_card_no = New DataColumn("cc_card_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_card_no)
            Me.columncc_expire_date_year = New DataColumn("cc_expire_date_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_expire_date_year)
            Me.columncc_expire_date_month = New DataColumn("cc_expire_date_month", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_expire_date_month)
            Me.columncc_auth_no = New DataColumn("cc_auth_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncc_auth_no)
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableGL_payment_deposit.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableGL_payment_deposit.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refrence_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property refer_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.refer_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.refer_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_typeColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property cash_rendered As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cash_renderedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cash_renderedColumn) = value
            End Set
        End Property
        
        Public Property change_due As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.change_dueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.change_dueColumn) = value
            End Set
        End Property
        
        Public Property check_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.check_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.check_noColumn) = value
            End Set
        End Property
        
        Public Property check_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.check_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.check_dateColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property cc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cc_typeColumn) = value
            End Set
        End Property
        
        Public Property cc_card_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cc_card_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cc_card_noColumn) = value
            End Set
        End Property
        
        Public Property cc_expire_date_year As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cc_expire_date_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cc_expire_date_yearColumn) = value
            End Set
        End Property
        
        Public Property cc_expire_date_month As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cc_expire_date_monthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cc_expire_date_monthColumn) = value
            End Set
        End Property
        
        Public Property cc_auth_no As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cc_auth_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cc_auth_noColumn) = value
            End Set
        End Property
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableGL_payment_deposit.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefrence_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refrence_noColumn)
        End Function
        
        Public Sub Setrefrence_noNull()
            Me(Me.tableGL_payment_deposit.refrence_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefer_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.refer_typeColumn)
        End Function
        
        Public Sub Setrefer_typeNull()
            Me(Me.tableGL_payment_deposit.refer_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_typeColumn)
        End Function
        
        Public Sub Setpayment_typeNull()
            Me(Me.tableGL_payment_deposit.payment_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableGL_payment_deposit.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscash_renderedNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cash_renderedColumn)
        End Function
        
        Public Sub Setcash_renderedNull()
            Me(Me.tableGL_payment_deposit.cash_renderedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischange_dueNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.change_dueColumn)
        End Function
        
        Public Sub Setchange_dueNull()
            Me(Me.tableGL_payment_deposit.change_dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.check_noColumn)
        End Function
        
        Public Sub Setcheck_noNull()
            Me(Me.tableGL_payment_deposit.check_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischeck_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.check_dateColumn)
        End Function
        
        Public Sub Setcheck_dateNull()
            Me(Me.tableGL_payment_deposit.check_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableGL_payment_deposit.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableGL_payment_deposit.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_typeNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cc_typeColumn)
        End Function
        
        Public Sub Setcc_typeNull()
            Me(Me.tableGL_payment_deposit.cc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_card_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cc_card_noColumn)
        End Function
        
        Public Sub Setcc_card_noNull()
            Me(Me.tableGL_payment_deposit.cc_card_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_expire_date_yearNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cc_expire_date_yearColumn)
        End Function
        
        Public Sub Setcc_expire_date_yearNull()
            Me(Me.tableGL_payment_deposit.cc_expire_date_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_expire_date_monthNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cc_expire_date_monthColumn)
        End Function
        
        Public Sub Setcc_expire_date_monthNull()
            Me(Me.tableGL_payment_deposit.cc_expire_date_monthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscc_auth_noNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cc_auth_noColumn)
        End Function
        
        Public Sub Setcc_auth_noNull()
            Me(Me.tableGL_payment_deposit.cc_auth_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAR_terms As DataColumn
        
        Private columnKIND_AR As DataColumn
        
        Private columnST_NET_DUE_IN As DataColumn
        
        Private columnST_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnST_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnDD_NET_DUE_BEFORE As DataColumn
        
        Private columnDD_IF_ISSUED_WITHIN_DAYS As DataColumn
        
        Private columnDD_DISCOUNT_PERCENTAGE As DataColumn
        
        Private columnDD_IF_PAY_WITHIN_DAYS As DataColumn
        
        Private columnMP_NO_OF_PAYMENT As DataColumn
        
        Private columnMP_BEFORE_DAY As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_TAB_AR_TERM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property KIND_ARColumn As DataColumn
            Get
                Return Me.columnKIND_AR
            End Get
        End Property
        
        Friend ReadOnly Property ST_NET_DUE_INColumn As DataColumn
            Get
                Return Me.columnST_NET_DUE_IN
            End Get
        End Property
        
        Friend ReadOnly Property ST_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnST_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property ST_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnST_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_NET_DUE_BEFOREColumn As DataColumn
            Get
                Return Me.columnDD_NET_DUE_BEFORE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_ISSUED_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_ISSUED_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DD_DISCOUNT_PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnDD_DISCOUNT_PERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property DD_IF_PAY_WITHIN_DAYSColumn As DataColumn
            Get
                Return Me.columnDD_IF_PAY_WITHIN_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property MP_NO_OF_PAYMENTColumn As DataColumn
            Get
                Return Me.columnMP_NO_OF_PAYMENT
            End Get
        End Property
        
        Friend ReadOnly Property MP_BEFORE_DAYColumn As DataColumn
            Get
                Return Me.columnMP_BEFORE_DAY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_TAB_AR_TERMRow
            Get
                Return CType(Me.Rows(index),GL_TAB_AR_TERMRow)
            End Get
        End Property
        
        Public Event GL_TAB_AR_TERMRowChanged As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowChanging As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleted As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Event GL_TAB_AR_TERMRowDeleting As GL_TAB_AR_TERMRowChangeEventHandler
        
        Public Overloads Sub AddGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_TAB_AR_TERMRow(ByVal AR_terms As String, ByVal KIND_AR As Short, ByVal ST_NET_DUE_IN As Short, ByVal ST_DISCOUNT_PERCENTAGE As Decimal, ByVal ST_IF_PAY_WITHIN_DAYS As Short, ByVal DD_NET_DUE_BEFORE As Short, ByVal DD_IF_ISSUED_WITHIN_DAYS As Short, ByVal DD_DISCOUNT_PERCENTAGE As Decimal, ByVal DD_IF_PAY_WITHIN_DAYS As Short, ByVal MP_NO_OF_PAYMENT As Short, ByVal MP_BEFORE_DAY As Short) As GL_TAB_AR_TERMRow
            Dim rowGL_TAB_AR_TERMRow As GL_TAB_AR_TERMRow = CType(Me.NewRow,GL_TAB_AR_TERMRow)
            rowGL_TAB_AR_TERMRow.ItemArray = New Object() {AR_terms, KIND_AR, ST_NET_DUE_IN, ST_DISCOUNT_PERCENTAGE, ST_IF_PAY_WITHIN_DAYS, DD_NET_DUE_BEFORE, DD_IF_ISSUED_WITHIN_DAYS, DD_DISCOUNT_PERCENTAGE, DD_IF_PAY_WITHIN_DAYS, MP_NO_OF_PAYMENT, MP_BEFORE_DAY}
            Me.Rows.Add(rowGL_TAB_AR_TERMRow)
            Return rowGL_TAB_AR_TERMRow
        End Function
        
        Public Function FindByAR_terms(ByVal AR_terms As String) As GL_TAB_AR_TERMRow
            Return CType(Me.Rows.Find(New Object() {AR_terms}),GL_TAB_AR_TERMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_TAB_AR_TERMDataTable = CType(MyBase.Clone,GL_TAB_AR_TERMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_TAB_AR_TERMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnKIND_AR = Me.Columns("KIND_AR")
            Me.columnST_NET_DUE_IN = Me.Columns("ST_NET_DUE_IN")
            Me.columnST_DISCOUNT_PERCENTAGE = Me.Columns("ST_DISCOUNT_PERCENTAGE")
            Me.columnST_IF_PAY_WITHIN_DAYS = Me.Columns("ST_IF_PAY_WITHIN_DAYS")
            Me.columnDD_NET_DUE_BEFORE = Me.Columns("DD_NET_DUE_BEFORE")
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = Me.Columns("DD_IF_ISSUED_WITHIN_DAYS")
            Me.columnDD_DISCOUNT_PERCENTAGE = Me.Columns("DD_DISCOUNT_PERCENTAGE")
            Me.columnDD_IF_PAY_WITHIN_DAYS = Me.Columns("DD_IF_PAY_WITHIN_DAYS")
            Me.columnMP_NO_OF_PAYMENT = Me.Columns("MP_NO_OF_PAYMENT")
            Me.columnMP_BEFORE_DAY = Me.Columns("MP_BEFORE_DAY")
        End Sub
        
        Private Sub InitClass()
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnKIND_AR = New DataColumn("KIND_AR", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKIND_AR)
            Me.columnST_NET_DUE_IN = New DataColumn("ST_NET_DUE_IN", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_NET_DUE_IN)
            Me.columnST_DISCOUNT_PERCENTAGE = New DataColumn("ST_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_DISCOUNT_PERCENTAGE)
            Me.columnST_IF_PAY_WITHIN_DAYS = New DataColumn("ST_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnST_IF_PAY_WITHIN_DAYS)
            Me.columnDD_NET_DUE_BEFORE = New DataColumn("DD_NET_DUE_BEFORE", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_NET_DUE_BEFORE)
            Me.columnDD_IF_ISSUED_WITHIN_DAYS = New DataColumn("DD_IF_ISSUED_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_ISSUED_WITHIN_DAYS)
            Me.columnDD_DISCOUNT_PERCENTAGE = New DataColumn("DD_DISCOUNT_PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_DISCOUNT_PERCENTAGE)
            Me.columnDD_IF_PAY_WITHIN_DAYS = New DataColumn("DD_IF_PAY_WITHIN_DAYS", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDD_IF_PAY_WITHIN_DAYS)
            Me.columnMP_NO_OF_PAYMENT = New DataColumn("MP_NO_OF_PAYMENT", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_NO_OF_PAYMENT)
            Me.columnMP_BEFORE_DAY = New DataColumn("MP_BEFORE_DAY", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMP_BEFORE_DAY)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAR_terms}, true))
            Me.columnAR_terms.AllowDBNull = false
            Me.columnAR_terms.Unique = true
        End Sub
        
        Public Function NewGL_TAB_AR_TERMRow() As GL_TAB_AR_TERMRow
            Return CType(Me.NewRow,GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_TAB_AR_TERMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_TAB_AR_TERMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanged(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_TAB_AR_TERMRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowChanging(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleted(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_TAB_AR_TERMRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_TAB_AR_TERMRowDeleting(Me, New GL_TAB_AR_TERMRowChangeEvent(CType(e.Row,GL_TAB_AR_TERMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_TAB_AR_TERMRow(ByVal row As GL_TAB_AR_TERMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRow
        Inherits DataRow
        
        Private tableGL_TAB_AR_TERM As GL_TAB_AR_TERMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_TAB_AR_TERM = CType(Me.Table,GL_TAB_AR_TERMDataTable)
        End Sub
        
        Public Property AR_terms As String
            Get
                Return CType(Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn),String)
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property KIND_AR As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = value
            End Set
        End Property
        
        Public Property ST_NET_DUE_IN As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = value
            End Set
        End Property
        
        Public Property ST_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property ST_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_NET_DUE_BEFORE As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_ISSUED_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DD_DISCOUNT_PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property DD_IF_PAY_WITHIN_DAYS As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = value
            End Set
        End Property
        
        Public Property MP_NO_OF_PAYMENT As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = value
            End Set
        End Property
        
        Public Property MP_BEFORE_DAY As Short
            Get
                Try 
                    Return CType(Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = value
            End Set
        End Property
        
        Public Function IsKIND_ARNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.KIND_ARColumn)
        End Function
        
        Public Sub SetKIND_ARNull()
            Me(Me.tableGL_TAB_AR_TERM.KIND_ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_NET_DUE_INNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn)
        End Function
        
        Public Sub SetST_NET_DUE_INNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_NET_DUE_INColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetST_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.ST_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsST_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetST_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.ST_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_NET_DUE_BEFORENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn)
        End Function
        
        Public Sub SetDD_NET_DUE_BEFORENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_NET_DUE_BEFOREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_ISSUED_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_ISSUED_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_ISSUED_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_DISCOUNT_PERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn)
        End Function
        
        Public Sub SetDD_DISCOUNT_PERCENTAGENull()
            Me(Me.tableGL_TAB_AR_TERM.DD_DISCOUNT_PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDD_IF_PAY_WITHIN_DAYSNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn)
        End Function
        
        Public Sub SetDD_IF_PAY_WITHIN_DAYSNull()
            Me(Me.tableGL_TAB_AR_TERM.DD_IF_PAY_WITHIN_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_NO_OF_PAYMENTNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn)
        End Function
        
        Public Sub SetMP_NO_OF_PAYMENTNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_NO_OF_PAYMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMP_BEFORE_DAYNull() As Boolean
            Return Me.IsNull(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn)
        End Function
        
        Public Sub SetMP_BEFORE_DAYNull()
            Me(Me.tableGL_TAB_AR_TERM.MP_BEFORE_DAYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_TAB_AR_TERMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_TAB_AR_TERMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_TAB_AR_TERMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_TAB_AR_TERMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
