'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSCust_Company
    Inherits DataSet
    
    Private tablecust_company As cust_companyDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cust_company")) Is Nothing) Then
                Me.Tables.Add(New cust_companyDataTable(ds.Tables("cust_company")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_company As cust_companyDataTable
        Get
            Return Me.tablecust_company
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSCust_Company = CType(MyBase.Clone,DSCust_Company)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cust_company")) Is Nothing) Then
            Me.Tables.Add(New cust_companyDataTable(ds.Tables("cust_company")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecust_company = CType(Me.Tables("cust_company"),cust_companyDataTable)
        If (Not (Me.tablecust_company) Is Nothing) Then
            Me.tablecust_company.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSCust_Company"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSCust_Company.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecust_company = New cust_companyDataTable
        Me.Tables.Add(Me.tablecust_company)
    End Sub
    
    Private Function ShouldSerializecust_company() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cust_companyRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_companyRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_company As DataColumn
        
        Private columnabbreviation_name As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzip_code As DataColumn
        
        Private columnremark As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_company")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property abbreviation_nameColumn As DataColumn
            Get
                Return Me.columnabbreviation_name
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zip_codeColumn As DataColumn
            Get
                Return Me.columnzip_code
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_companyRow
            Get
                Return CType(Me.Rows(index),cust_companyRow)
            End Get
        End Property
        
        Public Event cust_companyRowChanged As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowChanging As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowDeleted As cust_companyRowChangeEventHandler
        
        Public Event cust_companyRowDeleting As cust_companyRowChangeEventHandler
        
        Public Overloads Sub Addcust_companyRow(ByVal row As cust_companyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_companyRow(ByVal cod_company As String, ByVal abbreviation_name As String, ByVal complete_name As String, ByVal address As String, ByVal zip_code As String, ByVal remark As String) As cust_companyRow
            Dim rowcust_companyRow As cust_companyRow = CType(Me.NewRow,cust_companyRow)
            rowcust_companyRow.ItemArray = New Object() {cod_company, abbreviation_name, complete_name, address, zip_code, remark}
            Me.Rows.Add(rowcust_companyRow)
            Return rowcust_companyRow
        End Function
        
        Public Function FindBycod_company(ByVal cod_company As String) As cust_companyRow
            Return CType(Me.Rows.Find(New Object() {cod_company}),cust_companyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_companyDataTable = CType(MyBase.Clone,cust_companyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_companyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnabbreviation_name = Me.Columns("abbreviation_name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnzip_code = Me.Columns("zip_code")
            Me.columnremark = Me.Columns("remark")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnabbreviation_name = New DataColumn("abbreviation_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabbreviation_name)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzip_code = New DataColumn("zip_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip_code)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_company}, true))
            Me.columncod_company.AllowDBNull = false
            Me.columncod_company.Unique = true
        End Sub
        
        Public Function Newcust_companyRow() As cust_companyRow
            Return CType(Me.NewRow,cust_companyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_companyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_companyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_companyRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_companyRowChanged(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_companyRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_companyRowChanging(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_companyRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_companyRowDeleted(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_companyRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_companyRowDeleting(Me, New cust_companyRowChangeEvent(CType(e.Row,cust_companyRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_companyRow(ByVal row As cust_companyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyRow
        Inherits DataRow
        
        Private tablecust_company As cust_companyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_company = CType(Me.Table,cust_companyDataTable)
        End Sub
        
        Public Property cod_company As String
            Get
                Return CType(Me(Me.tablecust_company.cod_companyColumn),String)
            End Get
            Set
                Me(Me.tablecust_company.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property abbreviation_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.abbreviation_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.abbreviation_nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.addressColumn) = value
            End Set
        End Property
        
        Public Property zip_code As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.zip_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.zip_codeColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_company.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_company.remarkColumn) = value
            End Set
        End Property
        
        Public Function Isabbreviation_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.abbreviation_nameColumn)
        End Function
        
        Public Sub Setabbreviation_nameNull()
            Me(Me.tablecust_company.abbreviation_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecust_company.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablecust_company.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iszip_codeNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.zip_codeColumn)
        End Function
        
        Public Sub Setzip_codeNull()
            Me(Me.tablecust_company.zip_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tablecust_company.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tablecust_company.remarkColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_companyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_companyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_companyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_companyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
