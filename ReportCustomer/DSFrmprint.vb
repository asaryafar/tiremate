'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmprint
    Inherits DataSet
    
    Private tableDetail As DetailDataTable
    
    Private tableUsers As UsersDataTable
    
    Private tableSummery As SummeryDataTable
    
    Private tableList As ListDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Detail")) Is Nothing) Then
                Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Summery")) Is Nothing) Then
                Me.Tables.Add(New SummeryDataTable(ds.Tables("Summery")))
            End If
            If (Not (ds.Tables("List")) Is Nothing) Then
                Me.Tables.Add(New ListDataTable(ds.Tables("List")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Detail As DetailDataTable
        Get
            Return Me.tableDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Summery As SummeryDataTable
        Get
            Return Me.tableSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property List As ListDataTable
        Get
            Return Me.tableList
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmprint = CType(MyBase.Clone,DSFrmprint)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Detail")) Is Nothing) Then
            Me.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
        End If
        If (Not (ds.Tables("Users")) Is Nothing) Then
            Me.Tables.Add(New UsersDataTable(ds.Tables("Users")))
        End If
        If (Not (ds.Tables("Summery")) Is Nothing) Then
            Me.Tables.Add(New SummeryDataTable(ds.Tables("Summery")))
        End If
        If (Not (ds.Tables("List")) Is Nothing) Then
            Me.Tables.Add(New ListDataTable(ds.Tables("List")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDetail = CType(Me.Tables("Detail"),DetailDataTable)
        If (Not (Me.tableDetail) Is Nothing) Then
            Me.tableDetail.InitVars
        End If
        Me.tableUsers = CType(Me.Tables("Users"),UsersDataTable)
        If (Not (Me.tableUsers) Is Nothing) Then
            Me.tableUsers.InitVars
        End If
        Me.tableSummery = CType(Me.Tables("Summery"),SummeryDataTable)
        If (Not (Me.tableSummery) Is Nothing) Then
            Me.tableSummery.InitVars
        End If
        Me.tableList = CType(Me.Tables("List"),ListDataTable)
        If (Not (Me.tableList) Is Nothing) Then
            Me.tableList.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmprint"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmprint.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDetail = New DetailDataTable
        Me.Tables.Add(Me.tableDetail)
        Me.tableUsers = New UsersDataTable
        Me.Tables.Add(Me.tableUsers)
        Me.tableSummery = New SummeryDataTable
        Me.Tables.Add(Me.tableSummery)
        Me.tableList = New ListDataTable
        Me.Tables.Add(Me.tableList)
    End Sub
    
    Private Function ShouldSerializeDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeList() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailRowChangeEvent)
    
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)
    
    Public Delegate Sub SummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As SummeryRowChangeEvent)
    
    Public Delegate Sub ListRowChangeEventHandler(ByVal sender As Object, ByVal e As ListRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnlicense_no_vehicle As DataColumn
        
        Private columnadd_user As DataColumn
        
        Private columndesc_type As DataColumn
        
        Private columndesc_source As DataColumn
        
        Private columndesc_class As DataColumn
        
        Private columndesc_territory As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columncod_source As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_territory As DataColumn
        
        Private columncod_sales_rep As DataColumn
        
        Private columnFLAGCUST As DataColumn
        
        Private columnflagtype As DataColumn
        
        Private columnflagsource As DataColumn
        
        Private columnflagclass As DataColumn
        
        Private columnflagter As DataColumn
        
        Private columnflagsale As DataColumn
        
        Private columnOrderName_ As DataColumn
        
        Private columnExt_Cost As DataColumn
        
        Private columncod_price As DataColumn
        
        Friend Sub New()
            MyBase.New("Detail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property license_no_vehicleColumn As DataColumn
            Get
                Return Me.columnlicense_no_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property desc_typeColumn As DataColumn
            Get
                Return Me.columndesc_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_sourceColumn As DataColumn
            Get
                Return Me.columndesc_source
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Friend ReadOnly Property desc_territoryColumn As DataColumn
            Get
                Return Me.columndesc_territory
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_repColumn As DataColumn
            Get
                Return Me.columncod_sales_rep
            End Get
        End Property
        
        Friend ReadOnly Property FLAGCUSTColumn As DataColumn
            Get
                Return Me.columnFLAGCUST
            End Get
        End Property
        
        Friend ReadOnly Property flagtypeColumn As DataColumn
            Get
                Return Me.columnflagtype
            End Get
        End Property
        
        Friend ReadOnly Property flagsourceColumn As DataColumn
            Get
                Return Me.columnflagsource
            End Get
        End Property
        
        Friend ReadOnly Property flagclassColumn As DataColumn
            Get
                Return Me.columnflagclass
            End Get
        End Property
        
        Friend ReadOnly Property flagterColumn As DataColumn
            Get
                Return Me.columnflagter
            End Get
        End Property
        
        Friend ReadOnly Property flagsaleColumn As DataColumn
            Get
                Return Me.columnflagsale
            End Get
        End Property
        
        Friend ReadOnly Property OrderName_Column As DataColumn
            Get
                Return Me.columnOrderName_
            End Get
        End Property
        
        Friend ReadOnly Property Ext_CostColumn As DataColumn
            Get
                Return Me.columnExt_Cost
            End Get
        End Property
        
        Friend ReadOnly Property cod_priceColumn As DataColumn
            Get
                Return Me.columncod_price
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetailRow
            Get
                Return CType(Me.Rows(index),DetailRow)
            End Get
        End Property
        
        Public Event DetailRowChanged As DetailRowChangeEventHandler
        
        Public Event DetailRowChanging As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleted As DetailRowChangeEventHandler
        
        Public Event DetailRowDeleting As DetailRowChangeEventHandler
        
        Public Overloads Sub AddDetailRow(ByVal row As DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetailRow( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal date_refer As Date,  _
                    ByVal id_service_center As String,  _
                    ByVal Total As Decimal,  _
                    ByVal license_no_vehicle As String,  _
                    ByVal add_user As String,  _
                    ByVal desc_type As String,  _
                    ByVal desc_source As String,  _
                    ByVal desc_class As String,  _
                    ByVal desc_territory As String,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_type As String,  _
                    ByVal cod_source As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_territory As String,  _
                    ByVal cod_sales_rep As String,  _
                    ByVal FLAGCUST As Boolean,  _
                    ByVal flagtype As Boolean,  _
                    ByVal flagsource As Boolean,  _
                    ByVal flagclass As Boolean,  _
                    ByVal flagter As Boolean,  _
                    ByVal flagsale As Boolean,  _
                    ByVal OrderName_ As String,  _
                    ByVal Ext_Cost As Decimal,  _
                    ByVal cod_price As String) As DetailRow
            Dim rowDetailRow As DetailRow = CType(Me.NewRow,DetailRow)
            rowDetailRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, date_refer, id_service_center, Total, license_no_vehicle, add_user, desc_type, desc_source, desc_class, desc_territory, flag, cod_type, cod_source, cod_class, cod_territory, cod_sales_rep, FLAGCUST, flagtype, flagsource, flagclass, flagter, flagsale, OrderName_, Ext_Cost, cod_price}
            Me.Rows.Add(rowDetailRow)
            Return rowDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetailDataTable = CType(MyBase.Clone,DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnTotal = Me.Columns("Total")
            Me.columnlicense_no_vehicle = Me.Columns("license_no_vehicle")
            Me.columnadd_user = Me.Columns("add_user")
            Me.columndesc_type = Me.Columns("desc_type")
            Me.columndesc_source = Me.Columns("desc_source")
            Me.columndesc_class = Me.Columns("desc_class")
            Me.columndesc_territory = Me.Columns("desc_territory")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columncod_source = Me.Columns("cod_source")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columncod_sales_rep = Me.Columns("cod_sales_rep")
            Me.columnFLAGCUST = Me.Columns("FLAGCUST")
            Me.columnflagtype = Me.Columns("flagtype")
            Me.columnflagsource = Me.Columns("flagsource")
            Me.columnflagclass = Me.Columns("flagclass")
            Me.columnflagter = Me.Columns("flagter")
            Me.columnflagsale = Me.Columns("flagsale")
            Me.columnOrderName_ = Me.Columns("OrderName ")
            Me.columnExt_Cost = Me.Columns("Ext_Cost")
            Me.columncod_price = Me.Columns("cod_price")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnlicense_no_vehicle = New DataColumn("license_no_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlicense_no_vehicle)
            Me.columnadd_user = New DataColumn("add_user", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columndesc_type = New DataColumn("desc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type)
            Me.columndesc_source = New DataColumn("desc_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_source)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.columndesc_territory = New DataColumn("desc_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_territory)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columncod_sales_rep = New DataColumn("cod_sales_rep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_rep)
            Me.columnFLAGCUST = New DataColumn("FLAGCUST", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFLAGCUST)
            Me.columnflagtype = New DataColumn("flagtype", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagtype)
            Me.columnflagsource = New DataColumn("flagsource", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagsource)
            Me.columnflagclass = New DataColumn("flagclass", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagclass)
            Me.columnflagter = New DataColumn("flagter", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagter)
            Me.columnflagsale = New DataColumn("flagsale", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagsale)
            Me.columnOrderName_ = New DataColumn("OrderName ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName_)
            Me.columnExt_Cost = New DataColumn("Ext_Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt_Cost)
            Me.columncod_price = New DataColumn("cod_price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_price)
            Me.columncod_customer.AllowDBNull = false
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewDetailRow() As DetailRow
            Return CType(Me.NewRow,DetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent DetailRowChanged(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent DetailRowChanging(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleted(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetailRowDeleting(Me, New DetailRowChangeEvent(CType(e.Row,DetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetailRow(ByVal row As DetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRow
        Inherits DataRow
        
        Private tableDetail As DetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetail = CType(Me.Table,DetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableDetail.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.date_referColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.TotalColumn) = value
            End Set
        End Property
        
        Public Property license_no_vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.license_no_vehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.license_no_vehicleColumn) = value
            End Set
        End Property
        
        Public Property add_user As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.add_userColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.add_userColumn) = value
            End Set
        End Property
        
        Public Property desc_type As String
            Get
                If Me.Isdesc_typeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.desc_typeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.desc_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_source As String
            Get
                If Me.Isdesc_sourceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.desc_sourceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.desc_sourceColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                If Me.Isdesc_classNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.desc_classColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.desc_classColumn) = value
            End Set
        End Property
        
        Public Property desc_territory As String
            Get
                If Me.Isdesc_territoryNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.desc_territoryColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.desc_territoryColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                If Me.Iscod_typeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.cod_typeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_source As String
            Get
                If Me.Iscod_sourceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.cod_sourceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                If Me.Iscod_classNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.cod_classColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_territory As String
            Get
                If Me.Iscod_territoryNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.cod_territoryColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_rep As String
            Get
                If Me.Iscod_sales_repNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDetail.cod_sales_repColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDetail.cod_sales_repColumn) = value
            End Set
        End Property
        
        Public Property FLAGCUST As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.FLAGCUSTColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.FLAGCUSTColumn) = value
            End Set
        End Property
        
        Public Property flagtype As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagtypeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagtypeColumn) = value
            End Set
        End Property
        
        Public Property flagsource As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagsourceColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagsourceColumn) = value
            End Set
        End Property
        
        Public Property flagclass As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagclassColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagclassColumn) = value
            End Set
        End Property
        
        Public Property flagter As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagterColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagterColumn) = value
            End Set
        End Property
        
        Public Property flagsale As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetail.flagsaleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.flagsaleColumn) = value
            End Set
        End Property
        
        Public Property OrderName_ As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.OrderName_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.OrderName_Column) = value
            End Set
        End Property
        
        Public Property Ext_Cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetail.Ext_CostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.Ext_CostColumn) = value
            End Set
        End Property
        
        Public Property cod_price As String
            Get
                Try 
                    Return CType(Me(Me.tableDetail.cod_priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetail.cod_priceColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableDetail.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableDetail.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableDetail.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableDetail.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableDetail.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableDetail.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islicense_no_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableDetail.license_no_vehicleColumn)
        End Function
        
        Public Sub Setlicense_no_vehicleNull()
            Me(Me.tableDetail.license_no_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableDetail.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableDetail.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_typeNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_typeColumn)
        End Function
        
        Public Sub Setdesc_typeNull()
            Me(Me.tableDetail.desc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sourceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_sourceColumn)
        End Function
        
        Public Sub Setdesc_sourceNull()
            Me(Me.tableDetail.desc_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableDetail.desc_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_territoryNull() As Boolean
            Return Me.IsNull(Me.tableDetail.desc_territoryColumn)
        End Function
        
        Public Sub Setdesc_territoryNull()
            Me(Me.tableDetail.desc_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tableDetail.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sourceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_sourceColumn)
        End Function
        
        Public Sub Setcod_sourceNull()
            Me(Me.tableDetail.cod_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tableDetail.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_territoryNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_territoryColumn)
        End Function
        
        Public Sub Setcod_territoryNull()
            Me(Me.tableDetail.cod_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_repNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_sales_repColumn)
        End Function
        
        Public Sub Setcod_sales_repNull()
            Me(Me.tableDetail.cod_sales_repColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFLAGCUSTNull() As Boolean
            Return Me.IsNull(Me.tableDetail.FLAGCUSTColumn)
        End Function
        
        Public Sub SetFLAGCUSTNull()
            Me(Me.tableDetail.FLAGCUSTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagtypeNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagtypeColumn)
        End Function
        
        Public Sub SetflagtypeNull()
            Me(Me.tableDetail.flagtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagsourceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagsourceColumn)
        End Function
        
        Public Sub SetflagsourceNull()
            Me(Me.tableDetail.flagsourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagclassNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagclassColumn)
        End Function
        
        Public Sub SetflagclassNull()
            Me(Me.tableDetail.flagclassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagterNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagterColumn)
        End Function
        
        Public Sub SetflagterNull()
            Me(Me.tableDetail.flagterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagsaleNull() As Boolean
            Return Me.IsNull(Me.tableDetail.flagsaleColumn)
        End Function
        
        Public Sub SetflagsaleNull()
            Me(Me.tableDetail.flagsaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderName_Null() As Boolean
            Return Me.IsNull(Me.tableDetail.OrderName_Column)
        End Function
        
        Public Sub SetOrderName_Null()
            Me(Me.tableDetail.OrderName_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsExt_CostNull() As Boolean
            Return Me.IsNull(Me.tableDetail.Ext_CostColumn)
        End Function
        
        Public Sub SetExt_CostNull()
            Me(Me.tableDetail.Ext_CostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_priceNull() As Boolean
            Return Me.IsNull(Me.tableDetail.cod_priceColumn)
        End Function
        
        Public Sub Setcod_priceNull()
            Me(Me.tableDetail.cod_priceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserId As DataColumn
        
        Private columnUserLogin As DataColumn
        
        Friend Sub New()
            MyBase.New("Users")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserIdColumn As DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        Friend ReadOnly Property UserLoginColumn As DataColumn
            Get
                Return Me.columnUserLogin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index),UsersRow)
            End Get
        End Property
        
        Public Event UsersRowChanged As UsersRowChangeEventHandler
        
        Public Event UsersRowChanging As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleted As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleting As UsersRowChangeEventHandler
        
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsersRow(ByVal UserLogin As String) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow,UsersRow)
            rowUsersRow.ItemArray = New Object() {Nothing, UserLogin}
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function
        
        Public Function FindByUserId(ByVal UserId As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserId}),UsersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone,UsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserId = Me.Columns("UserId")
            Me.columnUserLogin = Me.Columns("UserLogin")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserId = New DataColumn("UserId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserId)
            Me.columnUserLogin = New DataColumn("UserLogin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserLogin)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUserId}, true))
            Me.columnUserId.AutoIncrement = true
            Me.columnUserId.AllowDBNull = false
            Me.columnUserId.Unique = true
        End Sub
        
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow,UsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRow
        Inherits DataRow
        
        Private tableUsers As UsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table,UsersDataTable)
        End Sub
        
        Public Property UserId As Integer
            Get
                Return CType(Me(Me.tableUsers.UserIdColumn),Integer)
            End Get
            Set
                Me(Me.tableUsers.UserIdColumn) = value
            End Set
        End Property
        
        Public Property UserLogin As String
            Get
                Try 
                    Return CType(Me(Me.tableUsers.UserLoginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsers.UserLoginColumn) = value
            End Set
        End Property
        
        Public Function IsUserLoginNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserLoginColumn)
        End Function
        
        Public Sub SetUserLoginNull()
            Me(Me.tableUsers.UserLoginColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnNoInvoice As DataColumn
        
        Private columnflag As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columncod_source As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_territory As DataColumn
        
        Private columncod_sales_rep As DataColumn
        
        Private columnFLAGCUST As DataColumn
        
        Private columnflagtype As DataColumn
        
        Private columnflagsource As DataColumn
        
        Private columnflagclass As DataColumn
        
        Private columnflagter As DataColumn
        
        Private columnflagsale As DataColumn
        
        Private columnOrderName_ As DataColumn
        
        Private columnExt_Cost As DataColumn
        
        Friend Sub New()
            MyBase.New("Summery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property NoInvoiceColumn As DataColumn
            Get
                Return Me.columnNoInvoice
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property cod_sourceColumn As DataColumn
            Get
                Return Me.columncod_source
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_territoryColumn As DataColumn
            Get
                Return Me.columncod_territory
            End Get
        End Property
        
        Friend ReadOnly Property cod_sales_repColumn As DataColumn
            Get
                Return Me.columncod_sales_rep
            End Get
        End Property
        
        Friend ReadOnly Property FLAGCUSTColumn As DataColumn
            Get
                Return Me.columnFLAGCUST
            End Get
        End Property
        
        Friend ReadOnly Property flagtypeColumn As DataColumn
            Get
                Return Me.columnflagtype
            End Get
        End Property
        
        Friend ReadOnly Property flagsourceColumn As DataColumn
            Get
                Return Me.columnflagsource
            End Get
        End Property
        
        Friend ReadOnly Property flagclassColumn As DataColumn
            Get
                Return Me.columnflagclass
            End Get
        End Property
        
        Friend ReadOnly Property flagterColumn As DataColumn
            Get
                Return Me.columnflagter
            End Get
        End Property
        
        Friend ReadOnly Property flagsaleColumn As DataColumn
            Get
                Return Me.columnflagsale
            End Get
        End Property
        
        Friend ReadOnly Property OrderName_Column As DataColumn
            Get
                Return Me.columnOrderName_
            End Get
        End Property
        
        Friend ReadOnly Property Ext_CostColumn As DataColumn
            Get
                Return Me.columnExt_Cost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SummeryRow
            Get
                Return CType(Me.Rows(index),SummeryRow)
            End Get
        End Property
        
        Public Event SummeryRowChanged As SummeryRowChangeEventHandler
        
        Public Event SummeryRowChanging As SummeryRowChangeEventHandler
        
        Public Event SummeryRowDeleted As SummeryRowChangeEventHandler
        
        Public Event SummeryRowDeleting As SummeryRowChangeEventHandler
        
        Public Overloads Sub AddSummeryRow(ByVal row As SummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSummeryRow( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal amount As Decimal,  _
                    ByVal NoInvoice As Integer,  _
                    ByVal flag As Boolean,  _
                    ByVal cod_type As String,  _
                    ByVal cod_source As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_territory As String,  _
                    ByVal cod_sales_rep As String,  _
                    ByVal FLAGCUST As Boolean,  _
                    ByVal flagtype As Boolean,  _
                    ByVal flagsource As Boolean,  _
                    ByVal flagclass As Boolean,  _
                    ByVal flagter As Boolean,  _
                    ByVal flagsale As Boolean,  _
                    ByVal OrderName_ As String,  _
                    ByVal Ext_Cost As Decimal) As SummeryRow
            Dim rowSummeryRow As SummeryRow = CType(Me.NewRow,SummeryRow)
            rowSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, amount, NoInvoice, flag, cod_type, cod_source, cod_class, cod_territory, cod_sales_rep, FLAGCUST, flagtype, flagsource, flagclass, flagter, flagsale, OrderName_, Ext_Cost}
            Me.Rows.Add(rowSummeryRow)
            Return rowSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SummeryDataTable = CType(MyBase.Clone,SummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnamount = Me.Columns("amount")
            Me.columnNoInvoice = Me.Columns("NoInvoice")
            Me.columnflag = Me.Columns("flag")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columncod_source = Me.Columns("cod_source")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_territory = Me.Columns("cod_territory")
            Me.columncod_sales_rep = Me.Columns("cod_sales_rep")
            Me.columnFLAGCUST = Me.Columns("FLAGCUST")
            Me.columnflagtype = Me.Columns("flagtype")
            Me.columnflagsource = Me.Columns("flagsource")
            Me.columnflagclass = Me.Columns("flagclass")
            Me.columnflagter = Me.Columns("flagter")
            Me.columnflagsale = Me.Columns("flagsale")
            Me.columnOrderName_ = Me.Columns("OrderName ")
            Me.columnExt_Cost = Me.Columns("Ext_Cost")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnNoInvoice = New DataColumn("NoInvoice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoInvoice)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columncod_source = New DataColumn("cod_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_source)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_territory = New DataColumn("cod_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_territory)
            Me.columncod_sales_rep = New DataColumn("cod_sales_rep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_sales_rep)
            Me.columnFLAGCUST = New DataColumn("FLAGCUST", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFLAGCUST)
            Me.columnflagtype = New DataColumn("flagtype", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagtype)
            Me.columnflagsource = New DataColumn("flagsource", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagsource)
            Me.columnflagclass = New DataColumn("flagclass", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagclass)
            Me.columnflagter = New DataColumn("flagter", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagter)
            Me.columnflagsale = New DataColumn("flagsale", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagsale)
            Me.columnOrderName_ = New DataColumn("OrderName ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName_)
            Me.columnExt_Cost = New DataColumn("Ext_Cost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt_Cost)
            Me.columncod_customer.AllowDBNull = false
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
            Me.columnamount.ReadOnly = true
            Me.columnNoInvoice.ReadOnly = true
        End Sub
        
        Public Function NewSummeryRow() As SummeryRow
            Return CType(Me.NewRow,SummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent SummeryRowChanged(Me, New SummeryRowChangeEvent(CType(e.Row,SummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent SummeryRowChanging(Me, New SummeryRowChangeEvent(CType(e.Row,SummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent SummeryRowDeleted(Me, New SummeryRowChangeEvent(CType(e.Row,SummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent SummeryRowDeleting(Me, New SummeryRowChangeEvent(CType(e.Row,SummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSummeryRow(ByVal row As SummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummeryRow
        Inherits DataRow
        
        Private tableSummery As SummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSummery = CType(Me.Table,SummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSummery.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.amountColumn) = value
            End Set
        End Property
        
        Public Property NoInvoice As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSummery.NoInvoiceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.NoInvoiceColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                If Me.Iscod_typeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSummery.cod_typeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSummery.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property cod_source As String
            Get
                If Me.Iscod_sourceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSummery.cod_sourceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSummery.cod_sourceColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                If Me.Iscod_classNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSummery.cod_classColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSummery.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_territory As String
            Get
                If Me.Iscod_territoryNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSummery.cod_territoryColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSummery.cod_territoryColumn) = value
            End Set
        End Property
        
        Public Property cod_sales_rep As String
            Get
                If Me.Iscod_sales_repNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSummery.cod_sales_repColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSummery.cod_sales_repColumn) = value
            End Set
        End Property
        
        Public Property FLAGCUST As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.FLAGCUSTColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.FLAGCUSTColumn) = value
            End Set
        End Property
        
        Public Property flagtype As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagtypeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagtypeColumn) = value
            End Set
        End Property
        
        Public Property flagsource As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagsourceColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagsourceColumn) = value
            End Set
        End Property
        
        Public Property flagclass As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagclassColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagclassColumn) = value
            End Set
        End Property
        
        Public Property flagter As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagterColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagterColumn) = value
            End Set
        End Property
        
        Public Property flagsale As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSummery.flagsaleColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.flagsaleColumn) = value
            End Set
        End Property
        
        Public Property OrderName_ As String
            Get
                Try 
                    Return CType(Me(Me.tableSummery.OrderName_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.OrderName_Column) = value
            End Set
        End Property
        
        Public Property Ext_Cost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSummery.Ext_CostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSummery.Ext_CostColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableSummery.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableSummery.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoInvoiceNull() As Boolean
            Return Me.IsNull(Me.tableSummery.NoInvoiceColumn)
        End Function
        
        Public Sub SetNoInvoiceNull()
            Me(Me.tableSummery.NoInvoiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tableSummery.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tableSummery.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sourceNull() As Boolean
            Return Me.IsNull(Me.tableSummery.cod_sourceColumn)
        End Function
        
        Public Sub Setcod_sourceNull()
            Me(Me.tableSummery.cod_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tableSummery.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tableSummery.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_territoryNull() As Boolean
            Return Me.IsNull(Me.tableSummery.cod_territoryColumn)
        End Function
        
        Public Sub Setcod_territoryNull()
            Me(Me.tableSummery.cod_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_sales_repNull() As Boolean
            Return Me.IsNull(Me.tableSummery.cod_sales_repColumn)
        End Function
        
        Public Sub Setcod_sales_repNull()
            Me(Me.tableSummery.cod_sales_repColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFLAGCUSTNull() As Boolean
            Return Me.IsNull(Me.tableSummery.FLAGCUSTColumn)
        End Function
        
        Public Sub SetFLAGCUSTNull()
            Me(Me.tableSummery.FLAGCUSTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagtypeNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagtypeColumn)
        End Function
        
        Public Sub SetflagtypeNull()
            Me(Me.tableSummery.flagtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagsourceNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagsourceColumn)
        End Function
        
        Public Sub SetflagsourceNull()
            Me(Me.tableSummery.flagsourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagclassNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagclassColumn)
        End Function
        
        Public Sub SetflagclassNull()
            Me(Me.tableSummery.flagclassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagterNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagterColumn)
        End Function
        
        Public Sub SetflagterNull()
            Me(Me.tableSummery.flagterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagsaleNull() As Boolean
            Return Me.IsNull(Me.tableSummery.flagsaleColumn)
        End Function
        
        Public Sub SetflagsaleNull()
            Me(Me.tableSummery.flagsaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderName_Null() As Boolean
            Return Me.IsNull(Me.tableSummery.OrderName_Column)
        End Function
        
        Public Sub SetOrderName_Null()
            Me(Me.tableSummery.OrderName_Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsExt_CostNull() As Boolean
            Return Me.IsNull(Me.tableSummery.Ext_CostColumn)
        End Function
        
        Public Sub SetExt_CostNull()
            Me(Me.tableSummery.Ext_CostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncustomer_no As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columncity As DataColumn
        
        Private columnzip As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnCustSince As DataColumn
        
        Private columnLastVisit As DataColumn
        
        Private columndesc_type As DataColumn
        
        Private columndesc_source As DataColumn
        
        Private columndesc_class As DataColumn
        
        Private columndesc_territory As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columncod_price As DataColumn
        
        Private columnemail As DataColumn
        
        Friend Sub New()
            MyBase.New("List")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property customer_noColumn As DataColumn
            Get
                Return Me.columncustomer_no
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property CustSinceColumn As DataColumn
            Get
                Return Me.columnCustSince
            End Get
        End Property
        
        Friend ReadOnly Property LastVisitColumn As DataColumn
            Get
                Return Me.columnLastVisit
            End Get
        End Property
        
        Friend ReadOnly Property desc_typeColumn As DataColumn
            Get
                Return Me.columndesc_type
            End Get
        End Property
        
        Friend ReadOnly Property desc_sourceColumn As DataColumn
            Get
                Return Me.columndesc_source
            End Get
        End Property
        
        Friend ReadOnly Property desc_classColumn As DataColumn
            Get
                Return Me.columndesc_class
            End Get
        End Property
        
        Friend ReadOnly Property desc_territoryColumn As DataColumn
            Get
                Return Me.columndesc_territory
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property cod_priceColumn As DataColumn
            Get
                Return Me.columncod_price
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListRow
            Get
                Return CType(Me.Rows(index),ListRow)
            End Get
        End Property
        
        Public Event ListRowChanged As ListRowChangeEventHandler
        
        Public Event ListRowChanging As ListRowChangeEventHandler
        
        Public Event ListRowDeleted As ListRowChangeEventHandler
        
        Public Event ListRowDeleting As ListRowChangeEventHandler
        
        Public Overloads Sub AddListRow(ByVal row As ListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddListRow( _
                    ByVal customer_no As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal city As String,  _
                    ByVal zip As String,  _
                    ByVal phone_1 As String,  _
                    ByVal CustSince As Date,  _
                    ByVal LastVisit As Date,  _
                    ByVal desc_type As String,  _
                    ByVal desc_source As String,  _
                    ByVal desc_class As String,  _
                    ByVal desc_territory As String,  _
                    ByVal flag As Boolean,  _
                    ByVal address As String,  _
                    ByVal OrderName As String,  _
                    ByVal cod_price As String,  _
                    ByVal email As String) As ListRow
            Dim rowListRow As ListRow = CType(Me.NewRow,ListRow)
            rowListRow.ItemArray = New Object() {customer_no, f_name, name, complete_name, city, zip, phone_1, CustSince, LastVisit, desc_type, desc_source, desc_class, desc_territory, flag, address, OrderName, cod_price, email}
            Me.Rows.Add(rowListRow)
            Return rowListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ListDataTable = CType(MyBase.Clone,ListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncustomer_no = Me.Columns("customer_no")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columncity = Me.Columns("city")
            Me.columnzip = Me.Columns("zip")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnCustSince = Me.Columns("CustSince")
            Me.columnLastVisit = Me.Columns("LastVisit")
            Me.columndesc_type = Me.Columns("desc_type")
            Me.columndesc_source = Me.Columns("desc_source")
            Me.columndesc_class = Me.Columns("desc_class")
            Me.columndesc_territory = Me.Columns("desc_territory")
            Me.columnflag = Me.Columns("flag")
            Me.columnaddress = Me.Columns("address")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columncod_price = Me.Columns("cod_price")
            Me.columnemail = Me.Columns("email")
        End Sub
        
        Private Sub InitClass()
            Me.columncustomer_no = New DataColumn("customer_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncustomer_no)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnCustSince = New DataColumn("CustSince", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustSince)
            Me.columnLastVisit = New DataColumn("LastVisit", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastVisit)
            Me.columndesc_type = New DataColumn("desc_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_type)
            Me.columndesc_source = New DataColumn("desc_source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_source)
            Me.columndesc_class = New DataColumn("desc_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_class)
            Me.columndesc_territory = New DataColumn("desc_territory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_territory)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncod_price = New DataColumn("cod_price", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_price)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columncustomer_no.AllowDBNull = false
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewListRow() As ListRow
            Return CType(Me.NewRow,ListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListRowChangedEvent) Is Nothing) Then
                RaiseEvent ListRowChanged(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListRowChangingEvent) Is Nothing) Then
                RaiseEvent ListRowChanging(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListRowDeleted(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListRowDeleting(Me, New ListRowChangeEvent(CType(e.Row,ListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveListRow(ByVal row As ListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRow
        Inherits DataRow
        
        Private tableList As ListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableList = CType(Me.Table,ListDataTable)
        End Sub
        
        Public Property customer_no As String
            Get
                Return CType(Me(Me.tableList.customer_noColumn),String)
            End Get
            Set
                Me(Me.tableList.customer_noColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableList.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableList.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.cityColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tableList.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.zipColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableList.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.phone_1Column) = value
            End Set
        End Property
        
        Public Property CustSince As Date
            Get
                Try 
                    Return CType(Me(Me.tableList.CustSinceColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.CustSinceColumn) = value
            End Set
        End Property
        
        Public Property LastVisit As Date
            Get
                Try 
                    Return CType(Me(Me.tableList.LastVisitColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.LastVisitColumn) = value
            End Set
        End Property
        
        Public Property desc_type As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_typeColumn) = value
            End Set
        End Property
        
        Public Property desc_source As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_sourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_sourceColumn) = value
            End Set
        End Property
        
        Public Property desc_class As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_classColumn) = value
            End Set
        End Property
        
        Public Property desc_territory As String
            Get
                Try 
                    Return CType(Me(Me.tableList.desc_territoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.desc_territoryColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableList.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.flagColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableList.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.addressColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableList.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property cod_price As String
            Get
                Try 
                    Return CType(Me(Me.tableList.cod_priceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.cod_priceColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableList.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableList.emailColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableList.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableList.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableList.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableList.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableList.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableList.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableList.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableList.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tableList.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tableList.zipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableList.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableList.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustSinceNull() As Boolean
            Return Me.IsNull(Me.tableList.CustSinceColumn)
        End Function
        
        Public Sub SetCustSinceNull()
            Me(Me.tableList.CustSinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastVisitNull() As Boolean
            Return Me.IsNull(Me.tableList.LastVisitColumn)
        End Function
        
        Public Sub SetLastVisitNull()
            Me(Me.tableList.LastVisitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_typeNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_typeColumn)
        End Function
        
        Public Sub Setdesc_typeNull()
            Me(Me.tableList.desc_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_sourceNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_sourceColumn)
        End Function
        
        Public Sub Setdesc_sourceNull()
            Me(Me.tableList.desc_sourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_classNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_classColumn)
        End Function
        
        Public Sub Setdesc_classNull()
            Me(Me.tableList.desc_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_territoryNull() As Boolean
            Return Me.IsNull(Me.tableList.desc_territoryColumn)
        End Function
        
        Public Sub Setdesc_territoryNull()
            Me(Me.tableList.desc_territoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableList.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableList.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableList.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableList.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableList.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableList.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_priceNull() As Boolean
            Return Me.IsNull(Me.tableList.cod_priceColumn)
        End Function
        
        Public Sub Setcod_priceNull()
            Me(Me.tableList.cod_priceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableList.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableList.emailColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
