'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmARCusReport
    Inherits DataSet
    
    Private tableCusChargeDetail As CusChargeDetailDataTable
    
    Private tablecustomer As customerDataTable
    
    Private tableGL_payment_deposit As GL_payment_depositDataTable
    
    Private tableCusARLedgerDetail As CusARLedgerDetailDataTable
    
    Private tableCusARLedgerSummery As CusARLedgerSummeryDataTable
    
    Private tableLOGO As LOGODataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CusChargeDetail")) Is Nothing) Then
                Me.Tables.Add(New CusChargeDetailDataTable(ds.Tables("CusChargeDetail")))
            End If
            If (Not (ds.Tables("customer")) Is Nothing) Then
                Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
            End If
            If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
                Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
            End If
            If (Not (ds.Tables("CusARLedgerDetail")) Is Nothing) Then
                Me.Tables.Add(New CusARLedgerDetailDataTable(ds.Tables("CusARLedgerDetail")))
            End If
            If (Not (ds.Tables("CusARLedgerSummery")) Is Nothing) Then
                Me.Tables.Add(New CusARLedgerSummeryDataTable(ds.Tables("CusARLedgerSummery")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusChargeDetail As CusChargeDetailDataTable
        Get
            Return Me.tableCusChargeDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customer As customerDataTable
        Get
            Return Me.tablecustomer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GL_payment_deposit As GL_payment_depositDataTable
        Get
            Return Me.tableGL_payment_deposit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARLedgerDetail As CusARLedgerDetailDataTable
        Get
            Return Me.tableCusARLedgerDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARLedgerSummery As CusARLedgerSummeryDataTable
        Get
            Return Me.tableCusARLedgerSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmARCusReport = CType(MyBase.Clone,DSFrmARCusReport)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CusChargeDetail")) Is Nothing) Then
            Me.Tables.Add(New CusChargeDetailDataTable(ds.Tables("CusChargeDetail")))
        End If
        If (Not (ds.Tables("customer")) Is Nothing) Then
            Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
        End If
        If (Not (ds.Tables("GL_payment_deposit")) Is Nothing) Then
            Me.Tables.Add(New GL_payment_depositDataTable(ds.Tables("GL_payment_deposit")))
        End If
        If (Not (ds.Tables("CusARLedgerDetail")) Is Nothing) Then
            Me.Tables.Add(New CusARLedgerDetailDataTable(ds.Tables("CusARLedgerDetail")))
        End If
        If (Not (ds.Tables("CusARLedgerSummery")) Is Nothing) Then
            Me.Tables.Add(New CusARLedgerSummeryDataTable(ds.Tables("CusARLedgerSummery")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCusChargeDetail = CType(Me.Tables("CusChargeDetail"),CusChargeDetailDataTable)
        If (Not (Me.tableCusChargeDetail) Is Nothing) Then
            Me.tableCusChargeDetail.InitVars
        End If
        Me.tablecustomer = CType(Me.Tables("customer"),customerDataTable)
        If (Not (Me.tablecustomer) Is Nothing) Then
            Me.tablecustomer.InitVars
        End If
        Me.tableGL_payment_deposit = CType(Me.Tables("GL_payment_deposit"),GL_payment_depositDataTable)
        If (Not (Me.tableGL_payment_deposit) Is Nothing) Then
            Me.tableGL_payment_deposit.InitVars
        End If
        Me.tableCusARLedgerDetail = CType(Me.Tables("CusARLedgerDetail"),CusARLedgerDetailDataTable)
        If (Not (Me.tableCusARLedgerDetail) Is Nothing) Then
            Me.tableCusARLedgerDetail.InitVars
        End If
        Me.tableCusARLedgerSummery = CType(Me.Tables("CusARLedgerSummery"),CusARLedgerSummeryDataTable)
        If (Not (Me.tableCusARLedgerSummery) Is Nothing) Then
            Me.tableCusARLedgerSummery.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmARCusReport"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmARCusReport.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCusChargeDetail = New CusChargeDetailDataTable
        Me.Tables.Add(Me.tableCusChargeDetail)
        Me.tablecustomer = New customerDataTable
        Me.Tables.Add(Me.tablecustomer)
        Me.tableGL_payment_deposit = New GL_payment_depositDataTable
        Me.Tables.Add(Me.tableGL_payment_deposit)
        Me.tableCusARLedgerDetail = New CusARLedgerDetailDataTable
        Me.Tables.Add(Me.tableCusARLedgerDetail)
        Me.tableCusARLedgerSummery = New CusARLedgerSummeryDataTable
        Me.Tables.Add(Me.tableCusARLedgerSummery)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
    End Sub
    
    Private Function ShouldSerializeCusChargeDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecustomer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGL_payment_deposit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARLedgerDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARLedgerSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CusChargeDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CusChargeDetailRowChangeEvent)
    
    Public Delegate Sub customerRowChangeEventHandler(ByVal sender As Object, ByVal e As customerRowChangeEvent)
    
    Public Delegate Sub GL_payment_depositRowChangeEventHandler(ByVal sender As Object, ByVal e As GL_payment_depositRowChangeEvent)
    
    Public Delegate Sub CusARLedgerDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARLedgerDetailRowChangeEvent)
    
    Public Delegate Sub CusARLedgerSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARLedgerSummeryRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnname As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Friend Sub New()
            MyBase.New("CusChargeDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusChargeDetailRow
            Get
                Return CType(Me.Rows(index),CusChargeDetailRow)
            End Get
        End Property
        
        Public Event CusChargeDetailRowChanged As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowChanging As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowDeleted As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowDeleting As CusChargeDetailRowChangeEventHandler
        
        Public Overloads Sub AddCusChargeDetailRow(ByVal row As CusChargeDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusChargeDetailRow(ByVal cod_customer As String, ByVal complete_name As String, ByVal date_refer As String, ByVal id_service_center As String, ByVal Total As Decimal, ByVal name As String, ByVal payment4 As Decimal, ByVal payment2 As Decimal, ByVal adjustment As Decimal) As CusChargeDetailRow
            Dim rowCusChargeDetailRow As CusChargeDetailRow = CType(Me.NewRow,CusChargeDetailRow)
            rowCusChargeDetailRow.ItemArray = New Object() {cod_customer, complete_name, date_refer, id_service_center, Total, name, payment4, payment2, adjustment}
            Me.Rows.Add(rowCusChargeDetailRow)
            Return rowCusChargeDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusChargeDetailDataTable = CType(MyBase.Clone,CusChargeDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusChargeDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnTotal = Me.Columns("Total")
            Me.columnname = Me.Columns("name")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columncod_customer.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewCusChargeDetailRow() As CusChargeDetailRow
            Return CType(Me.NewRow,CusChargeDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusChargeDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusChargeDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusChargeDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowChanged(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusChargeDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowChanging(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusChargeDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowDeleted(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusChargeDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowDeleting(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusChargeDetailRow(ByVal row As CusChargeDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailRow
        Inherits DataRow
        
        Private tableCusChargeDetail As CusChargeDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusChargeDetail = CType(Me.Table,CusChargeDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusChargeDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusChargeDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.date_referColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableCusChargeDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableCusChargeDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.TotalColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.adjustmentColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusChargeDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableCusChargeDetail.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableCusChargeDetail.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusChargeDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableCusChargeDetail.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableCusChargeDetail.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableCusChargeDetail.adjustmentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusChargeDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusChargeDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusChargeDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customerRow
            Get
                Return CType(Me.Rows(index),customerRow)
            End Get
        End Property
        
        Public Event customerRowChanged As customerRowChangeEventHandler
        
        Public Event customerRowChanging As customerRowChangeEventHandler
        
        Public Event customerRowDeleted As customerRowChangeEventHandler
        
        Public Event customerRowDeleting As customerRowChangeEventHandler
        
        Public Overloads Sub AddcustomerRow(ByVal row As customerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomerRow(ByVal cod As String, ByVal f_name As String, ByVal l_name As String, ByVal complete_name As String, ByVal flag As Boolean) As customerRow
            Dim rowcustomerRow As customerRow = CType(Me.NewRow,customerRow)
            rowcustomerRow.ItemArray = New Object() {cod, f_name, l_name, complete_name, flag}
            Me.Rows.Add(rowcustomerRow)
            Return rowcustomerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As customerDataTable = CType(MyBase.Clone,customerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New customerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod.AllowDBNull = false
        End Sub
        
        Public Function NewcustomerRow() As customerRow
            Return CType(Me.NewRow,customerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New customerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customerRowChangedEvent) Is Nothing) Then
                RaiseEvent customerRowChanged(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customerRowChangingEvent) Is Nothing) Then
                RaiseEvent customerRowChanging(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customerRowDeletedEvent) Is Nothing) Then
                RaiseEvent customerRowDeleted(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customerRowDeletingEvent) Is Nothing) Then
                RaiseEvent customerRowDeleting(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomerRow(ByVal row As customerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRow
        Inherits DataRow
        
        Private tablecustomer As customerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomer = CType(Me.Table,customerDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablecustomer.codColumn),String)
            End Get
            Set
                Me(Me.tablecustomer.codColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.f_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.l_nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.flagColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecustomer.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecustomer.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecustomer.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablecustomer.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As customerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("GL_payment_deposit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GL_payment_depositRow
            Get
                Return CType(Me.Rows(index),GL_payment_depositRow)
            End Get
        End Property
        
        Public Event GL_payment_depositRowChanged As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowChanging As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleted As GL_payment_depositRowChangeEventHandler
        
        Public Event GL_payment_depositRowDeleting As GL_payment_depositRowChangeEventHandler
        
        Public Overloads Sub AddGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGL_payment_depositRow(ByVal cod_customer As String, ByVal BalanceAmount As Decimal) As GL_payment_depositRow
            Dim rowGL_payment_depositRow As GL_payment_depositRow = CType(Me.NewRow,GL_payment_depositRow)
            rowGL_payment_depositRow.ItemArray = New Object() {cod_customer, BalanceAmount}
            Me.Rows.Add(rowGL_payment_depositRow)
            Return rowGL_payment_depositRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GL_payment_depositDataTable = CType(MyBase.Clone,GL_payment_depositDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GL_payment_depositDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
        End Sub
        
        Public Function NewGL_payment_depositRow() As GL_payment_depositRow
            Return CType(Me.NewRow,GL_payment_depositRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GL_payment_depositRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GL_payment_depositRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GL_payment_depositRowChangedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanged(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GL_payment_depositRowChangingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowChanging(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GL_payment_depositRowDeletedEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleted(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GL_payment_depositRowDeletingEvent) Is Nothing) Then
                RaiseEvent GL_payment_depositRowDeleting(Me, New GL_payment_depositRowChangeEvent(CType(e.Row,GL_payment_depositRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGL_payment_depositRow(ByVal row As GL_payment_depositRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRow
        Inherits DataRow
        
        Private tableGL_payment_deposit As GL_payment_depositDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGL_payment_deposit = CType(Me.Table,GL_payment_depositDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.cod_customerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGL_payment_deposit.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGL_payment_deposit.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function Iscod_customerNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.cod_customerColumn)
        End Function
        
        Public Sub Setcod_customerNull()
            Me(Me.tableGL_payment_deposit.cod_customerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableGL_payment_deposit.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableGL_payment_deposit.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GL_payment_depositRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GL_payment_depositRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GL_payment_depositRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GL_payment_depositRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private column_date As DataColumn
        
        Private columnid As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncredit As DataColumn
        
        Private columnadj As DataColumn
        
        Private columndue As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDown As DataColumn
        
        Private columnOVERPAID As DataColumn
        
        Private columnOther As DataColumn
        
        Private columnBalance As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARLedgerDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property adjColumn As DataColumn
            Get
                Return Me.columnadj
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DownColumn As DataColumn
            Get
                Return Me.columnDown
            End Get
        End Property
        
        Friend ReadOnly Property OVERPAIDColumn As DataColumn
            Get
                Return Me.columnOVERPAID
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Friend ReadOnly Property BalanceColumn As DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARLedgerDetailRow
            Get
                Return CType(Me.Rows(index),CusARLedgerDetailRow)
            End Get
        End Property
        
        Public Event CusARLedgerDetailRowChanged As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowChanging As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowDeleted As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowDeleting As CusARLedgerDetailRowChangeEventHandler
        
        Public Overloads Sub AddCusARLedgerDetailRow(ByVal row As CusARLedgerDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARLedgerDetailRow( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal _date As Date,  _
                    ByVal id As String,  _
                    ByVal charge As Decimal,  _
                    ByVal credit As Decimal,  _
                    ByVal adj As Decimal,  _
                    ByVal due As Date,  _
                    ByVal flag As Boolean,  _
                    ByVal OrderDate As String,  _
                    ByVal OrderName As String,  _
                    ByVal Paid_amount As Decimal,  _
                    ByVal Down As Decimal,  _
                    ByVal OVERPAID As Decimal,  _
                    ByVal Other As Decimal,  _
                    ByVal Balance As Decimal) As CusARLedgerDetailRow
            Dim rowCusARLedgerDetailRow As CusARLedgerDetailRow = CType(Me.NewRow,CusARLedgerDetailRow)
            rowCusARLedgerDetailRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, _date, id, charge, credit, adj, due, flag, OrderDate, OrderName, Paid_amount, Down, OVERPAID, Other, Balance}
            Me.Rows.Add(rowCusARLedgerDetailRow)
            Return rowCusARLedgerDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARLedgerDetailDataTable = CType(MyBase.Clone,CusARLedgerDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARLedgerDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.column_date = Me.Columns("date")
            Me.columnid = Me.Columns("id")
            Me.columncharge = Me.Columns("charge")
            Me.columncredit = Me.Columns("credit")
            Me.columnadj = Me.Columns("adj")
            Me.columndue = Me.Columns("due")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDown = Me.Columns("Down")
            Me.columnOVERPAID = Me.Columns("OVERPAID")
            Me.columnOther = Me.Columns("Other")
            Me.columnBalance = Me.Columns("Balance")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnid = New DataColumn("id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columnadj = New DataColumn("adj", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadj)
            Me.columndue = New DataColumn("due", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDown = New DataColumn("Down", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDown)
            Me.columnOVERPAID = New DataColumn("OVERPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERPAID)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columnBalance = New DataColumn("Balance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalance)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
            Me.columnid.AllowDBNull = false
        End Sub
        
        Public Function NewCusARLedgerDetailRow() As CusARLedgerDetailRow
            Return CType(Me.NewRow,CusARLedgerDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARLedgerDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARLedgerDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARLedgerDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowChanged(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARLedgerDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowChanging(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARLedgerDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowDeleted(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARLedgerDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowDeleting(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARLedgerDetailRow(ByVal row As CusARLedgerDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailRow
        Inherits DataRow
        
        Private tableCusARLedgerDetail As CusARLedgerDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARLedgerDetail = CType(Me.Table,CusARLedgerDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail._dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail._dateColumn) = value
            End Set
        End Property
        
        Public Property id As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail.idColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.idColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.chargeColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.creditColumn) = value
            End Set
        End Property
        
        Public Property adj As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.adjColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.adjColumn) = value
            End Set
        End Property
        
        Public Property due As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.dueColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.dueColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Down As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.DownColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.DownColumn) = value
            End Set
        End Property
        
        Public Property OVERPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OVERPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OVERPAIDColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OtherColumn) = value
            End Set
        End Property
        
        Public Property Balance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.BalanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.BalanceColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusARLedgerDetail.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARLedgerDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARLedgerDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableCusARLedgerDetail._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableCusARLedgerDetail.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableCusARLedgerDetail.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.adjColumn)
        End Function
        
        Public Sub SetadjNull()
            Me(Me.tableCusARLedgerDetail.adjColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableCusARLedgerDetail.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARLedgerDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableCusARLedgerDetail.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARLedgerDetail.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableCusARLedgerDetail.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.DownColumn)
        End Function
        
        Public Sub SetDownNull()
            Me(Me.tableCusARLedgerDetail.DownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERPAIDNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OVERPAIDColumn)
        End Function
        
        Public Sub SetOVERPAIDNull()
            Me(Me.tableCusARLedgerDetail.OVERPAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tableCusARLedgerDetail.OtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.BalanceColumn)
        End Function
        
        Public Sub SetBalanceNull()
            Me(Me.tableCusARLedgerDetail.BalanceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARLedgerDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARLedgerDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARLedgerDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncredit As DataColumn
        
        Private columnadj As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDown As DataColumn
        
        Private columnOVERPAID As DataColumn
        
        Private columnOther As DataColumn
        
        Private columnBalance As DataColumn
        
        Private columnFCalc As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARLedgerSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property adjColumn As DataColumn
            Get
                Return Me.columnadj
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DownColumn As DataColumn
            Get
                Return Me.columnDown
            End Get
        End Property
        
        Friend ReadOnly Property OVERPAIDColumn As DataColumn
            Get
                Return Me.columnOVERPAID
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Friend ReadOnly Property BalanceColumn As DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        Friend ReadOnly Property FCalcColumn As DataColumn
            Get
                Return Me.columnFCalc
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARLedgerSummeryRow
            Get
                Return CType(Me.Rows(index),CusARLedgerSummeryRow)
            End Get
        End Property
        
        Public Event CusARLedgerSummeryRowChanged As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowChanging As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowDeleted As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowDeleting As CusARLedgerSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCusARLedgerSummeryRow(ByVal row As CusARLedgerSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARLedgerSummeryRow( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal charge As Decimal,  _
                    ByVal credit As Decimal,  _
                    ByVal adj As Decimal,  _
                    ByVal flag As Boolean,  _
                    ByVal OrderName As String,  _
                    ByVal Paid_amount As Decimal,  _
                    ByVal Down As Decimal,  _
                    ByVal OVERPAID As Decimal,  _
                    ByVal Other As Decimal,  _
                    ByVal Balance As Decimal,  _
                    ByVal FCalc As Boolean,  _
                    ByVal FlagShow As Boolean) As CusARLedgerSummeryRow
            Dim rowCusARLedgerSummeryRow As CusARLedgerSummeryRow = CType(Me.NewRow,CusARLedgerSummeryRow)
            rowCusARLedgerSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, charge, credit, adj, flag, OrderName, Paid_amount, Down, OVERPAID, Other, Balance, FCalc, FlagShow}
            Me.Rows.Add(rowCusARLedgerSummeryRow)
            Return rowCusARLedgerSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARLedgerSummeryDataTable = CType(MyBase.Clone,CusARLedgerSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARLedgerSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columncharge = Me.Columns("charge")
            Me.columncredit = Me.Columns("credit")
            Me.columnadj = Me.Columns("adj")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDown = Me.Columns("Down")
            Me.columnOVERPAID = Me.Columns("OVERPAID")
            Me.columnOther = Me.Columns("Other")
            Me.columnBalance = Me.Columns("Balance")
            Me.columnFCalc = Me.Columns("FCalc")
            Me.columnFlagShow = Me.Columns("FlagShow")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columnadj = New DataColumn("adj", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadj)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDown = New DataColumn("Down", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDown)
            Me.columnOVERPAID = New DataColumn("OVERPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERPAID)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columnBalance = New DataColumn("Balance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalance)
            Me.columnFCalc = New DataColumn("FCalc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFCalc)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewCusARLedgerSummeryRow() As CusARLedgerSummeryRow
            Return CType(Me.NewRow,CusARLedgerSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARLedgerSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARLedgerSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARLedgerSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowChanged(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARLedgerSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowChanging(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARLedgerSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowDeleted(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARLedgerSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowDeleting(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARLedgerSummeryRow(ByVal row As CusARLedgerSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryRow
        Inherits DataRow
        
        Private tableCusARLedgerSummery As CusARLedgerSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARLedgerSummery = CType(Me.Table,CusARLedgerSummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARLedgerSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.chargeColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.creditColumn) = value
            End Set
        End Property
        
        Public Property adj As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.adjColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.adjColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Down As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.DownColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.DownColumn) = value
            End Set
        End Property
        
        Public Property OVERPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OVERPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OVERPAIDColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OtherColumn) = value
            End Set
        End Property
        
        Public Property Balance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.BalanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.BalanceColumn) = value
            End Set
        End Property
        
        Public Property FCalc As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.FCalcColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.FCalcColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.FlagShowColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusARLedgerSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARLedgerSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARLedgerSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableCusARLedgerSummery.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableCusARLedgerSummery.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.adjColumn)
        End Function
        
        Public Sub SetadjNull()
            Me(Me.tableCusARLedgerSummery.adjColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARLedgerSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARLedgerSummery.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableCusARLedgerSummery.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.DownColumn)
        End Function
        
        Public Sub SetDownNull()
            Me(Me.tableCusARLedgerSummery.DownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERPAIDNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OVERPAIDColumn)
        End Function
        
        Public Sub SetOVERPAIDNull()
            Me(Me.tableCusARLedgerSummery.OVERPAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tableCusARLedgerSummery.OtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.BalanceColumn)
        End Function
        
        Public Sub SetBalanceNull()
            Me(Me.tableCusARLedgerSummery.BalanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFCalcNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.FCalcColumn)
        End Function
        
        Public Sub SetFCalcNull()
            Me(Me.tableCusARLedgerSummery.FCalcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusARLedgerSummery.FlagShowColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARLedgerSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARLedgerSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARLedgerSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
