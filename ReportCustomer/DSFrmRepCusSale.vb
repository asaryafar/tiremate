'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepCusSale
    Inherits DataSet
    
    Private tableclas As clasDataTable
    
    Private tablesource As sourceDataTable
    
    Private tableterritory As territoryDataTable
    
    Private tabletype As typeDataTable
    
    Private tablecustomer As customerDataTable
    
    Private tableemployee As employeeDataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("clas")) Is Nothing) Then
                Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
            End If
            If (Not (ds.Tables("source")) Is Nothing) Then
                Me.Tables.Add(New sourceDataTable(ds.Tables("source")))
            End If
            If (Not (ds.Tables("territory")) Is Nothing) Then
                Me.Tables.Add(New territoryDataTable(ds.Tables("territory")))
            End If
            If (Not (ds.Tables("type")) Is Nothing) Then
                Me.Tables.Add(New typeDataTable(ds.Tables("type")))
            End If
            If (Not (ds.Tables("customer")) Is Nothing) Then
                Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
            End If
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property clas As clasDataTable
        Get
            Return Me.tableclas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property source As sourceDataTable
        Get
            Return Me.tablesource
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property territory As territoryDataTable
        Get
            Return Me.tableterritory
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property type As typeDataTable
        Get
            Return Me.tabletype
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customer As customerDataTable
        Get
            Return Me.tablecustomer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepCusSale = CType(MyBase.Clone,DSFrmRepCusSale)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("clas")) Is Nothing) Then
            Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
        End If
        If (Not (ds.Tables("source")) Is Nothing) Then
            Me.Tables.Add(New sourceDataTable(ds.Tables("source")))
        End If
        If (Not (ds.Tables("territory")) Is Nothing) Then
            Me.Tables.Add(New territoryDataTable(ds.Tables("territory")))
        End If
        If (Not (ds.Tables("type")) Is Nothing) Then
            Me.Tables.Add(New typeDataTable(ds.Tables("type")))
        End If
        If (Not (ds.Tables("customer")) Is Nothing) Then
            Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
        End If
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableclas = CType(Me.Tables("clas"),clasDataTable)
        If (Not (Me.tableclas) Is Nothing) Then
            Me.tableclas.InitVars
        End If
        Me.tablesource = CType(Me.Tables("source"),sourceDataTable)
        If (Not (Me.tablesource) Is Nothing) Then
            Me.tablesource.InitVars
        End If
        Me.tableterritory = CType(Me.Tables("territory"),territoryDataTable)
        If (Not (Me.tableterritory) Is Nothing) Then
            Me.tableterritory.InitVars
        End If
        Me.tabletype = CType(Me.Tables("type"),typeDataTable)
        If (Not (Me.tabletype) Is Nothing) Then
            Me.tabletype.InitVars
        End If
        Me.tablecustomer = CType(Me.Tables("customer"),customerDataTable)
        If (Not (Me.tablecustomer) Is Nothing) Then
            Me.tablecustomer.InitVars
        End If
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepCusSale"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepCusSale.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableclas = New clasDataTable
        Me.Tables.Add(Me.tableclas)
        Me.tablesource = New sourceDataTable
        Me.Tables.Add(Me.tablesource)
        Me.tableterritory = New territoryDataTable
        Me.Tables.Add(Me.tableterritory)
        Me.tabletype = New typeDataTable
        Me.Tables.Add(Me.tabletype)
        Me.tablecustomer = New customerDataTable
        Me.Tables.Add(Me.tablecustomer)
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
    End Sub
    
    Private Function ShouldSerializeclas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesource() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeterritory() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetype() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecustomer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub clasRowChangeEventHandler(ByVal sender As Object, ByVal e As clasRowChangeEvent)
    
    Public Delegate Sub sourceRowChangeEventHandler(ByVal sender As Object, ByVal e As sourceRowChangeEvent)
    
    Public Delegate Sub territoryRowChangeEventHandler(ByVal sender As Object, ByVal e As territoryRowChangeEvent)
    
    Public Delegate Sub typeRowChangeEventHandler(ByVal sender As Object, ByVal e As typeRowChangeEvent)
    
    Public Delegate Sub customerRowChangeEventHandler(ByVal sender As Object, ByVal e As customerRowChangeEvent)
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("clas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As clasRow
            Get
                Return CType(Me.Rows(index),clasRow)
            End Get
        End Property
        
        Public Event clasRowChanged As clasRowChangeEventHandler
        
        Public Event clasRowChanging As clasRowChangeEventHandler
        
        Public Event clasRowDeleted As clasRowChangeEventHandler
        
        Public Event clasRowDeleting As clasRowChangeEventHandler
        
        Public Overloads Sub AddclasRow(ByVal row As clasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddclasRow(ByVal cod As String, ByVal description As String) As clasRow
            Dim rowclasRow As clasRow = CType(Me.NewRow,clasRow)
            rowclasRow.ItemArray = New Object() {cod, description}
            Me.Rows.Add(rowclasRow)
            Return rowclasRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As clasRow
            Return CType(Me.Rows.Find(New Object() {cod}),clasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As clasDataTable = CType(MyBase.Clone,clasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New clasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewclasRow() As clasRow
            Return CType(Me.NewRow,clasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New clasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(clasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clasRowChangedEvent) Is Nothing) Then
                RaiseEvent clasRowChanged(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clasRowChangingEvent) Is Nothing) Then
                RaiseEvent clasRowChanging(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clasRowDeletedEvent) Is Nothing) Then
                RaiseEvent clasRowDeleted(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clasRowDeletingEvent) Is Nothing) Then
                RaiseEvent clasRowDeleting(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveclasRow(ByVal row As clasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRow
        Inherits DataRow
        
        Private tableclas As clasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableclas = CType(Me.Table,clasDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableclas.codColumn),String)
            End Get
            Set
                Me(Me.tableclas.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableclas.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableclas.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableclas.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As clasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As clasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As clasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("source")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As sourceRow
            Get
                Return CType(Me.Rows(index),sourceRow)
            End Get
        End Property
        
        Public Event sourceRowChanged As sourceRowChangeEventHandler
        
        Public Event sourceRowChanging As sourceRowChangeEventHandler
        
        Public Event sourceRowDeleted As sourceRowChangeEventHandler
        
        Public Event sourceRowDeleting As sourceRowChangeEventHandler
        
        Public Overloads Sub AddsourceRow(ByVal row As sourceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsourceRow(ByVal cod As String, ByVal description As String) As sourceRow
            Dim rowsourceRow As sourceRow = CType(Me.NewRow,sourceRow)
            rowsourceRow.ItemArray = New Object() {cod, description}
            Me.Rows.Add(rowsourceRow)
            Return rowsourceRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As sourceRow
            Return CType(Me.Rows.Find(New Object() {cod}),sourceRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As sourceDataTable = CType(MyBase.Clone,sourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New sourceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewsourceRow() As sourceRow
            Return CType(Me.NewRow,sourceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New sourceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sourceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sourceRowChangedEvent) Is Nothing) Then
                RaiseEvent sourceRowChanged(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sourceRowChangingEvent) Is Nothing) Then
                RaiseEvent sourceRowChanging(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sourceRowDeleted(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sourceRowDeleting(Me, New sourceRowChangeEvent(CType(e.Row,sourceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesourceRow(ByVal row As sourceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceRow
        Inherits DataRow
        
        Private tablesource As sourceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesource = CType(Me.Table,sourceDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablesource.codColumn),String)
            End Get
            Set
                Me(Me.tablesource.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tablesource.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesource.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablesource.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tablesource.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class sourceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As sourceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As sourceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As sourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class territoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("territory")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As territoryRow
            Get
                Return CType(Me.Rows(index),territoryRow)
            End Get
        End Property
        
        Public Event territoryRowChanged As territoryRowChangeEventHandler
        
        Public Event territoryRowChanging As territoryRowChangeEventHandler
        
        Public Event territoryRowDeleted As territoryRowChangeEventHandler
        
        Public Event territoryRowDeleting As territoryRowChangeEventHandler
        
        Public Overloads Sub AddterritoryRow(ByVal row As territoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddterritoryRow(ByVal cod As String, ByVal description As String) As territoryRow
            Dim rowterritoryRow As territoryRow = CType(Me.NewRow,territoryRow)
            rowterritoryRow.ItemArray = New Object() {cod, description}
            Me.Rows.Add(rowterritoryRow)
            Return rowterritoryRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As territoryRow
            Return CType(Me.Rows.Find(New Object() {cod}),territoryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As territoryDataTable = CType(MyBase.Clone,territoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New territoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewterritoryRow() As territoryRow
            Return CType(Me.NewRow,territoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New territoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(territoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.territoryRowChangedEvent) Is Nothing) Then
                RaiseEvent territoryRowChanged(Me, New territoryRowChangeEvent(CType(e.Row,territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.territoryRowChangingEvent) Is Nothing) Then
                RaiseEvent territoryRowChanging(Me, New territoryRowChangeEvent(CType(e.Row,territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.territoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent territoryRowDeleted(Me, New territoryRowChangeEvent(CType(e.Row,territoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.territoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent territoryRowDeleting(Me, New territoryRowChangeEvent(CType(e.Row,territoryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveterritoryRow(ByVal row As territoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class territoryRow
        Inherits DataRow
        
        Private tableterritory As territoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableterritory = CType(Me.Table,territoryDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableterritory.codColumn),String)
            End Get
            Set
                Me(Me.tableterritory.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableterritory.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableterritory.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableterritory.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableterritory.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class territoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As territoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As territoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As territoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Friend Sub New()
            MyBase.New("type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As typeRow
            Get
                Return CType(Me.Rows(index),typeRow)
            End Get
        End Property
        
        Public Event typeRowChanged As typeRowChangeEventHandler
        
        Public Event typeRowChanging As typeRowChangeEventHandler
        
        Public Event typeRowDeleted As typeRowChangeEventHandler
        
        Public Event typeRowDeleting As typeRowChangeEventHandler
        
        Public Overloads Sub AddtypeRow(ByVal row As typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtypeRow(ByVal cod As String, ByVal description As String) As typeRow
            Dim rowtypeRow As typeRow = CType(Me.NewRow,typeRow)
            rowtypeRow.ItemArray = New Object() {cod, description}
            Me.Rows.Add(rowtypeRow)
            Return rowtypeRow
        End Function
        
        Public Function FindBycod(ByVal cod As String) As typeRow
            Return CType(Me.Rows.Find(New Object() {cod}),typeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As typeDataTable = CType(MyBase.Clone,typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod}, true))
            Me.columncod.AllowDBNull = false
            Me.columncod.Unique = true
        End Sub
        
        Public Function NewtypeRow() As typeRow
            Return CType(Me.NewRow,typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.typeRowChangedEvent) Is Nothing) Then
                RaiseEvent typeRowChanged(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.typeRowChangingEvent) Is Nothing) Then
                RaiseEvent typeRowChanging(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent typeRowDeleted(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent typeRowDeleting(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetypeRow(ByVal row As typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRow
        Inherits DataRow
        
        Private tabletype As typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletype = CType(Me.Table,typeDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tabletype.codColumn),String)
            End Get
            Set
                Me(Me.tabletype.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tabletype.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.descriptionColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletype.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tabletype.descriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Friend Sub New()
            MyBase.New("customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customerRow
            Get
                Return CType(Me.Rows(index),customerRow)
            End Get
        End Property
        
        Public Event customerRowChanged As customerRowChangeEventHandler
        
        Public Event customerRowChanging As customerRowChangeEventHandler
        
        Public Event customerRowDeleted As customerRowChangeEventHandler
        
        Public Event customerRowDeleting As customerRowChangeEventHandler
        
        Public Overloads Sub AddcustomerRow(ByVal row As customerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomerRow(ByVal cod_customer As String, ByVal f_name As String, ByVal l_name As String, ByVal complete_name As String) As customerRow
            Dim rowcustomerRow As customerRow = CType(Me.NewRow,customerRow)
            rowcustomerRow.ItemArray = New Object() {cod_customer, f_name, l_name, complete_name}
            Me.Rows.Add(rowcustomerRow)
            Return rowcustomerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As customerDataTable = CType(MyBase.Clone,customerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New customerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columncomplete_name = Me.Columns("complete_name")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncod_customer.AllowDBNull = false
        End Sub
        
        Public Function NewcustomerRow() As customerRow
            Return CType(Me.NewRow,customerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New customerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customerRowChangedEvent) Is Nothing) Then
                RaiseEvent customerRowChanged(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customerRowChangingEvent) Is Nothing) Then
                RaiseEvent customerRowChanging(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customerRowDeletedEvent) Is Nothing) Then
                RaiseEvent customerRowDeleted(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customerRowDeletingEvent) Is Nothing) Then
                RaiseEvent customerRowDeleting(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomerRow(ByVal row As customerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRow
        Inherits DataRow
        
        Private tablecustomer As customerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomer = CType(Me.Table,customerDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecustomer.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecustomer.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.f_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.l_nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.complete_nameColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecustomer.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecustomer.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecustomer.complete_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As customerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow(ByVal employee_code As String, ByVal f_name As String, ByVal l_name As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, f_name, l_name}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnl_name = Me.Columns("l_name")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.f_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.l_nameColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableemployee.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tableemployee.l_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow(ByVal cod_customer As String) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {cod_customer}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncod_customer.AllowDBNull = false
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
