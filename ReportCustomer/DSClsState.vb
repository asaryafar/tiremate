'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSClsState
    Inherits DataSet
    
    Private tableTempTable As TempTableDataTable
    
    Private tableLOGO As LOGODataTable
    
    Private tableservice_center_head As service_center_headDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TempTable")) Is Nothing) Then
                Me.Tables.Add(New TempTableDataTable(ds.Tables("TempTable")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            If (Not (ds.Tables("service_center_head")) Is Nothing) Then
                Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TempTable As TempTableDataTable
        Get
            Return Me.tableTempTable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property service_center_head As service_center_headDataTable
        Get
            Return Me.tableservice_center_head
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSClsState = CType(MyBase.Clone,DSClsState)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TempTable")) Is Nothing) Then
            Me.Tables.Add(New TempTableDataTable(ds.Tables("TempTable")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        If (Not (ds.Tables("service_center_head")) Is Nothing) Then
            Me.Tables.Add(New service_center_headDataTable(ds.Tables("service_center_head")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTempTable = CType(Me.Tables("TempTable"),TempTableDataTable)
        If (Not (Me.tableTempTable) Is Nothing) Then
            Me.tableTempTable.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
        Me.tableservice_center_head = CType(Me.Tables("service_center_head"),service_center_headDataTable)
        If (Not (Me.tableservice_center_head) Is Nothing) Then
            Me.tableservice_center_head.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSClsState"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSClsState.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTempTable = New TempTableDataTable
        Me.Tables.Add(Me.tableTempTable)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
        Me.tableservice_center_head = New service_center_headDataTable
        Me.Tables.Add(Me.tableservice_center_head)
    End Sub
    
    Private Function ShouldSerializeTempTable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeservice_center_head() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TempTableRowChangeEventHandler(ByVal sender As Object, ByVal e As TempTableRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    Public Delegate Sub service_center_headRowChangeEventHandler(ByVal sender As Object, ByVal e As service_center_headRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerSigniture As DataColumn
        
        Friend Sub New()
            MyBase.New("TempTable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerSignitureColumn As DataColumn
            Get
                Return Me.columnCustomerSigniture
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TempTableRow
            Get
                Return CType(Me.Rows(index),TempTableRow)
            End Get
        End Property
        
        Public Event TempTableRowChanged As TempTableRowChangeEventHandler
        
        Public Event TempTableRowChanging As TempTableRowChangeEventHandler
        
        Public Event TempTableRowDeleted As TempTableRowChangeEventHandler
        
        Public Event TempTableRowDeleting As TempTableRowChangeEventHandler
        
        Public Overloads Sub AddTempTableRow(ByVal row As TempTableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTempTableRow(ByVal CustomerSigniture As String) As TempTableRow
            Dim rowTempTableRow As TempTableRow = CType(Me.NewRow,TempTableRow)
            rowTempTableRow.ItemArray = New Object() {CustomerSigniture}
            Me.Rows.Add(rowTempTableRow)
            Return rowTempTableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TempTableDataTable = CType(MyBase.Clone,TempTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TempTableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerSigniture = Me.Columns("CustomerSigniture")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerSigniture = New DataColumn("CustomerSigniture", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerSigniture)
        End Sub
        
        Public Function NewTempTableRow() As TempTableRow
            Return CType(Me.NewRow,TempTableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TempTableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TempTableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TempTableRowChangedEvent) Is Nothing) Then
                RaiseEvent TempTableRowChanged(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TempTableRowChangingEvent) Is Nothing) Then
                RaiseEvent TempTableRowChanging(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TempTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent TempTableRowDeleted(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TempTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent TempTableRowDeleting(Me, New TempTableRowChangeEvent(CType(e.Row,TempTableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTempTableRow(ByVal row As TempTableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableRow
        Inherits DataRow
        
        Private tableTempTable As TempTableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTempTable = CType(Me.Table,TempTableDataTable)
        End Sub
        
        Public Property CustomerSigniture As String
            Get
                Try 
                    Return CType(Me(Me.tableTempTable.CustomerSignitureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempTable.CustomerSignitureColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerSignitureNull() As Boolean
            Return Me.IsNull(Me.tableTempTable.CustomerSignitureColumn)
        End Function
        
        Public Sub SetCustomerSignitureNull()
            Me(Me.tableTempTable.CustomerSignitureColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TempTableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TempTableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TempTableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TempTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnNameCus As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnZipCus As DataColumn
        
        Private columnphone As DataColumn
        
        Private columndesc_make As DataColumn
        
        Private columndesc_model As DataColumn
        
        Private columnmake_year As DataColumn
        
        Private columndesc_kind_engine As DataColumn
        
        Private columndesc_color As DataColumn
        
        Private columnadd_user As DataColumn
        
        Private columnchg_user As DataColumn
        
        Private columnid_service_center_before As DataColumn
        
        Private columnpo_no As DataColumn
        
        Private columnAR As DataColumn
        
        Private columnAR_terms As DataColumn
        
        Private columnAR_due_date As DataColumn
        
        Private columncod_technician As DataColumn
        
        Private columnqty As DataColumn
        
        Private columncod_select As DataColumn
        
        Private columndesc_radif As DataColumn
        
        Private columnprice As DataColumn
        
        Private columntype_select As DataColumn
        
        Private columnfet As DataColumn
        
        Private columnhouse_comment As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columncurrent_mileage As DataColumn
        
        Private columnlicense_no_vehicle As DataColumn
        
        Private columnunit_no As DataColumn
        
        Private columnvin As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntax As DataColumn
        
        Friend Sub New()
            MyBase.New("service_center_head")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property NameCusColumn As DataColumn
            Get
                Return Me.columnNameCus
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property ZipCusColumn As DataColumn
            Get
                Return Me.columnZipCus
            End Get
        End Property
        
        Friend ReadOnly Property phoneColumn As DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        Friend ReadOnly Property desc_makeColumn As DataColumn
            Get
                Return Me.columndesc_make
            End Get
        End Property
        
        Friend ReadOnly Property desc_modelColumn As DataColumn
            Get
                Return Me.columndesc_model
            End Get
        End Property
        
        Friend ReadOnly Property make_yearColumn As DataColumn
            Get
                Return Me.columnmake_year
            End Get
        End Property
        
        Friend ReadOnly Property desc_kind_engineColumn As DataColumn
            Get
                Return Me.columndesc_kind_engine
            End Get
        End Property
        
        Friend ReadOnly Property desc_colorColumn As DataColumn
            Get
                Return Me.columndesc_color
            End Get
        End Property
        
        Friend ReadOnly Property add_userColumn As DataColumn
            Get
                Return Me.columnadd_user
            End Get
        End Property
        
        Friend ReadOnly Property chg_userColumn As DataColumn
            Get
                Return Me.columnchg_user
            End Get
        End Property
        
        Friend ReadOnly Property id_service_center_beforeColumn As DataColumn
            Get
                Return Me.columnid_service_center_before
            End Get
        End Property
        
        Friend ReadOnly Property po_noColumn As DataColumn
            Get
                Return Me.columnpo_no
            End Get
        End Property
        
        Friend ReadOnly Property ARColumn As DataColumn
            Get
                Return Me.columnAR
            End Get
        End Property
        
        Friend ReadOnly Property AR_termsColumn As DataColumn
            Get
                Return Me.columnAR_terms
            End Get
        End Property
        
        Friend ReadOnly Property AR_due_dateColumn As DataColumn
            Get
                Return Me.columnAR_due_date
            End Get
        End Property
        
        Friend ReadOnly Property cod_technicianColumn As DataColumn
            Get
                Return Me.columncod_technician
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property cod_selectColumn As DataColumn
            Get
                Return Me.columncod_select
            End Get
        End Property
        
        Friend ReadOnly Property desc_radifColumn As DataColumn
            Get
                Return Me.columndesc_radif
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property type_selectColumn As DataColumn
            Get
                Return Me.columntype_select
            End Get
        End Property
        
        Friend ReadOnly Property fetColumn As DataColumn
            Get
                Return Me.columnfet
            End Get
        End Property
        
        Friend ReadOnly Property house_commentColumn As DataColumn
            Get
                Return Me.columnhouse_comment
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property current_mileageColumn As DataColumn
            Get
                Return Me.columncurrent_mileage
            End Get
        End Property
        
        Friend ReadOnly Property license_no_vehicleColumn As DataColumn
            Get
                Return Me.columnlicense_no_vehicle
            End Get
        End Property
        
        Friend ReadOnly Property unit_noColumn As DataColumn
            Get
                Return Me.columnunit_no
            End Get
        End Property
        
        Friend ReadOnly Property vinColumn As DataColumn
            Get
                Return Me.columnvin
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As service_center_headRow
            Get
                Return CType(Me.Rows(index),service_center_headRow)
            End Get
        End Property
        
        Public Event service_center_headRowChanged As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowChanging As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleted As service_center_headRowChangeEventHandler
        
        Public Event service_center_headRowDeleting As service_center_headRowChangeEventHandler
        
        Public Overloads Sub Addservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addservice_center_headRow( _
                    ByVal cod_customer As String,  _
                    ByVal id_service_center As String,  _
                    ByVal date_refer As String,  _
                    ByVal NameCus As String,  _
                    ByVal address As String,  _
                    ByVal ZipCus As String,  _
                    ByVal phone As String,  _
                    ByVal desc_make As String,  _
                    ByVal desc_model As String,  _
                    ByVal make_year As String,  _
                    ByVal desc_kind_engine As String,  _
                    ByVal desc_color As String,  _
                    ByVal add_user As Short,  _
                    ByVal chg_user As Short,  _
                    ByVal id_service_center_before As String,  _
                    ByVal po_no As String,  _
                    ByVal AR As Decimal,  _
                    ByVal AR_terms As String,  _
                    ByVal AR_due_date As String,  _
                    ByVal cod_technician As String,  _
                    ByVal qty As Decimal,  _
                    ByVal cod_select As String,  _
                    ByVal desc_radif As String,  _
                    ByVal price As Decimal,  _
                    ByVal type_select As String,  _
                    ByVal fet As Decimal,  _
                    ByVal house_comment As String,  _
                    ByVal Total As Decimal,  _
                    ByVal OrderName As String,  _
                    ByVal current_mileage As Single,  _
                    ByVal license_no_vehicle As String,  _
                    ByVal unit_no As String,  _
                    ByVal vin As String,  _
                    ByVal discount As Single,  _
                    ByVal tax As Single) As service_center_headRow
            Dim rowservice_center_headRow As service_center_headRow = CType(Me.NewRow,service_center_headRow)
            rowservice_center_headRow.ItemArray = New Object() {cod_customer, id_service_center, date_refer, NameCus, address, ZipCus, phone, desc_make, desc_model, make_year, desc_kind_engine, desc_color, add_user, chg_user, id_service_center_before, po_no, AR, AR_terms, AR_due_date, cod_technician, qty, cod_select, desc_radif, price, type_select, fet, house_comment, Total, OrderName, current_mileage, license_no_vehicle, unit_no, vin, discount, tax}
            Me.Rows.Add(rowservice_center_headRow)
            Return rowservice_center_headRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As service_center_headDataTable = CType(MyBase.Clone,service_center_headDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New service_center_headDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnNameCus = Me.Columns("NameCus")
            Me.columnaddress = Me.Columns("address")
            Me.columnZipCus = Me.Columns("ZipCus")
            Me.columnphone = Me.Columns("phone")
            Me.columndesc_make = Me.Columns("desc_make")
            Me.columndesc_model = Me.Columns("desc_model")
            Me.columnmake_year = Me.Columns("make_year")
            Me.columndesc_kind_engine = Me.Columns("desc_kind_engine")
            Me.columndesc_color = Me.Columns("desc_color")
            Me.columnadd_user = Me.Columns("add_user")
            Me.columnchg_user = Me.Columns("chg_user")
            Me.columnid_service_center_before = Me.Columns("id_service_center_before")
            Me.columnpo_no = Me.Columns("po_no")
            Me.columnAR = Me.Columns("AR")
            Me.columnAR_terms = Me.Columns("AR_terms")
            Me.columnAR_due_date = Me.Columns("AR_due_date")
            Me.columncod_technician = Me.Columns("cod_technician")
            Me.columnqty = Me.Columns("qty")
            Me.columncod_select = Me.Columns("cod_select")
            Me.columndesc_radif = Me.Columns("desc_radif")
            Me.columnprice = Me.Columns("price")
            Me.columntype_select = Me.Columns("type_select")
            Me.columnfet = Me.Columns("fet")
            Me.columnhouse_comment = Me.Columns("house_comment")
            Me.columnTotal = Me.Columns("Total")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columncurrent_mileage = Me.Columns("current_mileage")
            Me.columnlicense_no_vehicle = Me.Columns("license_no_vehicle")
            Me.columnunit_no = Me.Columns("unit_no")
            Me.columnvin = Me.Columns("vin")
            Me.columndiscount = Me.Columns("discount")
            Me.columntax = Me.Columns("tax")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnNameCus = New DataColumn("NameCus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameCus)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnZipCus = New DataColumn("ZipCus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZipCus)
            Me.columnphone = New DataColumn("phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone)
            Me.columndesc_make = New DataColumn("desc_make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_make)
            Me.columndesc_model = New DataColumn("desc_model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_model)
            Me.columnmake_year = New DataColumn("make_year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmake_year)
            Me.columndesc_kind_engine = New DataColumn("desc_kind_engine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_kind_engine)
            Me.columndesc_color = New DataColumn("desc_color", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_color)
            Me.columnadd_user = New DataColumn("add_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd_user)
            Me.columnchg_user = New DataColumn("chg_user", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchg_user)
            Me.columnid_service_center_before = New DataColumn("id_service_center_before", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center_before)
            Me.columnpo_no = New DataColumn("po_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpo_no)
            Me.columnAR = New DataColumn("AR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR)
            Me.columnAR_terms = New DataColumn("AR_terms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_terms)
            Me.columnAR_due_date = New DataColumn("AR_due_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAR_due_date)
            Me.columncod_technician = New DataColumn("cod_technician", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_technician)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columncod_select = New DataColumn("cod_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_select)
            Me.columndesc_radif = New DataColumn("desc_radif", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_radif)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprice)
            Me.columntype_select = New DataColumn("type_select", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype_select)
            Me.columnfet = New DataColumn("fet", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfet)
            Me.columnhouse_comment = New DataColumn("house_comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhouse_comment)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncurrent_mileage = New DataColumn("current_mileage", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurrent_mileage)
            Me.columnlicense_no_vehicle = New DataColumn("license_no_vehicle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlicense_no_vehicle)
            Me.columnunit_no = New DataColumn("unit_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunit_no)
            Me.columnvin = New DataColumn("vin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvin)
            Me.columndiscount = New DataColumn("discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntax = New DataColumn("tax", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columncod_customer.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
            Me.columnNameCus.ReadOnly = true
            Me.columnZipCus.ReadOnly = true
            Me.columnphone.ReadOnly = true
            Me.columnAR.ReadOnly = true
            Me.columnAR_terms.ReadOnly = true
            Me.columnAR_due_date.ReadOnly = true
            Me.columnqty.AllowDBNull = false
            Me.columnprice.AllowDBNull = false
            Me.columnfet.AllowDBNull = false
            Me.columnOrderName.ReadOnly = true
        End Sub
        
        Public Function Newservice_center_headRow() As service_center_headRow
            Return CType(Me.NewRow,service_center_headRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New service_center_headRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(service_center_headRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.service_center_headRowChangedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanged(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.service_center_headRowChangingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowChanging(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.service_center_headRowDeletedEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleted(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.service_center_headRowDeletingEvent) Is Nothing) Then
                RaiseEvent service_center_headRowDeleting(Me, New service_center_headRowChangeEvent(CType(e.Row,service_center_headRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeservice_center_headRow(ByVal row As service_center_headRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRow
        Inherits DataRow
        
        Private tableservice_center_head As service_center_headDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableservice_center_head = CType(Me.Table,service_center_headDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableservice_center_head.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableservice_center_head.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property date_refer As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.date_referColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.date_referColumn) = value
            End Set
        End Property
        
        Public Property NameCus As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.NameCusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.NameCusColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.addressColumn) = value
            End Set
        End Property
        
        Public Property ZipCus As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ZipCusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ZipCusColumn) = value
            End Set
        End Property
        
        Public Property phone As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.phoneColumn) = value
            End Set
        End Property
        
        Public Property desc_make As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_makeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_makeColumn) = value
            End Set
        End Property
        
        Public Property desc_model As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_modelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_modelColumn) = value
            End Set
        End Property
        
        Public Property make_year As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.make_yearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.make_yearColumn) = value
            End Set
        End Property
        
        Public Property desc_kind_engine As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_kind_engineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_kind_engineColumn) = value
            End Set
        End Property
        
        Public Property desc_color As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_colorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_colorColumn) = value
            End Set
        End Property
        
        Public Property add_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.add_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.add_userColumn) = value
            End Set
        End Property
        
        Public Property chg_user As Short
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.chg_userColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.chg_userColumn) = value
            End Set
        End Property
        
        Public Property id_service_center_before As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.id_service_center_beforeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.id_service_center_beforeColumn) = value
            End Set
        End Property
        
        Public Property po_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.po_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.po_noColumn) = value
            End Set
        End Property
        
        Public Property AR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.ARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.ARColumn) = value
            End Set
        End Property
        
        Public Property AR_terms As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.AR_termsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.AR_termsColumn) = value
            End Set
        End Property
        
        Public Property AR_due_date As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.AR_due_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.AR_due_dateColumn) = value
            End Set
        End Property
        
        Public Property cod_technician As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_technicianColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_technicianColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Return CType(Me(Me.tableservice_center_head.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_head.qtyColumn) = value
            End Set
        End Property
        
        Public Property cod_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.cod_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.cod_selectColumn) = value
            End Set
        End Property
        
        Public Property desc_radif As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.desc_radifColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.desc_radifColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Return CType(Me(Me.tableservice_center_head.priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_head.priceColumn) = value
            End Set
        End Property
        
        Public Property type_select As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.type_selectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.type_selectColumn) = value
            End Set
        End Property
        
        Public Property fet As Decimal
            Get
                Return CType(Me(Me.tableservice_center_head.fetColumn),Decimal)
            End Get
            Set
                Me(Me.tableservice_center_head.fetColumn) = value
            End Set
        End Property
        
        Public Property house_comment As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.house_commentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.house_commentColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.TotalColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property current_mileage As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.current_mileageColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.current_mileageColumn) = value
            End Set
        End Property
        
        Public Property license_no_vehicle As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.license_no_vehicleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.license_no_vehicleColumn) = value
            End Set
        End Property
        
        Public Property unit_no As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.unit_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.unit_noColumn) = value
            End Set
        End Property
        
        Public Property vin As String
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.vinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.vinColumn) = value
            End Set
        End Property
        
        Public Property discount As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.discountColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.discountColumn) = value
            End Set
        End Property
        
        Public Property tax As Single
            Get
                Try 
                    Return CType(Me(Me.tableservice_center_head.taxColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableservice_center_head.taxColumn) = value
            End Set
        End Property
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableservice_center_head.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameCusNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.NameCusColumn)
        End Function
        
        Public Sub SetNameCusNull()
            Me(Me.tableservice_center_head.NameCusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableservice_center_head.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipCusNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ZipCusColumn)
        End Function
        
        Public Sub SetZipCusNull()
            Me(Me.tableservice_center_head.ZipCusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.phoneColumn)
        End Function
        
        Public Sub SetphoneNull()
            Me(Me.tableservice_center_head.phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_makeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_makeColumn)
        End Function
        
        Public Sub Setdesc_makeNull()
            Me(Me.tableservice_center_head.desc_makeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_modelNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_modelColumn)
        End Function
        
        Public Sub Setdesc_modelNull()
            Me(Me.tableservice_center_head.desc_modelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismake_yearNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.make_yearColumn)
        End Function
        
        Public Sub Setmake_yearNull()
            Me(Me.tableservice_center_head.make_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_kind_engineNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_kind_engineColumn)
        End Function
        
        Public Sub Setdesc_kind_engineNull()
            Me(Me.tableservice_center_head.desc_kind_engineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_colorNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_colorColumn)
        End Function
        
        Public Sub Setdesc_colorNull()
            Me(Me.tableservice_center_head.desc_colorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.add_userColumn)
        End Function
        
        Public Sub Setadd_userNull()
            Me(Me.tableservice_center_head.add_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischg_userNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.chg_userColumn)
        End Function
        
        Public Sub Setchg_userNull()
            Me(Me.tableservice_center_head.chg_userColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_center_beforeNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.id_service_center_beforeColumn)
        End Function
        
        Public Sub Setid_service_center_beforeNull()
            Me(Me.tableservice_center_head.id_service_center_beforeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispo_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.po_noColumn)
        End Function
        
        Public Sub Setpo_noNull()
            Me(Me.tableservice_center_head.po_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.ARColumn)
        End Function
        
        Public Sub SetARNull()
            Me(Me.tableservice_center_head.ARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_termsNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.AR_termsColumn)
        End Function
        
        Public Sub SetAR_termsNull()
            Me(Me.tableservice_center_head.AR_termsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAR_due_dateNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.AR_due_dateColumn)
        End Function
        
        Public Sub SetAR_due_dateNull()
            Me(Me.tableservice_center_head.AR_due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_technicianNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_technicianColumn)
        End Function
        
        Public Sub Setcod_technicianNull()
            Me(Me.tableservice_center_head.cod_technicianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.cod_selectColumn)
        End Function
        
        Public Sub Setcod_selectNull()
            Me(Me.tableservice_center_head.cod_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdesc_radifNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.desc_radifColumn)
        End Function
        
        Public Sub Setdesc_radifNull()
            Me(Me.tableservice_center_head.desc_radifColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype_selectNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.type_selectColumn)
        End Function
        
        Public Sub Settype_selectNull()
            Me(Me.tableservice_center_head.type_selectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishouse_commentNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.house_commentColumn)
        End Function
        
        Public Sub Sethouse_commentNull()
            Me(Me.tableservice_center_head.house_commentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableservice_center_head.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableservice_center_head.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscurrent_mileageNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.current_mileageColumn)
        End Function
        
        Public Sub Setcurrent_mileageNull()
            Me(Me.tableservice_center_head.current_mileageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islicense_no_vehicleNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.license_no_vehicleColumn)
        End Function
        
        Public Sub Setlicense_no_vehicleNull()
            Me(Me.tableservice_center_head.license_no_vehicleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isunit_noNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.unit_noColumn)
        End Function
        
        Public Sub Setunit_noNull()
            Me(Me.tableservice_center_head.unit_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvinNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.vinColumn)
        End Function
        
        Public Sub SetvinNull()
            Me(Me.tableservice_center_head.vinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tableservice_center_head.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tableservice_center_head.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tableservice_center_head.taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class service_center_headRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As service_center_headRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As service_center_headRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As service_center_headRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
