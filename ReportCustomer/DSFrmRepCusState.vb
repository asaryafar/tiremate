'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmRepCusState
    Inherits DataSet
    
    Private tablecustomer As customerDataTable
    
    Private tableclas As clasDataTable
    
    Private tabletype As typeDataTable
    
    Private tableLOGO As LOGODataTable
    
    Private tablereport As reportDataTable
    
    Private tablecustomerdue As customerdueDataTable
    
    Private tableSP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
    
    Private tableSP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
    
    Private tableSP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
    
    Private tableSP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
    
    Private tableSP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("customer")) Is Nothing) Then
                Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
            End If
            If (Not (ds.Tables("clas")) Is Nothing) Then
                Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
            End If
            If (Not (ds.Tables("type")) Is Nothing) Then
                Me.Tables.Add(New typeDataTable(ds.Tables("type")))
            End If
            If (Not (ds.Tables("LOGO")) Is Nothing) Then
                Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
            End If
            If (Not (ds.Tables("report")) Is Nothing) Then
                Me.Tables.Add(New reportDataTable(ds.Tables("report")))
            End If
            If (Not (ds.Tables("customerdue")) Is Nothing) Then
                Me.Tables.Add(New customerdueDataTable(ds.Tables("customerdue")))
            End If
            If (Not (ds.Tables("SP_CustomerAging1to30")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging1to30DataTable(ds.Tables("SP_CustomerAging1to30")))
            End If
            If (Not (ds.Tables("SP_CustomerAging31to60")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging31to60DataTable(ds.Tables("SP_CustomerAging31to60")))
            End If
            If (Not (ds.Tables("SP_CustomerAging61to90")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAging61to90DataTable(ds.Tables("SP_CustomerAging61to90")))
            End If
            If (Not (ds.Tables("SP_CustomerAgingNotDueYet")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAgingNotDueYetDataTable(ds.Tables("SP_CustomerAgingNotDueYet")))
            End If
            If (Not (ds.Tables("SP_CustomerAgingOver90")) Is Nothing) Then
                Me.Tables.Add(New SP_CustomerAgingOver90DataTable(ds.Tables("SP_CustomerAgingOver90")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customer As customerDataTable
        Get
            Return Me.tablecustomer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property clas As clasDataTable
        Get
            Return Me.tableclas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property type As typeDataTable
        Get
            Return Me.tabletype
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGO As LOGODataTable
        Get
            Return Me.tableLOGO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property report As reportDataTable
        Get
            Return Me.tablereport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customerdue As customerdueDataTable
        Get
            Return Me.tablecustomerdue
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
        Get
            Return Me.tableSP_CustomerAging1to30
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
        Get
            Return Me.tableSP_CustomerAging31to60
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
        Get
            Return Me.tableSP_CustomerAging61to90
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
        Get
            Return Me.tableSP_CustomerAgingNotDueYet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
        Get
            Return Me.tableSP_CustomerAgingOver90
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmRepCusState = CType(MyBase.Clone,DSFrmRepCusState)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("customer")) Is Nothing) Then
            Me.Tables.Add(New customerDataTable(ds.Tables("customer")))
        End If
        If (Not (ds.Tables("clas")) Is Nothing) Then
            Me.Tables.Add(New clasDataTable(ds.Tables("clas")))
        End If
        If (Not (ds.Tables("type")) Is Nothing) Then
            Me.Tables.Add(New typeDataTable(ds.Tables("type")))
        End If
        If (Not (ds.Tables("LOGO")) Is Nothing) Then
            Me.Tables.Add(New LOGODataTable(ds.Tables("LOGO")))
        End If
        If (Not (ds.Tables("report")) Is Nothing) Then
            Me.Tables.Add(New reportDataTable(ds.Tables("report")))
        End If
        If (Not (ds.Tables("customerdue")) Is Nothing) Then
            Me.Tables.Add(New customerdueDataTable(ds.Tables("customerdue")))
        End If
        If (Not (ds.Tables("SP_CustomerAging1to30")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging1to30DataTable(ds.Tables("SP_CustomerAging1to30")))
        End If
        If (Not (ds.Tables("SP_CustomerAging31to60")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging31to60DataTable(ds.Tables("SP_CustomerAging31to60")))
        End If
        If (Not (ds.Tables("SP_CustomerAging61to90")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAging61to90DataTable(ds.Tables("SP_CustomerAging61to90")))
        End If
        If (Not (ds.Tables("SP_CustomerAgingNotDueYet")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAgingNotDueYetDataTable(ds.Tables("SP_CustomerAgingNotDueYet")))
        End If
        If (Not (ds.Tables("SP_CustomerAgingOver90")) Is Nothing) Then
            Me.Tables.Add(New SP_CustomerAgingOver90DataTable(ds.Tables("SP_CustomerAgingOver90")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecustomer = CType(Me.Tables("customer"),customerDataTable)
        If (Not (Me.tablecustomer) Is Nothing) Then
            Me.tablecustomer.InitVars
        End If
        Me.tableclas = CType(Me.Tables("clas"),clasDataTable)
        If (Not (Me.tableclas) Is Nothing) Then
            Me.tableclas.InitVars
        End If
        Me.tabletype = CType(Me.Tables("type"),typeDataTable)
        If (Not (Me.tabletype) Is Nothing) Then
            Me.tabletype.InitVars
        End If
        Me.tableLOGO = CType(Me.Tables("LOGO"),LOGODataTable)
        If (Not (Me.tableLOGO) Is Nothing) Then
            Me.tableLOGO.InitVars
        End If
        Me.tablereport = CType(Me.Tables("report"),reportDataTable)
        If (Not (Me.tablereport) Is Nothing) Then
            Me.tablereport.InitVars
        End If
        Me.tablecustomerdue = CType(Me.Tables("customerdue"),customerdueDataTable)
        If (Not (Me.tablecustomerdue) Is Nothing) Then
            Me.tablecustomerdue.InitVars
        End If
        Me.tableSP_CustomerAging1to30 = CType(Me.Tables("SP_CustomerAging1to30"),SP_CustomerAging1to30DataTable)
        If (Not (Me.tableSP_CustomerAging1to30) Is Nothing) Then
            Me.tableSP_CustomerAging1to30.InitVars
        End If
        Me.tableSP_CustomerAging31to60 = CType(Me.Tables("SP_CustomerAging31to60"),SP_CustomerAging31to60DataTable)
        If (Not (Me.tableSP_CustomerAging31to60) Is Nothing) Then
            Me.tableSP_CustomerAging31to60.InitVars
        End If
        Me.tableSP_CustomerAging61to90 = CType(Me.Tables("SP_CustomerAging61to90"),SP_CustomerAging61to90DataTable)
        If (Not (Me.tableSP_CustomerAging61to90) Is Nothing) Then
            Me.tableSP_CustomerAging61to90.InitVars
        End If
        Me.tableSP_CustomerAgingNotDueYet = CType(Me.Tables("SP_CustomerAgingNotDueYet"),SP_CustomerAgingNotDueYetDataTable)
        If (Not (Me.tableSP_CustomerAgingNotDueYet) Is Nothing) Then
            Me.tableSP_CustomerAgingNotDueYet.InitVars
        End If
        Me.tableSP_CustomerAgingOver90 = CType(Me.Tables("SP_CustomerAgingOver90"),SP_CustomerAgingOver90DataTable)
        If (Not (Me.tableSP_CustomerAgingOver90) Is Nothing) Then
            Me.tableSP_CustomerAgingOver90.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmRepCusState"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmRepCusState.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecustomer = New customerDataTable
        Me.Tables.Add(Me.tablecustomer)
        Me.tableclas = New clasDataTable
        Me.Tables.Add(Me.tableclas)
        Me.tabletype = New typeDataTable
        Me.Tables.Add(Me.tabletype)
        Me.tableLOGO = New LOGODataTable
        Me.Tables.Add(Me.tableLOGO)
        Me.tablereport = New reportDataTable
        Me.Tables.Add(Me.tablereport)
        Me.tablecustomerdue = New customerdueDataTable
        Me.Tables.Add(Me.tablecustomerdue)
        Me.tableSP_CustomerAging1to30 = New SP_CustomerAging1to30DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging1to30)
        Me.tableSP_CustomerAging31to60 = New SP_CustomerAging31to60DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging31to60)
        Me.tableSP_CustomerAging61to90 = New SP_CustomerAging61to90DataTable
        Me.Tables.Add(Me.tableSP_CustomerAging61to90)
        Me.tableSP_CustomerAgingNotDueYet = New SP_CustomerAgingNotDueYetDataTable
        Me.Tables.Add(Me.tableSP_CustomerAgingNotDueYet)
        Me.tableSP_CustomerAgingOver90 = New SP_CustomerAgingOver90DataTable
        Me.Tables.Add(Me.tableSP_CustomerAgingOver90)
    End Sub
    
    Private Function ShouldSerializecustomer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeclas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetype() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLOGO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializereport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecustomerdue() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging1to30() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging31to60() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAging61to90() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAgingNotDueYet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_CustomerAgingOver90() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub customerRowChangeEventHandler(ByVal sender As Object, ByVal e As customerRowChangeEvent)
    
    Public Delegate Sub clasRowChangeEventHandler(ByVal sender As Object, ByVal e As clasRowChangeEvent)
    
    Public Delegate Sub typeRowChangeEventHandler(ByVal sender As Object, ByVal e As typeRowChangeEvent)
    
    Public Delegate Sub LOGORowChangeEventHandler(ByVal sender As Object, ByVal e As LOGORowChangeEvent)
    
    Public Delegate Sub reportRowChangeEventHandler(ByVal sender As Object, ByVal e As reportRowChangeEvent)
    
    Public Delegate Sub customerdueRowChangeEventHandler(ByVal sender As Object, ByVal e As customerdueRowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging1to30RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging1to30RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging31to60RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging31to60RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAging61to90RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAging61to90RowChangeEvent)
    
    Public Delegate Sub SP_CustomerAgingNotDueYetRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAgingNotDueYetRowChangeEvent)
    
    Public Delegate Sub SP_CustomerAgingOver90RowChangeEventHandler(ByVal sender As Object, ByVal e As SP_CustomerAgingOver90RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customerRow
            Get
                Return CType(Me.Rows(index),customerRow)
            End Get
        End Property
        
        Public Event customerRowChanged As customerRowChangeEventHandler
        
        Public Event customerRowChanging As customerRowChangeEventHandler
        
        Public Event customerRowDeleted As customerRowChangeEventHandler
        
        Public Event customerRowDeleting As customerRowChangeEventHandler
        
        Public Overloads Sub AddcustomerRow(ByVal row As customerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomerRow(ByVal cod As String, ByVal f_name As String, ByVal l_name As String, ByVal complete_name As String, ByVal flag As Boolean) As customerRow
            Dim rowcustomerRow As customerRow = CType(Me.NewRow,customerRow)
            rowcustomerRow.ItemArray = New Object() {cod, f_name, l_name, complete_name, flag}
            Me.Rows.Add(rowcustomerRow)
            Return rowcustomerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As customerDataTable = CType(MyBase.Clone,customerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New customerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod.AllowDBNull = false
        End Sub
        
        Public Function NewcustomerRow() As customerRow
            Return CType(Me.NewRow,customerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New customerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customerRowChangedEvent) Is Nothing) Then
                RaiseEvent customerRowChanged(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customerRowChangingEvent) Is Nothing) Then
                RaiseEvent customerRowChanging(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customerRowDeletedEvent) Is Nothing) Then
                RaiseEvent customerRowDeleted(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customerRowDeletingEvent) Is Nothing) Then
                RaiseEvent customerRowDeleting(Me, New customerRowChangeEvent(CType(e.Row,customerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomerRow(ByVal row As customerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRow
        Inherits DataRow
        
        Private tablecustomer As customerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomer = CType(Me.Table,customerDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tablecustomer.codColumn),String)
            End Get
            Set
                Me(Me.tablecustomer.codColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.f_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.l_nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomer.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer.flagColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tablecustomer.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tablecustomer.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecustomer.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablecustomer.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablecustomer.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As customerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("clas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As clasRow
            Get
                Return CType(Me.Rows(index),clasRow)
            End Get
        End Property
        
        Public Event clasRowChanged As clasRowChangeEventHandler
        
        Public Event clasRowChanging As clasRowChangeEventHandler
        
        Public Event clasRowDeleted As clasRowChangeEventHandler
        
        Public Event clasRowDeleting As clasRowChangeEventHandler
        
        Public Overloads Sub AddclasRow(ByVal row As clasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddclasRow(ByVal cod As String, ByVal description As String, ByVal flag As Boolean) As clasRow
            Dim rowclasRow As clasRow = CType(Me.NewRow,clasRow)
            rowclasRow.ItemArray = New Object() {cod, description, flag}
            Me.Rows.Add(rowclasRow)
            Return rowclasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As clasDataTable = CType(MyBase.Clone,clasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New clasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod.AllowDBNull = false
        End Sub
        
        Public Function NewclasRow() As clasRow
            Return CType(Me.NewRow,clasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New clasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(clasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clasRowChangedEvent) Is Nothing) Then
                RaiseEvent clasRowChanged(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clasRowChangingEvent) Is Nothing) Then
                RaiseEvent clasRowChanging(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clasRowDeletedEvent) Is Nothing) Then
                RaiseEvent clasRowDeleted(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clasRowDeletingEvent) Is Nothing) Then
                RaiseEvent clasRowDeleting(Me, New clasRowChangeEvent(CType(e.Row,clasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveclasRow(ByVal row As clasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRow
        Inherits DataRow
        
        Private tableclas As clasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableclas = CType(Me.Table,clasDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tableclas.codColumn),String)
            End Get
            Set
                Me(Me.tableclas.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableclas.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.descriptionColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclas.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclas.flagColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableclas.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableclas.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableclas.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableclas.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As clasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As clasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As clasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnflag As DataColumn
        
        Friend Sub New()
            MyBase.New("type")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codColumn As DataColumn
            Get
                Return Me.columncod
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As typeRow
            Get
                Return CType(Me.Rows(index),typeRow)
            End Get
        End Property
        
        Public Event typeRowChanged As typeRowChangeEventHandler
        
        Public Event typeRowChanging As typeRowChangeEventHandler
        
        Public Event typeRowDeleted As typeRowChangeEventHandler
        
        Public Event typeRowDeleting As typeRowChangeEventHandler
        
        Public Overloads Sub AddtypeRow(ByVal row As typeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtypeRow(ByVal cod As String, ByVal description As String, ByVal flag As Boolean) As typeRow
            Dim rowtypeRow As typeRow = CType(Me.NewRow,typeRow)
            rowtypeRow.ItemArray = New Object() {cod, description, flag}
            Me.Rows.Add(rowtypeRow)
            Return rowtypeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As typeDataTable = CType(MyBase.Clone,typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New typeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod = Me.Columns("cod")
            Me.columndescription = Me.Columns("description")
            Me.columnflag = Me.Columns("flag")
        End Sub
        
        Private Sub InitClass()
            Me.columncod = New DataColumn("cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columncod.AllowDBNull = false
        End Sub
        
        Public Function NewtypeRow() As typeRow
            Return CType(Me.NewRow,typeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New typeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(typeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.typeRowChangedEvent) Is Nothing) Then
                RaiseEvent typeRowChanged(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.typeRowChangingEvent) Is Nothing) Then
                RaiseEvent typeRowChanging(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent typeRowDeleted(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent typeRowDeleting(Me, New typeRowChangeEvent(CType(e.Row,typeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetypeRow(ByVal row As typeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRow
        Inherits DataRow
        
        Private tabletype As typeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletype = CType(Me.Table,typeDataTable)
        End Sub
        
        Public Property cod As String
            Get
                Return CType(Me(Me.tabletype.codColumn),String)
            End Get
            Set
                Me(Me.tabletype.codColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tabletype.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.descriptionColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletype.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletype.flagColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletype.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tabletype.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tabletype.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tabletype.flagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class typeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As typeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As typeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCologo As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("LOGO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CologoColumn As DataColumn
            Get
                Return Me.columnCologo
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGORow
            Get
                Return CType(Me.Rows(index),LOGORow)
            End Get
        End Property
        
        Public Event LOGORowChanged As LOGORowChangeEventHandler
        
        Public Event LOGORowChanging As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleted As LOGORowChangeEventHandler
        
        Public Event LOGORowDeleting As LOGORowChangeEventHandler
        
        Public Overloads Sub AddLOGORow(ByVal row As LOGORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLOGORow(ByVal Cologo() As Byte, ByVal ID As String) As LOGORow
            Dim rowLOGORow As LOGORow = CType(Me.NewRow,LOGORow)
            rowLOGORow.ItemArray = New Object() {Cologo, ID}
            Me.Rows.Add(rowLOGORow)
            Return rowLOGORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LOGODataTable = CType(MyBase.Clone,LOGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LOGODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCologo = Me.Columns("Cologo")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCologo = New DataColumn("Cologo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCologo)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
        End Sub
        
        Public Function NewLOGORow() As LOGORow
            Return CType(Me.NewRow,LOGORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LOGORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOGORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGORowChangedEvent) Is Nothing) Then
                RaiseEvent LOGORowChanged(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGORowChangingEvent) Is Nothing) Then
                RaiseEvent LOGORowChanging(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGORowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleted(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGORowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGORowDeleting(Me, New LOGORowChangeEvent(CType(e.Row,LOGORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLOGORow(ByVal row As LOGORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORow
        Inherits DataRow
        
        Private tableLOGO As LOGODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGO = CType(Me.Table,LOGODataTable)
        End Sub
        
        Public Property Cologo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.CologoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.CologoColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGO.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGO.IDColumn) = value
            End Set
        End Property
        
        Public Function IsCologoNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.CologoColumn)
        End Function
        
        Public Sub SetCologoNull()
            Me(Me.tableLOGO.CologoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableLOGO.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableLOGO.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LOGORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LOGORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LOGORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LOGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnname As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnRefNo As DataColumn
        
        Private column_date As DataColumn
        
        Private columnDueDate As DataColumn
        
        Private columnDescript As DataColumn
        
        Private columncharge As DataColumn
        
        Private columnpayment As DataColumn
        
        Private columnKindPay As DataColumn
        
        Private columnc1 As DataColumn
        
        Private columnc2 As DataColumn
        
        Private columnc3 As DataColumn
        
        Private columnc4 As DataColumn
        
        Private columnc5 As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columncod_class As DataColumn
        
        Private columncod_type As DataColumn
        
        Private columnflagcus As DataColumn
        
        Private columnflagclass As DataColumn
        
        Private columnflagtype As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnDays As DataColumn
        
        Friend Sub New()
            MyBase.New("report")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property RefNoColumn As DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property DueDateColumn As DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        Friend ReadOnly Property DescriptColumn As DataColumn
            Get
                Return Me.columnDescript
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property paymentColumn As DataColumn
            Get
                Return Me.columnpayment
            End Get
        End Property
        
        Friend ReadOnly Property KindPayColumn As DataColumn
            Get
                Return Me.columnKindPay
            End Get
        End Property
        
        Friend ReadOnly Property c1Column As DataColumn
            Get
                Return Me.columnc1
            End Get
        End Property
        
        Friend ReadOnly Property c2Column As DataColumn
            Get
                Return Me.columnc2
            End Get
        End Property
        
        Friend ReadOnly Property c3Column As DataColumn
            Get
                Return Me.columnc3
            End Get
        End Property
        
        Friend ReadOnly Property c4Column As DataColumn
            Get
                Return Me.columnc4
            End Get
        End Property
        
        Friend ReadOnly Property c5Column As DataColumn
            Get
                Return Me.columnc5
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property cod_classColumn As DataColumn
            Get
                Return Me.columncod_class
            End Get
        End Property
        
        Friend ReadOnly Property cod_typeColumn As DataColumn
            Get
                Return Me.columncod_type
            End Get
        End Property
        
        Friend ReadOnly Property flagcusColumn As DataColumn
            Get
                Return Me.columnflagcus
            End Get
        End Property
        
        Friend ReadOnly Property flagclassColumn As DataColumn
            Get
                Return Me.columnflagclass
            End Get
        End Property
        
        Friend ReadOnly Property flagtypeColumn As DataColumn
            Get
                Return Me.columnflagtype
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property DaysColumn As DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As reportRow
            Get
                Return CType(Me.Rows(index),reportRow)
            End Get
        End Property
        
        Public Event reportRowChanged As reportRowChangeEventHandler
        
        Public Event reportRowChanging As reportRowChangeEventHandler
        
        Public Event reportRowDeleted As reportRowChangeEventHandler
        
        Public Event reportRowDeleting As reportRowChangeEventHandler
        
        Public Overloads Sub AddreportRow(ByVal row As reportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddreportRow( _
                    ByVal cod_customer As String,  _
                    ByVal name As String,  _
                    ByVal address As String,  _
                    ByVal phone_1 As String,  _
                    ByVal RefNo As String,  _
                    ByVal _date As String,  _
                    ByVal DueDate As String,  _
                    ByVal Descript As String,  _
                    ByVal charge As Decimal,  _
                    ByVal payment As Decimal,  _
                    ByVal KindPay As String,  _
                    ByVal c1 As Decimal,  _
                    ByVal c2 As Decimal,  _
                    ByVal c3 As Decimal,  _
                    ByVal c4 As Decimal,  _
                    ByVal c5 As Decimal,  _
                    ByVal complete_name As String,  _
                    ByVal cod_class As String,  _
                    ByVal cod_type As String,  _
                    ByVal flagcus As Boolean,  _
                    ByVal flagclass As Boolean,  _
                    ByVal flagtype As Boolean,  _
                    ByVal OrderName As String,  _
                    ByVal OrderDate As String,  _
                    ByVal Days As Integer) As reportRow
            Dim rowreportRow As reportRow = CType(Me.NewRow,reportRow)
            rowreportRow.ItemArray = New Object() {cod_customer, name, address, phone_1, RefNo, _date, DueDate, Descript, charge, payment, KindPay, c1, c2, c3, c4, c5, complete_name, cod_class, cod_type, flagcus, flagclass, flagtype, OrderName, OrderDate, Days}
            Me.Rows.Add(rowreportRow)
            Return rowreportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As reportDataTable = CType(MyBase.Clone,reportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New reportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnname = Me.Columns("name")
            Me.columnaddress = Me.Columns("address")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnRefNo = Me.Columns("RefNo")
            Me.column_date = Me.Columns("date")
            Me.columnDueDate = Me.Columns("DueDate")
            Me.columnDescript = Me.Columns("Descript")
            Me.columncharge = Me.Columns("charge")
            Me.columnpayment = Me.Columns("payment")
            Me.columnKindPay = Me.Columns("KindPay")
            Me.columnc1 = Me.Columns("c1")
            Me.columnc2 = Me.Columns("c2")
            Me.columnc3 = Me.Columns("c3")
            Me.columnc4 = Me.Columns("c4")
            Me.columnc5 = Me.Columns("c5")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columncod_class = Me.Columns("cod_class")
            Me.columncod_type = Me.Columns("cod_type")
            Me.columnflagcus = Me.Columns("flagcus")
            Me.columnflagclass = Me.Columns("flagclass")
            Me.columnflagtype = Me.Columns("flagtype")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnDays = Me.Columns("Days")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnRefNo = New DataColumn("RefNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefNo)
            Me.column_date = New DataColumn("date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnDueDate = New DataColumn("DueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDueDate)
            Me.columnDescript = New DataColumn("Descript", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescript)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columnpayment = New DataColumn("payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment)
            Me.columnKindPay = New DataColumn("KindPay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKindPay)
            Me.columnc1 = New DataColumn("c1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc1)
            Me.columnc2 = New DataColumn("c2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc2)
            Me.columnc3 = New DataColumn("c3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc3)
            Me.columnc4 = New DataColumn("c4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc4)
            Me.columnc5 = New DataColumn("c5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc5)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncod_class = New DataColumn("cod_class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_class)
            Me.columncod_type = New DataColumn("cod_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_type)
            Me.columnflagcus = New DataColumn("flagcus", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagcus)
            Me.columnflagclass = New DataColumn("flagclass", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagclass)
            Me.columnflagtype = New DataColumn("flagtype", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflagtype)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnDays = New DataColumn("Days", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDays)
            Me.columncod_customer.AllowDBNull = false
            Me.columnRefNo.AllowDBNull = false
            Me.columncharge.DefaultValue = 0
            Me.columnpayment.DefaultValue = 0
            Me.columnOrderName.DefaultValue = " "
        End Sub
        
        Public Function NewreportRow() As reportRow
            Return CType(Me.NewRow,reportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New reportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(reportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.reportRowChangedEvent) Is Nothing) Then
                RaiseEvent reportRowChanged(Me, New reportRowChangeEvent(CType(e.Row,reportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.reportRowChangingEvent) Is Nothing) Then
                RaiseEvent reportRowChanging(Me, New reportRowChangeEvent(CType(e.Row,reportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.reportRowDeletedEvent) Is Nothing) Then
                RaiseEvent reportRowDeleted(Me, New reportRowChangeEvent(CType(e.Row,reportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.reportRowDeletingEvent) Is Nothing) Then
                RaiseEvent reportRowDeleting(Me, New reportRowChangeEvent(CType(e.Row,reportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovereportRow(ByVal row As reportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportRow
        Inherits DataRow
        
        Private tablereport As reportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablereport = CType(Me.Table,reportDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablereport.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablereport.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.addressColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.phone_1Column) = value
            End Set
        End Property
        
        Public Property RefNo As String
            Get
                Return CType(Me(Me.tablereport.RefNoColumn),String)
            End Get
            Set
                Me(Me.tablereport.RefNoColumn) = value
            End Set
        End Property
        
        Public Property _date As String
            Get
                Try 
                    Return CType(Me(Me.tablereport._dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport._dateColumn) = value
            End Set
        End Property
        
        Public Property DueDate As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.DueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.DueDateColumn) = value
            End Set
        End Property
        
        Public Property Descript As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.DescriptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.DescriptColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.chargeColumn) = value
            End Set
        End Property
        
        Public Property payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.paymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.paymentColumn) = value
            End Set
        End Property
        
        Public Property KindPay As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.KindPayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.KindPayColumn) = value
            End Set
        End Property
        
        Public Property c1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.c1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.c1Column) = value
            End Set
        End Property
        
        Public Property c2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.c2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.c2Column) = value
            End Set
        End Property
        
        Public Property c3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.c3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.c3Column) = value
            End Set
        End Property
        
        Public Property c4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.c4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.c4Column) = value
            End Set
        End Property
        
        Public Property c5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablereport.c5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.c5Column) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                If Me.Iscomplete_nameNull Then
                    Return "  "
                Else
                    Return CType(Me(Me.tablereport.complete_nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tablereport.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property cod_class As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.cod_classColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.cod_classColumn) = value
            End Set
        End Property
        
        Public Property cod_type As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.cod_typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.cod_typeColumn) = value
            End Set
        End Property
        
        Public Property flagcus As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablereport.flagcusColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.flagcusColumn) = value
            End Set
        End Property
        
        Public Property flagclass As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablereport.flagclassColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.flagclassColumn) = value
            End Set
        End Property
        
        Public Property flagtype As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablereport.flagtypeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.flagtypeColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                If Me.IsOrderNameNull Then
                    Return " "
                Else
                    Return CType(Me(Me.tablereport.OrderNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tablereport.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tablereport.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property Days As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereport.DaysColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereport.DaysColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablereport.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablereport.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablereport.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablereport.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tablereport.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tablereport.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tablereport._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tablereport._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tablereport.DueDateColumn)
        End Function
        
        Public Sub SetDueDateNull()
            Me(Me.tablereport.DueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptNull() As Boolean
            Return Me.IsNull(Me.tablereport.DescriptColumn)
        End Function
        
        Public Sub SetDescriptNull()
            Me(Me.tablereport.DescriptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tablereport.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tablereport.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspaymentNull() As Boolean
            Return Me.IsNull(Me.tablereport.paymentColumn)
        End Function
        
        Public Sub SetpaymentNull()
            Me(Me.tablereport.paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKindPayNull() As Boolean
            Return Me.IsNull(Me.tablereport.KindPayColumn)
        End Function
        
        Public Sub SetKindPayNull()
            Me(Me.tablereport.KindPayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isc1Null() As Boolean
            Return Me.IsNull(Me.tablereport.c1Column)
        End Function
        
        Public Sub Setc1Null()
            Me(Me.tablereport.c1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc2Null() As Boolean
            Return Me.IsNull(Me.tablereport.c2Column)
        End Function
        
        Public Sub Setc2Null()
            Me(Me.tablereport.c2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc3Null() As Boolean
            Return Me.IsNull(Me.tablereport.c3Column)
        End Function
        
        Public Sub Setc3Null()
            Me(Me.tablereport.c3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc4Null() As Boolean
            Return Me.IsNull(Me.tablereport.c4Column)
        End Function
        
        Public Sub Setc4Null()
            Me(Me.tablereport.c4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc5Null() As Boolean
            Return Me.IsNull(Me.tablereport.c5Column)
        End Function
        
        Public Sub Setc5Null()
            Me(Me.tablereport.c5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablereport.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablereport.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_classNull() As Boolean
            Return Me.IsNull(Me.tablereport.cod_classColumn)
        End Function
        
        Public Sub Setcod_classNull()
            Me(Me.tablereport.cod_classColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_typeNull() As Boolean
            Return Me.IsNull(Me.tablereport.cod_typeColumn)
        End Function
        
        Public Sub Setcod_typeNull()
            Me(Me.tablereport.cod_typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagcusNull() As Boolean
            Return Me.IsNull(Me.tablereport.flagcusColumn)
        End Function
        
        Public Sub SetflagcusNull()
            Me(Me.tablereport.flagcusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagclassNull() As Boolean
            Return Me.IsNull(Me.tablereport.flagclassColumn)
        End Function
        
        Public Sub SetflagclassNull()
            Me(Me.tablereport.flagclassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagtypeNull() As Boolean
            Return Me.IsNull(Me.tablereport.flagtypeColumn)
        End Function
        
        Public Sub SetflagtypeNull()
            Me(Me.tablereport.flagtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tablereport.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tablereport.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tablereport.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tablereport.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDaysNull() As Boolean
            Return Me.IsNull(Me.tablereport.DaysColumn)
        End Function
        
        Public Sub SetDaysNull()
            Me(Me.tablereport.DaysColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As reportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As reportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As reportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnc1 As DataColumn
        
        Private columnc2 As DataColumn
        
        Private columnc3 As DataColumn
        
        Private columnc4 As DataColumn
        
        Private columnc5 As DataColumn
        
        Friend Sub New()
            MyBase.New("customerdue")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property c1Column As DataColumn
            Get
                Return Me.columnc1
            End Get
        End Property
        
        Friend ReadOnly Property c2Column As DataColumn
            Get
                Return Me.columnc2
            End Get
        End Property
        
        Friend ReadOnly Property c3Column As DataColumn
            Get
                Return Me.columnc3
            End Get
        End Property
        
        Friend ReadOnly Property c4Column As DataColumn
            Get
                Return Me.columnc4
            End Get
        End Property
        
        Friend ReadOnly Property c5Column As DataColumn
            Get
                Return Me.columnc5
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customerdueRow
            Get
                Return CType(Me.Rows(index),customerdueRow)
            End Get
        End Property
        
        Public Event customerdueRowChanged As customerdueRowChangeEventHandler
        
        Public Event customerdueRowChanging As customerdueRowChangeEventHandler
        
        Public Event customerdueRowDeleted As customerdueRowChangeEventHandler
        
        Public Event customerdueRowDeleting As customerdueRowChangeEventHandler
        
        Public Overloads Sub AddcustomerdueRow(ByVal row As customerdueRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomerdueRow(ByVal cod_customer As String, ByVal c1 As String, ByVal c2 As String, ByVal c3 As String, ByVal c4 As String, ByVal c5 As String) As customerdueRow
            Dim rowcustomerdueRow As customerdueRow = CType(Me.NewRow,customerdueRow)
            rowcustomerdueRow.ItemArray = New Object() {cod_customer, c1, c2, c3, c4, c5}
            Me.Rows.Add(rowcustomerdueRow)
            Return rowcustomerdueRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As customerdueRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),customerdueRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As customerdueDataTable = CType(MyBase.Clone,customerdueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New customerdueDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnc1 = Me.Columns("c1")
            Me.columnc2 = Me.Columns("c2")
            Me.columnc3 = Me.Columns("c3")
            Me.columnc4 = Me.Columns("c4")
            Me.columnc5 = Me.Columns("c5")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnc1 = New DataColumn("c1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc1)
            Me.columnc2 = New DataColumn("c2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc2)
            Me.columnc3 = New DataColumn("c3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc3)
            Me.columnc4 = New DataColumn("c4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc4)
            Me.columnc5 = New DataColumn("c5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc5)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey1", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function NewcustomerdueRow() As customerdueRow
            Return CType(Me.NewRow,customerdueRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New customerdueRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customerdueRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customerdueRowChangedEvent) Is Nothing) Then
                RaiseEvent customerdueRowChanged(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customerdueRowChangingEvent) Is Nothing) Then
                RaiseEvent customerdueRowChanging(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customerdueRowDeletedEvent) Is Nothing) Then
                RaiseEvent customerdueRowDeleted(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customerdueRowDeletingEvent) Is Nothing) Then
                RaiseEvent customerdueRowDeleting(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomerdueRow(ByVal row As customerdueRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueRow
        Inherits DataRow
        
        Private tablecustomerdue As customerdueDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomerdue = CType(Me.Table,customerdueDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecustomerdue.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecustomerdue.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property c1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c1Column) = value
            End Set
        End Property
        
        Public Property c2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c2Column) = value
            End Set
        End Property
        
        Public Property c3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c3Column) = value
            End Set
        End Property
        
        Public Property c4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c4Column) = value
            End Set
        End Property
        
        Public Property c5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c5Column) = value
            End Set
        End Property
        
        Public Function Isc1Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c1Column)
        End Function
        
        Public Sub Setc1Null()
            Me(Me.tablecustomerdue.c1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc2Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c2Column)
        End Function
        
        Public Sub Setc2Null()
            Me(Me.tablecustomerdue.c2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc3Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c3Column)
        End Function
        
        Public Sub Setc3Null()
            Me(Me.tablecustomerdue.c3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc4Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c4Column)
        End Function
        
        Public Sub Setc4Null()
            Me(Me.tablecustomerdue.c4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc5Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c5Column)
        End Function
        
        Public Sub Setc5Null()
            Me(Me.tablecustomerdue.c5Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customerdueRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As customerdueRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customerdueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging1to30")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging1to30Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging1to30Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging1to30RowChanged As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowChanging As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowDeleted As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Event SP_CustomerAging1to30RowDeleting As SP_CustomerAging1to30RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging1to30Row(ByVal row As SP_CustomerAging1to30Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging1to30Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging1to30Row
            Dim rowSP_CustomerAging1to30Row As SP_CustomerAging1to30Row = CType(Me.NewRow,SP_CustomerAging1to30Row)
            rowSP_CustomerAging1to30Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging1to30Row)
            Return rowSP_CustomerAging1to30Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging1to30Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging1to30Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging1to30DataTable = CType(MyBase.Clone,SP_CustomerAging1to30DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging1to30DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey2", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging1to30Row() As SP_CustomerAging1to30Row
            Return CType(Me.NewRow,SP_CustomerAging1to30Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging1to30Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging1to30Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging1to30RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowChanged(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging1to30RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowChanging(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging1to30RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowDeleted(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging1to30RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging1to30RowDeleting(Me, New SP_CustomerAging1to30RowChangeEvent(CType(e.Row,SP_CustomerAging1to30Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging1to30Row(ByVal row As SP_CustomerAging1to30Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30Row
        Inherits DataRow
        
        Private tableSP_CustomerAging1to30 As SP_CustomerAging1to30DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging1to30 = CType(Me.Table,SP_CustomerAging1to30DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging1to30.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging1to30.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging1to30.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging1to30.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging1to30RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging1to30Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging1to30Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging1to30Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging31to60")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging31to60Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging31to60Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging31to60RowChanged As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowChanging As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowDeleted As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Event SP_CustomerAging31to60RowDeleting As SP_CustomerAging31to60RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging31to60Row(ByVal row As SP_CustomerAging31to60Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging31to60Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging31to60Row
            Dim rowSP_CustomerAging31to60Row As SP_CustomerAging31to60Row = CType(Me.NewRow,SP_CustomerAging31to60Row)
            rowSP_CustomerAging31to60Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging31to60Row)
            Return rowSP_CustomerAging31to60Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging31to60Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging31to60Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging31to60DataTable = CType(MyBase.Clone,SP_CustomerAging31to60DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging31to60DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey5", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging31to60Row() As SP_CustomerAging31to60Row
            Return CType(Me.NewRow,SP_CustomerAging31to60Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging31to60Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging31to60Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging31to60RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowChanged(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging31to60RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowChanging(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging31to60RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowDeleted(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging31to60RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging31to60RowDeleting(Me, New SP_CustomerAging31to60RowChangeEvent(CType(e.Row,SP_CustomerAging31to60Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging31to60Row(ByVal row As SP_CustomerAging31to60Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60Row
        Inherits DataRow
        
        Private tableSP_CustomerAging31to60 As SP_CustomerAging31to60DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging31to60 = CType(Me.Table,SP_CustomerAging31to60DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging31to60.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging31to60.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging31to60.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging31to60.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging31to60RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging31to60Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging31to60Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging31to60Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAging61to90")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAging61to90Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAging61to90Row)
            End Get
        End Property
        
        Public Event SP_CustomerAging61to90RowChanged As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowChanging As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowDeleted As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Event SP_CustomerAging61to90RowDeleting As SP_CustomerAging61to90RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAging61to90Row(ByVal row As SP_CustomerAging61to90Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAging61to90Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAging61to90Row
            Dim rowSP_CustomerAging61to90Row As SP_CustomerAging61to90Row = CType(Me.NewRow,SP_CustomerAging61to90Row)
            rowSP_CustomerAging61to90Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAging61to90Row)
            Return rowSP_CustomerAging61to90Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAging61to90Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAging61to90Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAging61to90DataTable = CType(MyBase.Clone,SP_CustomerAging61to90DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAging61to90DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey6", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAging61to90Row() As SP_CustomerAging61to90Row
            Return CType(Me.NewRow,SP_CustomerAging61to90Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAging61to90Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAging61to90Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAging61to90RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowChanged(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAging61to90RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowChanging(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAging61to90RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowDeleted(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAging61to90RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAging61to90RowDeleting(Me, New SP_CustomerAging61to90RowChangeEvent(CType(e.Row,SP_CustomerAging61to90Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAging61to90Row(ByVal row As SP_CustomerAging61to90Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90Row
        Inherits DataRow
        
        Private tableSP_CustomerAging61to90 As SP_CustomerAging61to90DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAging61to90 = CType(Me.Table,SP_CustomerAging61to90DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAging61to90.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAging61to90.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAging61to90.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAging61to90.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAging61to90RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAging61to90Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAging61to90Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAging61to90Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAgingNotDueYet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAgingNotDueYetRow
            Get
                Return CType(Me.Rows(index),SP_CustomerAgingNotDueYetRow)
            End Get
        End Property
        
        Public Event SP_CustomerAgingNotDueYetRowChanged As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowChanging As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowDeleted As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Event SP_CustomerAgingNotDueYetRowDeleting As SP_CustomerAgingNotDueYetRowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAgingNotDueYetRow(ByVal row As SP_CustomerAgingNotDueYetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAgingNotDueYetRow(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAgingNotDueYetRow
            Dim rowSP_CustomerAgingNotDueYetRow As SP_CustomerAgingNotDueYetRow = CType(Me.NewRow,SP_CustomerAgingNotDueYetRow)
            rowSP_CustomerAgingNotDueYetRow.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAgingNotDueYetRow)
            Return rowSP_CustomerAgingNotDueYetRow
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAgingNotDueYetRow
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAgingNotDueYetRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAgingNotDueYetDataTable = CType(MyBase.Clone,SP_CustomerAgingNotDueYetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAgingNotDueYetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey3", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAgingNotDueYetRow() As SP_CustomerAgingNotDueYetRow
            Return CType(Me.NewRow,SP_CustomerAgingNotDueYetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAgingNotDueYetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAgingNotDueYetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowChanged(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowChanging(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowDeleted(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAgingNotDueYetRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingNotDueYetRowDeleting(Me, New SP_CustomerAgingNotDueYetRowChangeEvent(CType(e.Row,SP_CustomerAgingNotDueYetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAgingNotDueYetRow(ByVal row As SP_CustomerAgingNotDueYetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetRow
        Inherits DataRow
        
        Private tableSP_CustomerAgingNotDueYet As SP_CustomerAgingNotDueYetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAgingNotDueYet = CType(Me.Table,SP_CustomerAgingNotDueYetDataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAgingNotDueYet.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAgingNotDueYet.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAgingNotDueYet.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingNotDueYetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAgingNotDueYetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAgingNotDueYetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAgingNotDueYetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_CUSTOMER As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_CustomerAgingOver90")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COD_CUSTOMERColumn As DataColumn
            Get
                Return Me.columnCOD_CUSTOMER
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_CustomerAgingOver90Row
            Get
                Return CType(Me.Rows(index),SP_CustomerAgingOver90Row)
            End Get
        End Property
        
        Public Event SP_CustomerAgingOver90RowChanged As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowChanging As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowDeleted As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Event SP_CustomerAgingOver90RowDeleting As SP_CustomerAgingOver90RowChangeEventHandler
        
        Public Overloads Sub AddSP_CustomerAgingOver90Row(ByVal row As SP_CustomerAgingOver90Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_CustomerAgingOver90Row(ByVal COD_CUSTOMER As String, ByVal BalanceAmount As Decimal) As SP_CustomerAgingOver90Row
            Dim rowSP_CustomerAgingOver90Row As SP_CustomerAgingOver90Row = CType(Me.NewRow,SP_CustomerAgingOver90Row)
            rowSP_CustomerAgingOver90Row.ItemArray = New Object() {COD_CUSTOMER, BalanceAmount}
            Me.Rows.Add(rowSP_CustomerAgingOver90Row)
            Return rowSP_CustomerAgingOver90Row
        End Function
        
        Public Function FindByCOD_CUSTOMER(ByVal COD_CUSTOMER As String) As SP_CustomerAgingOver90Row
            Return CType(Me.Rows.Find(New Object() {COD_CUSTOMER}),SP_CustomerAgingOver90Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_CustomerAgingOver90DataTable = CType(MyBase.Clone,SP_CustomerAgingOver90DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_CustomerAgingOver90DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOD_CUSTOMER = Me.Columns("COD_CUSTOMER")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOD_CUSTOMER = New DataColumn("COD_CUSTOMER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOD_CUSTOMER)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.Constraints.Add(New UniqueConstraint("DSFrmRepCusStateKey4", New DataColumn() {Me.columnCOD_CUSTOMER}, true))
            Me.columnCOD_CUSTOMER.AllowDBNull = false
            Me.columnCOD_CUSTOMER.Unique = true
            Me.columnBalanceAmount.ReadOnly = true
        End Sub
        
        Public Function NewSP_CustomerAgingOver90Row() As SP_CustomerAgingOver90Row
            Return CType(Me.NewRow,SP_CustomerAgingOver90Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_CustomerAgingOver90Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_CustomerAgingOver90Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_CustomerAgingOver90RowChangedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowChanged(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_CustomerAgingOver90RowChangingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowChanging(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_CustomerAgingOver90RowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowDeleted(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_CustomerAgingOver90RowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_CustomerAgingOver90RowDeleting(Me, New SP_CustomerAgingOver90RowChangeEvent(CType(e.Row,SP_CustomerAgingOver90Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_CustomerAgingOver90Row(ByVal row As SP_CustomerAgingOver90Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90Row
        Inherits DataRow
        
        Private tableSP_CustomerAgingOver90 As SP_CustomerAgingOver90DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_CustomerAgingOver90 = CType(Me.Table,SP_CustomerAgingOver90DataTable)
        End Sub
        
        Public Property COD_CUSTOMER As String
            Get
                Return CType(Me(Me.tableSP_CustomerAgingOver90.COD_CUSTOMERColumn),String)
            End Get
            Set
                Me(Me.tableSP_CustomerAgingOver90.COD_CUSTOMERColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableSP_CustomerAgingOver90.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_CustomerAgingOver90RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_CustomerAgingOver90Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_CustomerAgingOver90Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_CustomerAgingOver90Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
