'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmPrintARCus
    Inherits DataSet
    
    Private tableCusChargeDetail As CusChargeDetailDataTable
    
    Private tableAdjustment As AdjustmentDataTable
    
    Private tableDeposit2 As Deposit2DataTable
    
    Private tableDeposit4 As Deposit4DataTable
    
    Private tableCusChargeSummery As CusChargeSummeryDataTable
    
    Private tableCusARPayment As CusARPaymentDataTable
    
    Private tableCusARPaymentSummery As CusARPaymentSummeryDataTable
    
    Private tableCusARLedgerDetail As CusARLedgerDetailDataTable
    
    Private tableCusARLedgerSummery As CusARLedgerSummeryDataTable
    
    Private tableCusDuePastDetail As CusDuePastDetailDataTable
    
    Private tableCusDuePastSummery As CusDuePastSummeryDataTable
    
    Private tableAging As AgingDataTable
    
    Private tablecustomerdue As customerdueDataTable
    
    Private tableAgingDetail As AgingDetailDataTable
    
    Private tablePastDue As PastDueDataTable
    
    Private tablecust_trtab_main As cust_trtab_mainDataTable
    
    Private tableCusARLedgerDetail1 As CusARLedgerDetail1DataTable
    
    Private tableDetailPaySum As DetailPaySumDataTable
    
    Private tableDetailPayDtl As DetailPayDtlDataTable
    
    Private relationDetailPaySumDetailPayDtl As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CusChargeDetail")) Is Nothing) Then
                Me.Tables.Add(New CusChargeDetailDataTable(ds.Tables("CusChargeDetail")))
            End If
            If (Not (ds.Tables("Adjustment")) Is Nothing) Then
                Me.Tables.Add(New AdjustmentDataTable(ds.Tables("Adjustment")))
            End If
            If (Not (ds.Tables("Deposit2")) Is Nothing) Then
                Me.Tables.Add(New Deposit2DataTable(ds.Tables("Deposit2")))
            End If
            If (Not (ds.Tables("Deposit4")) Is Nothing) Then
                Me.Tables.Add(New Deposit4DataTable(ds.Tables("Deposit4")))
            End If
            If (Not (ds.Tables("CusChargeSummery")) Is Nothing) Then
                Me.Tables.Add(New CusChargeSummeryDataTable(ds.Tables("CusChargeSummery")))
            End If
            If (Not (ds.Tables("CusARPayment")) Is Nothing) Then
                Me.Tables.Add(New CusARPaymentDataTable(ds.Tables("CusARPayment")))
            End If
            If (Not (ds.Tables("CusARPaymentSummery")) Is Nothing) Then
                Me.Tables.Add(New CusARPaymentSummeryDataTable(ds.Tables("CusARPaymentSummery")))
            End If
            If (Not (ds.Tables("CusARLedgerDetail")) Is Nothing) Then
                Me.Tables.Add(New CusARLedgerDetailDataTable(ds.Tables("CusARLedgerDetail")))
            End If
            If (Not (ds.Tables("CusARLedgerSummery")) Is Nothing) Then
                Me.Tables.Add(New CusARLedgerSummeryDataTable(ds.Tables("CusARLedgerSummery")))
            End If
            If (Not (ds.Tables("CusDuePastDetail")) Is Nothing) Then
                Me.Tables.Add(New CusDuePastDetailDataTable(ds.Tables("CusDuePastDetail")))
            End If
            If (Not (ds.Tables("CusDuePastSummery")) Is Nothing) Then
                Me.Tables.Add(New CusDuePastSummeryDataTable(ds.Tables("CusDuePastSummery")))
            End If
            If (Not (ds.Tables("Aging")) Is Nothing) Then
                Me.Tables.Add(New AgingDataTable(ds.Tables("Aging")))
            End If
            If (Not (ds.Tables("customerdue")) Is Nothing) Then
                Me.Tables.Add(New customerdueDataTable(ds.Tables("customerdue")))
            End If
            If (Not (ds.Tables("AgingDetail")) Is Nothing) Then
                Me.Tables.Add(New AgingDetailDataTable(ds.Tables("AgingDetail")))
            End If
            If (Not (ds.Tables("PastDue")) Is Nothing) Then
                Me.Tables.Add(New PastDueDataTable(ds.Tables("PastDue")))
            End If
            If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
                Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
            End If
            If (Not (ds.Tables("CusARLedgerDetail1")) Is Nothing) Then
                Me.Tables.Add(New CusARLedgerDetail1DataTable(ds.Tables("CusARLedgerDetail1")))
            End If
            If (Not (ds.Tables("DetailPaySum")) Is Nothing) Then
                Me.Tables.Add(New DetailPaySumDataTable(ds.Tables("DetailPaySum")))
            End If
            If (Not (ds.Tables("DetailPayDtl")) Is Nothing) Then
                Me.Tables.Add(New DetailPayDtlDataTable(ds.Tables("DetailPayDtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusChargeDetail As CusChargeDetailDataTable
        Get
            Return Me.tableCusChargeDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adjustment As AdjustmentDataTable
        Get
            Return Me.tableAdjustment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deposit2 As Deposit2DataTable
        Get
            Return Me.tableDeposit2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deposit4 As Deposit4DataTable
        Get
            Return Me.tableDeposit4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusChargeSummery As CusChargeSummeryDataTable
        Get
            Return Me.tableCusChargeSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARPayment As CusARPaymentDataTable
        Get
            Return Me.tableCusARPayment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARPaymentSummery As CusARPaymentSummeryDataTable
        Get
            Return Me.tableCusARPaymentSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARLedgerDetail As CusARLedgerDetailDataTable
        Get
            Return Me.tableCusARLedgerDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARLedgerSummery As CusARLedgerSummeryDataTable
        Get
            Return Me.tableCusARLedgerSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusDuePastDetail As CusDuePastDetailDataTable
        Get
            Return Me.tableCusDuePastDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusDuePastSummery As CusDuePastSummeryDataTable
        Get
            Return Me.tableCusDuePastSummery
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Aging As AgingDataTable
        Get
            Return Me.tableAging
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customerdue As customerdueDataTable
        Get
            Return Me.tablecustomerdue
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AgingDetail As AgingDetailDataTable
        Get
            Return Me.tableAgingDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PastDue As PastDueDataTable
        Get
            Return Me.tablePastDue
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cust_trtab_main As cust_trtab_mainDataTable
        Get
            Return Me.tablecust_trtab_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CusARLedgerDetail1 As CusARLedgerDetail1DataTable
        Get
            Return Me.tableCusARLedgerDetail1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetailPaySum As DetailPaySumDataTable
        Get
            Return Me.tableDetailPaySum
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetailPayDtl As DetailPayDtlDataTable
        Get
            Return Me.tableDetailPayDtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmPrintARCus = CType(MyBase.Clone,DSFrmPrintARCus)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CusChargeDetail")) Is Nothing) Then
            Me.Tables.Add(New CusChargeDetailDataTable(ds.Tables("CusChargeDetail")))
        End If
        If (Not (ds.Tables("Adjustment")) Is Nothing) Then
            Me.Tables.Add(New AdjustmentDataTable(ds.Tables("Adjustment")))
        End If
        If (Not (ds.Tables("Deposit2")) Is Nothing) Then
            Me.Tables.Add(New Deposit2DataTable(ds.Tables("Deposit2")))
        End If
        If (Not (ds.Tables("Deposit4")) Is Nothing) Then
            Me.Tables.Add(New Deposit4DataTable(ds.Tables("Deposit4")))
        End If
        If (Not (ds.Tables("CusChargeSummery")) Is Nothing) Then
            Me.Tables.Add(New CusChargeSummeryDataTable(ds.Tables("CusChargeSummery")))
        End If
        If (Not (ds.Tables("CusARPayment")) Is Nothing) Then
            Me.Tables.Add(New CusARPaymentDataTable(ds.Tables("CusARPayment")))
        End If
        If (Not (ds.Tables("CusARPaymentSummery")) Is Nothing) Then
            Me.Tables.Add(New CusARPaymentSummeryDataTable(ds.Tables("CusARPaymentSummery")))
        End If
        If (Not (ds.Tables("CusARLedgerDetail")) Is Nothing) Then
            Me.Tables.Add(New CusARLedgerDetailDataTable(ds.Tables("CusARLedgerDetail")))
        End If
        If (Not (ds.Tables("CusARLedgerSummery")) Is Nothing) Then
            Me.Tables.Add(New CusARLedgerSummeryDataTable(ds.Tables("CusARLedgerSummery")))
        End If
        If (Not (ds.Tables("CusDuePastDetail")) Is Nothing) Then
            Me.Tables.Add(New CusDuePastDetailDataTable(ds.Tables("CusDuePastDetail")))
        End If
        If (Not (ds.Tables("CusDuePastSummery")) Is Nothing) Then
            Me.Tables.Add(New CusDuePastSummeryDataTable(ds.Tables("CusDuePastSummery")))
        End If
        If (Not (ds.Tables("Aging")) Is Nothing) Then
            Me.Tables.Add(New AgingDataTable(ds.Tables("Aging")))
        End If
        If (Not (ds.Tables("customerdue")) Is Nothing) Then
            Me.Tables.Add(New customerdueDataTable(ds.Tables("customerdue")))
        End If
        If (Not (ds.Tables("AgingDetail")) Is Nothing) Then
            Me.Tables.Add(New AgingDetailDataTable(ds.Tables("AgingDetail")))
        End If
        If (Not (ds.Tables("PastDue")) Is Nothing) Then
            Me.Tables.Add(New PastDueDataTable(ds.Tables("PastDue")))
        End If
        If (Not (ds.Tables("cust_trtab_main")) Is Nothing) Then
            Me.Tables.Add(New cust_trtab_mainDataTable(ds.Tables("cust_trtab_main")))
        End If
        If (Not (ds.Tables("CusARLedgerDetail1")) Is Nothing) Then
            Me.Tables.Add(New CusARLedgerDetail1DataTable(ds.Tables("CusARLedgerDetail1")))
        End If
        If (Not (ds.Tables("DetailPaySum")) Is Nothing) Then
            Me.Tables.Add(New DetailPaySumDataTable(ds.Tables("DetailPaySum")))
        End If
        If (Not (ds.Tables("DetailPayDtl")) Is Nothing) Then
            Me.Tables.Add(New DetailPayDtlDataTable(ds.Tables("DetailPayDtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCusChargeDetail = CType(Me.Tables("CusChargeDetail"),CusChargeDetailDataTable)
        If (Not (Me.tableCusChargeDetail) Is Nothing) Then
            Me.tableCusChargeDetail.InitVars
        End If
        Me.tableAdjustment = CType(Me.Tables("Adjustment"),AdjustmentDataTable)
        If (Not (Me.tableAdjustment) Is Nothing) Then
            Me.tableAdjustment.InitVars
        End If
        Me.tableDeposit2 = CType(Me.Tables("Deposit2"),Deposit2DataTable)
        If (Not (Me.tableDeposit2) Is Nothing) Then
            Me.tableDeposit2.InitVars
        End If
        Me.tableDeposit4 = CType(Me.Tables("Deposit4"),Deposit4DataTable)
        If (Not (Me.tableDeposit4) Is Nothing) Then
            Me.tableDeposit4.InitVars
        End If
        Me.tableCusChargeSummery = CType(Me.Tables("CusChargeSummery"),CusChargeSummeryDataTable)
        If (Not (Me.tableCusChargeSummery) Is Nothing) Then
            Me.tableCusChargeSummery.InitVars
        End If
        Me.tableCusARPayment = CType(Me.Tables("CusARPayment"),CusARPaymentDataTable)
        If (Not (Me.tableCusARPayment) Is Nothing) Then
            Me.tableCusARPayment.InitVars
        End If
        Me.tableCusARPaymentSummery = CType(Me.Tables("CusARPaymentSummery"),CusARPaymentSummeryDataTable)
        If (Not (Me.tableCusARPaymentSummery) Is Nothing) Then
            Me.tableCusARPaymentSummery.InitVars
        End If
        Me.tableCusARLedgerDetail = CType(Me.Tables("CusARLedgerDetail"),CusARLedgerDetailDataTable)
        If (Not (Me.tableCusARLedgerDetail) Is Nothing) Then
            Me.tableCusARLedgerDetail.InitVars
        End If
        Me.tableCusARLedgerSummery = CType(Me.Tables("CusARLedgerSummery"),CusARLedgerSummeryDataTable)
        If (Not (Me.tableCusARLedgerSummery) Is Nothing) Then
            Me.tableCusARLedgerSummery.InitVars
        End If
        Me.tableCusDuePastDetail = CType(Me.Tables("CusDuePastDetail"),CusDuePastDetailDataTable)
        If (Not (Me.tableCusDuePastDetail) Is Nothing) Then
            Me.tableCusDuePastDetail.InitVars
        End If
        Me.tableCusDuePastSummery = CType(Me.Tables("CusDuePastSummery"),CusDuePastSummeryDataTable)
        If (Not (Me.tableCusDuePastSummery) Is Nothing) Then
            Me.tableCusDuePastSummery.InitVars
        End If
        Me.tableAging = CType(Me.Tables("Aging"),AgingDataTable)
        If (Not (Me.tableAging) Is Nothing) Then
            Me.tableAging.InitVars
        End If
        Me.tablecustomerdue = CType(Me.Tables("customerdue"),customerdueDataTable)
        If (Not (Me.tablecustomerdue) Is Nothing) Then
            Me.tablecustomerdue.InitVars
        End If
        Me.tableAgingDetail = CType(Me.Tables("AgingDetail"),AgingDetailDataTable)
        If (Not (Me.tableAgingDetail) Is Nothing) Then
            Me.tableAgingDetail.InitVars
        End If
        Me.tablePastDue = CType(Me.Tables("PastDue"),PastDueDataTable)
        If (Not (Me.tablePastDue) Is Nothing) Then
            Me.tablePastDue.InitVars
        End If
        Me.tablecust_trtab_main = CType(Me.Tables("cust_trtab_main"),cust_trtab_mainDataTable)
        If (Not (Me.tablecust_trtab_main) Is Nothing) Then
            Me.tablecust_trtab_main.InitVars
        End If
        Me.tableCusARLedgerDetail1 = CType(Me.Tables("CusARLedgerDetail1"),CusARLedgerDetail1DataTable)
        If (Not (Me.tableCusARLedgerDetail1) Is Nothing) Then
            Me.tableCusARLedgerDetail1.InitVars
        End If
        Me.tableDetailPaySum = CType(Me.Tables("DetailPaySum"),DetailPaySumDataTable)
        If (Not (Me.tableDetailPaySum) Is Nothing) Then
            Me.tableDetailPaySum.InitVars
        End If
        Me.tableDetailPayDtl = CType(Me.Tables("DetailPayDtl"),DetailPayDtlDataTable)
        If (Not (Me.tableDetailPayDtl) Is Nothing) Then
            Me.tableDetailPayDtl.InitVars
        End If
        Me.relationDetailPaySumDetailPayDtl = Me.Relations("DetailPaySumDetailPayDtl")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmPrintARCus"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmPrintARCus.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCusChargeDetail = New CusChargeDetailDataTable
        Me.Tables.Add(Me.tableCusChargeDetail)
        Me.tableAdjustment = New AdjustmentDataTable
        Me.Tables.Add(Me.tableAdjustment)
        Me.tableDeposit2 = New Deposit2DataTable
        Me.Tables.Add(Me.tableDeposit2)
        Me.tableDeposit4 = New Deposit4DataTable
        Me.Tables.Add(Me.tableDeposit4)
        Me.tableCusChargeSummery = New CusChargeSummeryDataTable
        Me.Tables.Add(Me.tableCusChargeSummery)
        Me.tableCusARPayment = New CusARPaymentDataTable
        Me.Tables.Add(Me.tableCusARPayment)
        Me.tableCusARPaymentSummery = New CusARPaymentSummeryDataTable
        Me.Tables.Add(Me.tableCusARPaymentSummery)
        Me.tableCusARLedgerDetail = New CusARLedgerDetailDataTable
        Me.Tables.Add(Me.tableCusARLedgerDetail)
        Me.tableCusARLedgerSummery = New CusARLedgerSummeryDataTable
        Me.Tables.Add(Me.tableCusARLedgerSummery)
        Me.tableCusDuePastDetail = New CusDuePastDetailDataTable
        Me.Tables.Add(Me.tableCusDuePastDetail)
        Me.tableCusDuePastSummery = New CusDuePastSummeryDataTable
        Me.Tables.Add(Me.tableCusDuePastSummery)
        Me.tableAging = New AgingDataTable
        Me.Tables.Add(Me.tableAging)
        Me.tablecustomerdue = New customerdueDataTable
        Me.Tables.Add(Me.tablecustomerdue)
        Me.tableAgingDetail = New AgingDetailDataTable
        Me.Tables.Add(Me.tableAgingDetail)
        Me.tablePastDue = New PastDueDataTable
        Me.Tables.Add(Me.tablePastDue)
        Me.tablecust_trtab_main = New cust_trtab_mainDataTable
        Me.Tables.Add(Me.tablecust_trtab_main)
        Me.tableCusARLedgerDetail1 = New CusARLedgerDetail1DataTable
        Me.Tables.Add(Me.tableCusARLedgerDetail1)
        Me.tableDetailPaySum = New DetailPaySumDataTable
        Me.Tables.Add(Me.tableDetailPaySum)
        Me.tableDetailPayDtl = New DetailPayDtlDataTable
        Me.Tables.Add(Me.tableDetailPayDtl)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("DetailPaySumDetailPayDtl", New DataColumn() {Me.tableDetailPaySum.refrence_noColumn}, New DataColumn() {Me.tableDetailPayDtl.refrence_noColumn})
        Me.tableDetailPayDtl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationDetailPaySumDetailPayDtl = New DataRelation("DetailPaySumDetailPayDtl", New DataColumn() {Me.tableDetailPaySum.refrence_noColumn}, New DataColumn() {Me.tableDetailPayDtl.refrence_noColumn}, false)
        Me.Relations.Add(Me.relationDetailPaySumDetailPayDtl)
    End Sub
    
    Private Function ShouldSerializeCusChargeDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdjustment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeposit2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeposit4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusChargeSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARPayment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARPaymentSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARLedgerDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARLedgerSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusDuePastDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusDuePastSummery() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAging() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecustomerdue() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAgingDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePastDue() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecust_trtab_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCusARLedgerDetail1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetailPaySum() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetailPayDtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CusChargeDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CusChargeDetailRowChangeEvent)
    
    Public Delegate Sub AdjustmentRowChangeEventHandler(ByVal sender As Object, ByVal e As AdjustmentRowChangeEvent)
    
    Public Delegate Sub Deposit2RowChangeEventHandler(ByVal sender As Object, ByVal e As Deposit2RowChangeEvent)
    
    Public Delegate Sub Deposit4RowChangeEventHandler(ByVal sender As Object, ByVal e As Deposit4RowChangeEvent)
    
    Public Delegate Sub CusChargeSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CusChargeSummeryRowChangeEvent)
    
    Public Delegate Sub CusARPaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARPaymentRowChangeEvent)
    
    Public Delegate Sub CusARPaymentSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARPaymentSummeryRowChangeEvent)
    
    Public Delegate Sub CusARLedgerDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARLedgerDetailRowChangeEvent)
    
    Public Delegate Sub CusARLedgerSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CusARLedgerSummeryRowChangeEvent)
    
    Public Delegate Sub CusDuePastDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As CusDuePastDetailRowChangeEvent)
    
    Public Delegate Sub CusDuePastSummeryRowChangeEventHandler(ByVal sender As Object, ByVal e As CusDuePastSummeryRowChangeEvent)
    
    Public Delegate Sub AgingRowChangeEventHandler(ByVal sender As Object, ByVal e As AgingRowChangeEvent)
    
    Public Delegate Sub customerdueRowChangeEventHandler(ByVal sender As Object, ByVal e As customerdueRowChangeEvent)
    
    Public Delegate Sub AgingDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AgingDetailRowChangeEvent)
    
    Public Delegate Sub PastDueRowChangeEventHandler(ByVal sender As Object, ByVal e As PastDueRowChangeEvent)
    
    Public Delegate Sub cust_trtab_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As cust_trtab_mainRowChangeEvent)
    
    Public Delegate Sub CusARLedgerDetail1RowChangeEventHandler(ByVal sender As Object, ByVal e As CusARLedgerDetail1RowChangeEvent)
    
    Public Delegate Sub DetailPaySumRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailPaySumRowChangeEvent)
    
    Public Delegate Sub DetailPayDtlRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailPayDtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Private columnDue_Date As DataColumn
        
        Private columndays_past As DataColumn
        
        Private columnar_term As DataColumn
        
        Private columndebt As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("CusChargeDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property Due_DateColumn As DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        Friend ReadOnly Property days_pastColumn As DataColumn
            Get
                Return Me.columndays_past
            End Get
        End Property
        
        Friend ReadOnly Property ar_termColumn As DataColumn
            Get
                Return Me.columnar_term
            End Get
        End Property
        
        Friend ReadOnly Property debtColumn As DataColumn
            Get
                Return Me.columndebt
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusChargeDetailRow
            Get
                Return CType(Me.Rows(index),CusChargeDetailRow)
            End Get
        End Property
        
        Public Event CusChargeDetailRowChanged As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowChanging As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowDeleted As CusChargeDetailRowChangeEventHandler
        
        Public Event CusChargeDetailRowDeleting As CusChargeDetailRowChangeEventHandler
        
        Public Overloads Sub AddCusChargeDetailRow(ByVal row As CusChargeDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusChargeDetailRow( _
                    ByVal cod_customer As String,  _
                    ByVal complete_name As String,  _
                    ByVal date_refer As Date,  _
                    ByVal id_service_center As String,  _
                    ByVal Total As Decimal,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal payment4 As Decimal,  _
                    ByVal payment2 As Decimal,  _
                    ByVal adjustment As Decimal,  _
                    ByVal Due_Date As Date,  _
                    ByVal days_past As String,  _
                    ByVal ar_term As String,  _
                    ByVal debt As Decimal,  _
                    ByVal payment_amount As Decimal,  _
                    ByVal flag As Boolean,  _
                    ByVal FlagShow As Boolean,  _
                    ByVal OrderName As String) As CusChargeDetailRow
            Dim rowCusChargeDetailRow As CusChargeDetailRow = CType(Me.NewRow,CusChargeDetailRow)
            rowCusChargeDetailRow.ItemArray = New Object() {cod_customer, complete_name, date_refer, id_service_center, Total, f_name, name, payment4, payment2, adjustment, Due_Date, days_past, ar_term, debt, payment_amount, flag, FlagShow, OrderName}
            Me.Rows.Add(rowCusChargeDetailRow)
            Return rowCusChargeDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusChargeDetailDataTable = CType(MyBase.Clone,CusChargeDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusChargeDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnTotal = Me.Columns("Total")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columnDue_Date = Me.Columns("Due_Date")
            Me.columndays_past = Me.Columns("days_past")
            Me.columnar_term = Me.Columns("ar_term")
            Me.columndebt = Me.Columns("debt")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag = Me.Columns("flag")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columnDue_Date = New DataColumn("Due_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDue_Date)
            Me.columndays_past = New DataColumn("days_past", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays_past)
            Me.columnar_term = New DataColumn("ar_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnar_term)
            Me.columndebt = New DataColumn("debt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebt)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncod_customer.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewCusChargeDetailRow() As CusChargeDetailRow
            Return CType(Me.NewRow,CusChargeDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusChargeDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusChargeDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusChargeDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowChanged(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusChargeDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowChanging(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusChargeDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowDeleted(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusChargeDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusChargeDetailRowDeleting(Me, New CusChargeDetailRowChangeEvent(CType(e.Row,CusChargeDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusChargeDetailRow(ByVal row As CusChargeDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailRow
        Inherits DataRow
        
        Private tableCusChargeDetail As CusChargeDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusChargeDetail = CType(Me.Table,CusChargeDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusChargeDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusChargeDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.date_referColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableCusChargeDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableCusChargeDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.TotalColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property Due_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.Due_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.Due_DateColumn) = value
            End Set
        End Property
        
        Public Property days_past As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.days_pastColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.days_pastColumn) = value
            End Set
        End Property
        
        Public Property ar_term As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.ar_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.ar_termColumn) = value
            End Set
        End Property
        
        Public Property debt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.debtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.debtColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeDetail.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeDetail.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusChargeDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableCusChargeDetail.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableCusChargeDetail.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusChargeDetail.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusChargeDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableCusChargeDetail.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableCusChargeDetail.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableCusChargeDetail.adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDue_DateNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.Due_DateColumn)
        End Function
        
        Public Sub SetDue_DateNull()
            Me(Me.tableCusChargeDetail.Due_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdays_pastNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.days_pastColumn)
        End Function
        
        Public Sub Setdays_pastNull()
            Me(Me.tableCusChargeDetail.days_pastColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isar_termNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.ar_termColumn)
        End Function
        
        Public Sub Setar_termNull()
            Me(Me.tableCusChargeDetail.ar_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdebtNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.debtColumn)
        End Function
        
        Public Sub SetdebtNull()
            Me(Me.tableCusChargeDetail.debtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableCusChargeDetail.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusChargeDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusChargeDetail.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeDetail.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusChargeDetail.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusChargeDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusChargeDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusChargeDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnadjustment As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("Adjustment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdjustmentRow
            Get
                Return CType(Me.Rows(index),AdjustmentRow)
            End Get
        End Property
        
        Public Event AdjustmentRowChanged As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowChanging As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowDeleted As AdjustmentRowChangeEventHandler
        
        Public Event AdjustmentRowDeleting As AdjustmentRowChangeEventHandler
        
        Public Overloads Sub AddAdjustmentRow(ByVal row As AdjustmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdjustmentRow(ByVal adjustment As Decimal, ByVal ID As String) As AdjustmentRow
            Dim rowAdjustmentRow As AdjustmentRow = CType(Me.NewRow,AdjustmentRow)
            rowAdjustmentRow.ItemArray = New Object() {adjustment, ID}
            Me.Rows.Add(rowAdjustmentRow)
            Return rowAdjustmentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdjustmentDataTable = CType(MyBase.Clone,AdjustmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdjustmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnadjustment.ReadOnly = true
            Me.columnID.AllowDBNull = false
        End Sub
        
        Public Function NewAdjustmentRow() As AdjustmentRow
            Return CType(Me.NewRow,AdjustmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdjustmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdjustmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdjustmentRowChangedEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowChanged(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdjustmentRowChangingEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowChanging(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdjustmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowDeleted(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdjustmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdjustmentRowDeleting(Me, New AdjustmentRowChangeEvent(CType(e.Row,AdjustmentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdjustmentRow(ByVal row As AdjustmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentRow
        Inherits DataRow
        
        Private tableAdjustment As AdjustmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdjustment = CType(Me.Table,AdjustmentDataTable)
        End Sub
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustment.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustment.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Return CType(Me(Me.tableAdjustment.IDColumn),String)
            End Get
            Set
                Me(Me.tableAdjustment.IDColumn) = value
            End Set
        End Property
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableAdjustment.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableAdjustment.adjustmentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdjustmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdjustmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdjustmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpayment2 As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("Deposit2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Deposit2Row
            Get
                Return CType(Me.Rows(index),Deposit2Row)
            End Get
        End Property
        
        Public Event Deposit2RowChanged As Deposit2RowChangeEventHandler
        
        Public Event Deposit2RowChanging As Deposit2RowChangeEventHandler
        
        Public Event Deposit2RowDeleted As Deposit2RowChangeEventHandler
        
        Public Event Deposit2RowDeleting As Deposit2RowChangeEventHandler
        
        Public Overloads Sub AddDeposit2Row(ByVal row As Deposit2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeposit2Row(ByVal payment2 As Decimal, ByVal ID As String) As Deposit2Row
            Dim rowDeposit2Row As Deposit2Row = CType(Me.NewRow,Deposit2Row)
            rowDeposit2Row.ItemArray = New Object() {payment2, ID}
            Me.Rows.Add(rowDeposit2Row)
            Return rowDeposit2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Deposit2DataTable = CType(MyBase.Clone,Deposit2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Deposit2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnpayment2.ReadOnly = true
            Me.columnID.AllowDBNull = false
        End Sub
        
        Public Function NewDeposit2Row() As Deposit2Row
            Return CType(Me.NewRow,Deposit2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Deposit2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Deposit2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Deposit2RowChangedEvent) Is Nothing) Then
                RaiseEvent Deposit2RowChanged(Me, New Deposit2RowChangeEvent(CType(e.Row,Deposit2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Deposit2RowChangingEvent) Is Nothing) Then
                RaiseEvent Deposit2RowChanging(Me, New Deposit2RowChangeEvent(CType(e.Row,Deposit2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Deposit2RowDeletedEvent) Is Nothing) Then
                RaiseEvent Deposit2RowDeleted(Me, New Deposit2RowChangeEvent(CType(e.Row,Deposit2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Deposit2RowDeletingEvent) Is Nothing) Then
                RaiseEvent Deposit2RowDeleting(Me, New Deposit2RowChangeEvent(CType(e.Row,Deposit2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeposit2Row(ByVal row As Deposit2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit2Row
        Inherits DataRow
        
        Private tableDeposit2 As Deposit2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeposit2 = CType(Me.Table,Deposit2DataTable)
        End Sub
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDeposit2.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeposit2.payment2Column) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Return CType(Me(Me.tableDeposit2.IDColumn),String)
            End Get
            Set
                Me(Me.tableDeposit2.IDColumn) = value
            End Set
        End Property
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableDeposit2.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableDeposit2.payment2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Deposit2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Deposit2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Deposit2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpayment4 As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("Deposit4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Deposit4Row
            Get
                Return CType(Me.Rows(index),Deposit4Row)
            End Get
        End Property
        
        Public Event Deposit4RowChanged As Deposit4RowChangeEventHandler
        
        Public Event Deposit4RowChanging As Deposit4RowChangeEventHandler
        
        Public Event Deposit4RowDeleted As Deposit4RowChangeEventHandler
        
        Public Event Deposit4RowDeleting As Deposit4RowChangeEventHandler
        
        Public Overloads Sub AddDeposit4Row(ByVal row As Deposit4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeposit4Row(ByVal payment4 As Decimal, ByVal ID As String) As Deposit4Row
            Dim rowDeposit4Row As Deposit4Row = CType(Me.NewRow,Deposit4Row)
            rowDeposit4Row.ItemArray = New Object() {payment4, ID}
            Me.Rows.Add(rowDeposit4Row)
            Return rowDeposit4Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Deposit4DataTable = CType(MyBase.Clone,Deposit4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Deposit4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnpayment4.ReadOnly = true
            Me.columnID.AllowDBNull = false
        End Sub
        
        Public Function NewDeposit4Row() As Deposit4Row
            Return CType(Me.NewRow,Deposit4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Deposit4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Deposit4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Deposit4RowChangedEvent) Is Nothing) Then
                RaiseEvent Deposit4RowChanged(Me, New Deposit4RowChangeEvent(CType(e.Row,Deposit4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Deposit4RowChangingEvent) Is Nothing) Then
                RaiseEvent Deposit4RowChanging(Me, New Deposit4RowChangeEvent(CType(e.Row,Deposit4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Deposit4RowDeletedEvent) Is Nothing) Then
                RaiseEvent Deposit4RowDeleted(Me, New Deposit4RowChangeEvent(CType(e.Row,Deposit4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Deposit4RowDeletingEvent) Is Nothing) Then
                RaiseEvent Deposit4RowDeleting(Me, New Deposit4RowChangeEvent(CType(e.Row,Deposit4Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeposit4Row(ByVal row As Deposit4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit4Row
        Inherits DataRow
        
        Private tableDeposit4 As Deposit4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeposit4 = CType(Me.Table,Deposit4DataTable)
        End Sub
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDeposit4.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeposit4.payment4Column) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Return CType(Me(Me.tableDeposit4.IDColumn),String)
            End Get
            Set
                Me(Me.tableDeposit4.IDColumn) = value
            End Set
        End Property
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableDeposit4.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableDeposit4.payment4Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposit4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Deposit4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Deposit4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Deposit4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnNoInvoice As DataColumn
        
        Private columntotal As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columndebt As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("CusChargeSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property NoInvoiceColumn As DataColumn
            Get
                Return Me.columnNoInvoice
            End Get
        End Property
        
        Friend ReadOnly Property totalColumn As DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property debtColumn As DataColumn
            Get
                Return Me.columndebt
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusChargeSummeryRow
            Get
                Return CType(Me.Rows(index),CusChargeSummeryRow)
            End Get
        End Property
        
        Public Event CusChargeSummeryRowChanged As CusChargeSummeryRowChangeEventHandler
        
        Public Event CusChargeSummeryRowChanging As CusChargeSummeryRowChangeEventHandler
        
        Public Event CusChargeSummeryRowDeleted As CusChargeSummeryRowChangeEventHandler
        
        Public Event CusChargeSummeryRowDeleting As CusChargeSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCusChargeSummeryRow(ByVal row As CusChargeSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusChargeSummeryRow(ByVal cod_customer As String, ByVal f_name As String, ByVal name As String, ByVal complete_name As String, ByVal NoInvoice As Integer, ByVal total As Decimal, ByVal payment4 As Decimal, ByVal payment2 As Decimal, ByVal adjustment As Decimal, ByVal payment_amount As Decimal, ByVal flag As Boolean, ByVal debt As Decimal, ByVal FlagShow As Boolean, ByVal OrderName As String) As CusChargeSummeryRow
            Dim rowCusChargeSummeryRow As CusChargeSummeryRow = CType(Me.NewRow,CusChargeSummeryRow)
            rowCusChargeSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, NoInvoice, total, payment4, payment2, adjustment, payment_amount, flag, debt, FlagShow, OrderName}
            Me.Rows.Add(rowCusChargeSummeryRow)
            Return rowCusChargeSummeryRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As CusChargeSummeryRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),CusChargeSummeryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusChargeSummeryDataTable = CType(MyBase.Clone,CusChargeSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusChargeSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnNoInvoice = Me.Columns("NoInvoice")
            Me.columntotal = Me.Columns("total")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag = Me.Columns("flag")
            Me.columndebt = Me.Columns("debt")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnNoInvoice = New DataColumn("NoInvoice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoInvoice)
            Me.columntotal = New DataColumn("total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotal)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columndebt = New DataColumn("debt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebt)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintARCusKey2", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function NewCusChargeSummeryRow() As CusChargeSummeryRow
            Return CType(Me.NewRow,CusChargeSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusChargeSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusChargeSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusChargeSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CusChargeSummeryRowChanged(Me, New CusChargeSummeryRowChangeEvent(CType(e.Row,CusChargeSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusChargeSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CusChargeSummeryRowChanging(Me, New CusChargeSummeryRowChangeEvent(CType(e.Row,CusChargeSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusChargeSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusChargeSummeryRowDeleted(Me, New CusChargeSummeryRowChangeEvent(CType(e.Row,CusChargeSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusChargeSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusChargeSummeryRowDeleting(Me, New CusChargeSummeryRowChangeEvent(CType(e.Row,CusChargeSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusChargeSummeryRow(ByVal row As CusChargeSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeSummeryRow
        Inherits DataRow
        
        Private tableCusChargeSummery As CusChargeSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusChargeSummery = CType(Me.Table,CusChargeSummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusChargeSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusChargeSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property NoInvoice As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.NoInvoiceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.NoInvoiceColumn) = value
            End Set
        End Property
        
        Public Property total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.totalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.totalColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property debt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.debtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.debtColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusChargeSummery.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusChargeSummery.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusChargeSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusChargeSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusChargeSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoInvoiceNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.NoInvoiceColumn)
        End Function
        
        Public Sub SetNoInvoiceNull()
            Me(Me.tableCusChargeSummery.NoInvoiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.totalColumn)
        End Function
        
        Public Sub SettotalNull()
            Me(Me.tableCusChargeSummery.totalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableCusChargeSummery.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableCusChargeSummery.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableCusChargeSummery.adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableCusChargeSummery.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusChargeSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdebtNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.debtColumn)
        End Function
        
        Public Sub SetdebtNull()
            Me(Me.tableCusChargeSummery.debtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusChargeSummery.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusChargeSummery.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusChargeSummery.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusChargeSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusChargeSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusChargeSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusChargeSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_receive_payment As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnamount_receive As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columncod_company As DataColumn
        
        Private columnpmt_method As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnoverpay As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARPayment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_receive_paymentColumn As DataColumn
            Get
                Return Me.columndate_receive_payment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property amount_receiveColumn As DataColumn
            Get
                Return Me.columnamount_receive
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property pmt_methodColumn As DataColumn
            Get
                Return Me.columnpmt_method
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property overpayColumn As DataColumn
            Get
                Return Me.columnoverpay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARPaymentRow
            Get
                Return CType(Me.Rows(index),CusARPaymentRow)
            End Get
        End Property
        
        Public Event CusARPaymentRowChanged As CusARPaymentRowChangeEventHandler
        
        Public Event CusARPaymentRowChanging As CusARPaymentRowChangeEventHandler
        
        Public Event CusARPaymentRowDeleted As CusARPaymentRowChangeEventHandler
        
        Public Event CusARPaymentRowDeleting As CusARPaymentRowChangeEventHandler
        
        Public Overloads Sub AddCusARPaymentRow(ByVal row As CusARPaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARPaymentRow(ByVal cod_customer As String, ByVal name As String, ByVal complete_name As String, ByVal date_receive_payment As String, ByVal refrence_no As String, ByVal amount_receive As Single, ByVal payment_amount As Decimal, ByVal id_service_center As String, ByVal cod_company As String, ByVal pmt_method As String, ByVal flag As Boolean, ByVal FlagShow As Boolean, ByVal OrderName As String, ByVal overpay As Decimal) As CusARPaymentRow
            Dim rowCusARPaymentRow As CusARPaymentRow = CType(Me.NewRow,CusARPaymentRow)
            rowCusARPaymentRow.ItemArray = New Object() {cod_customer, name, complete_name, date_receive_payment, refrence_no, amount_receive, payment_amount, id_service_center, Nothing, cod_company, pmt_method, flag, FlagShow, OrderName, overpay}
            Me.Rows.Add(rowCusARPaymentRow)
            Return rowCusARPaymentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARPaymentDataTable = CType(MyBase.Clone,CusARPaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARPaymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_receive_payment = Me.Columns("date_receive_payment")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnamount_receive = Me.Columns("amount_receive")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnpmt_method = Me.Columns("pmt_method")
            Me.columnflag = Me.Columns("flag")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnoverpay = Me.Columns("overpay")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_receive_payment = New DataColumn("date_receive_payment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive_payment)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnamount_receive = New DataColumn("amount_receive", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_receive)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnpmt_method = New DataColumn("pmt_method", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpmt_method)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnoverpay = New DataColumn("overpay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverpay)
            Me.columncod_customer.AllowDBNull = false
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnpmt_method.ReadOnly = true
        End Sub
        
        Public Function NewCusARPaymentRow() As CusARPaymentRow
            Return CType(Me.NewRow,CusARPaymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARPaymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARPaymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARPaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARPaymentRowChanged(Me, New CusARPaymentRowChangeEvent(CType(e.Row,CusARPaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARPaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARPaymentRowChanging(Me, New CusARPaymentRowChangeEvent(CType(e.Row,CusARPaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARPaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARPaymentRowDeleted(Me, New CusARPaymentRowChangeEvent(CType(e.Row,CusARPaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARPaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARPaymentRowDeleting(Me, New CusARPaymentRowChangeEvent(CType(e.Row,CusARPaymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARPaymentRow(ByVal row As CusARPaymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentRow
        Inherits DataRow
        
        Private tableCusARPayment As CusARPaymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARPayment = CType(Me.Table,CusARPaymentDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARPayment.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARPayment.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_receive_payment As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.date_receive_paymentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.date_receive_paymentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableCusARPayment.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableCusARPayment.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property amount_receive As Single
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.amount_receiveColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.amount_receiveColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableCusARPayment.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableCusARPayment.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property cod_company As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.cod_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property pmt_method As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.pmt_methodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.pmt_methodColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.flagColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property overpay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARPayment.overpayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPayment.overpayColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARPayment.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARPayment.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_receive_paymentNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.date_receive_paymentColumn)
        End Function
        
        Public Sub Setdate_receive_paymentNull()
            Me(Me.tableCusARPayment.date_receive_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_receiveNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.amount_receiveColumn)
        End Function
        
        Public Sub Setamount_receiveNull()
            Me(Me.tableCusARPayment.amount_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableCusARPayment.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableCusARPayment.id_service_centerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_companyNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.cod_companyColumn)
        End Function
        
        Public Sub Setcod_companyNull()
            Me(Me.tableCusARPayment.cod_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispmt_methodNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.pmt_methodColumn)
        End Function
        
        Public Sub Setpmt_methodNull()
            Me(Me.tableCusARPayment.pmt_methodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARPayment.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusARPayment.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARPayment.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoverpayNull() As Boolean
            Return Me.IsNull(Me.tableCusARPayment.overpayColumn)
        End Function
        
        Public Sub SetoverpayNull()
            Me(Me.tableCusARPayment.overpayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARPaymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARPaymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARPaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnNoPay As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnoverpay As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARPaymentSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NoPayColumn As DataColumn
            Get
                Return Me.columnNoPay
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property overpayColumn As DataColumn
            Get
                Return Me.columnoverpay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARPaymentSummeryRow
            Get
                Return CType(Me.Rows(index),CusARPaymentSummeryRow)
            End Get
        End Property
        
        Public Event CusARPaymentSummeryRowChanged As CusARPaymentSummeryRowChangeEventHandler
        
        Public Event CusARPaymentSummeryRowChanging As CusARPaymentSummeryRowChangeEventHandler
        
        Public Event CusARPaymentSummeryRowDeleted As CusARPaymentSummeryRowChangeEventHandler
        
        Public Event CusARPaymentSummeryRowDeleting As CusARPaymentSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCusARPaymentSummeryRow(ByVal row As CusARPaymentSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARPaymentSummeryRow(ByVal cod_customer As String, ByVal f_name As String, ByVal name As String, ByVal complete_name As String, ByVal AMOUNT As Decimal, ByVal NoPay As Integer, ByVal flag As Boolean, ByVal FlagShow As Boolean, ByVal OrderName As String, ByVal overpay As Decimal) As CusARPaymentSummeryRow
            Dim rowCusARPaymentSummeryRow As CusARPaymentSummeryRow = CType(Me.NewRow,CusARPaymentSummeryRow)
            rowCusARPaymentSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, AMOUNT, NoPay, flag, FlagShow, OrderName, overpay}
            Me.Rows.Add(rowCusARPaymentSummeryRow)
            Return rowCusARPaymentSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARPaymentSummeryDataTable = CType(MyBase.Clone,CusARPaymentSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARPaymentSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnNoPay = Me.Columns("NoPay")
            Me.columnflag = Me.Columns("flag")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnoverpay = Me.Columns("overpay")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnNoPay = New DataColumn("NoPay", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoPay)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnoverpay = New DataColumn("overpay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverpay)
            Me.columncod_customer.AllowDBNull = false
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnNoPay.ReadOnly = true
        End Sub
        
        Public Function NewCusARPaymentSummeryRow() As CusARPaymentSummeryRow
            Return CType(Me.NewRow,CusARPaymentSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARPaymentSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARPaymentSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARPaymentSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARPaymentSummeryRowChanged(Me, New CusARPaymentSummeryRowChangeEvent(CType(e.Row,CusARPaymentSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARPaymentSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARPaymentSummeryRowChanging(Me, New CusARPaymentSummeryRowChangeEvent(CType(e.Row,CusARPaymentSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARPaymentSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARPaymentSummeryRowDeleted(Me, New CusARPaymentSummeryRowChangeEvent(CType(e.Row,CusARPaymentSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARPaymentSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARPaymentSummeryRowDeleting(Me, New CusARPaymentSummeryRowChangeEvent(CType(e.Row,CusARPaymentSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARPaymentSummeryRow(ByVal row As CusARPaymentSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentSummeryRow
        Inherits DataRow
        
        Private tableCusARPaymentSummery As CusARPaymentSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARPaymentSummery = CType(Me.Table,CusARPaymentSummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARPaymentSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NoPay As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.NoPayColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.NoPayColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property overpay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARPaymentSummery.overpayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARPaymentSummery.overpayColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusARPaymentSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARPaymentSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARPaymentSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableCusARPaymentSummery.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoPayNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.NoPayColumn)
        End Function
        
        Public Sub SetNoPayNull()
            Me(Me.tableCusARPaymentSummery.NoPayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARPaymentSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusARPaymentSummery.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARPaymentSummery.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoverpayNull() As Boolean
            Return Me.IsNull(Me.tableCusARPaymentSummery.overpayColumn)
        End Function
        
        Public Sub SetoverpayNull()
            Me(Me.tableCusARPaymentSummery.overpayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARPaymentSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARPaymentSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARPaymentSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARPaymentSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private column_date As DataColumn
        
        Private columnid As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncredit As DataColumn
        
        Private columnadj As DataColumn
        
        Private columndue As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDown As DataColumn
        
        Private columnOVERPAID As DataColumn
        
        Private columnOther As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARLedgerDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property adjColumn As DataColumn
            Get
                Return Me.columnadj
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DownColumn As DataColumn
            Get
                Return Me.columnDown
            End Get
        End Property
        
        Friend ReadOnly Property OVERPAIDColumn As DataColumn
            Get
                Return Me.columnOVERPAID
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARLedgerDetailRow
            Get
                Return CType(Me.Rows(index),CusARLedgerDetailRow)
            End Get
        End Property
        
        Public Event CusARLedgerDetailRowChanged As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowChanging As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowDeleted As CusARLedgerDetailRowChangeEventHandler
        
        Public Event CusARLedgerDetailRowDeleting As CusARLedgerDetailRowChangeEventHandler
        
        Public Overloads Sub AddCusARLedgerDetailRow(ByVal row As CusARLedgerDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARLedgerDetailRow( _
                    ByVal cod_customer As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal _date As String,  _
                    ByVal id As String,  _
                    ByVal charge As Decimal,  _
                    ByVal credit As Decimal,  _
                    ByVal adj As Decimal,  _
                    ByVal due As String,  _
                    ByVal flag As Boolean,  _
                    ByVal OrderDate As String,  _
                    ByVal OrderName As String,  _
                    ByVal Paid_amount As Decimal,  _
                    ByVal Down As Decimal,  _
                    ByVal OVERPAID As Decimal,  _
                    ByVal Other As Decimal) As CusARLedgerDetailRow
            Dim rowCusARLedgerDetailRow As CusARLedgerDetailRow = CType(Me.NewRow,CusARLedgerDetailRow)
            rowCusARLedgerDetailRow.ItemArray = New Object() {cod_customer, name, complete_name, _date, id, charge, credit, adj, due, flag, OrderDate, OrderName, Paid_amount, Down, OVERPAID, Other}
            Me.Rows.Add(rowCusARLedgerDetailRow)
            Return rowCusARLedgerDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARLedgerDetailDataTable = CType(MyBase.Clone,CusARLedgerDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARLedgerDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.column_date = Me.Columns("date")
            Me.columnid = Me.Columns("id")
            Me.columncharge = Me.Columns("charge")
            Me.columncredit = Me.Columns("credit")
            Me.columnadj = Me.Columns("adj")
            Me.columndue = Me.Columns("due")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDown = Me.Columns("Down")
            Me.columnOVERPAID = Me.Columns("OVERPAID")
            Me.columnOther = Me.Columns("Other")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.column_date = New DataColumn("date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnid = New DataColumn("id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columnadj = New DataColumn("adj", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadj)
            Me.columndue = New DataColumn("due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDown = New DataColumn("Down", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDown)
            Me.columnOVERPAID = New DataColumn("OVERPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERPAID)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
            Me.columnid.AllowDBNull = false
        End Sub
        
        Public Function NewCusARLedgerDetailRow() As CusARLedgerDetailRow
            Return CType(Me.NewRow,CusARLedgerDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARLedgerDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARLedgerDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARLedgerDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowChanged(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARLedgerDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowChanging(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARLedgerDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowDeleted(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARLedgerDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetailRowDeleting(Me, New CusARLedgerDetailRowChangeEvent(CType(e.Row,CusARLedgerDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARLedgerDetailRow(ByVal row As CusARLedgerDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailRow
        Inherits DataRow
        
        Private tableCusARLedgerDetail As CusARLedgerDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARLedgerDetail = CType(Me.Table,CusARLedgerDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property _date As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail._dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail._dateColumn) = value
            End Set
        End Property
        
        Public Property id As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail.idColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.idColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.chargeColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.creditColumn) = value
            End Set
        End Property
        
        Public Property adj As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.adjColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.adjColumn) = value
            End Set
        End Property
        
        Public Property due As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.dueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.dueColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Down As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.DownColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.DownColumn) = value
            End Set
        End Property
        
        Public Property OVERPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OVERPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OVERPAIDColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail.OtherColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARLedgerDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARLedgerDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableCusARLedgerDetail._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableCusARLedgerDetail.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableCusARLedgerDetail.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.adjColumn)
        End Function
        
        Public Sub SetadjNull()
            Me(Me.tableCusARLedgerDetail.adjColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableCusARLedgerDetail.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARLedgerDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableCusARLedgerDetail.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARLedgerDetail.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableCusARLedgerDetail.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.DownColumn)
        End Function
        
        Public Sub SetDownNull()
            Me(Me.tableCusARLedgerDetail.DownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERPAIDNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OVERPAIDColumn)
        End Function
        
        Public Sub SetOVERPAIDNull()
            Me(Me.tableCusARLedgerDetail.OVERPAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tableCusARLedgerDetail.OtherColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARLedgerDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARLedgerDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARLedgerDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncredit As DataColumn
        
        Private columnadj As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDown As DataColumn
        
        Private columnOVERPAID As DataColumn
        
        Private columnOther As DataColumn
        
        Private columnBalance As DataColumn
        
        Private columnFCalc As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARLedgerSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property adjColumn As DataColumn
            Get
                Return Me.columnadj
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DownColumn As DataColumn
            Get
                Return Me.columnDown
            End Get
        End Property
        
        Friend ReadOnly Property OVERPAIDColumn As DataColumn
            Get
                Return Me.columnOVERPAID
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Friend ReadOnly Property BalanceColumn As DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        Friend ReadOnly Property FCalcColumn As DataColumn
            Get
                Return Me.columnFCalc
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARLedgerSummeryRow
            Get
                Return CType(Me.Rows(index),CusARLedgerSummeryRow)
            End Get
        End Property
        
        Public Event CusARLedgerSummeryRowChanged As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowChanging As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowDeleted As CusARLedgerSummeryRowChangeEventHandler
        
        Public Event CusARLedgerSummeryRowDeleting As CusARLedgerSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCusARLedgerSummeryRow(ByVal row As CusARLedgerSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARLedgerSummeryRow( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal charge As Decimal,  _
                    ByVal credit As Decimal,  _
                    ByVal adj As Decimal,  _
                    ByVal flag As Boolean,  _
                    ByVal OrderName As String,  _
                    ByVal Paid_amount As Decimal,  _
                    ByVal Down As Decimal,  _
                    ByVal OVERPAID As Decimal,  _
                    ByVal Other As Decimal,  _
                    ByVal Balance As Decimal,  _
                    ByVal FCalc As Boolean,  _
                    ByVal FlagShow As Boolean) As CusARLedgerSummeryRow
            Dim rowCusARLedgerSummeryRow As CusARLedgerSummeryRow = CType(Me.NewRow,CusARLedgerSummeryRow)
            rowCusARLedgerSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, charge, credit, adj, flag, OrderName, Paid_amount, Down, OVERPAID, Other, Balance, FCalc, FlagShow}
            Me.Rows.Add(rowCusARLedgerSummeryRow)
            Return rowCusARLedgerSummeryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARLedgerSummeryDataTable = CType(MyBase.Clone,CusARLedgerSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARLedgerSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columncharge = Me.Columns("charge")
            Me.columncredit = Me.Columns("credit")
            Me.columnadj = Me.Columns("adj")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDown = Me.Columns("Down")
            Me.columnOVERPAID = Me.Columns("OVERPAID")
            Me.columnOther = Me.Columns("Other")
            Me.columnBalance = Me.Columns("Balance")
            Me.columnFCalc = Me.Columns("FCalc")
            Me.columnFlagShow = Me.Columns("FlagShow")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columnadj = New DataColumn("adj", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadj)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDown = New DataColumn("Down", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDown)
            Me.columnOVERPAID = New DataColumn("OVERPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERPAID)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columnBalance = New DataColumn("Balance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalance)
            Me.columnFCalc = New DataColumn("FCalc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFCalc)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewCusARLedgerSummeryRow() As CusARLedgerSummeryRow
            Return CType(Me.NewRow,CusARLedgerSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARLedgerSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARLedgerSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARLedgerSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowChanged(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARLedgerSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowChanging(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARLedgerSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowDeleted(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARLedgerSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerSummeryRowDeleting(Me, New CusARLedgerSummeryRowChangeEvent(CType(e.Row,CusARLedgerSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARLedgerSummeryRow(ByVal row As CusARLedgerSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryRow
        Inherits DataRow
        
        Private tableCusARLedgerSummery As CusARLedgerSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARLedgerSummery = CType(Me.Table,CusARLedgerSummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARLedgerSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.chargeColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.creditColumn) = value
            End Set
        End Property
        
        Public Property adj As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.adjColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.adjColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Down As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.DownColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.DownColumn) = value
            End Set
        End Property
        
        Public Property OVERPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OVERPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OVERPAIDColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.OtherColumn) = value
            End Set
        End Property
        
        Public Property Balance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.BalanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.BalanceColumn) = value
            End Set
        End Property
        
        Public Property FCalc As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.FCalcColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.FCalcColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerSummery.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerSummery.FlagShowColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusARLedgerSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARLedgerSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARLedgerSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableCusARLedgerSummery.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableCusARLedgerSummery.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.adjColumn)
        End Function
        
        Public Sub SetadjNull()
            Me(Me.tableCusARLedgerSummery.adjColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARLedgerSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARLedgerSummery.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableCusARLedgerSummery.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.DownColumn)
        End Function
        
        Public Sub SetDownNull()
            Me(Me.tableCusARLedgerSummery.DownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERPAIDNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OVERPAIDColumn)
        End Function
        
        Public Sub SetOVERPAIDNull()
            Me(Me.tableCusARLedgerSummery.OVERPAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tableCusARLedgerSummery.OtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.BalanceColumn)
        End Function
        
        Public Sub SetBalanceNull()
            Me(Me.tableCusARLedgerSummery.BalanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFCalcNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.FCalcColumn)
        End Function
        
        Public Sub SetFCalcNull()
            Me(Me.tableCusARLedgerSummery.FCalcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerSummery.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusARLedgerSummery.FlagShowColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARLedgerSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARLedgerSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARLedgerSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_refer As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columncust_notes As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columndays_past As DataColumn
        
        Private columnar_term As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columndebt As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("CusDuePastDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_referColumn As DataColumn
            Get
                Return Me.columndate_refer
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property cust_notesColumn As DataColumn
            Get
                Return Me.columncust_notes
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property days_pastColumn As DataColumn
            Get
                Return Me.columndays_past
            End Get
        End Property
        
        Friend ReadOnly Property ar_termColumn As DataColumn
            Get
                Return Me.columnar_term
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property debtColumn As DataColumn
            Get
                Return Me.columndebt
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusDuePastDetailRow
            Get
                Return CType(Me.Rows(index),CusDuePastDetailRow)
            End Get
        End Property
        
        Public Event CusDuePastDetailRowChanged As CusDuePastDetailRowChangeEventHandler
        
        Public Event CusDuePastDetailRowChanging As CusDuePastDetailRowChangeEventHandler
        
        Public Event CusDuePastDetailRowDeleted As CusDuePastDetailRowChangeEventHandler
        
        Public Event CusDuePastDetailRowDeleting As CusDuePastDetailRowChangeEventHandler
        
        Public Overloads Sub AddCusDuePastDetailRow(ByVal row As CusDuePastDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusDuePastDetailRow( _
                    ByVal cod_customer As String,  _
                    ByVal Total As Decimal,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal date_refer As Date,  _
                    ByVal id_service_center As String,  _
                    ByVal phone_1 As String,  _
                    ByVal phone_2 As String,  _
                    ByVal cust_notes As String,  _
                    ByVal payment4 As Decimal,  _
                    ByVal payment2 As Decimal,  _
                    ByVal adjustment As Decimal,  _
                    ByVal due_date As Date,  _
                    ByVal days_past As Integer,  _
                    ByVal ar_term As String,  _
                    ByVal payment_amount As Decimal,  _
                    ByVal flag As Boolean,  _
                    ByVal debt As Decimal,  _
                    ByVal FlagShow As Boolean,  _
                    ByVal OrderName As String) As CusDuePastDetailRow
            Dim rowCusDuePastDetailRow As CusDuePastDetailRow = CType(Me.NewRow,CusDuePastDetailRow)
            rowCusDuePastDetailRow.ItemArray = New Object() {cod_customer, Total, f_name, name, complete_name, date_refer, id_service_center, phone_1, phone_2, cust_notes, payment4, payment2, adjustment, due_date, days_past, ar_term, payment_amount, flag, debt, FlagShow, OrderName}
            Me.Rows.Add(rowCusDuePastDetailRow)
            Return rowCusDuePastDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusDuePastDetailDataTable = CType(MyBase.Clone,CusDuePastDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusDuePastDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnTotal = Me.Columns("Total")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_refer = Me.Columns("date_refer")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columncust_notes = Me.Columns("cust_notes")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columndue_date = Me.Columns("due_date")
            Me.columndays_past = Me.Columns("days_past")
            Me.columnar_term = Me.Columns("ar_term")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag = Me.Columns("flag")
            Me.columndebt = Me.Columns("debt")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_refer = New DataColumn("date_refer", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_refer)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columncust_notes = New DataColumn("cust_notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncust_notes)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columndue_date = New DataColumn("due_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columndays_past = New DataColumn("days_past", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays_past)
            Me.columnar_term = New DataColumn("ar_term", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnar_term)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columndebt = New DataColumn("debt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebt)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncod_customer.AllowDBNull = false
            Me.columnid_service_center.AllowDBNull = false
        End Sub
        
        Public Function NewCusDuePastDetailRow() As CusDuePastDetailRow
            Return CType(Me.NewRow,CusDuePastDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusDuePastDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusDuePastDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusDuePastDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent CusDuePastDetailRowChanged(Me, New CusDuePastDetailRowChangeEvent(CType(e.Row,CusDuePastDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusDuePastDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent CusDuePastDetailRowChanging(Me, New CusDuePastDetailRowChangeEvent(CType(e.Row,CusDuePastDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusDuePastDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusDuePastDetailRowDeleted(Me, New CusDuePastDetailRowChangeEvent(CType(e.Row,CusDuePastDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusDuePastDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusDuePastDetailRowDeleting(Me, New CusDuePastDetailRowChangeEvent(CType(e.Row,CusDuePastDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusDuePastDetailRow(ByVal row As CusDuePastDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastDetailRow
        Inherits DataRow
        
        Private tableCusDuePastDetail As CusDuePastDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusDuePastDetail = CType(Me.Table,CusDuePastDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusDuePastDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusDuePastDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.TotalColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_refer As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.date_referColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.date_referColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Return CType(Me(Me.tableCusDuePastDetail.id_service_centerColumn),String)
            End Get
            Set
                Me(Me.tableCusDuePastDetail.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.phone_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.phone_2Column) = value
            End Set
        End Property
        
        Public Property cust_notes As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.cust_notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.cust_notesColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property due_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.due_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.due_dateColumn) = value
            End Set
        End Property
        
        Public Property days_past As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.days_pastColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.days_pastColumn) = value
            End Set
        End Property
        
        Public Property ar_term As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.ar_termColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.ar_termColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.flagColumn) = value
            End Set
        End Property
        
        Public Property debt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.debtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.debtColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastDetail.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastDetail.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableCusDuePastDetail.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusDuePastDetail.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusDuePastDetail.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusDuePastDetail.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_referNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.date_referColumn)
        End Function
        
        Public Sub Setdate_referNull()
            Me(Me.tableCusDuePastDetail.date_referColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableCusDuePastDetail.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tableCusDuePastDetail.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscust_notesNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.cust_notesColumn)
        End Function
        
        Public Sub Setcust_notesNull()
            Me(Me.tableCusDuePastDetail.cust_notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableCusDuePastDetail.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableCusDuePastDetail.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableCusDuePastDetail.adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tableCusDuePastDetail.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdays_pastNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.days_pastColumn)
        End Function
        
        Public Sub Setdays_pastNull()
            Me(Me.tableCusDuePastDetail.days_pastColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isar_termNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.ar_termColumn)
        End Function
        
        Public Sub Setar_termNull()
            Me(Me.tableCusDuePastDetail.ar_termColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableCusDuePastDetail.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusDuePastDetail.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdebtNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.debtColumn)
        End Function
        
        Public Sub SetdebtNull()
            Me(Me.tableCusDuePastDetail.debtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusDuePastDetail.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastDetail.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusDuePastDetail.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusDuePastDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusDuePastDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusDuePastDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastSummeryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columndebt As DataColumn
        
        Private columnlast_pay As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnamount_receive As DataColumn
        
        Friend Sub New()
            MyBase.New("CusDuePastSummery")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property debtColumn As DataColumn
            Get
                Return Me.columndebt
            End Get
        End Property
        
        Friend ReadOnly Property last_payColumn As DataColumn
            Get
                Return Me.columnlast_pay
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property amount_receiveColumn As DataColumn
            Get
                Return Me.columnamount_receive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusDuePastSummeryRow
            Get
                Return CType(Me.Rows(index),CusDuePastSummeryRow)
            End Get
        End Property
        
        Public Event CusDuePastSummeryRowChanged As CusDuePastSummeryRowChangeEventHandler
        
        Public Event CusDuePastSummeryRowChanging As CusDuePastSummeryRowChangeEventHandler
        
        Public Event CusDuePastSummeryRowDeleted As CusDuePastSummeryRowChangeEventHandler
        
        Public Event CusDuePastSummeryRowDeleting As CusDuePastSummeryRowChangeEventHandler
        
        Public Overloads Sub AddCusDuePastSummeryRow(ByVal row As CusDuePastSummeryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusDuePastSummeryRow(ByVal cod_customer As String, ByVal f_name As String, ByVal name As String, ByVal complete_name As String, ByVal payment4 As Decimal, ByVal payment2 As Decimal, ByVal adjustment As Decimal, ByVal payment_amount As Decimal, ByVal flag As Boolean, ByVal phone_1 As String, ByVal debt As Decimal, ByVal last_pay As Date, ByVal FlagShow As Boolean, ByVal OrderName As String, ByVal amount_receive As Decimal) As CusDuePastSummeryRow
            Dim rowCusDuePastSummeryRow As CusDuePastSummeryRow = CType(Me.NewRow,CusDuePastSummeryRow)
            rowCusDuePastSummeryRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, payment4, payment2, adjustment, payment_amount, flag, phone_1, debt, last_pay, FlagShow, OrderName, amount_receive}
            Me.Rows.Add(rowCusDuePastSummeryRow)
            Return rowCusDuePastSummeryRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As CusDuePastSummeryRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),CusDuePastSummeryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusDuePastSummeryDataTable = CType(MyBase.Clone,CusDuePastSummeryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusDuePastSummeryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag = Me.Columns("flag")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columndebt = Me.Columns("debt")
            Me.columnlast_pay = Me.Columns("last_pay")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnamount_receive = Me.Columns("amount_receive")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columndebt = New DataColumn("debt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebt)
            Me.columnlast_pay = New DataColumn("last_pay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_pay)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnamount_receive = New DataColumn("amount_receive", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_receive)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintARCusKey6", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewCusDuePastSummeryRow() As CusDuePastSummeryRow
            Return CType(Me.NewRow,CusDuePastSummeryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusDuePastSummeryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusDuePastSummeryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusDuePastSummeryRowChangedEvent) Is Nothing) Then
                RaiseEvent CusDuePastSummeryRowChanged(Me, New CusDuePastSummeryRowChangeEvent(CType(e.Row,CusDuePastSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusDuePastSummeryRowChangingEvent) Is Nothing) Then
                RaiseEvent CusDuePastSummeryRowChanging(Me, New CusDuePastSummeryRowChangeEvent(CType(e.Row,CusDuePastSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusDuePastSummeryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CusDuePastSummeryRowDeleted(Me, New CusDuePastSummeryRowChangeEvent(CType(e.Row,CusDuePastSummeryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusDuePastSummeryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CusDuePastSummeryRowDeleting(Me, New CusDuePastSummeryRowChangeEvent(CType(e.Row,CusDuePastSummeryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusDuePastSummeryRow(ByVal row As CusDuePastSummeryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastSummeryRow
        Inherits DataRow
        
        Private tableCusDuePastSummery As CusDuePastSummeryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusDuePastSummery = CType(Me.Table,CusDuePastSummeryDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusDuePastSummery.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusDuePastSummery.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.payment4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.payment2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.adjustmentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.flagColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.phone_1Column) = value
            End Set
        End Property
        
        Public Property debt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.debtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.debtColumn) = value
            End Set
        End Property
        
        Public Property last_pay As Date
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.last_payColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.last_payColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property amount_receive As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusDuePastSummery.amount_receiveColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusDuePastSummery.amount_receiveColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusDuePastSummery.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusDuePastSummery.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusDuePastSummery.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tableCusDuePastSummery.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tableCusDuePastSummery.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tableCusDuePastSummery.adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableCusDuePastSummery.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusDuePastSummery.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableCusDuePastSummery.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsdebtNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.debtColumn)
        End Function
        
        Public Sub SetdebtNull()
            Me(Me.tableCusDuePastSummery.debtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_payNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.last_payColumn)
        End Function
        
        Public Sub Setlast_payNull()
            Me(Me.tableCusDuePastSummery.last_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusDuePastSummery.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusDuePastSummery.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_receiveNull() As Boolean
            Return Me.IsNull(Me.tableCusDuePastSummery.amount_receiveColumn)
        End Function
        
        Public Sub Setamount_receiveNull()
            Me(Me.tableCusDuePastSummery.amount_receiveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusDuePastSummeryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusDuePastSummeryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusDuePastSummeryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusDuePastSummeryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columnBalanceAmount As DataColumn
        
        Private columncredit As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnc1 As DataColumn
        
        Private columnc2 As DataColumn
        
        Private columnc3 As DataColumn
        
        Private columnc4 As DataColumn
        
        Private columnc5 As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("Aging")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property BalanceAmountColumn As DataColumn
            Get
                Return Me.columnBalanceAmount
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property c1Column As DataColumn
            Get
                Return Me.columnc1
            End Get
        End Property
        
        Friend ReadOnly Property c2Column As DataColumn
            Get
                Return Me.columnc2
            End Get
        End Property
        
        Friend ReadOnly Property c3Column As DataColumn
            Get
                Return Me.columnc3
            End Get
        End Property
        
        Friend ReadOnly Property c4Column As DataColumn
            Get
                Return Me.columnc4
            End Get
        End Property
        
        Friend ReadOnly Property c5Column As DataColumn
            Get
                Return Me.columnc5
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AgingRow
            Get
                Return CType(Me.Rows(index),AgingRow)
            End Get
        End Property
        
        Public Event AgingRowChanged As AgingRowChangeEventHandler
        
        Public Event AgingRowChanging As AgingRowChangeEventHandler
        
        Public Event AgingRowDeleted As AgingRowChangeEventHandler
        
        Public Event AgingRowDeleting As AgingRowChangeEventHandler
        
        Public Overloads Sub AddAgingRow(ByVal row As AgingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAgingRow(ByVal cod_customer As String, ByVal f_name As String, ByVal name As String, ByVal BalanceAmount As Decimal, ByVal credit As Decimal, ByVal charge As Decimal, ByVal complete_name As String, ByVal flag As Boolean, ByVal FlagShow As Boolean, ByVal c1 As Decimal, ByVal c2 As Decimal, ByVal c3 As Decimal, ByVal c4 As Decimal, ByVal c5 As Decimal, ByVal OrderName As String) As AgingRow
            Dim rowAgingRow As AgingRow = CType(Me.NewRow,AgingRow)
            rowAgingRow.ItemArray = New Object() {cod_customer, f_name, name, BalanceAmount, credit, charge, complete_name, flag, FlagShow, c1, c2, c3, c4, c5, OrderName}
            Me.Rows.Add(rowAgingRow)
            Return rowAgingRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As AgingRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),AgingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AgingDataTable = CType(MyBase.Clone,AgingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AgingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columnBalanceAmount = Me.Columns("BalanceAmount")
            Me.columncredit = Me.Columns("credit")
            Me.columncharge = Me.Columns("charge")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnflag = Me.Columns("flag")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnc1 = Me.Columns("c1")
            Me.columnc2 = Me.Columns("c2")
            Me.columnc3 = Me.Columns("c3")
            Me.columnc4 = Me.Columns("c4")
            Me.columnc5 = Me.Columns("c5")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnBalanceAmount = New DataColumn("BalanceAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalanceAmount)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnc1 = New DataColumn("c1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc1)
            Me.columnc2 = New DataColumn("c2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc2)
            Me.columnc3 = New DataColumn("c3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc3)
            Me.columnc4 = New DataColumn("c4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc4)
            Me.columnc5 = New DataColumn("c5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc5)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintARCusKey7", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
            Me.columnf_name.ReadOnly = true
            Me.columnname.ReadOnly = true
        End Sub
        
        Public Function NewAgingRow() As AgingRow
            Return CType(Me.NewRow,AgingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AgingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AgingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AgingRowChangedEvent) Is Nothing) Then
                RaiseEvent AgingRowChanged(Me, New AgingRowChangeEvent(CType(e.Row,AgingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AgingRowChangingEvent) Is Nothing) Then
                RaiseEvent AgingRowChanging(Me, New AgingRowChangeEvent(CType(e.Row,AgingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AgingRowDeletedEvent) Is Nothing) Then
                RaiseEvent AgingRowDeleted(Me, New AgingRowChangeEvent(CType(e.Row,AgingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AgingRowDeletingEvent) Is Nothing) Then
                RaiseEvent AgingRowDeleting(Me, New AgingRowChangeEvent(CType(e.Row,AgingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAgingRow(ByVal row As AgingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingRow
        Inherits DataRow
        
        Private tableAging As AgingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAging = CType(Me.Table,AgingDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableAging.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableAging.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableAging.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableAging.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.nameColumn) = value
            End Set
        End Property
        
        Public Property BalanceAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.BalanceAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.BalanceAmountColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.creditColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.chargeColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableAging.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAging.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.flagColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAging.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property c1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.c1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.c1Column) = value
            End Set
        End Property
        
        Public Property c2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.c2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.c2Column) = value
            End Set
        End Property
        
        Public Property c3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.c3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.c3Column) = value
            End Set
        End Property
        
        Public Property c4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.c4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.c4Column) = value
            End Set
        End Property
        
        Public Property c5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAging.c5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.c5Column) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableAging.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAging.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableAging.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableAging.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableAging.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableAging.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceAmountNull() As Boolean
            Return Me.IsNull(Me.tableAging.BalanceAmountColumn)
        End Function
        
        Public Sub SetBalanceAmountNull()
            Me(Me.tableAging.BalanceAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableAging.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableAging.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableAging.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableAging.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableAging.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableAging.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableAging.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableAging.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableAging.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableAging.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isc1Null() As Boolean
            Return Me.IsNull(Me.tableAging.c1Column)
        End Function
        
        Public Sub Setc1Null()
            Me(Me.tableAging.c1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc2Null() As Boolean
            Return Me.IsNull(Me.tableAging.c2Column)
        End Function
        
        Public Sub Setc2Null()
            Me(Me.tableAging.c2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc3Null() As Boolean
            Return Me.IsNull(Me.tableAging.c3Column)
        End Function
        
        Public Sub Setc3Null()
            Me(Me.tableAging.c3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc4Null() As Boolean
            Return Me.IsNull(Me.tableAging.c4Column)
        End Function
        
        Public Sub Setc4Null()
            Me(Me.tableAging.c4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc5Null() As Boolean
            Return Me.IsNull(Me.tableAging.c5Column)
        End Function
        
        Public Sub Setc5Null()
            Me(Me.tableAging.c5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableAging.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableAging.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AgingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AgingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AgingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnc1 As DataColumn
        
        Private columnc2 As DataColumn
        
        Private columnc3 As DataColumn
        
        Private columnc4 As DataColumn
        
        Private columnc5 As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("customerdue")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property c1Column As DataColumn
            Get
                Return Me.columnc1
            End Get
        End Property
        
        Friend ReadOnly Property c2Column As DataColumn
            Get
                Return Me.columnc2
            End Get
        End Property
        
        Friend ReadOnly Property c3Column As DataColumn
            Get
                Return Me.columnc3
            End Get
        End Property
        
        Friend ReadOnly Property c4Column As DataColumn
            Get
                Return Me.columnc4
            End Get
        End Property
        
        Friend ReadOnly Property c5Column As DataColumn
            Get
                Return Me.columnc5
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customerdueRow
            Get
                Return CType(Me.Rows(index),customerdueRow)
            End Get
        End Property
        
        Public Event customerdueRowChanged As customerdueRowChangeEventHandler
        
        Public Event customerdueRowChanging As customerdueRowChangeEventHandler
        
        Public Event customerdueRowDeleted As customerdueRowChangeEventHandler
        
        Public Event customerdueRowDeleting As customerdueRowChangeEventHandler
        
        Public Overloads Sub AddcustomerdueRow(ByVal row As customerdueRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomerdueRow(ByVal cod_customer As String, ByVal c1 As String, ByVal c2 As String, ByVal c3 As String, ByVal c4 As String, ByVal c5 As String, ByVal OrderName As String) As customerdueRow
            Dim rowcustomerdueRow As customerdueRow = CType(Me.NewRow,customerdueRow)
            rowcustomerdueRow.ItemArray = New Object() {cod_customer, c1, c2, c3, c4, c5, OrderName}
            Me.Rows.Add(rowcustomerdueRow)
            Return rowcustomerdueRow
        End Function
        
        Public Function FindBycod_customer(ByVal cod_customer As String) As customerdueRow
            Return CType(Me.Rows.Find(New Object() {cod_customer}),customerdueRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As customerdueDataTable = CType(MyBase.Clone,customerdueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New customerdueDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnc1 = Me.Columns("c1")
            Me.columnc2 = Me.Columns("c2")
            Me.columnc3 = Me.Columns("c3")
            Me.columnc4 = Me.Columns("c4")
            Me.columnc5 = Me.Columns("c5")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnc1 = New DataColumn("c1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc1)
            Me.columnc2 = New DataColumn("c2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc2)
            Me.columnc3 = New DataColumn("c3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc3)
            Me.columnc4 = New DataColumn("c4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc4)
            Me.columnc5 = New DataColumn("c5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc5)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintARCusKey8", New DataColumn() {Me.columncod_customer}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columncod_customer.Unique = true
        End Sub
        
        Public Function NewcustomerdueRow() As customerdueRow
            Return CType(Me.NewRow,customerdueRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New customerdueRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customerdueRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customerdueRowChangedEvent) Is Nothing) Then
                RaiseEvent customerdueRowChanged(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customerdueRowChangingEvent) Is Nothing) Then
                RaiseEvent customerdueRowChanging(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customerdueRowDeletedEvent) Is Nothing) Then
                RaiseEvent customerdueRowDeleted(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customerdueRowDeletingEvent) Is Nothing) Then
                RaiseEvent customerdueRowDeleting(Me, New customerdueRowChangeEvent(CType(e.Row,customerdueRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomerdueRow(ByVal row As customerdueRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueRow
        Inherits DataRow
        
        Private tablecustomerdue As customerdueDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomerdue = CType(Me.Table,customerdueDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecustomerdue.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecustomerdue.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property c1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c1Column) = value
            End Set
        End Property
        
        Public Property c2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c2Column) = value
            End Set
        End Property
        
        Public Property c3 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c3Column) = value
            End Set
        End Property
        
        Public Property c4 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c4Column) = value
            End Set
        End Property
        
        Public Property c5 As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.c5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.c5Column) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomerdue.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomerdue.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function Isc1Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c1Column)
        End Function
        
        Public Sub Setc1Null()
            Me(Me.tablecustomerdue.c1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc2Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c2Column)
        End Function
        
        Public Sub Setc2Null()
            Me(Me.tablecustomerdue.c2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc3Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c3Column)
        End Function
        
        Public Sub Setc3Null()
            Me(Me.tablecustomerdue.c3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc4Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c4Column)
        End Function
        
        Public Sub Setc4Null()
            Me(Me.tablecustomerdue.c4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isc5Null() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.c5Column)
        End Function
        
        Public Sub Setc5Null()
            Me(Me.tablecustomerdue.c5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tablecustomerdue.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tablecustomerdue.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class customerdueRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customerdueRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As customerdueRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customerdueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columndue As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnpaid As DataColumn
        
        Private columnid1 As DataColumn
        
        Private columnid2 As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("AgingDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property paidColumn As DataColumn
            Get
                Return Me.columnpaid
            End Get
        End Property
        
        Friend ReadOnly Property id1Column As DataColumn
            Get
                Return Me.columnid1
            End Get
        End Property
        
        Friend ReadOnly Property id2Column As DataColumn
            Get
                Return Me.columnid2
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AgingDetailRow
            Get
                Return CType(Me.Rows(index),AgingDetailRow)
            End Get
        End Property
        
        Public Event AgingDetailRowChanged As AgingDetailRowChangeEventHandler
        
        Public Event AgingDetailRowChanging As AgingDetailRowChangeEventHandler
        
        Public Event AgingDetailRowDeleted As AgingDetailRowChangeEventHandler
        
        Public Event AgingDetailRowDeleting As AgingDetailRowChangeEventHandler
        
        Public Overloads Sub AddAgingDetailRow(ByVal row As AgingDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAgingDetailRow(ByVal cod_customer As String, ByVal due As String, ByVal pay As Decimal, ByVal paid As Decimal, ByVal id1 As String, ByVal id2 As String, ByVal OrderName As String) As AgingDetailRow
            Dim rowAgingDetailRow As AgingDetailRow = CType(Me.NewRow,AgingDetailRow)
            rowAgingDetailRow.ItemArray = New Object() {cod_customer, due, pay, paid, id1, id2, OrderName}
            Me.Rows.Add(rowAgingDetailRow)
            Return rowAgingDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AgingDetailDataTable = CType(MyBase.Clone,AgingDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AgingDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columndue = Me.Columns("due")
            Me.columnpay = Me.Columns("pay")
            Me.columnpaid = Me.Columns("paid")
            Me.columnid1 = Me.Columns("id1")
            Me.columnid2 = Me.Columns("id2")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columndue = New DataColumn("due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnpaid = New DataColumn("paid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid)
            Me.columnid1 = New DataColumn("id1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid1)
            Me.columnid2 = New DataColumn("id2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid2)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncod_customer.AllowDBNull = false
        End Sub
        
        Public Function NewAgingDetailRow() As AgingDetailRow
            Return CType(Me.NewRow,AgingDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AgingDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AgingDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AgingDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AgingDetailRowChanged(Me, New AgingDetailRowChangeEvent(CType(e.Row,AgingDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AgingDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AgingDetailRowChanging(Me, New AgingDetailRowChangeEvent(CType(e.Row,AgingDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AgingDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AgingDetailRowDeleted(Me, New AgingDetailRowChangeEvent(CType(e.Row,AgingDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AgingDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AgingDetailRowDeleting(Me, New AgingDetailRowChangeEvent(CType(e.Row,AgingDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAgingDetailRow(ByVal row As AgingDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingDetailRow
        Inherits DataRow
        
        Private tableAgingDetail As AgingDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAgingDetail = CType(Me.Table,AgingDetailDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableAgingDetail.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableAgingDetail.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property due As String
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.dueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.dueColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.payColumn) = value
            End Set
        End Property
        
        Public Property paid As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.paidColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.paidColumn) = value
            End Set
        End Property
        
        Public Property id1 As String
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.id1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.id1Column) = value
            End Set
        End Property
        
        Public Property id2 As String
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.id2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.id2Column) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableAgingDetail.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAgingDetail.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableAgingDetail.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tableAgingDetail.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspaidNull() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.paidColumn)
        End Function
        
        Public Sub SetpaidNull()
            Me(Me.tableAgingDetail.paidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid1Null() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.id1Column)
        End Function
        
        Public Sub Setid1Null()
            Me(Me.tableAgingDetail.id1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isid2Null() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.id2Column)
        End Function
        
        Public Sub Setid2Null()
            Me(Me.tableAgingDetail.id2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableAgingDetail.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableAgingDetail.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AgingDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AgingDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AgingDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AgingDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PastDueDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As DataColumn
        
        Private columndue As DataColumn
        
        Private columnpay As DataColumn
        
        Private columnpaid As DataColumn
        
        Private columndays As DataColumn
        
        Private columnARTerm As DataColumn
        
        Private columnid1 As DataColumn
        
        Private columnid2 As DataColumn
        
        Friend Sub New()
            MyBase.New("PastDue")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property payColumn As DataColumn
            Get
                Return Me.columnpay
            End Get
        End Property
        
        Friend ReadOnly Property paidColumn As DataColumn
            Get
                Return Me.columnpaid
            End Get
        End Property
        
        Friend ReadOnly Property daysColumn As DataColumn
            Get
                Return Me.columndays
            End Get
        End Property
        
        Friend ReadOnly Property ARTermColumn As DataColumn
            Get
                Return Me.columnARTerm
            End Get
        End Property
        
        Friend ReadOnly Property id1Column As DataColumn
            Get
                Return Me.columnid1
            End Get
        End Property
        
        Friend ReadOnly Property id2Column As DataColumn
            Get
                Return Me.columnid2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PastDueRow
            Get
                Return CType(Me.Rows(index),PastDueRow)
            End Get
        End Property
        
        Public Event PastDueRowChanged As PastDueRowChangeEventHandler
        
        Public Event PastDueRowChanging As PastDueRowChangeEventHandler
        
        Public Event PastDueRowDeleted As PastDueRowChangeEventHandler
        
        Public Event PastDueRowDeleting As PastDueRowChangeEventHandler
        
        Public Overloads Sub AddPastDueRow(ByVal row As PastDueRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPastDueRow(ByVal id As String, ByVal due As String, ByVal pay As Decimal, ByVal paid As Decimal, ByVal days As Integer, ByVal ARTerm As String, ByVal id1 As String, ByVal id2 As String) As PastDueRow
            Dim rowPastDueRow As PastDueRow = CType(Me.NewRow,PastDueRow)
            rowPastDueRow.ItemArray = New Object() {id, due, pay, paid, days, ARTerm, id1, id2}
            Me.Rows.Add(rowPastDueRow)
            Return rowPastDueRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PastDueDataTable = CType(MyBase.Clone,PastDueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PastDueDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid = Me.Columns("id")
            Me.columndue = Me.Columns("due")
            Me.columnpay = Me.Columns("pay")
            Me.columnpaid = Me.Columns("paid")
            Me.columndays = Me.Columns("days")
            Me.columnARTerm = Me.Columns("ARTerm")
            Me.columnid1 = Me.Columns("id1")
            Me.columnid2 = Me.Columns("id2")
        End Sub
        
        Private Sub InitClass()
            Me.columnid = New DataColumn("id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columndue = New DataColumn("due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnpay = New DataColumn("pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpay)
            Me.columnpaid = New DataColumn("paid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid)
            Me.columndays = New DataColumn("days", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndays)
            Me.columnARTerm = New DataColumn("ARTerm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARTerm)
            Me.columnid1 = New DataColumn("id1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid1)
            Me.columnid2 = New DataColumn("id2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid2)
            Me.columnid.AllowDBNull = false
        End Sub
        
        Public Function NewPastDueRow() As PastDueRow
            Return CType(Me.NewRow,PastDueRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PastDueRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PastDueRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PastDueRowChangedEvent) Is Nothing) Then
                RaiseEvent PastDueRowChanged(Me, New PastDueRowChangeEvent(CType(e.Row,PastDueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PastDueRowChangingEvent) Is Nothing) Then
                RaiseEvent PastDueRowChanging(Me, New PastDueRowChangeEvent(CType(e.Row,PastDueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PastDueRowDeletedEvent) Is Nothing) Then
                RaiseEvent PastDueRowDeleted(Me, New PastDueRowChangeEvent(CType(e.Row,PastDueRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PastDueRowDeletingEvent) Is Nothing) Then
                RaiseEvent PastDueRowDeleting(Me, New PastDueRowChangeEvent(CType(e.Row,PastDueRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePastDueRow(ByVal row As PastDueRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PastDueRow
        Inherits DataRow
        
        Private tablePastDue As PastDueDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePastDue = CType(Me.Table,PastDueDataTable)
        End Sub
        
        Public Property id As String
            Get
                Return CType(Me(Me.tablePastDue.idColumn),String)
            End Get
            Set
                Me(Me.tablePastDue.idColumn) = value
            End Set
        End Property
        
        Public Property due As String
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.dueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.dueColumn) = value
            End Set
        End Property
        
        Public Property pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.payColumn) = value
            End Set
        End Property
        
        Public Property paid As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.paidColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.paidColumn) = value
            End Set
        End Property
        
        Public Property days As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.daysColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.daysColumn) = value
            End Set
        End Property
        
        Public Property ARTerm As String
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.ARTermColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.ARTermColumn) = value
            End Set
        End Property
        
        Public Property id1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.id1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.id1Column) = value
            End Set
        End Property
        
        Public Property id2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePastDue.id2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePastDue.id2Column) = value
            End Set
        End Property
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tablePastDue.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tablePastDue.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspayNull() As Boolean
            Return Me.IsNull(Me.tablePastDue.payColumn)
        End Function
        
        Public Sub SetpayNull()
            Me(Me.tablePastDue.payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspaidNull() As Boolean
            Return Me.IsNull(Me.tablePastDue.paidColumn)
        End Function
        
        Public Sub SetpaidNull()
            Me(Me.tablePastDue.paidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdaysNull() As Boolean
            Return Me.IsNull(Me.tablePastDue.daysColumn)
        End Function
        
        Public Sub SetdaysNull()
            Me(Me.tablePastDue.daysColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARTermNull() As Boolean
            Return Me.IsNull(Me.tablePastDue.ARTermColumn)
        End Function
        
        Public Sub SetARTermNull()
            Me(Me.tablePastDue.ARTermColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid1Null() As Boolean
            Return Me.IsNull(Me.tablePastDue.id1Column)
        End Function
        
        Public Sub Setid1Null()
            Me(Me.tablePastDue.id1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isid2Null() As Boolean
            Return Me.IsNull(Me.tablePastDue.id2Column)
        End Function
        
        Public Sub Setid2Null()
            Me(Me.tablePastDue.id2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PastDueRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PastDueRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PastDueRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PastDueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columnNoInvoice As DataColumn
        
        Private columntotal As DataColumn
        
        Private columnpayment4 As DataColumn
        
        Private columnpayment2 As DataColumn
        
        Private columnadjustment As DataColumn
        
        Private columnpayment_amount As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnOrderName As DataColumn
        
        Friend Sub New()
            MyBase.New("cust_trtab_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property NoInvoiceColumn As DataColumn
            Get
                Return Me.columnNoInvoice
            End Get
        End Property
        
        Friend ReadOnly Property totalColumn As DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        Friend ReadOnly Property payment4Column As DataColumn
            Get
                Return Me.columnpayment4
            End Get
        End Property
        
        Friend ReadOnly Property payment2Column As DataColumn
            Get
                Return Me.columnpayment2
            End Get
        End Property
        
        Friend ReadOnly Property adjustmentColumn As DataColumn
            Get
                Return Me.columnadjustment
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cust_trtab_mainRow
            Get
                Return CType(Me.Rows(index),cust_trtab_mainRow)
            End Get
        End Property
        
        Public Event cust_trtab_mainRowChanged As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowChanging As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleted As cust_trtab_mainRowChangeEventHandler
        
        Public Event cust_trtab_mainRowDeleting As cust_trtab_mainRowChangeEventHandler
        
        Public Overloads Sub Addcust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcust_trtab_mainRow(ByVal cod_customer As String, ByVal name As String, ByVal complete_name As String, ByVal NoInvoice As Integer, ByVal total As Decimal, ByVal payment4 As Integer, ByVal payment2 As Integer, ByVal adjustment As Integer, ByVal payment_amount As Decimal, ByVal flag As Integer, ByVal OrderName As String) As cust_trtab_mainRow
            Dim rowcust_trtab_mainRow As cust_trtab_mainRow = CType(Me.NewRow,cust_trtab_mainRow)
            rowcust_trtab_mainRow.ItemArray = New Object() {cod_customer, name, complete_name, NoInvoice, total, payment4, payment2, adjustment, payment_amount, flag, OrderName}
            Me.Rows.Add(rowcust_trtab_mainRow)
            Return rowcust_trtab_mainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cust_trtab_mainDataTable = CType(MyBase.Clone,cust_trtab_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cust_trtab_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columnNoInvoice = Me.Columns("NoInvoice")
            Me.columntotal = Me.Columns("total")
            Me.columnpayment4 = Me.Columns("payment4")
            Me.columnpayment2 = Me.Columns("payment2")
            Me.columnadjustment = Me.Columns("adjustment")
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnflag = Me.Columns("flag")
            Me.columnOrderName = Me.Columns("OrderName")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columnNoInvoice = New DataColumn("NoInvoice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoInvoice)
            Me.columntotal = New DataColumn("total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotal)
            Me.columnpayment4 = New DataColumn("payment4", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment4)
            Me.columnpayment2 = New DataColumn("payment2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment2)
            Me.columnadjustment = New DataColumn("adjustment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadjustment)
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnflag = New DataColumn("flag", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
            Me.columncomplete_name.ReadOnly = true
            Me.columnNoInvoice.ReadOnly = true
            Me.columntotal.ReadOnly = true
            Me.columnpayment4.ReadOnly = true
            Me.columnpayment2.ReadOnly = true
            Me.columnadjustment.ReadOnly = true
            Me.columnpayment_amount.ReadOnly = true
            Me.columnflag.ReadOnly = true
        End Sub
        
        Public Function Newcust_trtab_mainRow() As cust_trtab_mainRow
            Return CType(Me.NewRow,cust_trtab_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cust_trtab_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cust_trtab_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cust_trtab_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanged(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cust_trtab_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowChanging(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cust_trtab_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleted(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cust_trtab_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent cust_trtab_mainRowDeleting(Me, New cust_trtab_mainRowChangeEvent(CType(e.Row,cust_trtab_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removecust_trtab_mainRow(ByVal row As cust_trtab_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRow
        Inherits DataRow
        
        Private tablecust_trtab_main As cust_trtab_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecust_trtab_main = CType(Me.Table,cust_trtab_mainDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tablecust_trtab_main.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tablecust_trtab_main.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property NoInvoice As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.NoInvoiceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.NoInvoiceColumn) = value
            End Set
        End Property
        
        Public Property total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.totalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.totalColumn) = value
            End Set
        End Property
        
        Public Property payment4 As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.payment4Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.payment4Column) = value
            End Set
        End Property
        
        Public Property payment2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.payment2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.payment2Column) = value
            End Set
        End Property
        
        Public Property adjustment As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.adjustmentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.adjustmentColumn) = value
            End Set
        End Property
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property flag As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.flagColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.flagColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tablecust_trtab_main.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecust_trtab_main.OrderNameColumn) = value
            End Set
        End Property
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablecust_trtab_main.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tablecust_trtab_main.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoInvoiceNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.NoInvoiceColumn)
        End Function
        
        Public Sub SetNoInvoiceNull()
            Me(Me.tablecust_trtab_main.NoInvoiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.totalColumn)
        End Function
        
        Public Sub SettotalNull()
            Me(Me.tablecust_trtab_main.totalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment4Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.payment4Column)
        End Function
        
        Public Sub Setpayment4Null()
            Me(Me.tablecust_trtab_main.payment4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment2Null() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.payment2Column)
        End Function
        
        Public Sub Setpayment2Null()
            Me(Me.tablecust_trtab_main.payment2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjustmentNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.adjustmentColumn)
        End Function
        
        Public Sub SetadjustmentNull()
            Me(Me.tablecust_trtab_main.adjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tablecust_trtab_main.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tablecust_trtab_main.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tablecust_trtab_main.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tablecust_trtab_main.OrderNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cust_trtab_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cust_trtab_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cust_trtab_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cust_trtab_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetail1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private column_date As DataColumn
        
        Private columnid As DataColumn
        
        Private columncharge As DataColumn
        
        Private columncredit As DataColumn
        
        Private columnadj As DataColumn
        
        Private columndue As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnFlagShow As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnShowEmptyLine As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnPaid_amount As DataColumn
        
        Private columnDown As DataColumn
        
        Private columnOVERPAID As DataColumn
        
        Private columnOther As DataColumn
        
        Private columnBalance As DataColumn
        
        Friend Sub New()
            MyBase.New("CusARLedgerDetail1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property chargeColumn As DataColumn
            Get
                Return Me.columncharge
            End Get
        End Property
        
        Friend ReadOnly Property creditColumn As DataColumn
            Get
                Return Me.columncredit
            End Get
        End Property
        
        Friend ReadOnly Property adjColumn As DataColumn
            Get
                Return Me.columnadj
            End Get
        End Property
        
        Friend ReadOnly Property dueColumn As DataColumn
            Get
                Return Me.columndue
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property FlagShowColumn As DataColumn
            Get
                Return Me.columnFlagShow
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property ShowEmptyLineColumn As DataColumn
            Get
                Return Me.columnShowEmptyLine
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property Paid_amountColumn As DataColumn
            Get
                Return Me.columnPaid_amount
            End Get
        End Property
        
        Friend ReadOnly Property DownColumn As DataColumn
            Get
                Return Me.columnDown
            End Get
        End Property
        
        Friend ReadOnly Property OVERPAIDColumn As DataColumn
            Get
                Return Me.columnOVERPAID
            End Get
        End Property
        
        Friend ReadOnly Property OtherColumn As DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        Friend ReadOnly Property BalanceColumn As DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CusARLedgerDetail1Row
            Get
                Return CType(Me.Rows(index),CusARLedgerDetail1Row)
            End Get
        End Property
        
        Public Event CusARLedgerDetail1RowChanged As CusARLedgerDetail1RowChangeEventHandler
        
        Public Event CusARLedgerDetail1RowChanging As CusARLedgerDetail1RowChangeEventHandler
        
        Public Event CusARLedgerDetail1RowDeleted As CusARLedgerDetail1RowChangeEventHandler
        
        Public Event CusARLedgerDetail1RowDeleting As CusARLedgerDetail1RowChangeEventHandler
        
        Public Overloads Sub AddCusARLedgerDetail1Row(ByVal row As CusARLedgerDetail1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCusARLedgerDetail1Row( _
                    ByVal cod_customer As String,  _
                    ByVal f_name As String,  _
                    ByVal name As String,  _
                    ByVal complete_name As String,  _
                    ByVal _date As String,  _
                    ByVal id As String,  _
                    ByVal charge As Decimal,  _
                    ByVal credit As Decimal,  _
                    ByVal adj As Decimal,  _
                    ByVal due As String,  _
                    ByVal flag As Boolean,  _
                    ByVal FlagShow As Boolean,  _
                    ByVal OrderDate As String,  _
                    ByVal ShowEmptyLine As Boolean,  _
                    ByVal OrderName As String,  _
                    ByVal Paid_amount As Decimal,  _
                    ByVal Down As Decimal,  _
                    ByVal OVERPAID As Decimal,  _
                    ByVal Other As Decimal,  _
                    ByVal Balance As Decimal) As CusARLedgerDetail1Row
            Dim rowCusARLedgerDetail1Row As CusARLedgerDetail1Row = CType(Me.NewRow,CusARLedgerDetail1Row)
            rowCusARLedgerDetail1Row.ItemArray = New Object() {cod_customer, f_name, name, complete_name, _date, id, charge, credit, adj, due, flag, FlagShow, OrderDate, ShowEmptyLine, OrderName, Paid_amount, Down, OVERPAID, Other, Balance}
            Me.Rows.Add(rowCusARLedgerDetail1Row)
            Return rowCusARLedgerDetail1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CusARLedgerDetail1DataTable = CType(MyBase.Clone,CusARLedgerDetail1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CusARLedgerDetail1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.column_date = Me.Columns("date")
            Me.columnid = Me.Columns("id")
            Me.columncharge = Me.Columns("charge")
            Me.columncredit = Me.Columns("credit")
            Me.columnadj = Me.Columns("adj")
            Me.columndue = Me.Columns("due")
            Me.columnflag = Me.Columns("flag")
            Me.columnFlagShow = Me.Columns("FlagShow")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnShowEmptyLine = Me.Columns("ShowEmptyLine")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnPaid_amount = Me.Columns("Paid_amount")
            Me.columnDown = Me.Columns("Down")
            Me.columnOVERPAID = Me.Columns("OVERPAID")
            Me.columnOther = Me.Columns("Other")
            Me.columnBalance = Me.Columns("Balance")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.column_date = New DataColumn("date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.columnid = New DataColumn("id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columncharge = New DataColumn("charge", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncharge)
            Me.columncredit = New DataColumn("credit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredit)
            Me.columnadj = New DataColumn("adj", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadj)
            Me.columndue = New DataColumn("due", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnFlagShow = New DataColumn("FlagShow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagShow)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnShowEmptyLine = New DataColumn("ShowEmptyLine", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShowEmptyLine)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnPaid_amount = New DataColumn("Paid_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_amount)
            Me.columnDown = New DataColumn("Down", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDown)
            Me.columnOVERPAID = New DataColumn("OVERPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERPAID)
            Me.columnOther = New DataColumn("Other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther)
            Me.columnBalance = New DataColumn("Balance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBalance)
            Me.columncod_customer.AllowDBNull = false
            Me.columnname.ReadOnly = true
            Me.columnid.AllowDBNull = false
        End Sub
        
        Public Function NewCusARLedgerDetail1Row() As CusARLedgerDetail1Row
            Return CType(Me.NewRow,CusARLedgerDetail1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CusARLedgerDetail1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CusARLedgerDetail1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CusARLedgerDetail1RowChangedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetail1RowChanged(Me, New CusARLedgerDetail1RowChangeEvent(CType(e.Row,CusARLedgerDetail1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CusARLedgerDetail1RowChangingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetail1RowChanging(Me, New CusARLedgerDetail1RowChangeEvent(CType(e.Row,CusARLedgerDetail1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CusARLedgerDetail1RowDeletedEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetail1RowDeleted(Me, New CusARLedgerDetail1RowChangeEvent(CType(e.Row,CusARLedgerDetail1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CusARLedgerDetail1RowDeletingEvent) Is Nothing) Then
                RaiseEvent CusARLedgerDetail1RowDeleting(Me, New CusARLedgerDetail1RowChangeEvent(CType(e.Row,CusARLedgerDetail1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCusARLedgerDetail1Row(ByVal row As CusARLedgerDetail1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetail1Row
        Inherits DataRow
        
        Private tableCusARLedgerDetail1 As CusARLedgerDetail1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCusARLedgerDetail1 = CType(Me.Table,CusARLedgerDetail1DataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail1.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property _date As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1._dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1._dateColumn) = value
            End Set
        End Property
        
        Public Property id As String
            Get
                Return CType(Me(Me.tableCusARLedgerDetail1.idColumn),String)
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.idColumn) = value
            End Set
        End Property
        
        Public Property charge As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.chargeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.chargeColumn) = value
            End Set
        End Property
        
        Public Property credit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.creditColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.creditColumn) = value
            End Set
        End Property
        
        Public Property adj As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.adjColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.adjColumn) = value
            End Set
        End Property
        
        Public Property due As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.dueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.dueColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.flagColumn) = value
            End Set
        End Property
        
        Public Property FlagShow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.FlagShowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.FlagShowColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property ShowEmptyLine As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.ShowEmptyLineColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.ShowEmptyLineColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property Paid_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.Paid_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.Paid_amountColumn) = value
            End Set
        End Property
        
        Public Property Down As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.DownColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.DownColumn) = value
            End Set
        End Property
        
        Public Property OVERPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.OVERPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.OVERPAIDColumn) = value
            End Set
        End Property
        
        Public Property Other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.OtherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.OtherColumn) = value
            End Set
        End Property
        
        Public Property Balance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCusARLedgerDetail1.BalanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCusARLedgerDetail1.BalanceColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableCusARLedgerDetail1.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableCusARLedgerDetail1.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableCusARLedgerDetail1.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_dateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1._dateColumn)
        End Function
        
        Public Sub Set_dateNull()
            Me(Me.tableCusARLedgerDetail1._dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschargeNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.chargeColumn)
        End Function
        
        Public Sub SetchargeNull()
            Me(Me.tableCusARLedgerDetail1.chargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.creditColumn)
        End Function
        
        Public Sub SetcreditNull()
            Me(Me.tableCusARLedgerDetail1.creditColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadjNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.adjColumn)
        End Function
        
        Public Sub SetadjNull()
            Me(Me.tableCusARLedgerDetail1.adjColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdueNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.dueColumn)
        End Function
        
        Public Sub SetdueNull()
            Me(Me.tableCusARLedgerDetail1.dueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableCusARLedgerDetail1.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagShowNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.FlagShowColumn)
        End Function
        
        Public Sub SetFlagShowNull()
            Me(Me.tableCusARLedgerDetail1.FlagShowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableCusARLedgerDetail1.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShowEmptyLineNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.ShowEmptyLineColumn)
        End Function
        
        Public Sub SetShowEmptyLineNull()
            Me(Me.tableCusARLedgerDetail1.ShowEmptyLineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableCusARLedgerDetail1.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_amountNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.Paid_amountColumn)
        End Function
        
        Public Sub SetPaid_amountNull()
            Me(Me.tableCusARLedgerDetail1.Paid_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.DownColumn)
        End Function
        
        Public Sub SetDownNull()
            Me(Me.tableCusARLedgerDetail1.DownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERPAIDNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.OVERPAIDColumn)
        End Function
        
        Public Sub SetOVERPAIDNull()
            Me(Me.tableCusARLedgerDetail1.OVERPAIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.OtherColumn)
        End Function
        
        Public Sub SetOtherNull()
            Me(Me.tableCusARLedgerDetail1.OtherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableCusARLedgerDetail1.BalanceColumn)
        End Function
        
        Public Sub SetBalanceNull()
            Me(Me.tableCusARLedgerDetail1.BalanceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CusARLedgerDetail1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CusARLedgerDetail1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CusARLedgerDetail1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CusARLedgerDetail1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPaySumDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_customer As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnname As DataColumn
        
        Private columncomplete_name As DataColumn
        
        Private columndate_receive_payment As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Private columnamount_receive As DataColumn
        
        Private columncod_company As DataColumn
        
        Private columnpmt_method As DataColumn
        
        Private columnflag As DataColumn
        
        Private columnother As DataColumn
        
        Private columnOrderName As DataColumn
        
        Private columnoverpay As DataColumn
        
        Friend Sub New()
            MyBase.New("DetailPaySum")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_customerColumn As DataColumn
            Get
                Return Me.columncod_customer
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property complete_nameColumn As DataColumn
            Get
                Return Me.columncomplete_name
            End Get
        End Property
        
        Friend ReadOnly Property date_receive_paymentColumn As DataColumn
            Get
                Return Me.columndate_receive_payment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Friend ReadOnly Property amount_receiveColumn As DataColumn
            Get
                Return Me.columnamount_receive
            End Get
        End Property
        
        Friend ReadOnly Property cod_companyColumn As DataColumn
            Get
                Return Me.columncod_company
            End Get
        End Property
        
        Friend ReadOnly Property pmt_methodColumn As DataColumn
            Get
                Return Me.columnpmt_method
            End Get
        End Property
        
        Friend ReadOnly Property flagColumn As DataColumn
            Get
                Return Me.columnflag
            End Get
        End Property
        
        Friend ReadOnly Property otherColumn As DataColumn
            Get
                Return Me.columnother
            End Get
        End Property
        
        Friend ReadOnly Property OrderNameColumn As DataColumn
            Get
                Return Me.columnOrderName
            End Get
        End Property
        
        Friend ReadOnly Property overpayColumn As DataColumn
            Get
                Return Me.columnoverpay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetailPaySumRow
            Get
                Return CType(Me.Rows(index),DetailPaySumRow)
            End Get
        End Property
        
        Public Event DetailPaySumRowChanged As DetailPaySumRowChangeEventHandler
        
        Public Event DetailPaySumRowChanging As DetailPaySumRowChangeEventHandler
        
        Public Event DetailPaySumRowDeleted As DetailPaySumRowChangeEventHandler
        
        Public Event DetailPaySumRowDeleting As DetailPaySumRowChangeEventHandler
        
        Public Overloads Sub AddDetailPaySumRow(ByVal row As DetailPaySumRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetailPaySumRow(ByVal cod_customer As String, ByVal f_name As String, ByVal name As String, ByVal complete_name As String, ByVal date_receive_payment As Date, ByVal refrence_no As String, ByVal amount_receive As Decimal, ByVal cod_company As String, ByVal pmt_method As String, ByVal flag As Boolean, ByVal other As Decimal, ByVal OrderName As String, ByVal overpay As Decimal) As DetailPaySumRow
            Dim rowDetailPaySumRow As DetailPaySumRow = CType(Me.NewRow,DetailPaySumRow)
            rowDetailPaySumRow.ItemArray = New Object() {cod_customer, f_name, name, complete_name, date_receive_payment, refrence_no, amount_receive, cod_company, pmt_method, flag, other, OrderName, overpay}
            Me.Rows.Add(rowDetailPaySumRow)
            Return rowDetailPaySumRow
        End Function
        
        Public Function FindByrefrence_no(ByVal refrence_no As String) As DetailPaySumRow
            Return CType(Me.Rows.Find(New Object() {refrence_no}),DetailPaySumRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetailPaySumDataTable = CType(MyBase.Clone,DetailPaySumDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetailPaySumDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_customer = Me.Columns("cod_customer")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnname = Me.Columns("name")
            Me.columncomplete_name = Me.Columns("complete_name")
            Me.columndate_receive_payment = Me.Columns("date_receive_payment")
            Me.columnrefrence_no = Me.Columns("refrence_no")
            Me.columnamount_receive = Me.Columns("amount_receive")
            Me.columncod_company = Me.Columns("cod_company")
            Me.columnpmt_method = Me.Columns("pmt_method")
            Me.columnflag = Me.Columns("flag")
            Me.columnother = Me.Columns("other")
            Me.columnOrderName = Me.Columns("OrderName")
            Me.columnoverpay = Me.Columns("overpay")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_customer = New DataColumn("cod_customer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_customer)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columncomplete_name = New DataColumn("complete_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomplete_name)
            Me.columndate_receive_payment = New DataColumn("date_receive_payment", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_receive_payment)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnamount_receive = New DataColumn("amount_receive", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_receive)
            Me.columncod_company = New DataColumn("cod_company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_company)
            Me.columnpmt_method = New DataColumn("pmt_method", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpmt_method)
            Me.columnflag = New DataColumn("flag", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnflag)
            Me.columnother = New DataColumn("other", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnother)
            Me.columnOrderName = New DataColumn("OrderName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderName)
            Me.columnoverpay = New DataColumn("overpay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoverpay)
            Me.Constraints.Add(New UniqueConstraint("DSFrmPrintARCusKey1", New DataColumn() {Me.columnrefrence_no}, true))
            Me.columncod_customer.AllowDBNull = false
            Me.columnrefrence_no.AllowDBNull = false
            Me.columnrefrence_no.Unique = true
        End Sub
        
        Public Function NewDetailPaySumRow() As DetailPaySumRow
            Return CType(Me.NewRow,DetailPaySumRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetailPaySumRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetailPaySumRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetailPaySumRowChangedEvent) Is Nothing) Then
                RaiseEvent DetailPaySumRowChanged(Me, New DetailPaySumRowChangeEvent(CType(e.Row,DetailPaySumRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetailPaySumRowChangingEvent) Is Nothing) Then
                RaiseEvent DetailPaySumRowChanging(Me, New DetailPaySumRowChangeEvent(CType(e.Row,DetailPaySumRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetailPaySumRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetailPaySumRowDeleted(Me, New DetailPaySumRowChangeEvent(CType(e.Row,DetailPaySumRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetailPaySumRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetailPaySumRowDeleting(Me, New DetailPaySumRowChangeEvent(CType(e.Row,DetailPaySumRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetailPaySumRow(ByVal row As DetailPaySumRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPaySumRow
        Inherits DataRow
        
        Private tableDetailPaySum As DetailPaySumDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetailPaySum = CType(Me.Table,DetailPaySumDataTable)
        End Sub
        
        Public Property cod_customer As String
            Get
                Return CType(Me(Me.tableDetailPaySum.cod_customerColumn),String)
            End Get
            Set
                Me(Me.tableDetailPaySum.cod_customerColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.f_nameColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.nameColumn) = value
            End Set
        End Property
        
        Public Property complete_name As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.complete_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.complete_nameColumn) = value
            End Set
        End Property
        
        Public Property date_receive_payment As Date
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.date_receive_paymentColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.date_receive_paymentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableDetailPaySum.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableDetailPaySum.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property amount_receive As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.amount_receiveColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.amount_receiveColumn) = value
            End Set
        End Property
        
        Public Property cod_company As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.cod_companyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.cod_companyColumn) = value
            End Set
        End Property
        
        Public Property pmt_method As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.pmt_methodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.pmt_methodColumn) = value
            End Set
        End Property
        
        Public Property flag As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.flagColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.flagColumn) = value
            End Set
        End Property
        
        Public Property other As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.otherColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.otherColumn) = value
            End Set
        End Property
        
        Public Property OrderName As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.OrderNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.OrderNameColumn) = value
            End Set
        End Property
        
        Public Property overpay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetailPaySum.overpayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPaySum.overpayColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableDetailPaySum.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableDetailPaySum.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscomplete_nameNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.complete_nameColumn)
        End Function
        
        Public Sub Setcomplete_nameNull()
            Me(Me.tableDetailPaySum.complete_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_receive_paymentNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.date_receive_paymentColumn)
        End Function
        
        Public Sub Setdate_receive_paymentNull()
            Me(Me.tableDetailPaySum.date_receive_paymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_receiveNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.amount_receiveColumn)
        End Function
        
        Public Sub Setamount_receiveNull()
            Me(Me.tableDetailPaySum.amount_receiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_companyNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.cod_companyColumn)
        End Function
        
        Public Sub Setcod_companyNull()
            Me(Me.tableDetailPaySum.cod_companyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispmt_methodNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.pmt_methodColumn)
        End Function
        
        Public Sub Setpmt_methodNull()
            Me(Me.tableDetailPaySum.pmt_methodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsflagNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.flagColumn)
        End Function
        
        Public Sub SetflagNull()
            Me(Me.tableDetailPaySum.flagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsotherNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.otherColumn)
        End Function
        
        Public Sub SetotherNull()
            Me(Me.tableDetailPaySum.otherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNameNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.OrderNameColumn)
        End Function
        
        Public Sub SetOrderNameNull()
            Me(Me.tableDetailPaySum.OrderNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoverpayNull() As Boolean
            Return Me.IsNull(Me.tableDetailPaySum.overpayColumn)
        End Function
        
        Public Sub SetoverpayNull()
            Me(Me.tableDetailPaySum.overpayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetDetailPayDtlRows() As DetailPayDtlRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DetailPaySumDetailPayDtl")),DetailPayDtlRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPaySumRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetailPaySumRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetailPaySumRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetailPaySumRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPayDtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpayment_amount As DataColumn
        
        Private columnid_service_center As DataColumn
        
        Private columnID_payment As DataColumn
        
        Private columnrefrence_no As DataColumn
        
        Friend Sub New()
            MyBase.New("DetailPayDtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property payment_amountColumn As DataColumn
            Get
                Return Me.columnpayment_amount
            End Get
        End Property
        
        Friend ReadOnly Property id_service_centerColumn As DataColumn
            Get
                Return Me.columnid_service_center
            End Get
        End Property
        
        Friend ReadOnly Property ID_paymentColumn As DataColumn
            Get
                Return Me.columnID_payment
            End Get
        End Property
        
        Friend ReadOnly Property refrence_noColumn As DataColumn
            Get
                Return Me.columnrefrence_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetailPayDtlRow
            Get
                Return CType(Me.Rows(index),DetailPayDtlRow)
            End Get
        End Property
        
        Public Event DetailPayDtlRowChanged As DetailPayDtlRowChangeEventHandler
        
        Public Event DetailPayDtlRowChanging As DetailPayDtlRowChangeEventHandler
        
        Public Event DetailPayDtlRowDeleted As DetailPayDtlRowChangeEventHandler
        
        Public Event DetailPayDtlRowDeleting As DetailPayDtlRowChangeEventHandler
        
        Public Overloads Sub AddDetailPayDtlRow(ByVal row As DetailPayDtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetailPayDtlRow(ByVal payment_amount As Decimal, ByVal id_service_center As String, ByVal parentDetailPaySumRowByDetailPaySumDetailPayDtl As DetailPaySumRow) As DetailPayDtlRow
            Dim rowDetailPayDtlRow As DetailPayDtlRow = CType(Me.NewRow,DetailPayDtlRow)
            rowDetailPayDtlRow.ItemArray = New Object() {payment_amount, id_service_center, Nothing, parentDetailPaySumRowByDetailPaySumDetailPayDtl(5)}
            Me.Rows.Add(rowDetailPayDtlRow)
            Return rowDetailPayDtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetailPayDtlDataTable = CType(MyBase.Clone,DetailPayDtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetailPayDtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpayment_amount = Me.Columns("payment_amount")
            Me.columnid_service_center = Me.Columns("id_service_center")
            Me.columnID_payment = Me.Columns("ID_payment")
            Me.columnrefrence_no = Me.Columns("refrence_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnpayment_amount = New DataColumn("payment_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_amount)
            Me.columnid_service_center = New DataColumn("id_service_center", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_service_center)
            Me.columnID_payment = New DataColumn("ID_payment", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_payment)
            Me.columnrefrence_no = New DataColumn("refrence_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefrence_no)
            Me.columnpayment_amount.ReadOnly = true
            Me.columnID_payment.AutoIncrement = true
            Me.columnID_payment.AllowDBNull = false
            Me.columnID_payment.ReadOnly = true
            Me.columnrefrence_no.AllowDBNull = false
        End Sub
        
        Public Function NewDetailPayDtlRow() As DetailPayDtlRow
            Return CType(Me.NewRow,DetailPayDtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetailPayDtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetailPayDtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetailPayDtlRowChangedEvent) Is Nothing) Then
                RaiseEvent DetailPayDtlRowChanged(Me, New DetailPayDtlRowChangeEvent(CType(e.Row,DetailPayDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetailPayDtlRowChangingEvent) Is Nothing) Then
                RaiseEvent DetailPayDtlRowChanging(Me, New DetailPayDtlRowChangeEvent(CType(e.Row,DetailPayDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetailPayDtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetailPayDtlRowDeleted(Me, New DetailPayDtlRowChangeEvent(CType(e.Row,DetailPayDtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetailPayDtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetailPayDtlRowDeleting(Me, New DetailPayDtlRowChangeEvent(CType(e.Row,DetailPayDtlRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetailPayDtlRow(ByVal row As DetailPayDtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPayDtlRow
        Inherits DataRow
        
        Private tableDetailPayDtl As DetailPayDtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetailPayDtl = CType(Me.Table,DetailPayDtlDataTable)
        End Sub
        
        Public Property payment_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetailPayDtl.payment_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPayDtl.payment_amountColumn) = value
            End Set
        End Property
        
        Public Property id_service_center As String
            Get
                Try 
                    Return CType(Me(Me.tableDetailPayDtl.id_service_centerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetailPayDtl.id_service_centerColumn) = value
            End Set
        End Property
        
        Public Property ID_payment As Integer
            Get
                Return CType(Me(Me.tableDetailPayDtl.ID_paymentColumn),Integer)
            End Get
            Set
                Me(Me.tableDetailPayDtl.ID_paymentColumn) = value
            End Set
        End Property
        
        Public Property refrence_no As String
            Get
                Return CType(Me(Me.tableDetailPayDtl.refrence_noColumn),String)
            End Get
            Set
                Me(Me.tableDetailPayDtl.refrence_noColumn) = value
            End Set
        End Property
        
        Public Property DetailPaySumRow As DetailPaySumRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DetailPaySumDetailPayDtl")),DetailPaySumRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DetailPaySumDetailPayDtl"))
            End Set
        End Property
        
        Public Function Ispayment_amountNull() As Boolean
            Return Me.IsNull(Me.tableDetailPayDtl.payment_amountColumn)
        End Function
        
        Public Sub Setpayment_amountNull()
            Me(Me.tableDetailPayDtl.payment_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_service_centerNull() As Boolean
            Return Me.IsNull(Me.tableDetailPayDtl.id_service_centerColumn)
        End Function
        
        Public Sub Setid_service_centerNull()
            Me(Me.tableDetailPayDtl.id_service_centerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetailPayDtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetailPayDtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetailPayDtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetailPayDtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
