'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSUCEmployee
    Inherits DataSet
    
    Private tableemployee_department As employee_departmentDataTable
    
    Private tableemployee_position As employee_positionDataTable
    
    Private tableemployee As employeeDataTable
    
    Private tableStore_Setup As Store_SetupDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee_department")) Is Nothing) Then
                Me.Tables.Add(New employee_departmentDataTable(ds.Tables("employee_department")))
            End If
            If (Not (ds.Tables("employee_position")) Is Nothing) Then
                Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
            End If
            If (Not (ds.Tables("employee")) Is Nothing) Then
                Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
            End If
            If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
                Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee_department As employee_departmentDataTable
        Get
            Return Me.tableemployee_department
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee_position As employee_positionDataTable
        Get
            Return Me.tableemployee_position
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee As employeeDataTable
        Get
            Return Me.tableemployee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Store_Setup As Store_SetupDataTable
        Get
            Return Me.tableStore_Setup
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSUCEmployee = CType(MyBase.Clone,DSUCEmployee)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee_department")) Is Nothing) Then
            Me.Tables.Add(New employee_departmentDataTable(ds.Tables("employee_department")))
        End If
        If (Not (ds.Tables("employee_position")) Is Nothing) Then
            Me.Tables.Add(New employee_positionDataTable(ds.Tables("employee_position")))
        End If
        If (Not (ds.Tables("employee")) Is Nothing) Then
            Me.Tables.Add(New employeeDataTable(ds.Tables("employee")))
        End If
        If (Not (ds.Tables("Store_Setup")) Is Nothing) Then
            Me.Tables.Add(New Store_SetupDataTable(ds.Tables("Store_Setup")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee_department = CType(Me.Tables("employee_department"),employee_departmentDataTable)
        If (Not (Me.tableemployee_department) Is Nothing) Then
            Me.tableemployee_department.InitVars
        End If
        Me.tableemployee_position = CType(Me.Tables("employee_position"),employee_positionDataTable)
        If (Not (Me.tableemployee_position) Is Nothing) Then
            Me.tableemployee_position.InitVars
        End If
        Me.tableemployee = CType(Me.Tables("employee"),employeeDataTable)
        If (Not (Me.tableemployee) Is Nothing) Then
            Me.tableemployee.InitVars
        End If
        Me.tableStore_Setup = CType(Me.Tables("Store_Setup"),Store_SetupDataTable)
        If (Not (Me.tableStore_Setup) Is Nothing) Then
            Me.tableStore_Setup.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSUCEmployee"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSUCEmployee.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee_department = New employee_departmentDataTable
        Me.Tables.Add(Me.tableemployee_department)
        Me.tableemployee_position = New employee_positionDataTable
        Me.Tables.Add(Me.tableemployee_position)
        Me.tableemployee = New employeeDataTable
        Me.Tables.Add(Me.tableemployee)
        Me.tableStore_Setup = New Store_SetupDataTable
        Me.Tables.Add(Me.tableStore_Setup)
    End Sub
    
    Private Function ShouldSerializeemployee_department() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee_position() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeemployee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStore_Setup() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employee_departmentRowChangeEventHandler(ByVal sender As Object, ByVal e As employee_departmentRowChangeEvent)
    
    Public Delegate Sub employee_positionRowChangeEventHandler(ByVal sender As Object, ByVal e As employee_positionRowChangeEvent)
    
    Public Delegate Sub employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As employeeRowChangeEvent)
    
    Public Delegate Sub Store_SetupRowChangeEventHandler(ByVal sender As Object, ByVal e As Store_SetupRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_departmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_deparment As DataColumn
        
        Private columndesc_department As DataColumn
        
        Private columnGL_expense_account As DataColumn
        
        Private columncod_department_master As DataColumn
        
        Friend Sub New()
            MyBase.New("employee_department")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_deparmentColumn As DataColumn
            Get
                Return Me.columncod_deparment
            End Get
        End Property
        
        Friend ReadOnly Property desc_departmentColumn As DataColumn
            Get
                Return Me.columndesc_department
            End Get
        End Property
        
        Friend ReadOnly Property GL_expense_accountColumn As DataColumn
            Get
                Return Me.columnGL_expense_account
            End Get
        End Property
        
        Friend ReadOnly Property cod_department_masterColumn As DataColumn
            Get
                Return Me.columncod_department_master
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee_departmentRow
            Get
                Return CType(Me.Rows(index),employee_departmentRow)
            End Get
        End Property
        
        Public Event employee_departmentRowChanged As employee_departmentRowChangeEventHandler
        
        Public Event employee_departmentRowChanging As employee_departmentRowChangeEventHandler
        
        Public Event employee_departmentRowDeleted As employee_departmentRowChangeEventHandler
        
        Public Event employee_departmentRowDeleting As employee_departmentRowChangeEventHandler
        
        Public Overloads Sub Addemployee_departmentRow(ByVal row As employee_departmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee_departmentRow(ByVal cod_deparment As String, ByVal desc_department As String, ByVal GL_expense_account As String, ByVal cod_department_master As String) As employee_departmentRow
            Dim rowemployee_departmentRow As employee_departmentRow = CType(Me.NewRow,employee_departmentRow)
            rowemployee_departmentRow.ItemArray = New Object() {cod_deparment, desc_department, GL_expense_account, cod_department_master}
            Me.Rows.Add(rowemployee_departmentRow)
            Return rowemployee_departmentRow
        End Function
        
        Public Function FindBycod_deparment(ByVal cod_deparment As String) As employee_departmentRow
            Return CType(Me.Rows.Find(New Object() {cod_deparment}),employee_departmentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee_departmentDataTable = CType(MyBase.Clone,employee_departmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee_departmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_deparment = Me.Columns("cod_deparment")
            Me.columndesc_department = Me.Columns("desc_department")
            Me.columnGL_expense_account = Me.Columns("GL_expense_account")
            Me.columncod_department_master = Me.Columns("cod_department_master")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_deparment = New DataColumn("cod_deparment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_deparment)
            Me.columndesc_department = New DataColumn("desc_department", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_department)
            Me.columnGL_expense_account = New DataColumn("GL_expense_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_expense_account)
            Me.columncod_department_master = New DataColumn("cod_department_master", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_department_master)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_deparment}, true))
            Me.columncod_deparment.AllowDBNull = false
            Me.columncod_deparment.Unique = true
        End Sub
        
        Public Function Newemployee_departmentRow() As employee_departmentRow
            Return CType(Me.NewRow,employee_departmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee_departmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee_departmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee_departmentRowChangedEvent) Is Nothing) Then
                RaiseEvent employee_departmentRowChanged(Me, New employee_departmentRowChangeEvent(CType(e.Row,employee_departmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee_departmentRowChangingEvent) Is Nothing) Then
                RaiseEvent employee_departmentRowChanging(Me, New employee_departmentRowChangeEvent(CType(e.Row,employee_departmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee_departmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent employee_departmentRowDeleted(Me, New employee_departmentRowChangeEvent(CType(e.Row,employee_departmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee_departmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent employee_departmentRowDeleting(Me, New employee_departmentRowChangeEvent(CType(e.Row,employee_departmentRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee_departmentRow(ByVal row As employee_departmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_departmentRow
        Inherits DataRow
        
        Private tableemployee_department As employee_departmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee_department = CType(Me.Table,employee_departmentDataTable)
        End Sub
        
        Public Property cod_deparment As String
            Get
                Return CType(Me(Me.tableemployee_department.cod_deparmentColumn),String)
            End Get
            Set
                Me(Me.tableemployee_department.cod_deparmentColumn) = value
            End Set
        End Property
        
        Public Property desc_department As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_department.desc_departmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_department.desc_departmentColumn) = value
            End Set
        End Property
        
        Public Property GL_expense_account As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_department.GL_expense_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_department.GL_expense_accountColumn) = value
            End Set
        End Property
        
        Public Property cod_department_master As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_department.cod_department_masterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_department.cod_department_masterColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_departmentNull() As Boolean
            Return Me.IsNull(Me.tableemployee_department.desc_departmentColumn)
        End Function
        
        Public Sub Setdesc_departmentNull()
            Me(Me.tableemployee_department.desc_departmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_expense_accountNull() As Boolean
            Return Me.IsNull(Me.tableemployee_department.GL_expense_accountColumn)
        End Function
        
        Public Sub SetGL_expense_accountNull()
            Me(Me.tableemployee_department.GL_expense_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_department_masterNull() As Boolean
            Return Me.IsNull(Me.tableemployee_department.cod_department_masterColumn)
        End Function
        
        Public Sub Setcod_department_masterNull()
            Me(Me.tableemployee_department.cod_department_masterColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_departmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee_departmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee_departmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee_departmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_position As DataColumn
        
        Private columndesc_position As DataColumn
        
        Private columnservice_ok As DataColumn
        
        Friend Sub New()
            MyBase.New("employee_position")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_positionColumn As DataColumn
            Get
                Return Me.columncod_position
            End Get
        End Property
        
        Friend ReadOnly Property desc_positionColumn As DataColumn
            Get
                Return Me.columndesc_position
            End Get
        End Property
        
        Friend ReadOnly Property service_okColumn As DataColumn
            Get
                Return Me.columnservice_ok
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee_positionRow
            Get
                Return CType(Me.Rows(index),employee_positionRow)
            End Get
        End Property
        
        Public Event employee_positionRowChanged As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowChanging As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleted As employee_positionRowChangeEventHandler
        
        Public Event employee_positionRowDeleting As employee_positionRowChangeEventHandler
        
        Public Overloads Sub Addemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee_positionRow(ByVal cod_position As String, ByVal desc_position As String, ByVal service_ok As Boolean) As employee_positionRow
            Dim rowemployee_positionRow As employee_positionRow = CType(Me.NewRow,employee_positionRow)
            rowemployee_positionRow.ItemArray = New Object() {cod_position, desc_position, service_ok}
            Me.Rows.Add(rowemployee_positionRow)
            Return rowemployee_positionRow
        End Function
        
        Public Function FindBycod_position(ByVal cod_position As String) As employee_positionRow
            Return CType(Me.Rows.Find(New Object() {cod_position}),employee_positionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee_positionDataTable = CType(MyBase.Clone,employee_positionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee_positionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_position = Me.Columns("cod_position")
            Me.columndesc_position = Me.Columns("desc_position")
            Me.columnservice_ok = Me.Columns("service_ok")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_position = New DataColumn("cod_position", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_position)
            Me.columndesc_position = New DataColumn("desc_position", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesc_position)
            Me.columnservice_ok = New DataColumn("service_ok", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnservice_ok)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_position}, true))
            Me.columncod_position.AllowDBNull = false
            Me.columncod_position.Unique = true
        End Sub
        
        Public Function Newemployee_positionRow() As employee_positionRow
            Return CType(Me.NewRow,employee_positionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee_positionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee_positionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee_positionRowChangedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanged(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee_positionRowChangingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowChanging(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee_positionRowDeletedEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleted(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee_positionRowDeletingEvent) Is Nothing) Then
                RaiseEvent employee_positionRowDeleting(Me, New employee_positionRowChangeEvent(CType(e.Row,employee_positionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee_positionRow(ByVal row As employee_positionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRow
        Inherits DataRow
        
        Private tableemployee_position As employee_positionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee_position = CType(Me.Table,employee_positionDataTable)
        End Sub
        
        Public Property cod_position As String
            Get
                Return CType(Me(Me.tableemployee_position.cod_positionColumn),String)
            End Get
            Set
                Me(Me.tableemployee_position.cod_positionColumn) = value
            End Set
        End Property
        
        Public Property desc_position As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_position.desc_positionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_position.desc_positionColumn) = value
            End Set
        End Property
        
        Public Property service_ok As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee_position.service_okColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_position.service_okColumn) = value
            End Set
        End Property
        
        Public Function Isdesc_positionNull() As Boolean
            Return Me.IsNull(Me.tableemployee_position.desc_positionColumn)
        End Function
        
        Public Sub Setdesc_positionNull()
            Me(Me.tableemployee_position.desc_positionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isservice_okNull() As Boolean
            Return Me.IsNull(Me.tableemployee_position.service_okColumn)
        End Function
        
        Public Sub Setservice_okNull()
            Me(Me.tableemployee_position.service_okColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_positionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee_positionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee_positionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee_positionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnf_name As DataColumn
        
        Private columnm_name As DataColumn
        
        Private columnl_name As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnzipcode As DataColumn
        
        Private columntechnecian As DataColumn
        
        Private columnsocial_security_no As DataColumn
        
        Private columncod_position As DataColumn
        
        Private columncod_deparment As DataColumn
        
        Private columnphone_1 As DataColumn
        
        Private columnextension_1 As DataColumn
        
        Private columnphone_type_1 As DataColumn
        
        Private columnphone_main_1 As DataColumn
        
        Private columnphone_2 As DataColumn
        
        Private columnextension_2 As DataColumn
        
        Private columnphone_type_2 As DataColumn
        
        Private columnphone_main_2 As DataColumn
        
        Private columnphone_3 As DataColumn
        
        Private columnextension_3 As DataColumn
        
        Private columnphone_type_3 As DataColumn
        
        Private columnphone_main_3 As DataColumn
        
        Private columnphone_4 As DataColumn
        
        Private columnextension_4 As DataColumn
        
        Private columnphone_type_4 As DataColumn
        
        Private columnphone_main_4 As DataColumn
        
        Private columnphone_5 As DataColumn
        
        Private columnextension_5 As DataColumn
        
        Private columnphone_type_5 As DataColumn
        
        Private columnphone_main_5 As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnnotes As DataColumn
        
        Private columnpic As DataColumn
        
        Private columnbirthday_date As DataColumn
        
        Private columnhired_date As DataColumn
        
        Private columnlast_reiew_date As DataColumn
        
        Private columnterminate_date As DataColumn
        
        Private columntemporary_inactive As DataColumn
        
        Private columnlast_basis As DataColumn
        
        Private columnlast_period As DataColumn
        
        Private columnlast_status As DataColumn
        
        Private columnlast_salary As DataColumn
        
        Private columnlast_hourly As DataColumn
        
        Private columnlast_overtime As DataColumn
        
        Private columnLast_raise_date As DataColumn
        
        Private columnAllowance_Federal As DataColumn
        
        Private columnAllowance_state As DataColumn
        
        Private columnAllowance_depndnts As DataColumn
        
        Private columnTerminated As DataColumn
        
        Private columnSalesPerson As DataColumn
        
        Private columnUsePunchClock As DataColumn
        
        Private columnStoreNo As DataColumn
        
        Friend Sub New()
            MyBase.New("employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property f_nameColumn As DataColumn
            Get
                Return Me.columnf_name
            End Get
        End Property
        
        Friend ReadOnly Property m_nameColumn As DataColumn
            Get
                Return Me.columnm_name
            End Get
        End Property
        
        Friend ReadOnly Property l_nameColumn As DataColumn
            Get
                Return Me.columnl_name
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property zipcodeColumn As DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        Friend ReadOnly Property technecianColumn As DataColumn
            Get
                Return Me.columntechnecian
            End Get
        End Property
        
        Friend ReadOnly Property social_security_noColumn As DataColumn
            Get
                Return Me.columnsocial_security_no
            End Get
        End Property
        
        Friend ReadOnly Property cod_positionColumn As DataColumn
            Get
                Return Me.columncod_position
            End Get
        End Property
        
        Friend ReadOnly Property cod_deparmentColumn As DataColumn
            Get
                Return Me.columncod_deparment
            End Get
        End Property
        
        Friend ReadOnly Property phone_1Column As DataColumn
            Get
                Return Me.columnphone_1
            End Get
        End Property
        
        Friend ReadOnly Property extension_1Column As DataColumn
            Get
                Return Me.columnextension_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_1Column As DataColumn
            Get
                Return Me.columnphone_type_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_1Column As DataColumn
            Get
                Return Me.columnphone_main_1
            End Get
        End Property
        
        Friend ReadOnly Property phone_2Column As DataColumn
            Get
                Return Me.columnphone_2
            End Get
        End Property
        
        Friend ReadOnly Property extension_2Column As DataColumn
            Get
                Return Me.columnextension_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_2Column As DataColumn
            Get
                Return Me.columnphone_type_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_2Column As DataColumn
            Get
                Return Me.columnphone_main_2
            End Get
        End Property
        
        Friend ReadOnly Property phone_3Column As DataColumn
            Get
                Return Me.columnphone_3
            End Get
        End Property
        
        Friend ReadOnly Property extension_3Column As DataColumn
            Get
                Return Me.columnextension_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_3Column As DataColumn
            Get
                Return Me.columnphone_type_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_3Column As DataColumn
            Get
                Return Me.columnphone_main_3
            End Get
        End Property
        
        Friend ReadOnly Property phone_4Column As DataColumn
            Get
                Return Me.columnphone_4
            End Get
        End Property
        
        Friend ReadOnly Property extension_4Column As DataColumn
            Get
                Return Me.columnextension_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_4Column As DataColumn
            Get
                Return Me.columnphone_type_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_4Column As DataColumn
            Get
                Return Me.columnphone_main_4
            End Get
        End Property
        
        Friend ReadOnly Property phone_5Column As DataColumn
            Get
                Return Me.columnphone_5
            End Get
        End Property
        
        Friend ReadOnly Property extension_5Column As DataColumn
            Get
                Return Me.columnextension_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_type_5Column As DataColumn
            Get
                Return Me.columnphone_type_5
            End Get
        End Property
        
        Friend ReadOnly Property phone_main_5Column As DataColumn
            Get
                Return Me.columnphone_main_5
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Friend ReadOnly Property picColumn As DataColumn
            Get
                Return Me.columnpic
            End Get
        End Property
        
        Friend ReadOnly Property birthday_dateColumn As DataColumn
            Get
                Return Me.columnbirthday_date
            End Get
        End Property
        
        Friend ReadOnly Property hired_dateColumn As DataColumn
            Get
                Return Me.columnhired_date
            End Get
        End Property
        
        Friend ReadOnly Property last_reiew_dateColumn As DataColumn
            Get
                Return Me.columnlast_reiew_date
            End Get
        End Property
        
        Friend ReadOnly Property terminate_dateColumn As DataColumn
            Get
                Return Me.columnterminate_date
            End Get
        End Property
        
        Friend ReadOnly Property temporary_inactiveColumn As DataColumn
            Get
                Return Me.columntemporary_inactive
            End Get
        End Property
        
        Friend ReadOnly Property last_basisColumn As DataColumn
            Get
                Return Me.columnlast_basis
            End Get
        End Property
        
        Friend ReadOnly Property last_periodColumn As DataColumn
            Get
                Return Me.columnlast_period
            End Get
        End Property
        
        Friend ReadOnly Property last_statusColumn As DataColumn
            Get
                Return Me.columnlast_status
            End Get
        End Property
        
        Friend ReadOnly Property last_salaryColumn As DataColumn
            Get
                Return Me.columnlast_salary
            End Get
        End Property
        
        Friend ReadOnly Property last_hourlyColumn As DataColumn
            Get
                Return Me.columnlast_hourly
            End Get
        End Property
        
        Friend ReadOnly Property last_overtimeColumn As DataColumn
            Get
                Return Me.columnlast_overtime
            End Get
        End Property
        
        Friend ReadOnly Property Last_raise_dateColumn As DataColumn
            Get
                Return Me.columnLast_raise_date
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_FederalColumn As DataColumn
            Get
                Return Me.columnAllowance_Federal
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_stateColumn As DataColumn
            Get
                Return Me.columnAllowance_state
            End Get
        End Property
        
        Friend ReadOnly Property Allowance_depndntsColumn As DataColumn
            Get
                Return Me.columnAllowance_depndnts
            End Get
        End Property
        
        Friend ReadOnly Property TerminatedColumn As DataColumn
            Get
                Return Me.columnTerminated
            End Get
        End Property
        
        Friend ReadOnly Property SalesPersonColumn As DataColumn
            Get
                Return Me.columnSalesPerson
            End Get
        End Property
        
        Friend ReadOnly Property UsePunchClockColumn As DataColumn
            Get
                Return Me.columnUsePunchClock
            End Get
        End Property
        
        Friend ReadOnly Property StoreNoColumn As DataColumn
            Get
                Return Me.columnStoreNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employeeRow
            Get
                Return CType(Me.Rows(index),employeeRow)
            End Get
        End Property
        
        Public Event employeeRowChanged As employeeRowChangeEventHandler
        
        Public Event employeeRowChanging As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleted As employeeRowChangeEventHandler
        
        Public Event employeeRowDeleting As employeeRowChangeEventHandler
        
        Public Overloads Sub AddemployeeRow(ByVal row As employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddemployeeRow( _
                    ByVal employee_code As String,  _
                    ByVal f_name As String,  _
                    ByVal m_name As String,  _
                    ByVal l_name As String,  _
                    ByVal address As String,  _
                    ByVal zipcode As String,  _
                    ByVal technecian As Boolean,  _
                    ByVal social_security_no As String,  _
                    ByVal cod_position As String,  _
                    ByVal cod_deparment As String,  _
                    ByVal phone_1 As String,  _
                    ByVal extension_1 As String,  _
                    ByVal phone_type_1 As String,  _
                    ByVal phone_main_1 As Boolean,  _
                    ByVal phone_2 As String,  _
                    ByVal extension_2 As String,  _
                    ByVal phone_type_2 As String,  _
                    ByVal phone_main_2 As Boolean,  _
                    ByVal phone_3 As String,  _
                    ByVal extension_3 As String,  _
                    ByVal phone_type_3 As String,  _
                    ByVal phone_main_3 As Boolean,  _
                    ByVal phone_4 As String,  _
                    ByVal extension_4 As String,  _
                    ByVal phone_type_4 As String,  _
                    ByVal phone_main_4 As Boolean,  _
                    ByVal phone_5 As String,  _
                    ByVal extension_5 As String,  _
                    ByVal phone_type_5 As String,  _
                    ByVal phone_main_5 As Boolean,  _
                    ByVal email As String,  _
                    ByVal notes As String,  _
                    ByVal pic() As Byte,  _
                    ByVal birthday_date As String,  _
                    ByVal hired_date As String,  _
                    ByVal last_reiew_date As String,  _
                    ByVal terminate_date As String,  _
                    ByVal temporary_inactive As Boolean,  _
                    ByVal last_basis As String,  _
                    ByVal last_period As String,  _
                    ByVal last_status As String,  _
                    ByVal last_salary As Decimal,  _
                    ByVal last_hourly As Decimal,  _
                    ByVal last_overtime As Decimal,  _
                    ByVal Last_raise_date As String,  _
                    ByVal Allowance_Federal As Short,  _
                    ByVal Allowance_state As Short,  _
                    ByVal Allowance_depndnts As Short,  _
                    ByVal Terminated As Boolean,  _
                    ByVal SalesPerson As Boolean,  _
                    ByVal UsePunchClock As Boolean,  _
                    ByVal StoreNo As String) As employeeRow
            Dim rowemployeeRow As employeeRow = CType(Me.NewRow,employeeRow)
            rowemployeeRow.ItemArray = New Object() {employee_code, f_name, m_name, l_name, address, zipcode, technecian, social_security_no, cod_position, cod_deparment, phone_1, extension_1, phone_type_1, phone_main_1, phone_2, extension_2, phone_type_2, phone_main_2, phone_3, extension_3, phone_type_3, phone_main_3, phone_4, extension_4, phone_type_4, phone_main_4, phone_5, extension_5, phone_type_5, phone_main_5, email, notes, pic, birthday_date, hired_date, last_reiew_date, terminate_date, temporary_inactive, last_basis, last_period, last_status, last_salary, last_hourly, last_overtime, Last_raise_date, Allowance_Federal, Allowance_state, Allowance_depndnts, Terminated, SalesPerson, UsePunchClock, StoreNo}
            Me.Rows.Add(rowemployeeRow)
            Return rowemployeeRow
        End Function
        
        Public Function FindByemployee_code(ByVal employee_code As String) As employeeRow
            Return CType(Me.Rows.Find(New Object() {employee_code}),employeeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employeeDataTable = CType(MyBase.Clone,employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnf_name = Me.Columns("f_name")
            Me.columnm_name = Me.Columns("m_name")
            Me.columnl_name = Me.Columns("l_name")
            Me.columnaddress = Me.Columns("address")
            Me.columnzipcode = Me.Columns("zipcode")
            Me.columntechnecian = Me.Columns("technecian")
            Me.columnsocial_security_no = Me.Columns("social_security_no")
            Me.columncod_position = Me.Columns("cod_position")
            Me.columncod_deparment = Me.Columns("cod_deparment")
            Me.columnphone_1 = Me.Columns("phone_1")
            Me.columnextension_1 = Me.Columns("extension_1")
            Me.columnphone_type_1 = Me.Columns("phone_type_1")
            Me.columnphone_main_1 = Me.Columns("phone_main_1")
            Me.columnphone_2 = Me.Columns("phone_2")
            Me.columnextension_2 = Me.Columns("extension_2")
            Me.columnphone_type_2 = Me.Columns("phone_type_2")
            Me.columnphone_main_2 = Me.Columns("phone_main_2")
            Me.columnphone_3 = Me.Columns("phone_3")
            Me.columnextension_3 = Me.Columns("extension_3")
            Me.columnphone_type_3 = Me.Columns("phone_type_3")
            Me.columnphone_main_3 = Me.Columns("phone_main_3")
            Me.columnphone_4 = Me.Columns("phone_4")
            Me.columnextension_4 = Me.Columns("extension_4")
            Me.columnphone_type_4 = Me.Columns("phone_type_4")
            Me.columnphone_main_4 = Me.Columns("phone_main_4")
            Me.columnphone_5 = Me.Columns("phone_5")
            Me.columnextension_5 = Me.Columns("extension_5")
            Me.columnphone_type_5 = Me.Columns("phone_type_5")
            Me.columnphone_main_5 = Me.Columns("phone_main_5")
            Me.columnemail = Me.Columns("email")
            Me.columnnotes = Me.Columns("notes")
            Me.columnpic = Me.Columns("pic")
            Me.columnbirthday_date = Me.Columns("birthday_date")
            Me.columnhired_date = Me.Columns("hired_date")
            Me.columnlast_reiew_date = Me.Columns("last_reiew_date")
            Me.columnterminate_date = Me.Columns("terminate_date")
            Me.columntemporary_inactive = Me.Columns("temporary_inactive")
            Me.columnlast_basis = Me.Columns("last_basis")
            Me.columnlast_period = Me.Columns("last_period")
            Me.columnlast_status = Me.Columns("last_status")
            Me.columnlast_salary = Me.Columns("last_salary")
            Me.columnlast_hourly = Me.Columns("last_hourly")
            Me.columnlast_overtime = Me.Columns("last_overtime")
            Me.columnLast_raise_date = Me.Columns("Last_raise_date")
            Me.columnAllowance_Federal = Me.Columns("Allowance_Federal")
            Me.columnAllowance_state = Me.Columns("Allowance_state")
            Me.columnAllowance_depndnts = Me.Columns("Allowance_depndnts")
            Me.columnTerminated = Me.Columns("Terminated")
            Me.columnSalesPerson = Me.Columns("SalesPerson")
            Me.columnUsePunchClock = Me.Columns("UsePunchClock")
            Me.columnStoreNo = Me.Columns("StoreNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnf_name = New DataColumn("f_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnf_name)
            Me.columnm_name = New DataColumn("m_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm_name)
            Me.columnl_name = New DataColumn("l_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnl_name)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnzipcode = New DataColumn("zipcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzipcode)
            Me.columntechnecian = New DataColumn("technecian", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntechnecian)
            Me.columnsocial_security_no = New DataColumn("social_security_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocial_security_no)
            Me.columncod_position = New DataColumn("cod_position", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_position)
            Me.columncod_deparment = New DataColumn("cod_deparment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_deparment)
            Me.columnphone_1 = New DataColumn("phone_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_1)
            Me.columnextension_1 = New DataColumn("extension_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_1)
            Me.columnphone_type_1 = New DataColumn("phone_type_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_1)
            Me.columnphone_main_1 = New DataColumn("phone_main_1", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_1)
            Me.columnphone_2 = New DataColumn("phone_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_2)
            Me.columnextension_2 = New DataColumn("extension_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_2)
            Me.columnphone_type_2 = New DataColumn("phone_type_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_2)
            Me.columnphone_main_2 = New DataColumn("phone_main_2", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_2)
            Me.columnphone_3 = New DataColumn("phone_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_3)
            Me.columnextension_3 = New DataColumn("extension_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_3)
            Me.columnphone_type_3 = New DataColumn("phone_type_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_3)
            Me.columnphone_main_3 = New DataColumn("phone_main_3", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_3)
            Me.columnphone_4 = New DataColumn("phone_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_4)
            Me.columnextension_4 = New DataColumn("extension_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_4)
            Me.columnphone_type_4 = New DataColumn("phone_type_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_4)
            Me.columnphone_main_4 = New DataColumn("phone_main_4", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_4)
            Me.columnphone_5 = New DataColumn("phone_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_5)
            Me.columnextension_5 = New DataColumn("extension_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnextension_5)
            Me.columnphone_type_5 = New DataColumn("phone_type_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_type_5)
            Me.columnphone_main_5 = New DataColumn("phone_main_5", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone_main_5)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.columnpic = New DataColumn("pic", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpic)
            Me.columnbirthday_date = New DataColumn("birthday_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbirthday_date)
            Me.columnhired_date = New DataColumn("hired_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhired_date)
            Me.columnlast_reiew_date = New DataColumn("last_reiew_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_reiew_date)
            Me.columnterminate_date = New DataColumn("terminate_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnterminate_date)
            Me.columntemporary_inactive = New DataColumn("temporary_inactive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntemporary_inactive)
            Me.columnlast_basis = New DataColumn("last_basis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_basis)
            Me.columnlast_period = New DataColumn("last_period", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_period)
            Me.columnlast_status = New DataColumn("last_status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_status)
            Me.columnlast_salary = New DataColumn("last_salary", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_salary)
            Me.columnlast_hourly = New DataColumn("last_hourly", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_hourly)
            Me.columnlast_overtime = New DataColumn("last_overtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_overtime)
            Me.columnLast_raise_date = New DataColumn("Last_raise_date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLast_raise_date)
            Me.columnAllowance_Federal = New DataColumn("Allowance_Federal", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_Federal)
            Me.columnAllowance_state = New DataColumn("Allowance_state", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_state)
            Me.columnAllowance_depndnts = New DataColumn("Allowance_depndnts", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowance_depndnts)
            Me.columnTerminated = New DataColumn("Terminated", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerminated)
            Me.columnSalesPerson = New DataColumn("SalesPerson", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesPerson)
            Me.columnUsePunchClock = New DataColumn("UsePunchClock", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsePunchClock)
            Me.columnStoreNo = New DataColumn("StoreNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStoreNo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnemployee_code}, true))
            Me.columnemployee_code.AllowDBNull = false
            Me.columnemployee_code.Unique = true
        End Sub
        
        Public Function NewemployeeRow() As employeeRow
            Return CType(Me.NewRow,employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent employeeRowChanged(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent employeeRowChanging(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleted(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent employeeRowDeleting(Me, New employeeRowChangeEvent(CType(e.Row,employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveemployeeRow(ByVal row As employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRow
        Inherits DataRow
        
        Private tableemployee As employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee = CType(Me.Table,employeeDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tableemployee.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tableemployee.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property f_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.f_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.f_nameColumn) = value
            End Set
        End Property
        
        Public Property m_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.m_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.m_nameColumn) = value
            End Set
        End Property
        
        Public Property l_name As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.l_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.l_nameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.addressColumn) = value
            End Set
        End Property
        
        Public Property zipcode As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.zipcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.zipcodeColumn) = value
            End Set
        End Property
        
        Public Property technecian As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.technecianColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.technecianColumn) = value
            End Set
        End Property
        
        Public Property social_security_no As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.social_security_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.social_security_noColumn) = value
            End Set
        End Property
        
        Public Property cod_position As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.cod_positionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.cod_positionColumn) = value
            End Set
        End Property
        
        Public Property cod_deparment As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.cod_deparmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.cod_deparmentColumn) = value
            End Set
        End Property
        
        Public Property phone_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_1Column) = value
            End Set
        End Property
        
        Public Property extension_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.extension_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.extension_1Column) = value
            End Set
        End Property
        
        Public Property phone_type_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_type_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_type_1Column) = value
            End Set
        End Property
        
        Public Property phone_main_1 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_main_1Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_main_1Column) = value
            End Set
        End Property
        
        Public Property phone_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_2Column) = value
            End Set
        End Property
        
        Public Property extension_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.extension_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.extension_2Column) = value
            End Set
        End Property
        
        Public Property phone_type_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_type_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_type_2Column) = value
            End Set
        End Property
        
        Public Property phone_main_2 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_main_2Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_main_2Column) = value
            End Set
        End Property
        
        Public Property phone_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_3Column) = value
            End Set
        End Property
        
        Public Property extension_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.extension_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.extension_3Column) = value
            End Set
        End Property
        
        Public Property phone_type_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_type_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_type_3Column) = value
            End Set
        End Property
        
        Public Property phone_main_3 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_main_3Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_main_3Column) = value
            End Set
        End Property
        
        Public Property phone_4 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_4Column) = value
            End Set
        End Property
        
        Public Property extension_4 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.extension_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.extension_4Column) = value
            End Set
        End Property
        
        Public Property phone_type_4 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_type_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_type_4Column) = value
            End Set
        End Property
        
        Public Property phone_main_4 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_main_4Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_main_4Column) = value
            End Set
        End Property
        
        Public Property phone_5 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_5Column) = value
            End Set
        End Property
        
        Public Property extension_5 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.extension_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.extension_5Column) = value
            End Set
        End Property
        
        Public Property phone_type_5 As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_type_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_type_5Column) = value
            End Set
        End Property
        
        Public Property phone_main_5 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.phone_main_5Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.phone_main_5Column) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.emailColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.notesColumn) = value
            End Set
        End Property
        
        Public Property pic As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableemployee.picColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.picColumn) = value
            End Set
        End Property
        
        Public Property birthday_date As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.birthday_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.birthday_dateColumn) = value
            End Set
        End Property
        
        Public Property hired_date As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.hired_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.hired_dateColumn) = value
            End Set
        End Property
        
        Public Property last_reiew_date As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_reiew_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_reiew_dateColumn) = value
            End Set
        End Property
        
        Public Property terminate_date As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.terminate_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.terminate_dateColumn) = value
            End Set
        End Property
        
        Public Property temporary_inactive As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.temporary_inactiveColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.temporary_inactiveColumn) = value
            End Set
        End Property
        
        Public Property last_basis As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_basisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_basisColumn) = value
            End Set
        End Property
        
        Public Property last_period As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_periodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_periodColumn) = value
            End Set
        End Property
        
        Public Property last_status As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_statusColumn) = value
            End Set
        End Property
        
        Public Property last_salary As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_salaryColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_salaryColumn) = value
            End Set
        End Property
        
        Public Property last_hourly As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_hourlyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_hourlyColumn) = value
            End Set
        End Property
        
        Public Property last_overtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee.last_overtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.last_overtimeColumn) = value
            End Set
        End Property
        
        Public Property Last_raise_date As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Last_raise_dateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Last_raise_dateColumn) = value
            End Set
        End Property
        
        Public Property Allowance_Federal As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_FederalColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_FederalColumn) = value
            End Set
        End Property
        
        Public Property Allowance_state As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_stateColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_stateColumn) = value
            End Set
        End Property
        
        Public Property Allowance_depndnts As Short
            Get
                Try 
                    Return CType(Me(Me.tableemployee.Allowance_depndntsColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.Allowance_depndntsColumn) = value
            End Set
        End Property
        
        Public Property Terminated As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.TerminatedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.TerminatedColumn) = value
            End Set
        End Property
        
        Public Property SalesPerson As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.SalesPersonColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.SalesPersonColumn) = value
            End Set
        End Property
        
        Public Property UsePunchClock As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee.UsePunchClockColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.UsePunchClockColumn) = value
            End Set
        End Property
        
        Public Property StoreNo As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee.StoreNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee.StoreNoColumn) = value
            End Set
        End Property
        
        Public Function Isf_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.f_nameColumn)
        End Function
        
        Public Sub Setf_nameNull()
            Me(Me.tableemployee.f_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ism_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.m_nameColumn)
        End Function
        
        Public Sub Setm_nameNull()
            Me(Me.tableemployee.m_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isl_nameNull() As Boolean
            Return Me.IsNull(Me.tableemployee.l_nameColumn)
        End Function
        
        Public Sub Setl_nameNull()
            Me(Me.tableemployee.l_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableemployee.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableemployee.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipcodeNull() As Boolean
            Return Me.IsNull(Me.tableemployee.zipcodeColumn)
        End Function
        
        Public Sub SetzipcodeNull()
            Me(Me.tableemployee.zipcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstechnecianNull() As Boolean
            Return Me.IsNull(Me.tableemployee.technecianColumn)
        End Function
        
        Public Sub SettechnecianNull()
            Me(Me.tableemployee.technecianColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issocial_security_noNull() As Boolean
            Return Me.IsNull(Me.tableemployee.social_security_noColumn)
        End Function
        
        Public Sub Setsocial_security_noNull()
            Me(Me.tableemployee.social_security_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_positionNull() As Boolean
            Return Me.IsNull(Me.tableemployee.cod_positionColumn)
        End Function
        
        Public Sub Setcod_positionNull()
            Me(Me.tableemployee.cod_positionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_deparmentNull() As Boolean
            Return Me.IsNull(Me.tableemployee.cod_deparmentColumn)
        End Function
        
        Public Sub Setcod_deparmentNull()
            Me(Me.tableemployee.cod_deparmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_1Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_1Column)
        End Function
        
        Public Sub Setphone_1Null()
            Me(Me.tableemployee.phone_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_1Null() As Boolean
            Return Me.IsNull(Me.tableemployee.extension_1Column)
        End Function
        
        Public Sub Setextension_1Null()
            Me(Me.tableemployee.extension_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_1Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_type_1Column)
        End Function
        
        Public Sub Setphone_type_1Null()
            Me(Me.tableemployee.phone_type_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_1Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_main_1Column)
        End Function
        
        Public Sub Setphone_main_1Null()
            Me(Me.tableemployee.phone_main_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_2Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_2Column)
        End Function
        
        Public Sub Setphone_2Null()
            Me(Me.tableemployee.phone_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_2Null() As Boolean
            Return Me.IsNull(Me.tableemployee.extension_2Column)
        End Function
        
        Public Sub Setextension_2Null()
            Me(Me.tableemployee.extension_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_2Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_type_2Column)
        End Function
        
        Public Sub Setphone_type_2Null()
            Me(Me.tableemployee.phone_type_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_2Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_main_2Column)
        End Function
        
        Public Sub Setphone_main_2Null()
            Me(Me.tableemployee.phone_main_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_3Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_3Column)
        End Function
        
        Public Sub Setphone_3Null()
            Me(Me.tableemployee.phone_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_3Null() As Boolean
            Return Me.IsNull(Me.tableemployee.extension_3Column)
        End Function
        
        Public Sub Setextension_3Null()
            Me(Me.tableemployee.extension_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_3Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_type_3Column)
        End Function
        
        Public Sub Setphone_type_3Null()
            Me(Me.tableemployee.phone_type_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_3Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_main_3Column)
        End Function
        
        Public Sub Setphone_main_3Null()
            Me(Me.tableemployee.phone_main_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_4Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_4Column)
        End Function
        
        Public Sub Setphone_4Null()
            Me(Me.tableemployee.phone_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_4Null() As Boolean
            Return Me.IsNull(Me.tableemployee.extension_4Column)
        End Function
        
        Public Sub Setextension_4Null()
            Me(Me.tableemployee.extension_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_4Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_type_4Column)
        End Function
        
        Public Sub Setphone_type_4Null()
            Me(Me.tableemployee.phone_type_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_4Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_main_4Column)
        End Function
        
        Public Sub Setphone_main_4Null()
            Me(Me.tableemployee.phone_main_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_5Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_5Column)
        End Function
        
        Public Sub Setphone_5Null()
            Me(Me.tableemployee.phone_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isextension_5Null() As Boolean
            Return Me.IsNull(Me.tableemployee.extension_5Column)
        End Function
        
        Public Sub Setextension_5Null()
            Me(Me.tableemployee.extension_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_type_5Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_type_5Column)
        End Function
        
        Public Sub Setphone_type_5Null()
            Me(Me.tableemployee.phone_type_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone_main_5Null() As Boolean
            Return Me.IsNull(Me.tableemployee.phone_main_5Column)
        End Function
        
        Public Sub Setphone_main_5Null()
            Me(Me.tableemployee.phone_main_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableemployee.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableemployee.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableemployee.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tableemployee.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspicNull() As Boolean
            Return Me.IsNull(Me.tableemployee.picColumn)
        End Function
        
        Public Sub SetpicNull()
            Me(Me.tableemployee.picColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbirthday_dateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.birthday_dateColumn)
        End Function
        
        Public Sub Setbirthday_dateNull()
            Me(Me.tableemployee.birthday_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishired_dateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.hired_dateColumn)
        End Function
        
        Public Sub Sethired_dateNull()
            Me(Me.tableemployee.hired_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_reiew_dateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_reiew_dateColumn)
        End Function
        
        Public Sub Setlast_reiew_dateNull()
            Me(Me.tableemployee.last_reiew_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isterminate_dateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.terminate_dateColumn)
        End Function
        
        Public Sub Setterminate_dateNull()
            Me(Me.tableemployee.terminate_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istemporary_inactiveNull() As Boolean
            Return Me.IsNull(Me.tableemployee.temporary_inactiveColumn)
        End Function
        
        Public Sub Settemporary_inactiveNull()
            Me(Me.tableemployee.temporary_inactiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_basisNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_basisColumn)
        End Function
        
        Public Sub Setlast_basisNull()
            Me(Me.tableemployee.last_basisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_periodNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_periodColumn)
        End Function
        
        Public Sub Setlast_periodNull()
            Me(Me.tableemployee.last_periodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_statusNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_statusColumn)
        End Function
        
        Public Sub Setlast_statusNull()
            Me(Me.tableemployee.last_statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_salaryNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_salaryColumn)
        End Function
        
        Public Sub Setlast_salaryNull()
            Me(Me.tableemployee.last_salaryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_hourlyNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_hourlyColumn)
        End Function
        
        Public Sub Setlast_hourlyNull()
            Me(Me.tableemployee.last_hourlyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islast_overtimeNull() As Boolean
            Return Me.IsNull(Me.tableemployee.last_overtimeColumn)
        End Function
        
        Public Sub Setlast_overtimeNull()
            Me(Me.tableemployee.last_overtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLast_raise_dateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Last_raise_dateColumn)
        End Function
        
        Public Sub SetLast_raise_dateNull()
            Me(Me.tableemployee.Last_raise_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_FederalNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_FederalColumn)
        End Function
        
        Public Sub SetAllowance_FederalNull()
            Me(Me.tableemployee.Allowance_FederalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_stateNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_stateColumn)
        End Function
        
        Public Sub SetAllowance_stateNull()
            Me(Me.tableemployee.Allowance_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowance_depndntsNull() As Boolean
            Return Me.IsNull(Me.tableemployee.Allowance_depndntsColumn)
        End Function
        
        Public Sub SetAllowance_depndntsNull()
            Me(Me.tableemployee.Allowance_depndntsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTerminatedNull() As Boolean
            Return Me.IsNull(Me.tableemployee.TerminatedColumn)
        End Function
        
        Public Sub SetTerminatedNull()
            Me(Me.tableemployee.TerminatedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesPersonNull() As Boolean
            Return Me.IsNull(Me.tableemployee.SalesPersonColumn)
        End Function
        
        Public Sub SetSalesPersonNull()
            Me(Me.tableemployee.SalesPersonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsePunchClockNull() As Boolean
            Return Me.IsNull(Me.tableemployee.UsePunchClockColumn)
        End Function
        
        Public Sub SetUsePunchClockNull()
            Me(Me.tableemployee.UsePunchClockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStoreNoNull() As Boolean
            Return Me.IsNull(Me.tableemployee.StoreNoColumn)
        End Function
        
        Public Sub SetStoreNoNull()
            Me(Me.tableemployee.StoreNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORENO As DataColumn
        
        Private columnSTORENAME As DataColumn
        
        Private columnSHORTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("Store_Setup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORENOColumn As DataColumn
            Get
                Return Me.columnSTORENO
            End Get
        End Property
        
        Friend ReadOnly Property STORENAMEColumn As DataColumn
            Get
                Return Me.columnSTORENAME
            End Get
        End Property
        
        Friend ReadOnly Property SHORTNAMEColumn As DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Store_SetupRow
            Get
                Return CType(Me.Rows(index),Store_SetupRow)
            End Get
        End Property
        
        Public Event Store_SetupRowChanged As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowChanging As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleted As Store_SetupRowChangeEventHandler
        
        Public Event Store_SetupRowDeleting As Store_SetupRowChangeEventHandler
        
        Public Overloads Sub AddStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStore_SetupRow(ByVal STORENO As String, ByVal STORENAME As String, ByVal SHORTNAME As String) As Store_SetupRow
            Dim rowStore_SetupRow As Store_SetupRow = CType(Me.NewRow,Store_SetupRow)
            rowStore_SetupRow.ItemArray = New Object() {STORENO, STORENAME, SHORTNAME}
            Me.Rows.Add(rowStore_SetupRow)
            Return rowStore_SetupRow
        End Function
        
        Public Function FindBySTORENO(ByVal STORENO As String) As Store_SetupRow
            Return CType(Me.Rows.Find(New Object() {STORENO}),Store_SetupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Store_SetupDataTable = CType(MyBase.Clone,Store_SetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Store_SetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORENO = Me.Columns("STORENO")
            Me.columnSTORENAME = Me.Columns("STORENAME")
            Me.columnSHORTNAME = Me.Columns("SHORTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORENO = New DataColumn("STORENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENO)
            Me.columnSTORENAME = New DataColumn("STORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORENAME)
            Me.columnSHORTNAME = New DataColumn("SHORTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSHORTNAME)
            Me.Constraints.Add(New UniqueConstraint("DSUCEmployeeKey1", New DataColumn() {Me.columnSTORENO}, true))
            Me.columnSTORENO.AllowDBNull = false
            Me.columnSTORENO.Unique = true
        End Sub
        
        Public Function NewStore_SetupRow() As Store_SetupRow
            Return CType(Me.NewRow,Store_SetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Store_SetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Store_SetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Store_SetupRowChangedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanged(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Store_SetupRowChangingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowChanging(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Store_SetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleted(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Store_SetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent Store_SetupRowDeleting(Me, New Store_SetupRowChangeEvent(CType(e.Row,Store_SetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStore_SetupRow(ByVal row As Store_SetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRow
        Inherits DataRow
        
        Private tableStore_Setup As Store_SetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStore_Setup = CType(Me.Table,Store_SetupDataTable)
        End Sub
        
        Public Property STORENO As String
            Get
                Return CType(Me(Me.tableStore_Setup.STORENOColumn),String)
            End Get
            Set
                Me(Me.tableStore_Setup.STORENOColumn) = value
            End Set
        End Property
        
        Public Property STORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.STORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.STORENAMEColumn) = value
            End Set
        End Property
        
        Public Property SHORTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableStore_Setup.SHORTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStore_Setup.SHORTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.STORENAMEColumn)
        End Function
        
        Public Sub SetSTORENAMENull()
            Me(Me.tableStore_Setup.STORENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableStore_Setup.SHORTNAMEColumn)
        End Function
        
        Public Sub SetSHORTNAMENull()
            Me(Me.tableStore_Setup.SHORTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Store_SetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Store_SetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Store_SetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Store_SetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
