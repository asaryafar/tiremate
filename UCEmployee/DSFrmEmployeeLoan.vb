'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEmployeeLoan
    Inherits DataSet
    
    Private tablepay_tab_loan_main As pay_tab_loan_mainDataTable
    
    Private tablepay_loan_dtl As pay_loan_dtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_tab_loan_main")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_loan_mainDataTable(ds.Tables("pay_tab_loan_main")))
            End If
            If (Not (ds.Tables("pay_loan_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_loan_dtlDataTable(ds.Tables("pay_loan_dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_loan_main As pay_tab_loan_mainDataTable
        Get
            Return Me.tablepay_tab_loan_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_loan_dtl As pay_loan_dtlDataTable
        Get
            Return Me.tablepay_loan_dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEmployeeLoan = CType(MyBase.Clone,DSFrmEmployeeLoan)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_tab_loan_main")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_loan_mainDataTable(ds.Tables("pay_tab_loan_main")))
        End If
        If (Not (ds.Tables("pay_loan_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_loan_dtlDataTable(ds.Tables("pay_loan_dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_tab_loan_main = CType(Me.Tables("pay_tab_loan_main"),pay_tab_loan_mainDataTable)
        If (Not (Me.tablepay_tab_loan_main) Is Nothing) Then
            Me.tablepay_tab_loan_main.InitVars
        End If
        Me.tablepay_loan_dtl = CType(Me.Tables("pay_loan_dtl"),pay_loan_dtlDataTable)
        If (Not (Me.tablepay_loan_dtl) Is Nothing) Then
            Me.tablepay_loan_dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEmployeeLoan"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEmployeeLoan.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_tab_loan_main = New pay_tab_loan_mainDataTable
        Me.Tables.Add(Me.tablepay_tab_loan_main)
        Me.tablepay_loan_dtl = New pay_loan_dtlDataTable
        Me.Tables.Add(Me.tablepay_loan_dtl)
    End Sub
    
    Private Function ShouldSerializepay_tab_loan_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_loan_dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_tab_loan_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_loan_mainRowChangeEvent)
    
    Public Delegate Sub pay_loan_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_loan_dtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_loan_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloan_cod As DataColumn
        
        Private columnloan_desc As DataColumn
        
        Private columnmax_amount As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnbefore_tax As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_loan_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loan_codColumn As DataColumn
            Get
                Return Me.columnloan_cod
            End Get
        End Property
        
        Friend ReadOnly Property loan_descColumn As DataColumn
            Get
                Return Me.columnloan_desc
            End Get
        End Property
        
        Friend ReadOnly Property max_amountColumn As DataColumn
            Get
                Return Me.columnmax_amount
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property before_taxColumn As DataColumn
            Get
                Return Me.columnbefore_tax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_loan_mainRow
            Get
                Return CType(Me.Rows(index),pay_tab_loan_mainRow)
            End Get
        End Property
        
        Public Event pay_tab_loan_mainRowChanged As pay_tab_loan_mainRowChangeEventHandler
        
        Public Event pay_tab_loan_mainRowChanging As pay_tab_loan_mainRowChangeEventHandler
        
        Public Event pay_tab_loan_mainRowDeleted As pay_tab_loan_mainRowChangeEventHandler
        
        Public Event pay_tab_loan_mainRowDeleting As pay_tab_loan_mainRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_loan_mainRow(ByVal row As pay_tab_loan_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_loan_mainRow(ByVal loan_cod As String, ByVal loan_desc As String, ByVal max_amount As Decimal, ByVal GL_account As String, ByVal before_tax As Boolean) As pay_tab_loan_mainRow
            Dim rowpay_tab_loan_mainRow As pay_tab_loan_mainRow = CType(Me.NewRow,pay_tab_loan_mainRow)
            rowpay_tab_loan_mainRow.ItemArray = New Object() {loan_cod, loan_desc, max_amount, GL_account, before_tax}
            Me.Rows.Add(rowpay_tab_loan_mainRow)
            Return rowpay_tab_loan_mainRow
        End Function
        
        Public Function FindByloan_cod(ByVal loan_cod As String) As pay_tab_loan_mainRow
            Return CType(Me.Rows.Find(New Object() {loan_cod}),pay_tab_loan_mainRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_loan_mainDataTable = CType(MyBase.Clone,pay_tab_loan_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_loan_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloan_cod = Me.Columns("loan_cod")
            Me.columnloan_desc = Me.Columns("loan_desc")
            Me.columnmax_amount = Me.Columns("max_amount")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnbefore_tax = Me.Columns("before_tax")
        End Sub
        
        Private Sub InitClass()
            Me.columnloan_cod = New DataColumn("loan_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_cod)
            Me.columnloan_desc = New DataColumn("loan_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_desc)
            Me.columnmax_amount = New DataColumn("max_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmax_amount)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnbefore_tax = New DataColumn("before_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefore_tax)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnloan_cod}, true))
            Me.columnloan_cod.AllowDBNull = false
            Me.columnloan_cod.Unique = true
        End Sub
        
        Public Function Newpay_tab_loan_mainRow() As pay_tab_loan_mainRow
            Return CType(Me.NewRow,pay_tab_loan_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_loan_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_loan_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_loan_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_loan_mainRowChanged(Me, New pay_tab_loan_mainRowChangeEvent(CType(e.Row,pay_tab_loan_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_loan_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_loan_mainRowChanging(Me, New pay_tab_loan_mainRowChangeEvent(CType(e.Row,pay_tab_loan_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_loan_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_loan_mainRowDeleted(Me, New pay_tab_loan_mainRowChangeEvent(CType(e.Row,pay_tab_loan_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_loan_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_loan_mainRowDeleting(Me, New pay_tab_loan_mainRowChangeEvent(CType(e.Row,pay_tab_loan_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_loan_mainRow(ByVal row As pay_tab_loan_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_loan_mainRow
        Inherits DataRow
        
        Private tablepay_tab_loan_main As pay_tab_loan_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_loan_main = CType(Me.Table,pay_tab_loan_mainDataTable)
        End Sub
        
        Public Property loan_cod As String
            Get
                Return CType(Me(Me.tablepay_tab_loan_main.loan_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_loan_main.loan_codColumn) = value
            End Set
        End Property
        
        Public Property loan_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_loan_main.loan_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_loan_main.loan_descColumn) = value
            End Set
        End Property
        
        Public Property max_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_loan_main.max_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_loan_main.max_amountColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_loan_main.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_loan_main.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property before_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_loan_main.before_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_loan_main.before_taxColumn) = value
            End Set
        End Property
        
        Public Function Isloan_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_loan_main.loan_descColumn)
        End Function
        
        Public Sub Setloan_descNull()
            Me(Me.tablepay_tab_loan_main.loan_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismax_amountNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_loan_main.max_amountColumn)
        End Function
        
        Public Sub Setmax_amountNull()
            Me(Me.tablepay_tab_loan_main.max_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_loan_main.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tablepay_tab_loan_main.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefore_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_loan_main.before_taxColumn)
        End Function
        
        Public Sub Setbefore_taxNull()
            Me(Me.tablepay_tab_loan_main.before_taxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_loan_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_loan_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_loan_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_loan_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnemployee_code As DataColumn
        
        Private columnloan_cod As DataColumn
        
        Private columndate_start As DataColumn
        
        Private columnamount_loan As DataColumn
        
        Private columncostus As DataColumn
        
        Private columntime_costus_pay As DataColumn
        
        Private columnactive As DataColumn
        
        Private columnloan_desc As DataColumn
        
        Private columnid_deduction As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_loan_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property employee_codeColumn As DataColumn
            Get
                Return Me.columnemployee_code
            End Get
        End Property
        
        Friend ReadOnly Property loan_codColumn As DataColumn
            Get
                Return Me.columnloan_cod
            End Get
        End Property
        
        Friend ReadOnly Property date_startColumn As DataColumn
            Get
                Return Me.columndate_start
            End Get
        End Property
        
        Friend ReadOnly Property amount_loanColumn As DataColumn
            Get
                Return Me.columnamount_loan
            End Get
        End Property
        
        Friend ReadOnly Property costusColumn As DataColumn
            Get
                Return Me.columncostus
            End Get
        End Property
        
        Friend ReadOnly Property time_costus_payColumn As DataColumn
            Get
                Return Me.columntime_costus_pay
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property loan_descColumn As DataColumn
            Get
                Return Me.columnloan_desc
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_loan_dtlRow
            Get
                Return CType(Me.Rows(index),pay_loan_dtlRow)
            End Get
        End Property
        
        Public Event pay_loan_dtlRowChanged As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowChanging As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowDeleted As pay_loan_dtlRowChangeEventHandler
        
        Public Event pay_loan_dtlRowDeleting As pay_loan_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_loan_dtlRow(ByVal row As pay_loan_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_loan_dtlRow(ByVal employee_code As String, ByVal loan_cod As String, ByVal date_start As String, ByVal amount_loan As Decimal, ByVal costus As Decimal, ByVal time_costus_pay As Short, ByVal active As Boolean, ByVal loan_desc As String) As pay_loan_dtlRow
            Dim rowpay_loan_dtlRow As pay_loan_dtlRow = CType(Me.NewRow,pay_loan_dtlRow)
            rowpay_loan_dtlRow.ItemArray = New Object() {employee_code, loan_cod, date_start, amount_loan, costus, time_costus_pay, active, loan_desc, Nothing}
            Me.Rows.Add(rowpay_loan_dtlRow)
            Return rowpay_loan_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_loan_dtlDataTable = CType(MyBase.Clone,pay_loan_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_loan_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnemployee_code = Me.Columns("employee_code")
            Me.columnloan_cod = Me.Columns("loan_cod")
            Me.columndate_start = Me.Columns("date_start")
            Me.columnamount_loan = Me.Columns("amount_loan")
            Me.columncostus = Me.Columns("costus")
            Me.columntime_costus_pay = Me.Columns("time_costus_pay")
            Me.columnactive = Me.Columns("active")
            Me.columnloan_desc = Me.Columns("loan_desc")
            Me.columnid_deduction = Me.Columns("id_deduction")
        End Sub
        
        Private Sub InitClass()
            Me.columnemployee_code = New DataColumn("employee_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemployee_code)
            Me.columnloan_cod = New DataColumn("loan_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_cod)
            Me.columndate_start = New DataColumn("date_start", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_start)
            Me.columnamount_loan = New DataColumn("amount_loan", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_loan)
            Me.columncostus = New DataColumn("costus", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncostus)
            Me.columntime_costus_pay = New DataColumn("time_costus_pay", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_costus_pay)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columnloan_desc = New DataColumn("loan_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloan_desc)
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnemployee_code.AllowDBNull = false
            Me.columnloan_cod.AllowDBNull = false
            Me.columndate_start.AllowDBNull = false
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
        End Sub
        
        Public Function Newpay_loan_dtlRow() As pay_loan_dtlRow
            Return CType(Me.NewRow,pay_loan_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_loan_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_loan_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_loan_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowChanged(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_loan_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowChanging(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_loan_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowDeleted(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_loan_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_loan_dtlRowDeleting(Me, New pay_loan_dtlRowChangeEvent(CType(e.Row,pay_loan_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_loan_dtlRow(ByVal row As pay_loan_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlRow
        Inherits DataRow
        
        Private tablepay_loan_dtl As pay_loan_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_loan_dtl = CType(Me.Table,pay_loan_dtlDataTable)
        End Sub
        
        Public Property employee_code As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.employee_codeColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.employee_codeColumn) = value
            End Set
        End Property
        
        Public Property loan_cod As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.loan_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.loan_codColumn) = value
            End Set
        End Property
        
        Public Property date_start As String
            Get
                Return CType(Me(Me.tablepay_loan_dtl.date_startColumn),String)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.date_startColumn) = value
            End Set
        End Property
        
        Public Property amount_loan As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.amount_loanColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.amount_loanColumn) = value
            End Set
        End Property
        
        Public Property costus As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.costusColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.costusColumn) = value
            End Set
        End Property
        
        Public Property time_costus_pay As Short
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.time_costus_payColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.time_costus_payColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.activeColumn) = value
            End Set
        End Property
        
        Public Property loan_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_loan_dtl.loan_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_loan_dtl.loan_descColumn) = value
            End Set
        End Property
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_loan_dtl.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_loan_dtl.id_deductionColumn) = value
            End Set
        End Property
        
        Public Function Isamount_loanNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.amount_loanColumn)
        End Function
        
        Public Sub Setamount_loanNull()
            Me(Me.tablepay_loan_dtl.amount_loanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostusNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.costusColumn)
        End Function
        
        Public Sub SetcostusNull()
            Me(Me.tablepay_loan_dtl.costusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_costus_payNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.time_costus_payColumn)
        End Function
        
        Public Sub Settime_costus_payNull()
            Me(Me.tablepay_loan_dtl.time_costus_payColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_loan_dtl.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isloan_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_loan_dtl.loan_descColumn)
        End Function
        
        Public Sub Setloan_descNull()
            Me(Me.tablepay_loan_dtl.loan_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_loan_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_loan_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_loan_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_loan_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
