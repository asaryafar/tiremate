'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEmployeeDeduction
    Inherits DataSet
    
    Private tableemployee_deduction As employee_deductionDataTable
    
    Private tablepay_deduction_employee As pay_deduction_employeeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("employee_deduction")) Is Nothing) Then
                Me.Tables.Add(New employee_deductionDataTable(ds.Tables("employee_deduction")))
            End If
            If (Not (ds.Tables("pay_deduction_employee")) Is Nothing) Then
                Me.Tables.Add(New pay_deduction_employeeDataTable(ds.Tables("pay_deduction_employee")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property employee_deduction As employee_deductionDataTable
        Get
            Return Me.tableemployee_deduction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_deduction_employee As pay_deduction_employeeDataTable
        Get
            Return Me.tablepay_deduction_employee
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEmployeeDeduction = CType(MyBase.Clone,DSFrmEmployeeDeduction)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("employee_deduction")) Is Nothing) Then
            Me.Tables.Add(New employee_deductionDataTable(ds.Tables("employee_deduction")))
        End If
        If (Not (ds.Tables("pay_deduction_employee")) Is Nothing) Then
            Me.Tables.Add(New pay_deduction_employeeDataTable(ds.Tables("pay_deduction_employee")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableemployee_deduction = CType(Me.Tables("employee_deduction"),employee_deductionDataTable)
        If (Not (Me.tableemployee_deduction) Is Nothing) Then
            Me.tableemployee_deduction.InitVars
        End If
        Me.tablepay_deduction_employee = CType(Me.Tables("pay_deduction_employee"),pay_deduction_employeeDataTable)
        If (Not (Me.tablepay_deduction_employee) Is Nothing) Then
            Me.tablepay_deduction_employee.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEmployeeDeduction"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEmployeeDeduction.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableemployee_deduction = New employee_deductionDataTable
        Me.Tables.Add(Me.tableemployee_deduction)
        Me.tablepay_deduction_employee = New pay_deduction_employeeDataTable
        Me.Tables.Add(Me.tablepay_deduction_employee)
    End Sub
    
    Private Function ShouldSerializeemployee_deduction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_deduction_employee() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub employee_deductionRowChangeEventHandler(ByVal sender As Object, ByVal e As employee_deductionRowChangeEvent)
    
    Public Delegate Sub pay_deduction_employeeRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_deduction_employeeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_deductionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndeduction_cod As DataColumn
        
        Private columndeduction_desc As DataColumn
        
        Private columndefult_deduction_amount As DataColumn
        
        Private columnbefor_tax As DataColumn
        
        Private columnGL_account As DataColumn
        
        Private columnpercent_gross_pay As DataColumn
        
        Friend Sub New()
            MyBase.New("employee_deduction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property deduction_codColumn As DataColumn
            Get
                Return Me.columndeduction_cod
            End Get
        End Property
        
        Friend ReadOnly Property deduction_descColumn As DataColumn
            Get
                Return Me.columndeduction_desc
            End Get
        End Property
        
        Friend ReadOnly Property defult_deduction_amountColumn As DataColumn
            Get
                Return Me.columndefult_deduction_amount
            End Get
        End Property
        
        Friend ReadOnly Property befor_taxColumn As DataColumn
            Get
                Return Me.columnbefor_tax
            End Get
        End Property
        
        Friend ReadOnly Property GL_accountColumn As DataColumn
            Get
                Return Me.columnGL_account
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_payColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As employee_deductionRow
            Get
                Return CType(Me.Rows(index),employee_deductionRow)
            End Get
        End Property
        
        Public Event employee_deductionRowChanged As employee_deductionRowChangeEventHandler
        
        Public Event employee_deductionRowChanging As employee_deductionRowChangeEventHandler
        
        Public Event employee_deductionRowDeleted As employee_deductionRowChangeEventHandler
        
        Public Event employee_deductionRowDeleting As employee_deductionRowChangeEventHandler
        
        Public Overloads Sub Addemployee_deductionRow(ByVal row As employee_deductionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addemployee_deductionRow(ByVal deduction_cod As String, ByVal deduction_desc As String, ByVal defult_deduction_amount As Decimal, ByVal befor_tax As Boolean, ByVal GL_account As String, ByVal percent_gross_pay As Decimal) As employee_deductionRow
            Dim rowemployee_deductionRow As employee_deductionRow = CType(Me.NewRow,employee_deductionRow)
            rowemployee_deductionRow.ItemArray = New Object() {deduction_cod, deduction_desc, defult_deduction_amount, befor_tax, GL_account, percent_gross_pay}
            Me.Rows.Add(rowemployee_deductionRow)
            Return rowemployee_deductionRow
        End Function
        
        Public Function FindBydeduction_cod(ByVal deduction_cod As String) As employee_deductionRow
            Return CType(Me.Rows.Find(New Object() {deduction_cod}),employee_deductionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As employee_deductionDataTable = CType(MyBase.Clone,employee_deductionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New employee_deductionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndeduction_cod = Me.Columns("deduction_cod")
            Me.columndeduction_desc = Me.Columns("deduction_desc")
            Me.columndefult_deduction_amount = Me.Columns("defult_deduction_amount")
            Me.columnbefor_tax = Me.Columns("befor_tax")
            Me.columnGL_account = Me.Columns("GL_account")
            Me.columnpercent_gross_pay = Me.Columns("percent_gross_pay")
        End Sub
        
        Private Sub InitClass()
            Me.columndeduction_cod = New DataColumn("deduction_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_cod)
            Me.columndeduction_desc = New DataColumn("deduction_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_desc)
            Me.columndefult_deduction_amount = New DataColumn("defult_deduction_amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndefult_deduction_amount)
            Me.columnbefor_tax = New DataColumn("befor_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefor_tax)
            Me.columnGL_account = New DataColumn("GL_account", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account)
            Me.columnpercent_gross_pay = New DataColumn("percent_gross_pay", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columndeduction_cod}, true))
            Me.columndeduction_cod.AllowDBNull = false
            Me.columndeduction_cod.Unique = true
        End Sub
        
        Public Function Newemployee_deductionRow() As employee_deductionRow
            Return CType(Me.NewRow,employee_deductionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New employee_deductionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(employee_deductionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.employee_deductionRowChangedEvent) Is Nothing) Then
                RaiseEvent employee_deductionRowChanged(Me, New employee_deductionRowChangeEvent(CType(e.Row,employee_deductionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.employee_deductionRowChangingEvent) Is Nothing) Then
                RaiseEvent employee_deductionRowChanging(Me, New employee_deductionRowChangeEvent(CType(e.Row,employee_deductionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.employee_deductionRowDeletedEvent) Is Nothing) Then
                RaiseEvent employee_deductionRowDeleted(Me, New employee_deductionRowChangeEvent(CType(e.Row,employee_deductionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.employee_deductionRowDeletingEvent) Is Nothing) Then
                RaiseEvent employee_deductionRowDeleting(Me, New employee_deductionRowChangeEvent(CType(e.Row,employee_deductionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeemployee_deductionRow(ByVal row As employee_deductionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_deductionRow
        Inherits DataRow
        
        Private tableemployee_deduction As employee_deductionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableemployee_deduction = CType(Me.Table,employee_deductionDataTable)
        End Sub
        
        Public Property deduction_cod As String
            Get
                Return CType(Me(Me.tableemployee_deduction.deduction_codColumn),String)
            End Get
            Set
                Me(Me.tableemployee_deduction.deduction_codColumn) = value
            End Set
        End Property
        
        Public Property deduction_desc As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_deduction.deduction_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_deduction.deduction_descColumn) = value
            End Set
        End Property
        
        Public Property defult_deduction_amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee_deduction.defult_deduction_amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_deduction.defult_deduction_amountColumn) = value
            End Set
        End Property
        
        Public Property befor_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableemployee_deduction.befor_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_deduction.befor_taxColumn) = value
            End Set
        End Property
        
        Public Property GL_account As String
            Get
                Try 
                    Return CType(Me(Me.tableemployee_deduction.GL_accountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_deduction.GL_accountColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableemployee_deduction.percent_gross_payColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableemployee_deduction.percent_gross_payColumn) = value
            End Set
        End Property
        
        Public Function Isdeduction_descNull() As Boolean
            Return Me.IsNull(Me.tableemployee_deduction.deduction_descColumn)
        End Function
        
        Public Sub Setdeduction_descNull()
            Me(Me.tableemployee_deduction.deduction_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdefult_deduction_amountNull() As Boolean
            Return Me.IsNull(Me.tableemployee_deduction.defult_deduction_amountColumn)
        End Function
        
        Public Sub Setdefult_deduction_amountNull()
            Me(Me.tableemployee_deduction.defult_deduction_amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefor_taxNull() As Boolean
            Return Me.IsNull(Me.tableemployee_deduction.befor_taxColumn)
        End Function
        
        Public Sub Setbefor_taxNull()
            Me(Me.tableemployee_deduction.befor_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_accountNull() As Boolean
            Return Me.IsNull(Me.tableemployee_deduction.GL_accountColumn)
        End Function
        
        Public Sub SetGL_accountNull()
            Me(Me.tableemployee_deduction.GL_accountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_payNull() As Boolean
            Return Me.IsNull(Me.tableemployee_deduction.percent_gross_payColumn)
        End Function
        
        Public Sub Setpercent_gross_payNull()
            Me(Me.tableemployee_deduction.percent_gross_payColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class employee_deductionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As employee_deductionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As employee_deductionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As employee_deductionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_deduction As DataColumn
        
        Private columndeduction_cod As DataColumn
        
        Private columnfrom_date_deduction As DataColumn
        
        Private columnto_date_deduction As DataColumn
        
        Private columnamount_deduction As DataColumn
        
        Private columnactive As DataColumn
        
        Private columndeduction_desc As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_deduction_employee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Friend ReadOnly Property deduction_codColumn As DataColumn
            Get
                Return Me.columndeduction_cod
            End Get
        End Property
        
        Friend ReadOnly Property from_date_deductionColumn As DataColumn
            Get
                Return Me.columnfrom_date_deduction
            End Get
        End Property
        
        Friend ReadOnly Property to_date_deductionColumn As DataColumn
            Get
                Return Me.columnto_date_deduction
            End Get
        End Property
        
        Friend ReadOnly Property amount_deductionColumn As DataColumn
            Get
                Return Me.columnamount_deduction
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property deduction_descColumn As DataColumn
            Get
                Return Me.columndeduction_desc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_deduction_employeeRow
            Get
                Return CType(Me.Rows(index),pay_deduction_employeeRow)
            End Get
        End Property
        
        Public Event pay_deduction_employeeRowChanged As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowChanging As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowDeleted As pay_deduction_employeeRowChangeEventHandler
        
        Public Event pay_deduction_employeeRowDeleting As pay_deduction_employeeRowChangeEventHandler
        
        Public Overloads Sub Addpay_deduction_employeeRow(ByVal row As pay_deduction_employeeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_deduction_employeeRow(ByVal deduction_cod As String, ByVal from_date_deduction As String, ByVal to_date_deduction As String, ByVal amount_deduction As Decimal, ByVal active As Boolean, ByVal deduction_desc As String) As pay_deduction_employeeRow
            Dim rowpay_deduction_employeeRow As pay_deduction_employeeRow = CType(Me.NewRow,pay_deduction_employeeRow)
            rowpay_deduction_employeeRow.ItemArray = New Object() {Nothing, deduction_cod, from_date_deduction, to_date_deduction, amount_deduction, active, deduction_desc}
            Me.Rows.Add(rowpay_deduction_employeeRow)
            Return rowpay_deduction_employeeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_deduction_employeeDataTable = CType(MyBase.Clone,pay_deduction_employeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_deduction_employeeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_deduction = Me.Columns("id_deduction")
            Me.columndeduction_cod = Me.Columns("deduction_cod")
            Me.columnfrom_date_deduction = Me.Columns("from_date_deduction")
            Me.columnto_date_deduction = Me.Columns("to_date_deduction")
            Me.columnamount_deduction = Me.Columns("amount_deduction")
            Me.columnactive = Me.Columns("active")
            Me.columndeduction_desc = Me.Columns("deduction_desc")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columndeduction_cod = New DataColumn("deduction_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_cod)
            Me.columnfrom_date_deduction = New DataColumn("from_date_deduction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfrom_date_deduction)
            Me.columnto_date_deduction = New DataColumn("to_date_deduction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnto_date_deduction)
            Me.columnamount_deduction = New DataColumn("amount_deduction", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_deduction)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columndeduction_desc = New DataColumn("deduction_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeduction_desc)
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
            Me.columndeduction_cod.AllowDBNull = false
            Me.columnfrom_date_deduction.AllowDBNull = false
            Me.columnto_date_deduction.AllowDBNull = false
        End Sub
        
        Public Function Newpay_deduction_employeeRow() As pay_deduction_employeeRow
            Return CType(Me.NewRow,pay_deduction_employeeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_deduction_employeeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_deduction_employeeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_deduction_employeeRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowChanged(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_deduction_employeeRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowChanging(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_deduction_employeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowDeleted(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_deduction_employeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_deduction_employeeRowDeleting(Me, New pay_deduction_employeeRowChangeEvent(CType(e.Row,pay_deduction_employeeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_deduction_employeeRow(ByVal row As pay_deduction_employeeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeRow
        Inherits DataRow
        
        Private tablepay_deduction_employee As pay_deduction_employeeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_deduction_employee = CType(Me.Table,pay_deduction_employeeDataTable)
        End Sub
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_deduction_employee.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.id_deductionColumn) = value
            End Set
        End Property
        
        Public Property deduction_cod As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.deduction_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.deduction_codColumn) = value
            End Set
        End Property
        
        Public Property from_date_deduction As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.from_date_deductionColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.from_date_deductionColumn) = value
            End Set
        End Property
        
        Public Property to_date_deduction As String
            Get
                Return CType(Me(Me.tablepay_deduction_employee.to_date_deductionColumn),String)
            End Get
            Set
                Me(Me.tablepay_deduction_employee.to_date_deductionColumn) = value
            End Set
        End Property
        
        Public Property amount_deduction As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.amount_deductionColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.amount_deductionColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.activeColumn) = value
            End Set
        End Property
        
        Public Property deduction_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_deduction_employee.deduction_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_deduction_employee.deduction_descColumn) = value
            End Set
        End Property
        
        Public Function Isamount_deductionNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.amount_deductionColumn)
        End Function
        
        Public Sub Setamount_deductionNull()
            Me(Me.tablepay_deduction_employee.amount_deductionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_deduction_employee.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeduction_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_deduction_employee.deduction_descColumn)
        End Function
        
        Public Sub Setdeduction_descNull()
            Me(Me.tablepay_deduction_employee.deduction_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_deduction_employeeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_deduction_employeeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_deduction_employeeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_deduction_employeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
