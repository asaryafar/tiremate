'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSFrmEmployeeSaving
    Inherits DataSet
    
    Private tablepay_tab_saving_main As pay_tab_saving_mainDataTable
    
    Private tablepay_saving_dtl As pay_saving_dtlDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("pay_tab_saving_main")) Is Nothing) Then
                Me.Tables.Add(New pay_tab_saving_mainDataTable(ds.Tables("pay_tab_saving_main")))
            End If
            If (Not (ds.Tables("pay_saving_dtl")) Is Nothing) Then
                Me.Tables.Add(New pay_saving_dtlDataTable(ds.Tables("pay_saving_dtl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_tab_saving_main As pay_tab_saving_mainDataTable
        Get
            Return Me.tablepay_tab_saving_main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pay_saving_dtl As pay_saving_dtlDataTable
        Get
            Return Me.tablepay_saving_dtl
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSFrmEmployeeSaving = CType(MyBase.Clone,DSFrmEmployeeSaving)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("pay_tab_saving_main")) Is Nothing) Then
            Me.Tables.Add(New pay_tab_saving_mainDataTable(ds.Tables("pay_tab_saving_main")))
        End If
        If (Not (ds.Tables("pay_saving_dtl")) Is Nothing) Then
            Me.Tables.Add(New pay_saving_dtlDataTable(ds.Tables("pay_saving_dtl")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepay_tab_saving_main = CType(Me.Tables("pay_tab_saving_main"),pay_tab_saving_mainDataTable)
        If (Not (Me.tablepay_tab_saving_main) Is Nothing) Then
            Me.tablepay_tab_saving_main.InitVars
        End If
        Me.tablepay_saving_dtl = CType(Me.Tables("pay_saving_dtl"),pay_saving_dtlDataTable)
        If (Not (Me.tablepay_saving_dtl) Is Nothing) Then
            Me.tablepay_saving_dtl.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSFrmEmployeeSaving"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSFrmEmployeeSaving.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepay_tab_saving_main = New pay_tab_saving_mainDataTable
        Me.Tables.Add(Me.tablepay_tab_saving_main)
        Me.tablepay_saving_dtl = New pay_saving_dtlDataTable
        Me.Tables.Add(Me.tablepay_saving_dtl)
    End Sub
    
    Private Function ShouldSerializepay_tab_saving_main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepay_saving_dtl() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub pay_tab_saving_mainRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_tab_saving_mainRowChangeEvent)
    
    Public Delegate Sub pay_saving_dtlRowChangeEventHandler(ByVal sender As Object, ByVal e As pay_saving_dtlRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_saving_mainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsaving_cod As DataColumn
        
        Private columnsaving_desc As DataColumn
        
        Private columnremark As DataColumn
        
        Private columnGL_account_employee As DataColumn
        
        Private columnGL_account_employer As DataColumn
        
        Private columnbefore_tax As DataColumn
        
        Private columnpercent_gross_pay_employee As DataColumn
        
        Private columnpercent_gross_pay_employer As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_tab_saving_main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property saving_codColumn As DataColumn
            Get
                Return Me.columnsaving_cod
            End Get
        End Property
        
        Friend ReadOnly Property saving_descColumn As DataColumn
            Get
                Return Me.columnsaving_desc
            End Get
        End Property
        
        Friend ReadOnly Property remarkColumn As DataColumn
            Get
                Return Me.columnremark
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_employeeColumn As DataColumn
            Get
                Return Me.columnGL_account_employee
            End Get
        End Property
        
        Friend ReadOnly Property GL_account_employerColumn As DataColumn
            Get
                Return Me.columnGL_account_employer
            End Get
        End Property
        
        Friend ReadOnly Property before_taxColumn As DataColumn
            Get
                Return Me.columnbefore_tax
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_pay_employeeColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay_employee
            End Get
        End Property
        
        Friend ReadOnly Property percent_gross_pay_employerColumn As DataColumn
            Get
                Return Me.columnpercent_gross_pay_employer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_tab_saving_mainRow
            Get
                Return CType(Me.Rows(index),pay_tab_saving_mainRow)
            End Get
        End Property
        
        Public Event pay_tab_saving_mainRowChanged As pay_tab_saving_mainRowChangeEventHandler
        
        Public Event pay_tab_saving_mainRowChanging As pay_tab_saving_mainRowChangeEventHandler
        
        Public Event pay_tab_saving_mainRowDeleted As pay_tab_saving_mainRowChangeEventHandler
        
        Public Event pay_tab_saving_mainRowDeleting As pay_tab_saving_mainRowChangeEventHandler
        
        Public Overloads Sub Addpay_tab_saving_mainRow(ByVal row As pay_tab_saving_mainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_tab_saving_mainRow(ByVal saving_cod As String, ByVal saving_desc As String, ByVal remark As String, ByVal GL_account_employee As String, ByVal GL_account_employer As String, ByVal before_tax As Boolean, ByVal percent_gross_pay_employee As Decimal, ByVal percent_gross_pay_employer As Decimal) As pay_tab_saving_mainRow
            Dim rowpay_tab_saving_mainRow As pay_tab_saving_mainRow = CType(Me.NewRow,pay_tab_saving_mainRow)
            rowpay_tab_saving_mainRow.ItemArray = New Object() {saving_cod, saving_desc, remark, GL_account_employee, GL_account_employer, before_tax, percent_gross_pay_employee, percent_gross_pay_employer}
            Me.Rows.Add(rowpay_tab_saving_mainRow)
            Return rowpay_tab_saving_mainRow
        End Function
        
        Public Function FindBysaving_cod(ByVal saving_cod As String) As pay_tab_saving_mainRow
            Return CType(Me.Rows.Find(New Object() {saving_cod}),pay_tab_saving_mainRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_tab_saving_mainDataTable = CType(MyBase.Clone,pay_tab_saving_mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_tab_saving_mainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsaving_cod = Me.Columns("saving_cod")
            Me.columnsaving_desc = Me.Columns("saving_desc")
            Me.columnremark = Me.Columns("remark")
            Me.columnGL_account_employee = Me.Columns("GL_account_employee")
            Me.columnGL_account_employer = Me.Columns("GL_account_employer")
            Me.columnbefore_tax = Me.Columns("before_tax")
            Me.columnpercent_gross_pay_employee = Me.Columns("percent_gross_pay_employee")
            Me.columnpercent_gross_pay_employer = Me.Columns("percent_gross_pay_employer")
        End Sub
        
        Private Sub InitClass()
            Me.columnsaving_cod = New DataColumn("saving_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_cod)
            Me.columnsaving_desc = New DataColumn("saving_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_desc)
            Me.columnremark = New DataColumn("remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremark)
            Me.columnGL_account_employee = New DataColumn("GL_account_employee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_employee)
            Me.columnGL_account_employer = New DataColumn("GL_account_employer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGL_account_employer)
            Me.columnbefore_tax = New DataColumn("before_tax", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbefore_tax)
            Me.columnpercent_gross_pay_employee = New DataColumn("percent_gross_pay_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay_employee)
            Me.columnpercent_gross_pay_employer = New DataColumn("percent_gross_pay_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpercent_gross_pay_employer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnsaving_cod}, true))
            Me.columnsaving_cod.AllowDBNull = false
            Me.columnsaving_cod.Unique = true
        End Sub
        
        Public Function Newpay_tab_saving_mainRow() As pay_tab_saving_mainRow
            Return CType(Me.NewRow,pay_tab_saving_mainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_tab_saving_mainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_tab_saving_mainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_tab_saving_mainRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_tab_saving_mainRowChanged(Me, New pay_tab_saving_mainRowChangeEvent(CType(e.Row,pay_tab_saving_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_tab_saving_mainRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_tab_saving_mainRowChanging(Me, New pay_tab_saving_mainRowChangeEvent(CType(e.Row,pay_tab_saving_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_tab_saving_mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_tab_saving_mainRowDeleted(Me, New pay_tab_saving_mainRowChangeEvent(CType(e.Row,pay_tab_saving_mainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_tab_saving_mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_tab_saving_mainRowDeleting(Me, New pay_tab_saving_mainRowChangeEvent(CType(e.Row,pay_tab_saving_mainRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_tab_saving_mainRow(ByVal row As pay_tab_saving_mainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_saving_mainRow
        Inherits DataRow
        
        Private tablepay_tab_saving_main As pay_tab_saving_mainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_tab_saving_main = CType(Me.Table,pay_tab_saving_mainDataTable)
        End Sub
        
        Public Property saving_cod As String
            Get
                Return CType(Me(Me.tablepay_tab_saving_main.saving_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.saving_codColumn) = value
            End Set
        End Property
        
        Public Property saving_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.saving_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.saving_descColumn) = value
            End Set
        End Property
        
        Public Property remark As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.remarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.remarkColumn) = value
            End Set
        End Property
        
        Public Property GL_account_employee As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.GL_account_employeeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.GL_account_employeeColumn) = value
            End Set
        End Property
        
        Public Property GL_account_employer As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.GL_account_employerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.GL_account_employerColumn) = value
            End Set
        End Property
        
        Public Property before_tax As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.before_taxColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.before_taxColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.percent_gross_pay_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.percent_gross_pay_employeeColumn) = value
            End Set
        End Property
        
        Public Property percent_gross_pay_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_tab_saving_main.percent_gross_pay_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_tab_saving_main.percent_gross_pay_employerColumn) = value
            End Set
        End Property
        
        Public Function Issaving_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.saving_descColumn)
        End Function
        
        Public Sub Setsaving_descNull()
            Me(Me.tablepay_tab_saving_main.saving_descColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarkNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.remarkColumn)
        End Function
        
        Public Sub SetremarkNull()
            Me(Me.tablepay_tab_saving_main.remarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.GL_account_employeeColumn)
        End Function
        
        Public Sub SetGL_account_employeeNull()
            Me(Me.tablepay_tab_saving_main.GL_account_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGL_account_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.GL_account_employerColumn)
        End Function
        
        Public Sub SetGL_account_employerNull()
            Me(Me.tablepay_tab_saving_main.GL_account_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isbefore_taxNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.before_taxColumn)
        End Function
        
        Public Sub Setbefore_taxNull()
            Me(Me.tablepay_tab_saving_main.before_taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_pay_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.percent_gross_pay_employeeColumn)
        End Function
        
        Public Sub Setpercent_gross_pay_employeeNull()
            Me(Me.tablepay_tab_saving_main.percent_gross_pay_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispercent_gross_pay_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_tab_saving_main.percent_gross_pay_employerColumn)
        End Function
        
        Public Sub Setpercent_gross_pay_employerNull()
            Me(Me.tablepay_tab_saving_main.percent_gross_pay_employerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_tab_saving_mainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_tab_saving_mainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_tab_saving_mainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_tab_saving_mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsaving_cod As DataColumn
        
        Private columndate_start As DataColumn
        
        Private columnamount_employee As DataColumn
        
        Private columnamount_employer As DataColumn
        
        Private columntime_saving_removal As DataColumn
        
        Private columnactive As DataColumn
        
        Private columnsaving_desc As DataColumn
        
        Private columnid_deduction As DataColumn
        
        Friend Sub New()
            MyBase.New("pay_saving_dtl")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property saving_codColumn As DataColumn
            Get
                Return Me.columnsaving_cod
            End Get
        End Property
        
        Friend ReadOnly Property date_startColumn As DataColumn
            Get
                Return Me.columndate_start
            End Get
        End Property
        
        Friend ReadOnly Property amount_employeeColumn As DataColumn
            Get
                Return Me.columnamount_employee
            End Get
        End Property
        
        Friend ReadOnly Property amount_employerColumn As DataColumn
            Get
                Return Me.columnamount_employer
            End Get
        End Property
        
        Friend ReadOnly Property time_saving_removalColumn As DataColumn
            Get
                Return Me.columntime_saving_removal
            End Get
        End Property
        
        Friend ReadOnly Property activeColumn As DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        Friend ReadOnly Property saving_descColumn As DataColumn
            Get
                Return Me.columnsaving_desc
            End Get
        End Property
        
        Friend ReadOnly Property id_deductionColumn As DataColumn
            Get
                Return Me.columnid_deduction
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pay_saving_dtlRow
            Get
                Return CType(Me.Rows(index),pay_saving_dtlRow)
            End Get
        End Property
        
        Public Event pay_saving_dtlRowChanged As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowChanging As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowDeleted As pay_saving_dtlRowChangeEventHandler
        
        Public Event pay_saving_dtlRowDeleting As pay_saving_dtlRowChangeEventHandler
        
        Public Overloads Sub Addpay_saving_dtlRow(ByVal row As pay_saving_dtlRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpay_saving_dtlRow(ByVal saving_cod As String, ByVal date_start As String, ByVal amount_employee As Decimal, ByVal amount_employer As Decimal, ByVal time_saving_removal As Decimal, ByVal active As Boolean, ByVal saving_desc As String) As pay_saving_dtlRow
            Dim rowpay_saving_dtlRow As pay_saving_dtlRow = CType(Me.NewRow,pay_saving_dtlRow)
            rowpay_saving_dtlRow.ItemArray = New Object() {saving_cod, date_start, amount_employee, amount_employer, time_saving_removal, active, saving_desc, Nothing}
            Me.Rows.Add(rowpay_saving_dtlRow)
            Return rowpay_saving_dtlRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pay_saving_dtlDataTable = CType(MyBase.Clone,pay_saving_dtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pay_saving_dtlDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsaving_cod = Me.Columns("saving_cod")
            Me.columndate_start = Me.Columns("date_start")
            Me.columnamount_employee = Me.Columns("amount_employee")
            Me.columnamount_employer = Me.Columns("amount_employer")
            Me.columntime_saving_removal = Me.Columns("time_saving_removal")
            Me.columnactive = Me.Columns("active")
            Me.columnsaving_desc = Me.Columns("saving_desc")
            Me.columnid_deduction = Me.Columns("id_deduction")
        End Sub
        
        Private Sub InitClass()
            Me.columnsaving_cod = New DataColumn("saving_cod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_cod)
            Me.columndate_start = New DataColumn("date_start", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_start)
            Me.columnamount_employee = New DataColumn("amount_employee", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_employee)
            Me.columnamount_employer = New DataColumn("amount_employer", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount_employer)
            Me.columntime_saving_removal = New DataColumn("time_saving_removal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntime_saving_removal)
            Me.columnactive = New DataColumn("active", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactive)
            Me.columnsaving_desc = New DataColumn("saving_desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaving_desc)
            Me.columnid_deduction = New DataColumn("id_deduction", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_deduction)
            Me.columnsaving_cod.AllowDBNull = false
            Me.columnid_deduction.AutoIncrement = true
            Me.columnid_deduction.AllowDBNull = false
            Me.columnid_deduction.ReadOnly = true
        End Sub
        
        Public Function Newpay_saving_dtlRow() As pay_saving_dtlRow
            Return CType(Me.NewRow,pay_saving_dtlRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pay_saving_dtlRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pay_saving_dtlRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pay_saving_dtlRowChangedEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowChanged(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pay_saving_dtlRowChangingEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowChanging(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pay_saving_dtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowDeleted(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pay_saving_dtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent pay_saving_dtlRowDeleting(Me, New pay_saving_dtlRowChangeEvent(CType(e.Row,pay_saving_dtlRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepay_saving_dtlRow(ByVal row As pay_saving_dtlRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlRow
        Inherits DataRow
        
        Private tablepay_saving_dtl As pay_saving_dtlDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepay_saving_dtl = CType(Me.Table,pay_saving_dtlDataTable)
        End Sub
        
        Public Property saving_cod As String
            Get
                Return CType(Me(Me.tablepay_saving_dtl.saving_codColumn),String)
            End Get
            Set
                Me(Me.tablepay_saving_dtl.saving_codColumn) = value
            End Set
        End Property
        
        Public Property date_start As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.date_startColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.date_startColumn) = value
            End Set
        End Property
        
        Public Property amount_employee As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.amount_employeeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.amount_employeeColumn) = value
            End Set
        End Property
        
        Public Property amount_employer As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.amount_employerColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.amount_employerColumn) = value
            End Set
        End Property
        
        Public Property time_saving_removal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.time_saving_removalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.time_saving_removalColumn) = value
            End Set
        End Property
        
        Public Property active As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.activeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.activeColumn) = value
            End Set
        End Property
        
        Public Property saving_desc As String
            Get
                Try 
                    Return CType(Me(Me.tablepay_saving_dtl.saving_descColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepay_saving_dtl.saving_descColumn) = value
            End Set
        End Property
        
        Public Property id_deduction As Integer
            Get
                Return CType(Me(Me.tablepay_saving_dtl.id_deductionColumn),Integer)
            End Get
            Set
                Me(Me.tablepay_saving_dtl.id_deductionColumn) = value
            End Set
        End Property
        
        Public Function Isdate_startNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.date_startColumn)
        End Function
        
        Public Sub Setdate_startNull()
            Me(Me.tablepay_saving_dtl.date_startColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_employeeNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.amount_employeeColumn)
        End Function
        
        Public Sub Setamount_employeeNull()
            Me(Me.tablepay_saving_dtl.amount_employeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount_employerNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.amount_employerColumn)
        End Function
        
        Public Sub Setamount_employerNull()
            Me(Me.tablepay_saving_dtl.amount_employerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istime_saving_removalNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.time_saving_removalColumn)
        End Function
        
        Public Sub Settime_saving_removalNull()
            Me(Me.tablepay_saving_dtl.time_saving_removalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.activeColumn)
        End Function
        
        Public Sub SetactiveNull()
            Me(Me.tablepay_saving_dtl.activeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issaving_descNull() As Boolean
            Return Me.IsNull(Me.tablepay_saving_dtl.saving_descColumn)
        End Function
        
        Public Sub Setsaving_descNull()
            Me(Me.tablepay_saving_dtl.saving_descColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pay_saving_dtlRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pay_saving_dtlRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pay_saving_dtlRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pay_saving_dtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
